(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module field.
  (* Trait *)
  Module PrimeCharacteristicRing.
    Definition from_bool (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ b ] =>
        ltac:(M.monadic
          (let b := M.alloc (| b |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Self ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.use b in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", Self |)));
                fun γ =>
                  ltac:(M.monadic
                    (get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", Self |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_from_bool :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "from_bool" from_bool.
    Definition from_u8 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "from_prime_subfield",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_field::field::PrimeCharacteristicRing"
                  []
                  []
                  Self
                  "PrimeSubfield",
                M.get_trait_method (|
                  "p3_field::integers::QuotientMap",
                  Ty.associated_in_trait
                    "p3_field::field::PrimeCharacteristicRing"
                    []
                    []
                    Self
                    "PrimeSubfield",
                  [],
                  [ Ty.path "u8" ],
                  "from_int",
                  [],
                  []
                |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_from_u8 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "from_u8" from_u8.
    Definition from_u16 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "from_prime_subfield",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_field::field::PrimeCharacteristicRing"
                  []
                  []
                  Self
                  "PrimeSubfield",
                M.get_trait_method (|
                  "p3_field::integers::QuotientMap",
                  Ty.associated_in_trait
                    "p3_field::field::PrimeCharacteristicRing"
                    []
                    []
                    Self
                    "PrimeSubfield",
                  [],
                  [ Ty.path "u16" ],
                  "from_int",
                  [],
                  []
                |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_from_u16 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "from_u16" from_u16.
    Definition from_u32 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "from_prime_subfield",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_field::field::PrimeCharacteristicRing"
                  []
                  []
                  Self
                  "PrimeSubfield",
                M.get_trait_method (|
                  "p3_field::integers::QuotientMap",
                  Ty.associated_in_trait
                    "p3_field::field::PrimeCharacteristicRing"
                    []
                    []
                    Self
                    "PrimeSubfield",
                  [],
                  [ Ty.path "u32" ],
                  "from_int",
                  [],
                  []
                |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_from_u32 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "from_u32" from_u32.
    Definition from_u64 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "from_prime_subfield",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_field::field::PrimeCharacteristicRing"
                  []
                  []
                  Self
                  "PrimeSubfield",
                M.get_trait_method (|
                  "p3_field::integers::QuotientMap",
                  Ty.associated_in_trait
                    "p3_field::field::PrimeCharacteristicRing"
                    []
                    []
                    Self
                    "PrimeSubfield",
                  [],
                  [ Ty.path "u64" ],
                  "from_int",
                  [],
                  []
                |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_from_u64 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "from_u64" from_u64.
    Definition from_u128 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "from_prime_subfield",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_field::field::PrimeCharacteristicRing"
                  []
                  []
                  Self
                  "PrimeSubfield",
                M.get_trait_method (|
                  "p3_field::integers::QuotientMap",
                  Ty.associated_in_trait
                    "p3_field::field::PrimeCharacteristicRing"
                    []
                    []
                    Self
                    "PrimeSubfield",
                  [],
                  [ Ty.path "u128" ],
                  "from_int",
                  [],
                  []
                |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_from_u128 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "from_u128" from_u128.
    Definition from_usize (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "from_prime_subfield",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_field::field::PrimeCharacteristicRing"
                  []
                  []
                  Self
                  "PrimeSubfield",
                M.get_trait_method (|
                  "p3_field::integers::QuotientMap",
                  Ty.associated_in_trait
                    "p3_field::field::PrimeCharacteristicRing"
                    []
                    []
                    Self
                    "PrimeSubfield",
                  [],
                  [ Ty.path "usize" ],
                  "from_int",
                  [],
                  []
                |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_from_usize :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "from_usize" from_usize.
    Definition from_i8 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "from_prime_subfield",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_field::field::PrimeCharacteristicRing"
                  []
                  []
                  Self
                  "PrimeSubfield",
                M.get_trait_method (|
                  "p3_field::integers::QuotientMap",
                  Ty.associated_in_trait
                    "p3_field::field::PrimeCharacteristicRing"
                    []
                    []
                    Self
                    "PrimeSubfield",
                  [],
                  [ Ty.path "i8" ],
                  "from_int",
                  [],
                  []
                |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_from_i8 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "from_i8" from_i8.
    Definition from_i16 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "from_prime_subfield",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_field::field::PrimeCharacteristicRing"
                  []
                  []
                  Self
                  "PrimeSubfield",
                M.get_trait_method (|
                  "p3_field::integers::QuotientMap",
                  Ty.associated_in_trait
                    "p3_field::field::PrimeCharacteristicRing"
                    []
                    []
                    Self
                    "PrimeSubfield",
                  [],
                  [ Ty.path "i16" ],
                  "from_int",
                  [],
                  []
                |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_from_i16 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "from_i16" from_i16.
    Definition from_i32 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "from_prime_subfield",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_field::field::PrimeCharacteristicRing"
                  []
                  []
                  Self
                  "PrimeSubfield",
                M.get_trait_method (|
                  "p3_field::integers::QuotientMap",
                  Ty.associated_in_trait
                    "p3_field::field::PrimeCharacteristicRing"
                    []
                    []
                    Self
                    "PrimeSubfield",
                  [],
                  [ Ty.path "i32" ],
                  "from_int",
                  [],
                  []
                |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_from_i32 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "from_i32" from_i32.
    Definition from_i64 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "from_prime_subfield",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_field::field::PrimeCharacteristicRing"
                  []
                  []
                  Self
                  "PrimeSubfield",
                M.get_trait_method (|
                  "p3_field::integers::QuotientMap",
                  Ty.associated_in_trait
                    "p3_field::field::PrimeCharacteristicRing"
                    []
                    []
                    Self
                    "PrimeSubfield",
                  [],
                  [ Ty.path "i64" ],
                  "from_int",
                  [],
                  []
                |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_from_i64 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "from_i64" from_i64.
    Definition from_i128 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "from_prime_subfield",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_field::field::PrimeCharacteristicRing"
                  []
                  []
                  Self
                  "PrimeSubfield",
                M.get_trait_method (|
                  "p3_field::integers::QuotientMap",
                  Ty.associated_in_trait
                    "p3_field::field::PrimeCharacteristicRing"
                    []
                    []
                    Self
                    "PrimeSubfield",
                  [],
                  [ Ty.path "i128" ],
                  "from_int",
                  [],
                  []
                |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_from_i128 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "from_i128" from_i128.
    Definition from_isize (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "from_prime_subfield",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_field::field::PrimeCharacteristicRing"
                  []
                  []
                  Self
                  "PrimeSubfield",
                M.get_trait_method (|
                  "p3_field::integers::QuotientMap",
                  Ty.associated_in_trait
                    "p3_field::field::PrimeCharacteristicRing"
                    []
                    []
                    Self
                    "PrimeSubfield",
                  [],
                  [ Ty.path "isize" ],
                  "from_int",
                  [],
                  []
                |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_from_isize :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "from_isize" from_isize.
    Definition double (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Self,
            M.get_trait_method (| "core::ops::arith::Add", Self, [], [ Self ], "add", [], [] |),
            [
              M.call_closure (|
                Self,
                M.get_trait_method (| "core::clone::Clone", Self, [], [], "clone", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |);
              M.call_closure (|
                Self,
                M.get_trait_method (| "core::clone::Clone", Self, [], [], "clone", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_double :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "double" double.
    Definition square (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Self,
            M.get_trait_method (| "core::ops::arith::Mul", Self, [], [ Self ], "mul", [], [] |),
            [
              M.call_closure (|
                Self,
                M.get_trait_method (| "core::clone::Clone", Self, [], [], "clone", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |);
              M.call_closure (|
                Self,
                M.get_trait_method (| "core::clone::Clone", Self, [], [], "clone", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_square :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "square" square.
    Definition cube (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Self,
            M.get_trait_method (| "core::ops::arith::Mul", Self, [], [ Self ], "mul", [], [] |),
            [
              M.call_closure (|
                Self,
                M.get_trait_method (|
                  "p3_field::field::PrimeCharacteristicRing",
                  Self,
                  [],
                  [],
                  "square",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |);
              M.call_closure (|
                Self,
                M.get_trait_method (| "core::clone::Clone", Self, [], [], "clone", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_cube :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "cube" cube.
    Definition xor (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; y ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let y := M.alloc (| y |) in
          M.call_closure (|
            Self,
            M.get_trait_method (| "core::ops::arith::Sub", Self, [], [ Self ], "sub", [], [] |),
            [
              M.call_closure (|
                Self,
                M.get_trait_method (| "core::ops::arith::Add", Self, [], [ Self ], "add", [], [] |),
                [
                  M.call_closure (|
                    Self,
                    M.get_trait_method (| "core::clone::Clone", Self, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |);
                  M.call_closure (|
                    Self,
                    M.get_trait_method (| "core::clone::Clone", Self, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |) ]
                  |)
                ]
              |);
              M.call_closure (|
                Self,
                M.get_trait_method (| "core::ops::arith::Mul", Self, [], [ Self ], "mul", [], [] |),
                [
                  M.call_closure (|
                    Self,
                    M.get_trait_method (| "core::clone::Clone", Self, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |);
                  M.call_closure (|
                    Self,
                    M.get_trait_method (|
                      "p3_field::field::PrimeCharacteristicRing",
                      Self,
                      [],
                      [],
                      "double",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Self,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_xor :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "xor" xor.
    Definition xor3 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; y; z ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let y := M.alloc (| y |) in
          let z := M.alloc (| z |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "xor",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.alloc (|
                  M.call_closure (|
                    Self,
                    M.get_trait_method (|
                      "p3_field::field::PrimeCharacteristicRing",
                      Self,
                      [],
                      [],
                      "xor",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |)
                    ]
                  |)
                |)
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| z |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_xor3 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "xor3" xor3.
    Definition andn (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; y ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let y := M.alloc (| y |) in
          M.call_closure (|
            Self,
            M.get_trait_method (| "core::ops::arith::Mul", Self, [], [ Self ], "mul", [], [] |),
            [
              M.call_closure (|
                Self,
                M.get_trait_method (| "core::ops::arith::Sub", Self, [], [ Self ], "sub", [], [] |),
                [
                  M.read (|
                    get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", Self |)
                  |);
                  M.call_closure (|
                    Self,
                    M.get_trait_method (| "core::clone::Clone", Self, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                ]
              |);
              M.call_closure (|
                Self,
                M.get_trait_method (| "core::clone::Clone", Self, [], [], "clone", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_andn :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "andn" andn.
    Definition bool_check (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "andn",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_bool_check :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "bool_check" bool_check.
    Definition exp_u64 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; power ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let power := M.alloc (| power |) in
          M.read (|
            let~ current : Ty.apply (Ty.path "*") [] [ Self ] :=
              M.alloc (|
                M.call_closure (|
                  Self,
                  M.get_trait_method (| "core::clone::Clone", Self, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ product : Ty.apply (Ty.path "*") [] [ Self ] :=
              M.copy (|
                get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", Self |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_",
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_function (| "p3_field::exponentiation::bits_u64", [], [] |),
                                [ M.read (| power |) ]
                              |))
                          ]
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let j := M.copy (| γ0_0 |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.match_operator (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.ne,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "u64",
                                                            BinOp.Wrap.bit_and,
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "u64",
                                                                BinOp.Wrap.shr,
                                                                [ M.read (| power |); M.read (| j |)
                                                                ]
                                                              |);
                                                              Value.Integer IntegerKind.U64 1
                                                            ]
                                                          |);
                                                          Value.Integer IntegerKind.U64 0
                                                        ]
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                let~ _ :
                                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "core::ops::arith::MulAssign",
                                                        Self,
                                                        [],
                                                        [ Self ],
                                                        "mul_assign",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, product |);
                                                        M.call_closure (|
                                                          Self,
                                                          M.get_trait_method (|
                                                            "core::clone::Clone",
                                                            Self,
                                                            [],
                                                            [],
                                                            "clone",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.borrow (| Pointer.Kind.Ref, current |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.write (|
                                            current,
                                            M.call_closure (|
                                              Self,
                                              M.get_trait_method (|
                                                "p3_field::field::PrimeCharacteristicRing",
                                                Self,
                                                [],
                                                [],
                                                "square",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, current |) ]
                                            |)
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            product
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_exp_u64 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "exp_u64" exp_u64.
    Definition exp_const_u64
        (Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [ POWER ], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Self ],
              M.alloc (| POWER |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 0
                      |) in
                    get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", Self |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Self,
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "p3_field::field::PrimeCharacteristicRing",
                          Self,
                          [],
                          [],
                          "square",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "p3_field::field::PrimeCharacteristicRing",
                          Self,
                          [],
                          [],
                          "cube",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "p3_field::field::PrimeCharacteristicRing",
                          Self,
                          [],
                          [],
                          "square",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "p3_field::field::PrimeCharacteristicRing",
                                  Self,
                                  [],
                                  [],
                                  "square",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 5
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Self,
                          [],
                          [ Self ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Self,
                              [],
                              [],
                              "square",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Self,
                                    M.get_trait_method (|
                                      "p3_field::field::PrimeCharacteristicRing",
                                      Self,
                                      [],
                                      [],
                                      "square",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Self,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 6
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "p3_field::field::PrimeCharacteristicRing",
                          Self,
                          [],
                          [],
                          "cube",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "p3_field::field::PrimeCharacteristicRing",
                                  Self,
                                  [],
                                  [],
                                  "square",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 7
                      |) in
                    let~ x2 : Ty.apply (Ty.path "*") [] [ Self ] :=
                      M.alloc (|
                        M.call_closure (|
                          Self,
                          M.get_trait_method (|
                            "p3_field::field::PrimeCharacteristicRing",
                            Self,
                            [],
                            [],
                            "square",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |) in
                    let~ x3 : Ty.apply (Ty.path "*") [] [ Self ] :=
                      M.alloc (|
                        M.call_closure (|
                          Self,
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Self,
                            [],
                            [ Self ],
                            "mul",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Self,
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Self,
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, x2 |) ]
                            |);
                            M.call_closure (|
                              Self,
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Self,
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          ]
                        |)
                      |) in
                    let~ x4 : Ty.apply (Ty.path "*") [] [ Self ] :=
                      M.alloc (|
                        M.call_closure (|
                          Self,
                          M.get_trait_method (|
                            "p3_field::field::PrimeCharacteristicRing",
                            Self,
                            [],
                            [],
                            "square",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, x2 |) ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Self,
                          [],
                          [ Self ],
                          "mul",
                          [],
                          []
                        |),
                        [ M.read (| x3 |); M.read (| x4 |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "p3_field::field::PrimeCharacteristicRing",
                          Self,
                          [],
                          [],
                          "exp_u64",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |); POWER ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_exp_const_u64 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "exp_const_u64" exp_const_u64.
    Definition exp_power_of_2
        (Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; power_log ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let power_log := M.alloc (| power_log |) in
          M.read (|
            let~ res : Ty.apply (Ty.path "*") [] [ Self ] :=
              M.alloc (|
                M.call_closure (|
                  Self,
                  M.get_trait_method (| "core::clone::Clone", Self, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_", M.read (| power_log |))
                          ]
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.write (|
                                            res,
                                            M.call_closure (|
                                              Self,
                                              M.get_trait_method (|
                                                "p3_field::field::PrimeCharacteristicRing",
                                                Self,
                                                [],
                                                [],
                                                "square",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, res |) ]
                                            |)
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            res
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_exp_power_of_2 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "exp_power_of_2" exp_power_of_2.
    Definition mul_2exp_u64
        (Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; exp ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let exp := M.alloc (| exp |) in
          M.call_closure (|
            Self,
            M.get_trait_method (| "core::ops::arith::Mul", Self, [], [ Self ], "mul", [], [] |),
            [
              M.call_closure (|
                Self,
                M.get_trait_method (| "core::clone::Clone", Self, [], [], "clone", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |);
              M.call_closure (|
                Self,
                M.get_trait_method (|
                  "p3_field::field::PrimeCharacteristicRing",
                  Self,
                  [],
                  [],
                  "exp_u64",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    get_constant (| "p3_field::field::PrimeCharacteristicRing::TWO", Self |)
                  |);
                  M.read (| exp |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_mul_2exp_u64 :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "mul_2exp_u64" mul_2exp_u64.
    Definition powers (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_field::field::Powers") [] [ Self ],
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "shifted_powers",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", Self |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_powers :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "powers" powers.
    Definition shifted_powers
        (Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; start ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let start := M.alloc (| start |) in
          Value.StructRecord
            "p3_field::field::Powers"
            [
              ("base",
                M.call_closure (|
                  Self,
                  M.get_trait_method (| "core::clone::Clone", Self, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |));
              ("current", M.read (| start |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_shifted_powers :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "shifted_powers" shifted_powers.
    Definition dot_product
        (Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [ N ], [], [ u; v ] =>
        ltac:(M.monadic
          (let u := M.alloc (| u |) in
          let v := M.alloc (| v |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    []
                    [
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Self ];
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Self ]
                    ];
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.tuple
                            [ Ty.apply (Ty.path "&") [] [ Self ]; Ty.apply (Ty.path "&") [] [ Self ]
                            ]
                        ]
                    ]
                    Self
                ],
              [],
              [],
              "sum",
              [],
              [ Self ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::zip::Zip")
                      []
                      [
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Self ];
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Self ]
                      ];
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "&") [] [ Self ];
                                Ty.apply (Ty.path "&") [] [ Self ]
                              ]
                          ]
                      ]
                      Self
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    []
                    [
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Self ];
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Self ]
                    ],
                  [],
                  [],
                  "map",
                  [],
                  [
                    Self;
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "&") [] [ Self ];
                                Ty.apply (Ty.path "&") [] [ Self ]
                              ]
                          ]
                      ]
                      Self
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::zip::Zip")
                      []
                      [
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Self ];
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Self ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Self ],
                      [],
                      [],
                      "zip",
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ N ] [ Self ] ] ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Self ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Self ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| u |) |) |))
                        ]
                      |);
                      M.read (| v |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply (Ty.path "&") [] [ Self ];
                                              Ty.apply (Ty.path "&") [] [ Self ]
                                            ]
                                        ]
                                    ]
                                    Self
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let x := M.copy (| γ0_0 |) in
                                    let y := M.copy (| γ0_1 |) in
                                    M.call_closure (|
                                      Self,
                                      M.get_trait_method (|
                                        "core::ops::arith::Mul",
                                        Self,
                                        [],
                                        [ Self ],
                                        "mul",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Self,
                                          M.get_trait_method (|
                                            "core::clone::Clone",
                                            Self,
                                            [],
                                            [],
                                            "clone",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| x |) |)
                                            |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          Self,
                                          M.get_trait_method (|
                                            "core::clone::Clone",
                                            Self,
                                            [],
                                            [],
                                            "clone",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| y |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_dot_product :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "dot_product" dot_product.
    Definition sum_array (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ N ], [], [ input ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (| Pointer.Kind.Ref, M.alloc (| N |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Self ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "usize"; Ty.path "usize" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple "core::option::Option::None" []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Self ],
              M.alloc (| N |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 0
                      |) in
                    get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", Self |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 1
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Self,
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| input |) |),
                              Value.Integer IntegerKind.Usize 0
                            |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 2
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Self,
                          [],
                          [ Self ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Self,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Self,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 1
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 3
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Self,
                          [],
                          [ Self ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "core::ops::arith::Add",
                              Self,
                              [],
                              [ Self ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Self,
                                  [],
                                  [],
                                  "clone",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| input |) |),
                                      Value.Integer IntegerKind.Usize 0
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Self,
                                  [],
                                  [],
                                  "clone",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| input |) |),
                                      Value.Integer IntegerKind.Usize 1
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Self,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 2
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 4
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Self,
                          [],
                          [ Self ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "core::ops::arith::Add",
                              Self,
                              [],
                              [ Self ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Self,
                                  [],
                                  [],
                                  "clone",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| input |) |),
                                      Value.Integer IntegerKind.Usize 0
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Self,
                                  [],
                                  [],
                                  "clone",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| input |) |),
                                      Value.Integer IntegerKind.Usize 1
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "core::ops::arith::Add",
                              Self,
                              [],
                              [ Self ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Self,
                                  [],
                                  [],
                                  "clone",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| input |) |),
                                      Value.Integer IntegerKind.Usize 2
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Self,
                                  [],
                                  [],
                                  "clone",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| input |) |),
                                      Value.Integer IntegerKind.Usize 3
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 5
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Self,
                          [],
                          [ Self ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Self,
                              [],
                              [],
                              "sum_array",
                              [ Value.Integer IntegerKind.Usize 4 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply (Ty.path "slice") [] [ Self ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeTo")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| input |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeTo"
                                            [ ("end_", Value.Integer IntegerKind.Usize 4) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Self,
                              [],
                              [],
                              "sum_array",
                              [ Value.Integer IntegerKind.Usize 1 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply (Ty.path "slice") [] [ Self ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeFrom")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| input |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeFrom"
                                            [ ("start", Value.Integer IntegerKind.Usize 4) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 6
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Self,
                          [],
                          [ Self ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Self,
                              [],
                              [],
                              "sum_array",
                              [ Value.Integer IntegerKind.Usize 4 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply (Ty.path "slice") [] [ Self ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeTo")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| input |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeTo"
                                            [ ("end_", Value.Integer IntegerKind.Usize 4) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Self,
                              [],
                              [],
                              "sum_array",
                              [ Value.Integer IntegerKind.Usize 2 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply (Ty.path "slice") [] [ Self ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeFrom")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| input |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeFrom"
                                            [ ("start", Value.Integer IntegerKind.Usize 4) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 7
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Self,
                          [],
                          [ Self ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Self,
                              [],
                              [],
                              "sum_array",
                              [ Value.Integer IntegerKind.Usize 4 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply (Ty.path "slice") [] [ Self ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeTo")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| input |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeTo"
                                            [ ("end_", Value.Integer IntegerKind.Usize 4) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Self,
                              [],
                              [],
                              "sum_array",
                              [ Value.Integer IntegerKind.Usize 3 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply (Ty.path "slice") [] [ Self ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeFrom")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| input |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeFrom"
                                            [ ("start", Value.Integer IntegerKind.Usize 4) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 8
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Self,
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Self,
                          [],
                          [ Self ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Self,
                              [],
                              [],
                              "sum_array",
                              [ Value.Integer IntegerKind.Usize 4 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply (Ty.path "slice") [] [ Self ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeTo")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| input |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeTo"
                                            [ ("end_", Value.Integer IntegerKind.Usize 4) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Self,
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Self,
                              [],
                              [],
                              "sum_array",
                              [ Value.Integer IntegerKind.Usize 4 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply (Ty.path "slice") [] [ Self ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeFrom")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| input |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeFrom"
                                            [ ("start", Value.Integer IntegerKind.Usize 4) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let~ acc : Ty.apply (Ty.path "*") [] [ Self ] :=
                      M.alloc (|
                        M.call_closure (|
                          Self,
                          M.get_trait_method (|
                            "p3_field::field::PrimeCharacteristicRing",
                            Self,
                            [],
                            [],
                            "sum_array",
                            [ Value.Integer IntegerKind.Usize 8 ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                      M.get_trait_method (|
                                        "core::ops::index::Index",
                                        Ty.apply (Ty.path "slice") [] [ Self ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeTo")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                        "index",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| input |) |)
                                        |);
                                        Value.StructRecord
                                          "core::ops::range::RangeTo"
                                          [ ("end_", Value.Integer IntegerKind.Usize 8) ]
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.use
                        (M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::step_by::StepBy")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::RangeInclusive")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::step_by::StepBy")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeInclusive")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::step_by::StepBy")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeInclusive")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeInclusive")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "step_by",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeInclusive")
                                        []
                                        [ Ty.path "usize" ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::ops::range::RangeInclusive")
                                          []
                                          [ Ty.path "usize" ],
                                        "new",
                                        [],
                                        []
                                      |),
                                      [ Value.Integer IntegerKind.Usize 16; N ]
                                    |);
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::step_by::StepBy")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::RangeInclusive")
                                                    []
                                                    [ Ty.path "usize" ]
                                                ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let i := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_trait_method (|
                                                    "core::ops::arith::AddAssign",
                                                    Self,
                                                    [],
                                                    [ Self ],
                                                    "add_assign",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (| Pointer.Kind.MutRef, acc |);
                                                    M.call_closure (|
                                                      Self,
                                                      M.get_trait_method (|
                                                        "p3_field::field::PrimeCharacteristicRing",
                                                        Self,
                                                        [],
                                                        [],
                                                        "sum_array",
                                                        [ Value.Integer IntegerKind.Usize 8 ],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ Self ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ Self ],
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::ops::range::Range")
                                                                        []
                                                                        [ Ty.path "usize" ]
                                                                    ],
                                                                    "index",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| input |)
                                                                      |)
                                                                    |);
                                                                    Value.StructRecord
                                                                      "core::ops::range::Range"
                                                                      [
                                                                        ("start",
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.sub,
                                                                            [
                                                                              M.read (| i |);
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                8
                                                                            ]
                                                                          |));
                                                                        ("end_", M.read (| i |))
                                                                      ]
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Self ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.bit_and,
                          [ N; Value.Integer IntegerKind.Usize 7 ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              is_constant_or_break_match (|
                                M.read (| γ |),
                                Value.Integer IntegerKind.Usize 0
                              |) in
                            acc));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              is_constant_or_break_match (|
                                M.read (| γ |),
                                Value.Integer IntegerKind.Usize 1
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "core::ops::arith::Add",
                                  Self,
                                  [],
                                  [ Self ],
                                  "add",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| acc |);
                                  M.call_closure (|
                                    Self,
                                    M.get_trait_method (|
                                      "p3_field::field::PrimeCharacteristicRing",
                                      Self,
                                      [],
                                      [],
                                      "sum_array",
                                      [ Value.Integer IntegerKind.Usize 1 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply (Ty.path "slice") [] [ Self ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::RangeFrom")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ],
                                                  "index",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| input |) |)
                                                  |);
                                                  Value.StructRecord
                                                    "core::ops::range::RangeFrom"
                                                    [
                                                      ("start",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            Value.Integer IntegerKind.Usize 8;
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.div,
                                                              [ N; Value.Integer IntegerKind.Usize 8
                                                              ]
                                                            |)
                                                          ]
                                                        |))
                                                    ]
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              is_constant_or_break_match (|
                                M.read (| γ |),
                                Value.Integer IntegerKind.Usize 2
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "core::ops::arith::Add",
                                  Self,
                                  [],
                                  [ Self ],
                                  "add",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| acc |);
                                  M.call_closure (|
                                    Self,
                                    M.get_trait_method (|
                                      "p3_field::field::PrimeCharacteristicRing",
                                      Self,
                                      [],
                                      [],
                                      "sum_array",
                                      [ Value.Integer IntegerKind.Usize 2 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply (Ty.path "slice") [] [ Self ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::RangeFrom")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ],
                                                  "index",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| input |) |)
                                                  |);
                                                  Value.StructRecord
                                                    "core::ops::range::RangeFrom"
                                                    [
                                                      ("start",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            Value.Integer IntegerKind.Usize 8;
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.div,
                                                              [ N; Value.Integer IntegerKind.Usize 8
                                                              ]
                                                            |)
                                                          ]
                                                        |))
                                                    ]
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              is_constant_or_break_match (|
                                M.read (| γ |),
                                Value.Integer IntegerKind.Usize 3
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "core::ops::arith::Add",
                                  Self,
                                  [],
                                  [ Self ],
                                  "add",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| acc |);
                                  M.call_closure (|
                                    Self,
                                    M.get_trait_method (|
                                      "p3_field::field::PrimeCharacteristicRing",
                                      Self,
                                      [],
                                      [],
                                      "sum_array",
                                      [ Value.Integer IntegerKind.Usize 3 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply (Ty.path "slice") [] [ Self ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::RangeFrom")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ],
                                                  "index",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| input |) |)
                                                  |);
                                                  Value.StructRecord
                                                    "core::ops::range::RangeFrom"
                                                    [
                                                      ("start",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            Value.Integer IntegerKind.Usize 8;
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.div,
                                                              [ N; Value.Integer IntegerKind.Usize 8
                                                              ]
                                                            |)
                                                          ]
                                                        |))
                                                    ]
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              is_constant_or_break_match (|
                                M.read (| γ |),
                                Value.Integer IntegerKind.Usize 4
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "core::ops::arith::Add",
                                  Self,
                                  [],
                                  [ Self ],
                                  "add",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| acc |);
                                  M.call_closure (|
                                    Self,
                                    M.get_trait_method (|
                                      "p3_field::field::PrimeCharacteristicRing",
                                      Self,
                                      [],
                                      [],
                                      "sum_array",
                                      [ Value.Integer IntegerKind.Usize 4 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply (Ty.path "slice") [] [ Self ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::RangeFrom")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ],
                                                  "index",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| input |) |)
                                                  |);
                                                  Value.StructRecord
                                                    "core::ops::range::RangeFrom"
                                                    [
                                                      ("start",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            Value.Integer IntegerKind.Usize 8;
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.div,
                                                              [ N; Value.Integer IntegerKind.Usize 8
                                                              ]
                                                            |)
                                                          ]
                                                        |))
                                                    ]
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              is_constant_or_break_match (|
                                M.read (| γ |),
                                Value.Integer IntegerKind.Usize 5
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "core::ops::arith::Add",
                                  Self,
                                  [],
                                  [ Self ],
                                  "add",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| acc |);
                                  M.call_closure (|
                                    Self,
                                    M.get_trait_method (|
                                      "p3_field::field::PrimeCharacteristicRing",
                                      Self,
                                      [],
                                      [],
                                      "sum_array",
                                      [ Value.Integer IntegerKind.Usize 5 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply (Ty.path "slice") [] [ Self ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::RangeFrom")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ],
                                                  "index",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| input |) |)
                                                  |);
                                                  Value.StructRecord
                                                    "core::ops::range::RangeFrom"
                                                    [
                                                      ("start",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            Value.Integer IntegerKind.Usize 8;
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.div,
                                                              [ N; Value.Integer IntegerKind.Usize 8
                                                              ]
                                                            |)
                                                          ]
                                                        |))
                                                    ]
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              is_constant_or_break_match (|
                                M.read (| γ |),
                                Value.Integer IntegerKind.Usize 6
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "core::ops::arith::Add",
                                  Self,
                                  [],
                                  [ Self ],
                                  "add",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| acc |);
                                  M.call_closure (|
                                    Self,
                                    M.get_trait_method (|
                                      "p3_field::field::PrimeCharacteristicRing",
                                      Self,
                                      [],
                                      [],
                                      "sum_array",
                                      [ Value.Integer IntegerKind.Usize 6 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply (Ty.path "slice") [] [ Self ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::RangeFrom")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ],
                                                  "index",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| input |) |)
                                                  |);
                                                  Value.StructRecord
                                                    "core::ops::range::RangeFrom"
                                                    [
                                                      ("start",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            Value.Integer IntegerKind.Usize 8;
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.div,
                                                              [ N; Value.Integer IntegerKind.Usize 8
                                                              ]
                                                            |)
                                                          ]
                                                        |))
                                                    ]
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              is_constant_or_break_match (|
                                M.read (| γ |),
                                Value.Integer IntegerKind.Usize 7
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                Self,
                                M.get_trait_method (|
                                  "core::ops::arith::Add",
                                  Self,
                                  [],
                                  [ Self ],
                                  "add",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| acc |);
                                  M.call_closure (|
                                    Self,
                                    M.get_trait_method (|
                                      "p3_field::field::PrimeCharacteristicRing",
                                      Self,
                                      [],
                                      [],
                                      "sum_array",
                                      [ Value.Integer IntegerKind.Usize 7 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ Self ] ],
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply (Ty.path "slice") [] [ Self ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::RangeFrom")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ],
                                                  "index",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| input |) |)
                                                  |);
                                                  Value.StructRecord
                                                    "core::ops::range::RangeFrom"
                                                    [
                                                      ("start",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            Value.Integer IntegerKind.Usize 8;
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.div,
                                                              [ N; Value.Integer IntegerKind.Usize 8
                                                              ]
                                                            |)
                                                          ]
                                                        |))
                                                    ]
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (| "core::panicking::panic", [], [] |),
                                  [ mk_str (| "internal error: entered unreachable code" |) ]
                                |)
                              |)
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_sum_array :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "sum_array" sum_array.
    Definition zero_vec (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ len ] =>
        ltac:(M.monadic
          (let len := M.alloc (| len |) in
          M.call_closure (|
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ Self; Ty.path "alloc::alloc::Global" ],
            M.get_function (| "alloc::vec::from_elem", [], [ Self ] |),
            [
              M.read (|
                get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", Self |)
              |);
              M.read (| len |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_zero_vec :
      M.IsProvidedMethod "p3_field::field::PrimeCharacteristicRing" "zero_vec" zero_vec.
  End PrimeCharacteristicRing.
  
  (* Trait *)
  Module BasedVectorSpace.
    Definition from_basis_coefficients_slice
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ slice ] =>
        ltac:(M.monadic
          (let slice := M.alloc (| slice |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::option::Option") [] [ Self ],
            M.get_trait_method (|
              "p3_field::field::BasedVectorSpace",
              Self,
              [],
              [ F ],
              "from_basis_coefficients_iter",
              [],
              [
                Ty.apply
                  (Ty.path "core::iter::adapters::cloned::Cloned")
                  []
                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::cloned::Cloned")
                  []
                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                  [],
                  [],
                  "cloned",
                  [],
                  [ F ]
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ F ],
                      "iter",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| slice |) |) |) ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_from_basis_coefficients_slice :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "p3_field::field::BasedVectorSpace"
        "from_basis_coefficients_slice"
        (from_basis_coefficients_slice F).
    Definition ith_basis_element
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ i ] =>
        ltac:(M.monadic
          (let i := M.alloc (| i |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::option::Option") [] [ Self ],
            M.get_associated_function (|
              Ty.path "bool",
              "then",
              [],
              [ Self; Ty.function [ Ty.tuple [] ] Self ]
            |),
            [
              M.call_closure (|
                Ty.path "bool",
                BinOp.lt,
                [
                  M.read (| i |);
                  M.read (|
                    get_constant (|
                      "p3_field::field::BasedVectorSpace::DIMENSION",
                      Ty.path "usize"
                    |)
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.function [ Ty.tuple [] ] Self ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.call_closure (|
                                  Self,
                                  M.get_trait_method (|
                                    "p3_field::field::BasedVectorSpace",
                                    Self,
                                    [],
                                    [ F ],
                                    "from_basis_coefficients_fn",
                                    [],
                                    [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] F ]
                                  |),
                                  [
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.apply
                                                  (Ty.path "*")
                                                  []
                                                  [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] F
                                                  ],
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let j := M.copy (| γ |) in
                                                      M.call_closure (|
                                                        F,
                                                        M.get_trait_method (|
                                                          "p3_field::field::PrimeCharacteristicRing",
                                                          F,
                                                          [],
                                                          [],
                                                          "from_bool",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            BinOp.eq,
                                                            [ M.read (| i |); M.read (| j |) ]
                                                          |)
                                                        ]
                                                      |)))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_ith_basis_element :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "p3_field::field::BasedVectorSpace"
        "ith_basis_element"
        (ith_basis_element F).
    Definition flatten_to_base
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ vec ] =>
        ltac:(M.monadic
          (let vec := M.alloc (| vec |) in
          M.call_closure (|
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::iter::adapters::flatten::FlatMap")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::into_iter::IntoIter")
                    []
                    [ Self; Ty.path "alloc::alloc::Global" ];
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                  Ty.function
                    [ Ty.tuple [ Self ] ]
                    (Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ])
                ],
              [],
              [],
              "collect",
              [],
              [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [ Self; Ty.path "alloc::alloc::Global" ];
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                    Ty.function
                      [ Ty.tuple [ Self ] ]
                      (Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ F; Ty.path "alloc::alloc::Global" ])
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "alloc::vec::into_iter::IntoIter")
                    []
                    [ Self; Ty.path "alloc::alloc::Global" ],
                  [],
                  [],
                  "flat_map",
                  [],
                  [
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                    Ty.function
                      [ Ty.tuple [ Self ] ]
                      (Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ F; Ty.path "alloc::alloc::Global" ])
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [ Self; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Self; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| vec |) ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [ Ty.tuple [ Self ] ]
                                    (Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [] [ F ],
                                        "to_vec",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                              M.get_trait_method (|
                                                "p3_field::field::BasedVectorSpace",
                                                Self,
                                                [],
                                                [ F ],
                                                "as_basis_coefficients_slice",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, x |) ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_flatten_to_base :
      forall (F : Ty.t),
      M.IsProvidedMethod "p3_field::field::BasedVectorSpace" "flatten_to_base" (flatten_to_base F).
    Definition reconstitute_from_base
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ vec ] =>
        ltac:(M.monadic
          (let vec := M.alloc (| vec |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.rem,
                            [
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ F; Ty.path "alloc::alloc::Global" ],
                                  "len",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, vec |) ]
                              |);
                              M.read (|
                                get_constant (|
                                  "p3_field::field::BasedVectorSpace::DIMENSION",
                                  Ty.path "usize"
                                |)
                              |)
                            ]
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (| Value.Integer IntegerKind.Usize 0 |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "usize"; Ty.path "usize" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple "core::option::Option::None" []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ Self; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                    []
                    [
                      Ty.apply (Ty.path "core::slice::iter::ChunksExact") [] [ F ];
                      Ty.apply (Ty.path "core::option::Option") [] [ Self ];
                      Ty.function
                        [
                          Ty.tuple
                            [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ]
                        ]
                        (Ty.apply (Ty.path "core::option::Option") [] [ Self ])
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ Self; Ty.path "alloc::alloc::Global" ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                      []
                      [
                        Ty.apply (Ty.path "core::slice::iter::ChunksExact") [] [ F ];
                        Ty.apply (Ty.path "core::option::Option") [] [ Self ];
                        Ty.function
                          [
                            Ty.tuple
                              [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ]
                          ]
                          (Ty.apply (Ty.path "core::option::Option") [] [ Self ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::ChunksExact") [] [ F ],
                      [],
                      [],
                      "flat_map",
                      [],
                      [
                        Ty.apply (Ty.path "core::option::Option") [] [ Self ];
                        Ty.function
                          [
                            Ty.tuple
                              [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ]
                          ]
                          (Ty.apply (Ty.path "core::option::Option") [] [ Self ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::slice::iter::ChunksExact") [] [ F ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ F ],
                          "chunks_exact",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ F; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, vec |) ]
                              |)
                            |)
                          |);
                          M.read (|
                            get_constant (|
                              "p3_field::field::BasedVectorSpace::DIMENSION",
                              Ty.path "usize"
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                            ]
                                        ]
                                        (Ty.apply (Ty.path "core::option::Option") [] [ Self ])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let chunk := M.copy (| γ |) in
                                        M.call_closure (|
                                          Ty.apply (Ty.path "core::option::Option") [] [ Self ],
                                          M.get_trait_method (|
                                            "p3_field::field::BasedVectorSpace",
                                            Self,
                                            [],
                                            [ F ],
                                            "from_basis_coefficients_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| chunk |) |)
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_reconstitute_from_base :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "p3_field::field::BasedVectorSpace"
        "reconstitute_from_base"
        (reconstitute_from_base F).
  End BasedVectorSpace.
  
  Module Impl_p3_field_field_BasedVectorSpace_where_p3_field_field_PrimeCharacteristicRing_F_F_for_F.
    Definition Self (F : Ty.t) : Ty.t := F.
    
    (*     const DIMENSION: usize = 1; *)
    (* Ty.path "usize" *)
    Definition value_DIMENSION
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 1 |))).
    
    (*
        fn as_basis_coefficients_slice(&self) -> &[F] {
            slice::from_ref(self)
        }
    *)
    Definition as_basis_coefficients_slice
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                M.get_function (| "core::slice::raw::from_ref", [], [ F ] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn from_basis_coefficients_fn<Fn: FnMut(usize) -> F>(mut f: Fn) -> Self {
            f(0)
        }
    *)
    Definition from_basis_coefficients_fn
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [ Fn ], [ f ] =>
        ltac:(M.monadic
          (let f := M.alloc (| f |) in
          M.call_closure (|
            F,
            M.get_trait_method (|
              "core::ops::function::FnMut",
              Fn,
              [],
              [ Ty.tuple [ Ty.path "usize" ] ],
              "call_mut",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, f |);
              Value.Tuple [ Value.Integer IntegerKind.Usize 0 ]
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn from_basis_coefficients_iter<I: ExactSizeIterator<Item = F>>(mut iter: I) -> Option<Self> {
            (iter.len() == 1).then(|| iter.next().unwrap()) // Unwrap will not panic as we know the length is 1.
        }
    *)
    Definition from_basis_coefficients_iter
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [ _ as I ], [ iter ] =>
        ltac:(M.monadic
          (let iter := M.alloc (| iter |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::option::Option") [] [ F ],
            M.get_associated_function (|
              Ty.path "bool",
              "then",
              [],
              [ F; Ty.function [ Ty.tuple [] ] F ]
            |),
            [
              M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::iter::traits::exact_size::ExactSizeIterator",
                      I,
                      [],
                      [],
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, iter |) ]
                  |);
                  Value.Integer IntegerKind.Usize 1
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.function [ Ty.tuple [] ] F ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.call_closure (|
                                  F,
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                    "unwrap",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        I,
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.MutRef, iter |) ]
                                    |)
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn flatten_to_base(vec: Vec<Self>) -> Vec<F> {
            vec
        }
    *)
    Definition flatten_to_base
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ vec ] =>
        ltac:(M.monadic
          (let vec := M.alloc (| vec |) in
          M.read (| vec |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn reconstitute_from_base(vec: Vec<F>) -> Vec<Self> {
            vec
        }
    *)
    Definition reconstitute_from_base
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ vec ] =>
        ltac:(M.monadic
          (let vec := M.alloc (| vec |) in
          M.read (| vec |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "p3_field::field::BasedVectorSpace"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("value_DIMENSION", InstanceField.Method (value_DIMENSION F));
          ("as_basis_coefficients_slice", InstanceField.Method (as_basis_coefficients_slice F));
          ("from_basis_coefficients_fn", InstanceField.Method (from_basis_coefficients_fn F));
          ("from_basis_coefficients_iter", InstanceField.Method (from_basis_coefficients_iter F));
          ("flatten_to_base", InstanceField.Method (flatten_to_base F));
          ("reconstitute_from_base", InstanceField.Method (reconstitute_from_base F))
        ].
  End Impl_p3_field_field_BasedVectorSpace_where_p3_field_field_PrimeCharacteristicRing_F_F_for_F.
  
  (* Trait *)
  Module InjectiveMonomial.
    Definition injective_exp_n
        (N : Value.t)
        (Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Self,
            M.get_trait_method (|
              "p3_field::field::PrimeCharacteristicRing",
              Self,
              [],
              [],
              "exp_const_u64",
              [ N ],
              []
            |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_injective_exp_n :
      forall (N : Value.t),
      M.IsProvidedMethod "p3_field::field::InjectiveMonomial" "injective_exp_n" (injective_exp_n N).
  End InjectiveMonomial.
  
  (* Trait *)
  (* Empty module 'PermutationMonomial' *)
  
  (* Trait *)
  (* Empty module 'Algebra' *)
  
  Module Impl_p3_field_field_Algebra_where_p3_field_field_PrimeCharacteristicRing_R_R_for_R.
    Definition Self (R : Ty.t) : Ty.t := R.
    
    Axiom Implements :
      forall (R : Ty.t),
      M.IsTraitInstance
        "p3_field::field::Algebra"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ R ]
        (Self R)
        (* Instance *) [].
  End Impl_p3_field_field_Algebra_where_p3_field_field_PrimeCharacteristicRing_R_R_for_R.
  
  (* Trait *)
  Module Field.
    Definition is_zero (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (| "core::cmp::PartialEq", Self, [], [ Self ], "eq", [], [] |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", Self |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_is_zero : M.IsProvidedMethod "p3_field::field::Field" "is_zero" is_zero.
    Definition is_one (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (| "core::cmp::PartialEq", Self, [], [ Self ], "eq", [], [] |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", Self |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_is_one : M.IsProvidedMethod "p3_field::field::Field" "is_one" is_one.
    Definition inverse (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Self,
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [] [ Self ],
              "expect",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Self ],
                M.get_trait_method (|
                  "p3_field::field::Field",
                  Self,
                  [],
                  [],
                  "try_inverse",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Tried to invert zero" |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_inverse : M.IsProvidedMethod "p3_field::field::Field" "inverse" inverse.
    Definition halve (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ half : Ty.apply (Ty.path "*") [] [ Self ] :=
              M.alloc (|
                M.call_closure (|
                  Self,
                  M.get_trait_method (|
                    "p3_field::field::PrimeCharacteristicRing",
                    Self,
                    [],
                    [],
                    "from_prime_subfield",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_field::field::PrimeCharacteristicRing"
                        []
                        []
                        Self
                        "PrimeSubfield",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_field::field::PrimeCharacteristicRing"
                              []
                              []
                              Self
                              "PrimeSubfield"
                          ],
                        "expect",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_field::field::PrimeCharacteristicRing"
                                []
                                []
                                Self
                                "PrimeSubfield"
                            ],
                          M.get_trait_method (|
                            "p3_field::field::Field",
                            Ty.associated_in_trait
                              "p3_field::field::PrimeCharacteristicRing"
                              []
                              []
                              Self
                              "PrimeSubfield",
                            [],
                            [],
                            "try_inverse",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              get_constant (|
                                "p3_field::field::PrimeCharacteristicRing::TWO",
                                Ty.associated_in_trait
                                  "p3_field::field::PrimeCharacteristicRing"
                                  []
                                  []
                                  Self
                                  "PrimeSubfield"
                              |)
                            |)
                          ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            mk_str (| "Cannot divide by 2 in fields with characteristic 2" |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Self,
                M.get_trait_method (| "core::ops::arith::Mul", Self, [], [ Self ], "mul", [], [] |),
                [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| half |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_halve : M.IsProvidedMethod "p3_field::field::Field" "halve" halve.
    Definition div_2exp_u64
        (Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; exp ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let exp := M.alloc (| exp |) in
          M.call_closure (|
            Self,
            M.get_trait_method (| "core::ops::arith::Mul", Self, [], [ Self ], "mul", [], [] |),
            [
              M.read (| M.deref (| M.read (| self |) |) |);
              M.call_closure (|
                Self,
                M.get_trait_method (|
                  "p3_field::field::PrimeCharacteristicRing",
                  Self,
                  [],
                  [],
                  "from_prime_subfield",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.associated_in_trait
                      "p3_field::field::PrimeCharacteristicRing"
                      []
                      []
                      Self
                      "PrimeSubfield",
                    M.get_trait_method (|
                      "p3_field::field::PrimeCharacteristicRing",
                      Ty.associated_in_trait
                        "p3_field::field::PrimeCharacteristicRing"
                        []
                        []
                        Self
                        "PrimeSubfield",
                      [],
                      [],
                      "exp_u64",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.associated_in_trait
                              "p3_field::field::PrimeCharacteristicRing"
                              []
                              []
                              Self
                              "PrimeSubfield",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_field::field::PrimeCharacteristicRing"
                                    []
                                    []
                                    Self
                                    "PrimeSubfield"
                                ],
                              "expect",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::PrimeCharacteristicRing"
                                      []
                                      []
                                      Self
                                      "PrimeSubfield"
                                  ],
                                M.get_trait_method (|
                                  "p3_field::field::Field",
                                  Ty.associated_in_trait
                                    "p3_field::field::PrimeCharacteristicRing"
                                    []
                                    []
                                    Self
                                    "PrimeSubfield",
                                  [],
                                  [],
                                  "try_inverse",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    get_constant (|
                                      "p3_field::field::PrimeCharacteristicRing::TWO",
                                      Ty.associated_in_trait
                                        "p3_field::field::PrimeCharacteristicRing"
                                        []
                                        []
                                        Self
                                        "PrimeSubfield"
                                    |)
                                  |)
                                ]
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  mk_str (| "Cannot divide by 2 in fields with characteristic 2" |)
                                |)
                              |)
                            ]
                          |)
                        |)
                      |);
                      M.read (| exp |)
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_div_2exp_u64 :
      M.IsProvidedMethod "p3_field::field::Field" "div_2exp_u64" div_2exp_u64.
    Definition bits (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.cast
            (Ty.path "usize")
            (M.call_closure (|
              Ty.path "u64",
              M.get_associated_function (|
                Ty.path "num_bigint::biguint::BigUint",
                "bits",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "num_bigint::biguint::BigUint",
                      M.get_trait_method (|
                        "p3_field::field::Field",
                        Self,
                        [],
                        [],
                        "order",
                        [],
                        []
                      |),
                      []
                    |)
                  |)
                |)
              ]
            |))))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_bits : M.IsProvidedMethod "p3_field::field::Field" "bits" bits.
  End Field.
  
  (* Trait *)
  (* Empty module 'PrimeField' *)
  
  (* Trait *)
  Module PrimeField64.
    Definition to_unique_u64
        (Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "u64",
            M.get_trait_method (|
              "p3_field::field::PrimeField64",
              Self,
              [],
              [],
              "as_canonical_u64",
              [],
              []
            |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_to_unique_u64 :
      M.IsProvidedMethod "p3_field::field::PrimeField64" "to_unique_u64" to_unique_u64.
  End PrimeField64.
  
  (* Trait *)
  Module PrimeField32.
    Definition to_unique_u32
        (Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "u32",
            M.get_trait_method (|
              "p3_field::field::PrimeField32",
              Self,
              [],
              [],
              "as_canonical_u32",
              [],
              []
            |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_to_unique_u32 :
      M.IsProvidedMethod "p3_field::field::PrimeField32" "to_unique_u32" to_unique_u32.
  End PrimeField32.
  
  (* Trait *)
  (* Empty module 'ExtensionField' *)
  
  Module Impl_p3_field_field_ExtensionField_where_p3_field_field_Field_F_F_for_F.
    Definition Self (F : Ty.t) : Ty.t := F.
    
    (*     type ExtensionPacking = F::Packing; *)
    Definition _ExtensionPacking (F : Ty.t) : Ty.t :=
      Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing".
    
    (*
        fn is_in_basefield(&self) -> bool {
            true
        }
    *)
    Definition is_in_basefield
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Bool true))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn as_base(&self) -> Option<F> {
            Some( *self)
        }
    *)
    Definition as_base (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::option::Option::Some"
            [ M.read (| M.deref (| M.read (| self |) |) |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "p3_field::field::ExtensionField"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("ExtensionPacking", InstanceField.Ty (_ExtensionPacking F));
          ("is_in_basefield", InstanceField.Method (is_in_basefield F));
          ("as_base", InstanceField.Method (as_base F))
        ].
  End Impl_p3_field_field_ExtensionField_where_p3_field_field_Field_F_F_for_F.
  
  (* Trait *)
  (* Empty module 'TwoAdicField' *)
  
  (* StructRecord
    {
      name := "Powers";
      const_params := [];
      ty_params := [ "F" ];
      fields := [ ("base", F); ("current", F) ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_p3_field_field_Powers_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ].
    
    (* Clone *)
    Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_field::field::Powers"
            [
              ("base",
                M.call_closure (|
                  F,
                  M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_field::field::Powers",
                            "base"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("current",
                M.call_closure (|
                  F,
                  M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_field::field::Powers",
                            "current"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_for_p3_field_field_Powers_F.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_p3_field_field_Powers_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ].
    
    (* Debug *)
    Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Powers" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "base" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_field::field::Powers",
                        "base"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "current" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_field::field::Powers",
                            "current"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_p3_field_field_Powers_F.
  
  Module Impl_core_iter_traits_iterator_Iterator_where_p3_field_field_PrimeCharacteristicRing_R_for_p3_field_field_Powers_R.
    Definition Self (R : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_field::field::Powers") [] [ R ].
    
    (*     type Item = R; *)
    Definition _Item (R : Ty.t) : Ty.t := R.
    
    (*
        fn next(&mut self) -> Option<R> {
            let result = self.current.clone();
            self.current *= self.base.clone();
            Some(result)
        }
    *)
    Definition next (R : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self R in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ result : Ty.apply (Ty.path "*") [] [ R ] :=
              M.alloc (|
                M.call_closure (|
                  R,
                  M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_field::field::Powers",
                        "current"
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::arith::MulAssign",
                    R,
                    [],
                    [ R ],
                    "mul_assign",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_field::field::Powers",
                        "current"
                      |)
                    |);
                    M.call_closure (|
                      R,
                      M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_field::field::Powers",
                            "base"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.StructTuple "core::option::Option::Some" [ M.read (| result |) ] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (R : Ty.t),
      M.IsTraitInstance
        "core::iter::traits::iterator::Iterator"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self R)
        (* Instance *)
        [ ("Item", InstanceField.Ty (_Item R)); ("next", InstanceField.Method (next R)) ].
  End Impl_core_iter_traits_iterator_Iterator_where_p3_field_field_PrimeCharacteristicRing_R_for_p3_field_field_Powers_R.
End field.
