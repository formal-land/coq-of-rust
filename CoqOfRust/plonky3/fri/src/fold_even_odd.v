(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module fold_even_odd.
  (* #[instrument(skip_all, level = "debug")] *)
  Definition fold_even_odd (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ poly; beta ] =>
      ltac:(M.monadic
        (let poly := M.alloc (| poly |) in
        let beta := M.alloc (| beta |) in
        M.catch_return
          (Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]) (|
          ltac:(M.monadic
            (M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] := M.alloc (| Value.Tuple [] |) in
              let __tracing_attr_span := M.copy (| Value.DeclaredButUndefined |) in
              let __tracing_attr_guard := M.copy (| Value.DeclaredButUndefined |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.path "tracing_core::metadata::Level",
                                      [],
                                      [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                      "le",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_associated_constant (|
                                          Ty.path "tracing_core::metadata::Level",
                                          "DEBUG",
                                          Ty.path "tracing_core::metadata::Level"
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "tracing::level_filters::STATIC_MAX_LEVEL",
                                          Ty.path "tracing_core::metadata::LevelFilter"
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "DEBUG",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing_core::metadata::LevelFilter",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                "current",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic (Value.Bool false))
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_span,
                              M.read (|
                                let~ interest :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [ Ty.path "tracing_core::subscriber::Interest" ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "never",
                                        [],
                                        []
                                      |),
                                      []
                                    |)
                                  |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.path "tracing::span::Span" ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              LogicalOp.and (|
                                                LogicalOp.and (|
                                                  LogicalOp.and (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialOrd",
                                                        Ty.path "tracing_core::metadata::Level",
                                                        [],
                                                        [
                                                          Ty.path
                                                            "tracing_core::metadata::LevelFilter"
                                                        ],
                                                        "le",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_associated_constant (|
                                                            Ty.path "tracing_core::metadata::Level",
                                                            "DEBUG",
                                                            Ty.path "tracing_core::metadata::Level"
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_constant (|
                                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          |)
                                                        |)
                                                      ]
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "tracing_core::metadata::Level",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          ],
                                                          "le",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_associated_constant (|
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              "DEBUG",
                                                              Ty.path
                                                                "tracing_core::metadata::Level"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  "current",
                                                                  [],
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.alloc (|
                                                          M.write (|
                                                            interest,
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                "interest",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "p3_fri::fold_even_odd::fold_even_odd::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |) in
                                                      M.alloc (|
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              "is_never",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                interest
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)))
                                                |),
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_function (|
                                                      "tracing::__macro_support::__is_enabled",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "p3_fri::fold_even_odd::fold_even_odd::__CALLSITE",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (| interest |)
                                                    ]
                                                  |)))
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ meta :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ]
                                              ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "tracing_core::metadata::Metadata" ],
                                              M.get_trait_method (|
                                                "tracing_core::callsite::Callsite",
                                                Ty.path "tracing_core::callsite::DefaultCallsite",
                                                [],
                                                [],
                                                "metadata",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.read (|
                                                      get_constant (|
                                                        "p3_fri::fold_even_odd::fold_even_odd::__CALLSITE",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite"
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "tracing::span::Span",
                                            M.get_associated_function (|
                                              Ty.path "tracing::span::Span",
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| meta |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "tracing_core::field::ValueSet",
                                                        M.get_associated_function (|
                                                          Ty.path "tracing_core::field::FieldSet",
                                                          "value_set",
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 0 ]
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::Field"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("tracing_core::field::Value::Trait",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::FieldSet"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata",
                                                                  "fields",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| meta |) |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (| Value.Array [] |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let~ span :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "tracing::span::Span" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing::span::Span",
                                              M.get_function (|
                                                "tracing::__macro_support::__disabled_span",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::metadata::Metadata"
                                                        ],
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        [],
                                                        "metadata",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (|
                                                              get_constant (|
                                                                "p3_fri::fold_even_odd::fold_even_odd::__CALLSITE",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::callsite::DefaultCallsite"
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (| Value.Tuple [] |) in
                                        span))
                                  ]
                                |)
                              |)
                            |)
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_guard,
                              M.call_closure (|
                                Ty.path "tracing::span::Entered",
                                M.get_associated_function (|
                                  Ty.path "tracing::span::Span",
                                  "enter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool false |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              let~ __tracing_attr_fake_return :
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ]
                                    ] :=
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.loop (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                        ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      |)
                                    |)
                                  |)
                                |) in
                              M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ m :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ],
                      "new",
                      [],
                      []
                    |),
                    [ M.read (| poly |); Value.Integer IntegerKind.Usize 2 ]
                  |)
                |) in
              let~ g_inv : Ty.apply (Ty.path "*") [] [ F ] :=
                M.alloc (|
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "p3_field::field::Field", F, [], [], "inverse", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            F,
                            M.get_trait_method (|
                              "p3_field::field::TwoAdicField",
                              F,
                              [],
                              [],
                              "two_adic_generator",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.add,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_trait_method (|
                                          "p3_matrix::Matrix",
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          [],
                                          [ F ],
                                          "height",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, m |) ]
                                      |)
                                    ]
                                  |);
                                  Value.Integer IntegerKind.Usize 1
                                ]
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ one_half : Ty.apply (Ty.path "*") [] [ F ] :=
                M.alloc (|
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "p3_field::field::Field", F, [], [], "halve", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", F |)
                      |)
                    ]
                  |)
                |) in
              let~ half_beta : Ty.apply (Ty.path "*") [] [ F ] :=
                M.alloc (|
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::ops::arith::Mul", F, [], [ F ], "mul", [], [] |),
                    [ M.read (| beta |); M.read (| one_half |) ]
                  |)
                |) in
              let~ powers :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "itertools::Itertools",
                      Ty.apply
                        (Ty.path "core::iter::adapters::take::Take")
                        []
                        [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ] ],
                      [],
                      [],
                      "collect_vec",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::take::Take")
                          []
                          [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ] ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ],
                          [],
                          [],
                          "take",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ],
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              F,
                              [],
                              [],
                              "shifted_powers",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, g_inv |); M.read (| half_beta |) ]
                          |);
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_trait_method (|
                              "p3_matrix::Matrix",
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ F; Ty.path "alloc::alloc::Global" ]
                                ],
                              [],
                              [ F ],
                              "height",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, m |) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (| "p3_util::reverse_slice_index_bits", [], [ F ] |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.get_trait_method (|
                              "core::ops::deref::DerefMut",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ],
                              [],
                              [],
                              "deref_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (| M.borrow (| Pointer.Kind.MutRef, powers |) |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.associated_unknown;
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::cloned::Cloned")
                                      []
                                      [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ];
                                    F
                                  ]
                              ]
                          ]
                          F
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::cloned::Cloned")
                                        []
                                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ];
                                      F
                                    ]
                                ]
                            ]
                            F
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.associated_unknown;
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          F;
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::cloned::Cloned")
                                        []
                                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ];
                                      F
                                    ]
                                ]
                            ]
                            F
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.associated_unknown,
                            [],
                            [],
                            "zip",
                            [],
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_unknown,
                              M.get_trait_method (|
                                "p3_matrix::Matrix",
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ]
                                  ],
                                [],
                                [ F ],
                                "par_rows",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, m |) ]
                            |);
                            M.read (| powers |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::cloned::Cloned")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ F ]
                                                      ];
                                                    F
                                                  ]
                                              ]
                                          ]
                                          F
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let row := M.copy (| γ0_0 |) in
                                          let power := M.copy (| γ0_1 |) in
                                          M.read (|
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ F ],
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [ F; F ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.tuple [ F; F ] ],
                                                    "unwrap",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ Ty.tuple [ F; F ] ],
                                                      M.get_trait_method (|
                                                        "itertools::Itertools",
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::cloned::Cloned")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              []
                                                              [ F ]
                                                          ],
                                                        [],
                                                        [],
                                                        "next_tuple",
                                                        [],
                                                        [ Ty.tuple [ F; F ] ]
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.MutRef, row |) ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let r0 := M.copy (| γ0_0 |) in
                                                    let r1 := M.copy (| γ0_1 |) in
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        F,
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Add",
                                                          F,
                                                          [],
                                                          [ F ],
                                                          "add",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            F,
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Mul",
                                                              F,
                                                              [],
                                                              [ F ],
                                                              "mul",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                F,
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Add",
                                                                  F,
                                                                  [],
                                                                  [ F ],
                                                                  "add",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| one_half |);
                                                                  M.read (| power |)
                                                                ]
                                                              |);
                                                              M.read (| r0 |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            F,
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Mul",
                                                              F,
                                                              [],
                                                              [ F ],
                                                              "mul",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                F,
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Sub",
                                                                  F,
                                                                  [],
                                                                  [ F ],
                                                                  "sub",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| one_half |);
                                                                  M.read (| power |)
                                                                ]
                                                              |);
                                                              M.read (| r1 |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)))
                                              ]
                                            |)
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |)
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_fold_even_odd :
    M.IsFunction.C "p3_fri::fold_even_odd::fold_even_odd" fold_even_odd.
  Admitted.
  Global Typeclasses Opaque fold_even_odd.
End fold_even_odd.
