(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module hiding_pcs.
  (* StructRecord
    {
      name := "HidingFriPcs";
      const_params := [];
      ty_params := [ "Val"; "Dft"; "InputMmcs"; "FriMmcs"; "R" ];
      fields :=
        [
          ("inner",
            Ty.apply
              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
              []
              [ Val; Dft; InputMmcs; FriMmcs ]);
          ("num_random_codewords", Ty.path "usize");
          ("rng", Ty.apply (Ty.path "core::cell::RefCell") [] [ R ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_Val_where_core_fmt_Debug_Dft_where_core_fmt_Debug_InputMmcs_where_core_fmt_Debug_FriMmcs_where_core_fmt_Debug_R_for_p3_fri_hiding_pcs_HidingFriPcs_Val_Dft_InputMmcs_FriMmcs_R.
    Definition Self (Val Dft InputMmcs FriMmcs R : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_fri::hiding_pcs::HidingFriPcs") [] [ Val; Dft; InputMmcs; FriMmcs; R ].
    
    (* Debug *)
    Definition fmt
        (Val Dft InputMmcs FriMmcs R : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val Dft InputMmcs FriMmcs R in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "HidingFriPcs" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_fri::hiding_pcs::HidingFriPcs",
                        "inner"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "num_random_codewords" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_fri::hiding_pcs::HidingFriPcs",
                        "num_random_codewords"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rng" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_fri::hiding_pcs::HidingFriPcs",
                            "rng"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Val Dft InputMmcs FriMmcs R : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Val Dft InputMmcs FriMmcs R)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt Val Dft InputMmcs FriMmcs R)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_Val_where_core_fmt_Debug_Dft_where_core_fmt_Debug_InputMmcs_where_core_fmt_Debug_FriMmcs_where_core_fmt_Debug_R_for_p3_fri_hiding_pcs_HidingFriPcs_Val_Dft_InputMmcs_FriMmcs_R.
  
  Module Impl_p3_fri_hiding_pcs_HidingFriPcs_Val_Dft_InputMmcs_FriMmcs_R.
    Definition Self (Val Dft InputMmcs FriMmcs R : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_fri::hiding_pcs::HidingFriPcs") [] [ Val; Dft; InputMmcs; FriMmcs; R ].
    
    (*
        pub fn new(
            dft: Dft,
            mmcs: InputMmcs,
            fri: FriConfig<FriMmcs>,
            num_random_codewords: usize,
            rng: R,
        ) -> Self {
            let inner = TwoAdicFriPcs::new(dft, mmcs, fri);
            Self {
                inner,
                num_random_codewords,
                rng: rng.into(),
            }
        }
    *)
    Definition new
        (Val Dft InputMmcs FriMmcs R : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val Dft InputMmcs FriMmcs R in
      match ε, τ, α with
      | [], [], [ dft; mmcs; fri; num_random_codewords; rng ] =>
        ltac:(M.monadic
          (let dft := M.alloc (| dft |) in
          let mmcs := M.alloc (| mmcs |) in
          let fri := M.alloc (| fri |) in
          let num_random_codewords := M.alloc (| num_random_codewords |) in
          let rng := M.alloc (| rng |) in
          M.read (|
            let~ inner :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                      []
                      [ Val; Dft; InputMmcs; FriMmcs ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                    []
                    [ Val; Dft; InputMmcs; FriMmcs ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                      []
                      [ Val; Dft; InputMmcs; FriMmcs ],
                    "new",
                    [],
                    []
                  |),
                  [ M.read (| dft |); M.read (| mmcs |); M.read (| fri |) ]
                |)
              |) in
            M.alloc (|
              Value.StructRecord
                "p3_fri::hiding_pcs::HidingFriPcs"
                [
                  ("inner", M.read (| inner |));
                  ("num_random_codewords", M.read (| num_random_codewords |));
                  ("rng",
                    M.call_closure (|
                      Ty.apply (Ty.path "core::cell::RefCell") [] [ R ],
                      M.get_trait_method (|
                        "core::convert::Into",
                        R,
                        [],
                        [ Ty.apply (Ty.path "core::cell::RefCell") [] [ R ] ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| rng |) ]
                    |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (Val Dft InputMmcs FriMmcs R : Ty.t),
      M.IsAssociatedFunction.C
        (Self Val Dft InputMmcs FriMmcs R)
        "new"
        (new Val Dft InputMmcs FriMmcs R).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_p3_fri_hiding_pcs_HidingFriPcs_Val_Dft_InputMmcs_FriMmcs_R.
  
  Module Impl_p3_commit_pcs_Pcs_where_p3_field_field_TwoAdicField_Val_where_rand_distr_distribution_Distribution_rand_distr_StandardUniform_Val_where_p3_dft_traits_TwoAdicSubgroupDft_Dft_Val_where_p3_commit_mmcs_Mmcs_InputMmcs_Val_where_p3_commit_mmcs_Mmcs_FriMmcs_Challenge_where_p3_field_field_TwoAdicField_Challenge_where_p3_field_field_ExtensionField_Challenge_Val_where_p3_challenger_FieldChallenger_Challenger_Val_where_p3_challenger_CanObserve_Challenger_associated_in_trait_p3_commit_mmcs_Mmcs__Challenge_FriMmcs_Commitment_where_p3_challenger_grinding_challenger_GrindingChallenger_Challenger_where_rand_rng_Rng_R_where_core_marker_Send_R_where_core_marker_Sync_R_Challenge_Challenger_for_p3_fri_hiding_pcs_HidingFriPcs_Val_Dft_InputMmcs_FriMmcs_R.
    Definition Self (Val Dft InputMmcs FriMmcs Challenge Challenger R : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_fri::hiding_pcs::HidingFriPcs") [] [ Val; Dft; InputMmcs; FriMmcs; R ].
    
    (*     type Domain = TwoAdicMultiplicativeCoset<Val>; *)
    Definition _Domain (Val Dft InputMmcs FriMmcs Challenge Challenger R : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ].
    
    (*     type Commitment = InputMmcs::Commitment; *)
    Definition _Commitment (Val Dft InputMmcs FriMmcs Challenge Challenger R : Ty.t) : Ty.t :=
      Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ Val ] InputMmcs "Commitment".
    
    (*     type ProverData = InputMmcs::ProverData<RowMajorMatrix<Val>>; *)
    Definition _ProverData (Val Dft InputMmcs FriMmcs Challenge Challenger R : Ty.t) : Ty.t :=
      Ty.associated_in_trait
        "p3_commit::mmcs::Mmcs"
        []
        [
          Val;
          Ty.apply
            (Ty.path "p3_matrix::dense::DenseMatrix")
            []
            [ Val; Ty.apply (Ty.path "alloc::vec::Vec") [] [ Val; Ty.path "alloc::alloc::Global" ] ]
        ]
        InputMmcs
        "ProverData".
    
    (*
        type EvaluationsOnDomain<'a> = HorizontallyTruncated<
            Val,
            RowIndexMappedView<BitReversalPerm, DenseMatrix<Val, &'a [Val]>>,
        >;
    *)
    Definition _EvaluationsOnDomain
        (Val Dft InputMmcs FriMmcs Challenge Challenger R : Ty.t)
        : Ty.t :=
      Ty.apply
        (Ty.path "p3_matrix::horizontally_truncated::HorizontallyTruncated")
        []
        [
          Val;
          Ty.apply
            (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
            []
            [
              Ty.path "p3_matrix::bitrev::BitReversalPerm";
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [ Val; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Val ] ] ]
            ]
        ].
    
    (*
        type Proof = (
            OpenedValues<Challenge>,
            FriProof<Challenge, FriMmcs, Val, Vec<BatchOpening<Val, InputMmcs>>>,
        );
    *)
    Definition _Proof (Val Dft InputMmcs FriMmcs Challenge Challenger R : Ty.t) : Ty.t :=
      Ty.tuple
        [
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            []
            [
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Challenge; Ty.path "alloc::alloc::Global" ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ];
              Ty.path "alloc::alloc::Global"
            ];
          Ty.apply
            (Ty.path "p3_fri::proof::FriProof")
            []
            [
              Challenge;
              FriMmcs;
              Val;
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply (Ty.path "p3_fri::two_adic_pcs::BatchOpening") [] [ Val; InputMmcs ];
                  Ty.path "alloc::alloc::Global"
                ]
            ]
        ].
    
    (*     type Error = FriError<FriMmcs::Error, InputMmcs::Error>; *)
    Definition _Error (Val Dft InputMmcs FriMmcs Challenge Challenger R : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_fri::verifier::FriError")
        []
        [
          Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ Challenge ] FriMmcs "Error";
          Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ Val ] InputMmcs "Error"
        ].
    
    (*
        fn natural_domain_for_degree(&self, degree: usize) -> Self::Domain {
            <TwoAdicFriPcs<Val, Dft, InputMmcs, FriMmcs> as Pcs<Challenge, Challenger>>::natural_domain_for_degree(
                &self.inner, degree)
        }
    *)
    Definition natural_domain_for_degree
        (Val Dft InputMmcs FriMmcs Challenge Challenger R : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val Dft InputMmcs FriMmcs Challenge Challenger R in
      match ε, τ, α with
      | [], [], [ self; degree ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let degree := M.alloc (| degree |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ],
            M.get_trait_method (|
              "p3_commit::pcs::Pcs",
              Ty.apply
                (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                []
                [ Val; Dft; InputMmcs; FriMmcs ],
              [],
              [ Challenge; Challenger ],
              "natural_domain_for_degree",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_fri::hiding_pcs::HidingFriPcs",
                      "inner"
                    |)
                  |)
                |)
              |);
              M.read (| degree |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn commit(
            &self,
            evaluations: Vec<(Self::Domain, RowMajorMatrix<Val>)>,
        ) -> (Self::Commitment, Self::ProverData) {
            let randomized_evaluations = evaluations
                .into_iter()
                .map(|(domain, mat)| {
                    (
                        domain,
                        add_random_cols(mat, self.num_random_codewords, &mut *self.rng.borrow_mut()),
                    )
                })
                .collect();
            <TwoAdicFriPcs<Val, Dft, InputMmcs, FriMmcs> as Pcs<Challenge, Challenger>>::commit(
                &self.inner,
                randomized_evaluations,
            )
        }
    *)
    Definition commit
        (Val Dft InputMmcs FriMmcs Challenge Challenger R : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val Dft InputMmcs FriMmcs Challenge Challenger R in
      match ε, τ, α with
      | [], [], [ self; evaluations ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let evaluations := M.alloc (| evaluations |) in
          M.read (|
            let~ randomized_evaluations :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                              []
                              [ Val ];
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                Val;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Val; Ty.path "alloc::alloc::Global" ]
                              ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                            []
                            [ Val ];
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Val;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Val; Ty.path "alloc::alloc::Global" ]
                            ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                  []
                                  [ Val ];
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Val;
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Val; Ty.path "alloc::alloc::Global" ]
                                  ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                      []
                                      [ Val ];
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Val;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Val; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                []
                                [ Val ];
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Val;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Val; Ty.path "alloc::alloc::Global" ]
                                ]
                            ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                []
                                [ Val ];
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Val;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Val; Ty.path "alloc::alloc::Global" ]
                                ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                    []
                                    [ Val ];
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Val;
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Val; Ty.path "alloc::alloc::Global" ]
                                    ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                        []
                                        [ Val ];
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Val;
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Val; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                  []
                                  [ Val ];
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Val;
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Val; Ty.path "alloc::alloc::Global" ]
                                  ]
                              ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                  []
                                  [ Val ];
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Val;
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Val; Ty.path "alloc::alloc::Global" ]
                                  ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                []
                                [ Val ];
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Val;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Val; Ty.path "alloc::alloc::Global" ]
                                ]
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                        []
                                        [ Val ];
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Val;
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Val; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                  []
                                  [ Val ];
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Val;
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Val; Ty.path "alloc::alloc::Global" ]
                                  ]
                              ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                    []
                                    [ Val ];
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Val;
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Val; Ty.path "alloc::alloc::Global" ]
                                    ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                      []
                                      [ Val ];
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Val;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Val; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| evaluations |) ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                      []
                                                      [ Val ];
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        Val;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ Val; Ty.path "alloc::alloc::Global" ]
                                                      ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                []
                                                [ Val ];
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  Val;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ Val; Ty.path "alloc::alloc::Global" ]
                                                ]
                                            ])
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let domain := M.copy (| γ0_0 |) in
                                          let mat := M.copy (| γ0_1 |) in
                                          Value.Tuple
                                            [
                                              M.read (| domain |);
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    Val;
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Val; Ty.path "alloc::alloc::Global" ]
                                                  ],
                                                M.get_function (|
                                                  "p3_fri::hiding_pcs::add_random_cols",
                                                  [],
                                                  [ Val; Ty.apply (Ty.path "&mut") [] [ R ] ]
                                                |),
                                                [
                                                  M.read (| mat |);
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "p3_fri::hiding_pcs::HidingFriPcs",
                                                      "num_random_codewords"
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply (Ty.path "&mut") [] [ R ],
                                                        M.get_trait_method (|
                                                          "core::ops::deref::DerefMut",
                                                          Ty.apply
                                                            (Ty.path "core::cell::RefMut")
                                                            []
                                                            [ R ],
                                                          [],
                                                          [],
                                                          "deref_mut",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::cell::RefMut")
                                                                  []
                                                                  [ R ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::cell::RefCell")
                                                                    []
                                                                    [ R ],
                                                                  "borrow_mut",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| self |)
                                                                      |),
                                                                      "p3_fri::hiding_pcs::HidingFriPcs",
                                                                      "rng"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple
                  [
                    Ty.associated_in_trait
                      "p3_commit::mmcs::Mmcs"
                      []
                      [ Val ]
                      InputMmcs
                      "Commitment";
                    Ty.associated_in_trait
                      "p3_commit::mmcs::Mmcs"
                      []
                      [
                        Val;
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            Val;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Val; Ty.path "alloc::alloc::Global" ]
                          ]
                      ]
                      InputMmcs
                      "ProverData"
                  ],
                M.get_trait_method (|
                  "p3_commit::pcs::Pcs",
                  Ty.apply
                    (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                    []
                    [ Val; Dft; InputMmcs; FriMmcs ],
                  [],
                  [ Challenge; Challenger ],
                  "commit",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_fri::hiding_pcs::HidingFriPcs",
                          "inner"
                        |)
                      |)
                    |)
                  |);
                  M.read (| randomized_evaluations |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn get_evaluations_on_domain<'a>(
            &self,
            prover_data: &'a Self::ProverData,
            idx: usize,
            domain: Self::Domain,
        ) -> Self::EvaluationsOnDomain<'a> {
            let inner_evals = <TwoAdicFriPcs<Val, Dft, InputMmcs, FriMmcs> as Pcs<
                Challenge,
                Challenger,
            >>::get_evaluations_on_domain(
                &self.inner, prover_data, idx, domain
            );
            let inner_width = inner_evals.width();
            // Truncate off the columns representing random codewords we added in `commit` above.
            HorizontallyTruncated::new(inner_evals, inner_width - self.num_random_codewords)
        }
    *)
    Definition get_evaluations_on_domain
        (Val Dft InputMmcs FriMmcs Challenge Challenger R : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val Dft InputMmcs FriMmcs Challenge Challenger R in
      match ε, τ, α with
      | [], [], [ self; prover_data; idx; domain ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let prover_data := M.alloc (| prover_data |) in
          let idx := M.alloc (| idx |) in
          let domain := M.alloc (| domain |) in
          M.read (|
            let~ inner_evals :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
                      []
                      [
                        Ty.path "p3_matrix::bitrev::BitReversalPerm";
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [ Val; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Val ] ]
                          ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
                    []
                    [
                      Ty.path "p3_matrix::bitrev::BitReversalPerm";
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [ Val; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Val ] ] ]
                    ],
                  M.get_trait_method (|
                    "p3_commit::pcs::Pcs",
                    Ty.apply
                      (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                      []
                      [ Val; Dft; InputMmcs; FriMmcs ],
                    [],
                    [ Challenge; Challenger ],
                    "get_evaluations_on_domain",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_fri::hiding_pcs::HidingFriPcs",
                            "inner"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| prover_data |) |) |);
                    M.read (| idx |);
                    M.read (| domain |)
                  ]
                |)
              |) in
            let~ inner_width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.apply
                      (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
                      []
                      [
                        Ty.path "p3_matrix::bitrev::BitReversalPerm";
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [ Val; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Val ] ]
                          ]
                      ],
                    [],
                    [ Val ],
                    "width",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, inner_evals |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::horizontally_truncated::HorizontallyTruncated")
                  []
                  [
                    Val;
                    Ty.apply
                      (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
                      []
                      [
                        Ty.path "p3_matrix::bitrev::BitReversalPerm";
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [ Val; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Val ] ]
                          ]
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::horizontally_truncated::HorizontallyTruncated")
                    []
                    [
                      Val;
                      Ty.apply
                        (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
                        []
                        [
                          Ty.path "p3_matrix::bitrev::BitReversalPerm";
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Val;
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Val ] ]
                            ]
                        ]
                    ],
                  "new",
                  [],
                  []
                |),
                [
                  M.read (| inner_evals |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [
                      M.read (| inner_width |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_fri::hiding_pcs::HidingFriPcs",
                          "num_random_codewords"
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn open(
            &self,
            // For each round,
            rounds: Vec<(
                &Self::ProverData,
                // for each matrix,
                Vec<
                    // points to open
                    Vec<Challenge>,
                >,
            )>,
            challenger: &mut Challenger,
        ) -> (OpenedValues<Challenge>, Self::Proof) {
            let (mut inner_opened_values, inner_proof) = self.inner.open(rounds, challenger);
    
            // inner_opened_values includes opened values for the random codewords. Those should be
            // hidden from our caller, so we split them off and store them in the proof.
            let opened_values_rand = inner_opened_values
                .iter_mut()
                .map(|opened_values_for_round| {
                    opened_values_for_round
                        .iter_mut()
                        .map(|opened_values_for_mat| {
                            opened_values_for_mat
                                .iter_mut()
                                .map(|opened_values_for_point| {
                                    let split =
                                        opened_values_for_point.len() - self.num_random_codewords;
                                    opened_values_for_point.drain(split..).collect()
                                })
                                .collect()
                        })
                        .collect()
                })
                .collect();
    
            (inner_opened_values, (opened_values_rand, inner_proof))
        }
    *)
    Definition open
        (Val Dft InputMmcs FriMmcs Challenge Challenger R : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val Dft InputMmcs FriMmcs Challenge Challenger R in
      match ε, τ, α with
      | [], [], [ self; rounds; challenger ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rounds := M.alloc (| rounds |) in
          let challenger := M.alloc (| challenger |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Challenge; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.apply
                            (Ty.path "p3_fri::proof::FriProof")
                            []
                            [
                              Challenge;
                              FriMmcs;
                              Val;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_fri::two_adic_pcs::BatchOpening")
                                    []
                                    [ Val; InputMmcs ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ]
                    ]
                ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.apply
                        (Ty.path "p3_fri::proof::FriProof")
                        []
                        [
                          Challenge;
                          FriMmcs;
                          Val;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_fri::two_adic_pcs::BatchOpening")
                                []
                                [ Val; InputMmcs ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                    ],
                  M.get_trait_method (|
                    "p3_commit::pcs::Pcs",
                    Ty.apply
                      (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                      []
                      [ Val; Dft; InputMmcs; FriMmcs ],
                    [],
                    [ Challenge; Challenger ],
                    "open",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_fri::hiding_pcs::HidingFriPcs",
                        "inner"
                      |)
                    |);
                    M.read (| rounds |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| challenger |) |) |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let inner_opened_values := M.copy (| γ0_0 |) in
                    let inner_proof := M.copy (| γ0_1 |) in
                    let~ opened_values_rand :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Challenge; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Challenge; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Challenge; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Challenge; Ty.path "alloc::alloc::Global" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Challenge; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ])
                              ],
                            [],
                            [],
                            "collect",
                            [],
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Challenge; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::IterMut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Challenge; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ Challenge; Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Challenge; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ])
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Challenge; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                [],
                                [],
                                "map",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Challenge; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ Challenge; Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Challenge; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ])
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::slice::iter::IterMut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Challenge; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Challenge; Ty.path "alloc::alloc::Global" ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    "iter_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Challenge;
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::DerefMut",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Challenge;
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref_mut",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.MutRef, inner_opened_values |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Challenge;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Challenge;
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ])
                                              ],
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let opened_values_for_round := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Challenge;
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Challenge;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Challenge;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Challenge;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ])
                                                        ],
                                                      [],
                                                      [],
                                                      "collect",
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Challenge;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Challenge;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Challenge;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Challenge;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ])
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Challenge;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          [],
                                                          [],
                                                          "map",
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Challenge;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Challenge;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Challenge;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ])
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Challenge;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Challenge;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ],
                                                              "iter_mut",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::DerefMut",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Challenge;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "deref_mut",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            opened_values_for_round
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&mut")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            []
                                                                                            [
                                                                                              Challenge;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ])
                                                                        ],
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let
                                                                                  opened_values_for_mat :=
                                                                              M.copy (| γ |) in
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      Challenge;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::iter::adapters::map::Map")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::IterMut")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ];
                                                                                    Ty.function
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&mut")
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  []
                                                                                                  [
                                                                                                    Challenge;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                      (Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Challenge;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ])
                                                                                  ],
                                                                                [],
                                                                                [],
                                                                                "collect",
                                                                                [],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Challenge;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ]
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::iter::adapters::map::Map")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::IterMut")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            []
                                                                                            [
                                                                                              Challenge;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ];
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&mut")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Challenge;
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                        (Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ])
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::IterMut")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ],
                                                                                    [],
                                                                                    [],
                                                                                    "map",
                                                                                    [],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Challenge;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ];
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&mut")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Challenge;
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                        (Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ])
                                                                                    ]
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::IterMut")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            []
                                                                                            [
                                                                                              Challenge;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ],
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                Challenge;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ]
                                                                                          ],
                                                                                        "iter_mut",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.deref (|
                                                                                            M.call_closure (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&mut")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "slice")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::vec::Vec")
                                                                                                        []
                                                                                                        [
                                                                                                          Challenge;
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ]
                                                                                                    ]
                                                                                                ],
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::deref::DerefMut",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::vec::Vec")
                                                                                                      []
                                                                                                      [
                                                                                                        Challenge;
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ],
                                                                                                [],
                                                                                                [],
                                                                                                "deref_mut",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.MutRef,
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      opened_values_for_mat
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.closure
                                                                                      (fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          match γ
                                                                                          with
                                                                                          | [ α0
                                                                                              ] =>
                                                                                            ltac:(M.monadic
                                                                                              (M.match_operator (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "*")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.function
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&mut")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "alloc::vec::Vec")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Challenge;
                                                                                                                    Ty.path
                                                                                                                      "alloc::alloc::Global"
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ]
                                                                                                      ]
                                                                                                      (Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::vec::Vec")
                                                                                                        []
                                                                                                        [
                                                                                                          Challenge;
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ])
                                                                                                  ],
                                                                                                M.alloc (|
                                                                                                  α0
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (let
                                                                                                            opened_values_for_point :=
                                                                                                        M.copy (|
                                                                                                          γ
                                                                                                        |) in
                                                                                                      M.read (|
                                                                                                        let~
                                                                                                              split :
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "*")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "usize"
                                                                                                              ] :=
                                                                                                          M.alloc (|
                                                                                                            M.call_closure (|
                                                                                                              Ty.path
                                                                                                                "usize",
                                                                                                              BinOp.Wrap.sub,
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  Ty.path
                                                                                                                    "usize",
                                                                                                                  M.get_associated_function (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "alloc::vec::Vec")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Challenge;
                                                                                                                        Ty.path
                                                                                                                          "alloc::alloc::Global"
                                                                                                                      ],
                                                                                                                    "len",
                                                                                                                    [],
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.borrow (|
                                                                                                                      Pointer.Kind.Ref,
                                                                                                                      M.deref (|
                                                                                                                        M.read (|
                                                                                                                          opened_values_for_point
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |);
                                                                                                                M.read (|
                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                    M.deref (|
                                                                                                                      M.read (|
                                                                                                                        self
                                                                                                                      |)
                                                                                                                    |),
                                                                                                                    "p3_fri::hiding_pcs::HidingFriPcs",
                                                                                                                    "num_random_codewords"
                                                                                                                  |)
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          |) in
                                                                                                        M.alloc (|
                                                                                                          M.call_closure (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              []
                                                                                                              [
                                                                                                                Challenge;
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ],
                                                                                                            M.get_trait_method (|
                                                                                                              "core::iter::traits::iterator::Iterator",
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::vec::drain::Drain")
                                                                                                                []
                                                                                                                [
                                                                                                                  Challenge;
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ],
                                                                                                              [],
                                                                                                              [],
                                                                                                              "collect",
                                                                                                              [],
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "alloc::vec::Vec")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Challenge;
                                                                                                                    Ty.path
                                                                                                                      "alloc::alloc::Global"
                                                                                                                  ]
                                                                                                              ]
                                                                                                            |),
                                                                                                            [
                                                                                                              M.call_closure (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "alloc::vec::drain::Drain")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Challenge;
                                                                                                                    Ty.path
                                                                                                                      "alloc::alloc::Global"
                                                                                                                  ],
                                                                                                                M.get_associated_function (|
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "alloc::vec::Vec")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Challenge;
                                                                                                                      Ty.path
                                                                                                                        "alloc::alloc::Global"
                                                                                                                    ],
                                                                                                                  "drain",
                                                                                                                  [],
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "core::ops::range::RangeFrom")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "usize"
                                                                                                                      ]
                                                                                                                  ]
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.MutRef,
                                                                                                                    M.deref (|
                                                                                                                      M.read (|
                                                                                                                        opened_values_for_point
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |);
                                                                                                                  Value.StructRecord
                                                                                                                    "core::ops::range::RangeFrom"
                                                                                                                    [
                                                                                                                      ("start",
                                                                                                                        M.read (|
                                                                                                                          split
                                                                                                                        |))
                                                                                                                    ]
                                                                                                                ]
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)))
                                                                                                ]
                                                                                              |)))
                                                                                          | _ =>
                                                                                            M.impossible
                                                                                              "wrong number of arguments"
                                                                                          end))
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (|
                      Value.Tuple
                        [
                          M.read (| inner_opened_values |);
                          Value.Tuple [ M.read (| opened_values_rand |); M.read (| inner_proof |) ]
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn verify(
            &self,
            // For each round:
            mut rounds: Vec<(
                Self::Commitment,
                // for each matrix:
                Vec<(
                    // its domain,
                    Self::Domain,
                    // for each point:
                    Vec<(
                        // the point,
                        Challenge,
                        // values at the point
                        Vec<Challenge>,
                    )>,
                )>,
            )>,
            proof: &Self::Proof,
            challenger: &mut Challenger,
        ) -> Result<(), Self::Error> {
            let (opened_values_for_rand_cws, inner_proof) = proof;
            // Now we merge `opened_values_for_rand_cws` into the opened values in `rounds`, undoing
            // the split that we did in `open`, to get a complete set of opened values for the inner PCS
            // to check.
            for (round, rand_round) in zip_eq(
                rounds.iter_mut(),
                opened_values_for_rand_cws,
                FriError::InvalidProofShape,
            )? {
                for (mat, rand_mat) in
                    zip_eq(round.1.iter_mut(), rand_round, FriError::InvalidProofShape)?
                {
                    for (point, rand_point) in
                        zip_eq(mat.1.iter_mut(), rand_mat, FriError::InvalidProofShape)?
                    {
                        point.1.extend(rand_point);
                    }
                }
            }
            self.inner.verify(rounds, inner_proof, challenger)
        }
    *)
    Definition verify
        (Val Dft InputMmcs FriMmcs Challenge Challenger R : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val Dft InputMmcs FriMmcs Challenge Challenger R in
      match ε, τ, α with
      | [], [], [ self; rounds; proof; challenger ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rounds := M.alloc (| rounds |) in
          let proof := M.alloc (| proof |) in
          let challenger := M.alloc (| challenger |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.tuple [];
                Ty.associated_in_trait
                  "p3_commit::pcs::Pcs"
                  []
                  [ Challenge; Challenger ]
                  (Ty.apply
                    (Ty.path "p3_fri::hiding_pcs::HidingFriPcs")
                    []
                    [ Val; Dft; InputMmcs; FriMmcs; R ])
                  "Error"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.tuple [];
                          Ty.apply
                            (Ty.path "p3_fri::verifier::FriError")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::mmcs::Mmcs"
                                []
                                [ Challenge ]
                                FriMmcs
                                "Error";
                              Ty.associated_in_trait
                                "p3_commit::mmcs::Mmcs"
                                []
                                [ Val ]
                                InputMmcs
                                "Error"
                            ]
                        ]
                    ],
                  proof,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let opened_values_for_rand_cws := M.alloc (| γ1_0 |) in
                        let inner_proof := M.alloc (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.use
                            (M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "p3_util::zip_eq::ZipEq")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::IterMut")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::mmcs::Mmcs"
                                                []
                                                [ Val ]
                                                InputMmcs
                                                "Commitment";
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                        []
                                                        [ Val ];
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Challenge;
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Challenge;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ Challenge; Ty.path "alloc::alloc::Global" ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    Ty.apply
                                      (Ty.path "p3_util::zip_eq::ZipEq")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::IterMut")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::mmcs::Mmcs"
                                                  []
                                                  [ Val ]
                                                  InputMmcs
                                                  "Commitment";
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                          []
                                                          [ Val ];
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Challenge;
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Challenge;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Challenge; Ty.path "alloc::alloc::Global" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ],
                                    [],
                                    [],
                                    "into_iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.match_operator (|
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_util::zip_eq::ZipEq")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::IterMut")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::mmcs::Mmcs"
                                                          []
                                                          [ Val ]
                                                          InputMmcs
                                                          "Commitment";
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                  []
                                                                  [ Val ];
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Challenge;
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Challenge;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Challenge;
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ]
                                          ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::ops::control_flow::ControlFlow")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.apply
                                                      (Ty.path "p3_fri::verifier::FriError")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::mmcs::Mmcs"
                                                          []
                                                          [ Challenge ]
                                                          FriMmcs
                                                          "Error";
                                                        Ty.associated_in_trait
                                                          "p3_commit::mmcs::Mmcs"
                                                          []
                                                          [ Val ]
                                                          InputMmcs
                                                          "Error"
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "p3_util::zip_eq::ZipEq")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::mmcs::Mmcs"
                                                              []
                                                              [ Val ]
                                                              InputMmcs
                                                              "Commitment";
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                      []
                                                                      [ Val ];
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Challenge;
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Challenge;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Challenge;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_util::zip_eq::ZipEq")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::IterMut")
                                                        []
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::mmcs::Mmcs"
                                                                []
                                                                [ Val ]
                                                                InputMmcs
                                                                "Commitment";
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                        []
                                                                        [ Val ];
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Challenge;
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Challenge;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Challenge;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "p3_fri::verifier::FriError")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::mmcs::Mmcs"
                                                        []
                                                        [ Challenge ]
                                                        FriMmcs
                                                        "Error";
                                                      Ty.associated_in_trait
                                                        "p3_commit::mmcs::Mmcs"
                                                        []
                                                        [ Val ]
                                                        InputMmcs
                                                        "Error"
                                                    ]
                                                ],
                                              [],
                                              [],
                                              "branch",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_util::zip_eq::ZipEq")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::IterMut")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_commit::mmcs::Mmcs"
                                                                  []
                                                                  [ Val ]
                                                                  InputMmcs
                                                                  "Commitment";
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                          []
                                                                          [ Val ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Challenge;
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Challenge;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "p3_fri::verifier::FriError")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::mmcs::Mmcs"
                                                          []
                                                          [ Challenge ]
                                                          FriMmcs
                                                          "Error";
                                                        Ty.associated_in_trait
                                                          "p3_commit::mmcs::Mmcs"
                                                          []
                                                          [ Val ]
                                                          InputMmcs
                                                          "Error"
                                                      ]
                                                  ],
                                                M.get_function (|
                                                  "p3_util::zip_eq::zip_eq",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::mmcs::Mmcs"
                                                              []
                                                              [ Val ]
                                                              InputMmcs
                                                              "Commitment";
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                      []
                                                                      [ Val ];
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Challenge;
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Challenge;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::mmcs::Mmcs"
                                                              []
                                                              [ Val ]
                                                              InputMmcs
                                                              "Commitment";
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                      []
                                                                      [ Val ];
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Challenge;
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Challenge;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Challenge;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Challenge;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "p3_fri::verifier::FriError")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::mmcs::Mmcs"
                                                          []
                                                          [ Challenge ]
                                                          FriMmcs
                                                          "Error";
                                                        Ty.associated_in_trait
                                                          "p3_commit::mmcs::Mmcs"
                                                          []
                                                          [ Val ]
                                                          InputMmcs
                                                          "Error"
                                                      ]
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::mmcs::Mmcs"
                                                              []
                                                              [ Val ]
                                                              InputMmcs
                                                              "Commitment";
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                      []
                                                                      [ Val ];
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Challenge;
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Challenge;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::mmcs::Mmcs"
                                                                []
                                                                [ Val ]
                                                                InputMmcs
                                                                "Commitment";
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                        []
                                                                        [ Val ];
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Challenge;
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Challenge;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ],
                                                      "iter_mut",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_commit::mmcs::Mmcs"
                                                                          []
                                                                          [ Val ]
                                                                          InputMmcs
                                                                          "Commitment";
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                  []
                                                                                  [ Val ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Challenge;
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::DerefMut",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::mmcs::Mmcs"
                                                                        []
                                                                        [ Val ]
                                                                        InputMmcs
                                                                        "Commitment";
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                []
                                                                                [ Val ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Challenge;
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Challenge;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              [],
                                                              "deref_mut",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                rounds
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |);
                                                  M.read (| opened_values_for_rand_cws |);
                                                  Value.StructTuple
                                                    "p3_fri::verifier::FriError::InvalidProofShape"
                                                    []
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.tuple [];
                                                            Ty.apply
                                                              (Ty.path "p3_fri::verifier::FriError")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_commit::mmcs::Mmcs"
                                                                  []
                                                                  [ Challenge ]
                                                                  FriMmcs
                                                                  "Error";
                                                                Ty.associated_in_trait
                                                                  "p3_commit::mmcs::Mmcs"
                                                                  []
                                                                  [ Val ]
                                                                  InputMmcs
                                                                  "Error"
                                                              ]
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.tuple [];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_fri::verifier::FriError")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::mmcs::Mmcs"
                                                                    []
                                                                    [ Challenge ]
                                                                    FriMmcs
                                                                    "Error";
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::mmcs::Mmcs"
                                                                    []
                                                                    [ Val ]
                                                                    InputMmcs
                                                                    "Error"
                                                                ]
                                                            ],
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_fri::verifier::FriError")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::mmcs::Mmcs"
                                                                      []
                                                                      [ Challenge ]
                                                                      FriMmcs
                                                                      "Error";
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::mmcs::Mmcs"
                                                                      []
                                                                      [ Val ]
                                                                      InputMmcs
                                                                      "Error"
                                                                  ]
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let iter := M.copy (| γ |) in
                                    M.loop (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_commit::mmcs::Mmcs"
                                                                  []
                                                                  [ Val ]
                                                                  InputMmcs
                                                                  "Commitment";
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                          []
                                                                          [ Val ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Challenge;
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Challenge;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "p3_util::zip_eq::ZipEq")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::IterMut")
                                                        []
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::mmcs::Mmcs"
                                                                []
                                                                [ Val ]
                                                                InputMmcs
                                                                "Commitment";
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                        []
                                                                        [ Val ];
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Challenge;
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Challenge;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Challenge;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (| M.read (| M.break (||) |) |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let γ1_0 :=
                                                    M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                  let γ1_1 :=
                                                    M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                  let round := M.copy (| γ1_0 |) in
                                                  let rand_round := M.copy (| γ1_1 |) in
                                                  M.use
                                                    (M.match_operator (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "p3_util::zip_eq::ZipEq")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                        []
                                                                        [ Val ];
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Challenge;
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Challenge;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ];
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Challenge;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::collect::IntoIterator",
                                                            Ty.apply
                                                              (Ty.path "p3_util::zip_eq::ZipEq")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                          []
                                                                          [ Val ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Challenge;
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Challenge;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ]
                                                              ],
                                                            [],
                                                            [],
                                                            "into_iter",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.match_operator (|
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_util::zip_eq::ZipEq")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::IterMut")
                                                                          []
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                  []
                                                                                  [ Val ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Challenge;
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ],
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::ops::control_flow::ControlFlow")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_fri::verifier::FriError")
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::mmcs::Mmcs"
                                                                                  []
                                                                                  [ Challenge ]
                                                                                  FriMmcs
                                                                                  "Error";
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::mmcs::Mmcs"
                                                                                  []
                                                                                  [ Val ]
                                                                                  InputMmcs
                                                                                  "Error"
                                                                              ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_util::zip_eq::ZipEq")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::IterMut")
                                                                              []
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                      []
                                                                                      [ Val ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                Challenge;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ]
                                                                                          ];
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ]
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Challenge;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::Try",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_util::zip_eq::ZipEq")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::IterMut")
                                                                                []
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                        []
                                                                                        [ Val ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Challenge;
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  Challenge;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ]
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ]
                                                                                ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::Iter")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Challenge;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ]
                                                                                ]
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_fri::verifier::FriError")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_commit::mmcs::Mmcs"
                                                                                []
                                                                                [ Challenge ]
                                                                                FriMmcs
                                                                                "Error";
                                                                              Ty.associated_in_trait
                                                                                "p3_commit::mmcs::Mmcs"
                                                                                []
                                                                                [ Val ]
                                                                                InputMmcs
                                                                                "Error"
                                                                            ]
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "branch",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_util::zip_eq::ZipEq")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::IterMut")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                          []
                                                                                          [ Val ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Challenge;
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  []
                                                                                                  [
                                                                                                    Challenge;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ];
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ]
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::Iter")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ];
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ]
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_fri::verifier::FriError")
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::mmcs::Mmcs"
                                                                                  []
                                                                                  [ Challenge ]
                                                                                  FriMmcs
                                                                                  "Error";
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::mmcs::Mmcs"
                                                                                  []
                                                                                  [ Val ]
                                                                                  InputMmcs
                                                                                  "Error"
                                                                              ]
                                                                          ],
                                                                        M.get_function (|
                                                                          "p3_util::zip_eq::zip_eq",
                                                                          [],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::IterMut")
                                                                              []
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                      []
                                                                                      [ Val ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                Challenge;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ]
                                                                                          ];
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ]
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::IterMut")
                                                                              []
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                      []
                                                                                      [ Val ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                Challenge;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ]
                                                                                          ];
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ]
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ];
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Challenge;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_fri::verifier::FriError")
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::mmcs::Mmcs"
                                                                                  []
                                                                                  [ Challenge ]
                                                                                  FriMmcs
                                                                                  "Error";
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::mmcs::Mmcs"
                                                                                  []
                                                                                  [ Val ]
                                                                                  InputMmcs
                                                                                  "Error"
                                                                              ]
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::IterMut")
                                                                              []
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                      []
                                                                                      [ Val ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                Challenge;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ]
                                                                                          ];
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                        []
                                                                                        [ Val ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Challenge;
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  Challenge;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ]
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ]
                                                                                ],
                                                                              "iter_mut",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "&mut")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                                  []
                                                                                                  [
                                                                                                    Val
                                                                                                  ];
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Challenge;
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          []
                                                                                                          [
                                                                                                            Challenge;
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::deref::DerefMut",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                                []
                                                                                                [
                                                                                                  Val
                                                                                                ];
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Challenge;
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::vec::Vec")
                                                                                                        []
                                                                                                        [
                                                                                                          Challenge;
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ]
                                                                                                    ];
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ]
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      [],
                                                                                      [],
                                                                                      "deref_mut",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.SubPointer.get_tuple_field (|
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              round
                                                                                            |)
                                                                                          |),
                                                                                          1
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.read (| rand_round |);
                                                                          Value.StructTuple
                                                                            "p3_fri::verifier::FriError::InvalidProofShape"
                                                                            []
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "core::ops::control_flow::ControlFlow::Break",
                                                                          0
                                                                        |) in
                                                                      let residual :=
                                                                        M.copy (| γ0_0 |) in
                                                                      M.alloc (|
                                                                        M.never_to_any (|
                                                                          M.read (|
                                                                            M.return_ (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple [];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "p3_fri::verifier::FriError")
                                                                                      []
                                                                                      [
                                                                                        Ty.associated_in_trait
                                                                                          "p3_commit::mmcs::Mmcs"
                                                                                          []
                                                                                          [
                                                                                            Challenge
                                                                                          ]
                                                                                          FriMmcs
                                                                                          "Error";
                                                                                        Ty.associated_in_trait
                                                                                          "p3_commit::mmcs::Mmcs"
                                                                                          []
                                                                                          [ Val ]
                                                                                          InputMmcs
                                                                                          "Error"
                                                                                      ]
                                                                                  ],
                                                                                M.get_trait_method (|
                                                                                  "core::ops::try_trait::FromResidual",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    []
                                                                                    [
                                                                                      Ty.tuple [];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "p3_fri::verifier::FriError")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_commit::mmcs::Mmcs"
                                                                                            []
                                                                                            [
                                                                                              Challenge
                                                                                            ]
                                                                                            FriMmcs
                                                                                            "Error";
                                                                                          Ty.associated_in_trait
                                                                                            "p3_commit::mmcs::Mmcs"
                                                                                            []
                                                                                            [ Val ]
                                                                                            InputMmcs
                                                                                            "Error"
                                                                                        ]
                                                                                    ],
                                                                                  [],
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::result::Result")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "core::convert::Infallible";
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "p3_fri::verifier::FriError")
                                                                                          []
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "p3_commit::mmcs::Mmcs"
                                                                                              []
                                                                                              [
                                                                                                Challenge
                                                                                              ]
                                                                                              FriMmcs
                                                                                              "Error";
                                                                                            Ty.associated_in_trait
                                                                                              "p3_commit::mmcs::Mmcs"
                                                                                              []
                                                                                              [ Val
                                                                                              ]
                                                                                              InputMmcs
                                                                                              "Error"
                                                                                          ]
                                                                                      ]
                                                                                  ],
                                                                                  "from_residual",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    residual
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                                          0
                                                                        |) in
                                                                      let val :=
                                                                        M.copy (| γ0_0 |) in
                                                                      val))
                                                                ]
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let iter := M.copy (| γ |) in
                                                            M.loop (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.tuple [] ],
                                                              ltac:(M.monadic
                                                                (let~ _ :
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [ Ty.tuple [] ] :=
                                                                  M.match_operator (|
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [ Ty.tuple [] ],
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&mut")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                          []
                                                                                          [ Val ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Challenge;
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  []
                                                                                                  [
                                                                                                    Challenge;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ];
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ]
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ];
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_util::zip_eq::ZipEq")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::IterMut")
                                                                                []
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                        []
                                                                                        [ Val ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Challenge;
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  Challenge;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ]
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ]
                                                                                ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::Iter")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Challenge;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ]
                                                                                ]
                                                                            ],
                                                                          [],
                                                                          [],
                                                                          "next",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                iter
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let _ :=
                                                                            M.is_struct_tuple (|
                                                                              γ,
                                                                              "core::option::Option::None"
                                                                            |) in
                                                                          M.alloc (|
                                                                            M.never_to_any (|
                                                                              M.read (|
                                                                                M.break (||)
                                                                              |)
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              γ,
                                                                              "core::option::Option::Some",
                                                                              0
                                                                            |) in
                                                                          let γ1_0 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ0_0,
                                                                              0
                                                                            |) in
                                                                          let γ1_1 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ0_0,
                                                                              1
                                                                            |) in
                                                                          let mat :=
                                                                            M.copy (| γ1_0 |) in
                                                                          let rand_mat :=
                                                                            M.copy (| γ1_1 |) in
                                                                          M.use
                                                                            (M.match_operator (|
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [ Ty.tuple [] ],
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "p3_util::zip_eq::ZipEq")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::IterMut")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Challenge;
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  Challenge;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ]
                                                                                            ]
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            []
                                                                                            [
                                                                                              Challenge;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ]
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::iter::traits::collect::IntoIterator",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "p3_util::zip_eq::ZipEq")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::slice::iter::IterMut")
                                                                                          []
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Challenge;
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  []
                                                                                                  [
                                                                                                    Challenge;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ]
                                                                                          ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::slice::iter::Iter")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                Challenge;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ]
                                                                                          ]
                                                                                      ],
                                                                                    [],
                                                                                    [],
                                                                                    "into_iter",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.match_operator (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "*")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "p3_util::zip_eq::ZipEq")
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::slice::iter::IterMut")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Challenge;
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          []
                                                                                                          [
                                                                                                            Challenge;
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ]
                                                                                                      ]
                                                                                                  ];
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::slice::iter::Iter")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::vec::Vec")
                                                                                                      []
                                                                                                      [
                                                                                                        Challenge;
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                          ],
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::ops::control_flow::ControlFlow")
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "core::convert::Infallible";
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "p3_fri::verifier::FriError")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.associated_in_trait
                                                                                                          "p3_commit::mmcs::Mmcs"
                                                                                                          []
                                                                                                          [
                                                                                                            Challenge
                                                                                                          ]
                                                                                                          FriMmcs
                                                                                                          "Error";
                                                                                                        Ty.associated_in_trait
                                                                                                          "p3_commit::mmcs::Mmcs"
                                                                                                          []
                                                                                                          [
                                                                                                            Val
                                                                                                          ]
                                                                                                          InputMmcs
                                                                                                          "Error"
                                                                                                      ]
                                                                                                  ];
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "p3_util::zip_eq::ZipEq")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::IterMut")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Challenge;
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              []
                                                                                                              [
                                                                                                                Challenge;
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ]
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::Iter")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          []
                                                                                                          [
                                                                                                            Challenge;
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                              ],
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::try_trait::Try",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::result::Result")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "p3_util::zip_eq::ZipEq")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::IterMut")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            [
                                                                                                              Challenge;
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::vec::Vec")
                                                                                                                []
                                                                                                                [
                                                                                                                  Challenge;
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ]
                                                                                                            ]
                                                                                                        ];
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::Iter")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            []
                                                                                                            [
                                                                                                              Challenge;
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ]
                                                                                                        ]
                                                                                                    ];
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "p3_fri::verifier::FriError")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "p3_commit::mmcs::Mmcs"
                                                                                                        []
                                                                                                        [
                                                                                                          Challenge
                                                                                                        ]
                                                                                                        FriMmcs
                                                                                                        "Error";
                                                                                                      Ty.associated_in_trait
                                                                                                        "p3_commit::mmcs::Mmcs"
                                                                                                        []
                                                                                                        [
                                                                                                          Val
                                                                                                        ]
                                                                                                        InputMmcs
                                                                                                        "Error"
                                                                                                    ]
                                                                                                ],
                                                                                              [],
                                                                                              [],
                                                                                              "branch",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "p3_util::zip_eq::ZipEq")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::slice::iter::IterMut")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.tuple
                                                                                                              [
                                                                                                                Challenge;
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "alloc::vec::Vec")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Challenge;
                                                                                                                    Ty.path
                                                                                                                      "alloc::alloc::Global"
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ];
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::slice::iter::Iter")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              []
                                                                                                              [
                                                                                                                Challenge;
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ]
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "p3_fri::verifier::FriError")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.associated_in_trait
                                                                                                          "p3_commit::mmcs::Mmcs"
                                                                                                          []
                                                                                                          [
                                                                                                            Challenge
                                                                                                          ]
                                                                                                          FriMmcs
                                                                                                          "Error";
                                                                                                        Ty.associated_in_trait
                                                                                                          "p3_commit::mmcs::Mmcs"
                                                                                                          []
                                                                                                          [
                                                                                                            Val
                                                                                                          ]
                                                                                                          InputMmcs
                                                                                                          "Error"
                                                                                                      ]
                                                                                                  ],
                                                                                                M.get_function (|
                                                                                                  "p3_util::zip_eq::zip_eq",
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::IterMut")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Challenge;
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              []
                                                                                                              [
                                                                                                                Challenge;
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ]
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::IterMut")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Challenge;
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              []
                                                                                                              [
                                                                                                                Challenge;
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ]
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              []
                                                                                                              [
                                                                                                                Challenge;
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ];
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::Iter")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          []
                                                                                                          [
                                                                                                            Challenge;
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "p3_fri::verifier::FriError")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.associated_in_trait
                                                                                                          "p3_commit::mmcs::Mmcs"
                                                                                                          []
                                                                                                          [
                                                                                                            Challenge
                                                                                                          ]
                                                                                                          FriMmcs
                                                                                                          "Error";
                                                                                                        Ty.associated_in_trait
                                                                                                          "p3_commit::mmcs::Mmcs"
                                                                                                          []
                                                                                                          [
                                                                                                            Val
                                                                                                          ]
                                                                                                          InputMmcs
                                                                                                          "Error"
                                                                                                      ]
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.call_closure (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::IterMut")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Challenge;
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              []
                                                                                                              [
                                                                                                                Challenge;
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ]
                                                                                                          ]
                                                                                                      ],
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "slice")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            [
                                                                                                              Challenge;
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::vec::Vec")
                                                                                                                []
                                                                                                                [
                                                                                                                  Challenge;
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ]
                                                                                                            ]
                                                                                                        ],
                                                                                                      "iter_mut",
                                                                                                      [],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.MutRef,
                                                                                                        M.deref (|
                                                                                                          M.call_closure (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&mut")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "slice")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.tuple
                                                                                                                      [
                                                                                                                        Challenge;
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "alloc::vec::Vec")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Challenge;
                                                                                                                            Ty.path
                                                                                                                              "alloc::alloc::Global"
                                                                                                                          ]
                                                                                                                      ]
                                                                                                                  ]
                                                                                                              ],
                                                                                                            M.get_trait_method (|
                                                                                                              "core::ops::deref::DerefMut",
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::vec::Vec")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.tuple
                                                                                                                    [
                                                                                                                      Challenge;
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "alloc::vec::Vec")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Challenge;
                                                                                                                          Ty.path
                                                                                                                            "alloc::alloc::Global"
                                                                                                                        ]
                                                                                                                    ];
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ],
                                                                                                              [],
                                                                                                              [],
                                                                                                              "deref_mut",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.MutRef,
                                                                                                                M.SubPointer.get_tuple_field (|
                                                                                                                  M.deref (|
                                                                                                                    M.read (|
                                                                                                                      mat
                                                                                                                    |)
                                                                                                                  |),
                                                                                                                  1
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    ]
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    rand_mat
                                                                                                  |);
                                                                                                  Value.StructTuple
                                                                                                    "p3_fri::verifier::FriError::InvalidProofShape"
                                                                                                    []
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |),
                                                                                        [
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ0_0 :=
                                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                                  γ,
                                                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                                                  0
                                                                                                |) in
                                                                                              let
                                                                                                    residual :=
                                                                                                M.copy (|
                                                                                                  γ0_0
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                M.never_to_any (|
                                                                                                  M.read (|
                                                                                                    M.return_ (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::result::Result")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.tuple
                                                                                                              [];
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "p3_fri::verifier::FriError")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.associated_in_trait
                                                                                                                  "p3_commit::mmcs::Mmcs"
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Challenge
                                                                                                                  ]
                                                                                                                  FriMmcs
                                                                                                                  "Error";
                                                                                                                Ty.associated_in_trait
                                                                                                                  "p3_commit::mmcs::Mmcs"
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Val
                                                                                                                  ]
                                                                                                                  InputMmcs
                                                                                                                  "Error"
                                                                                                              ]
                                                                                                          ],
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::try_trait::FromResidual",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::result::Result")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [];
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "p3_fri::verifier::FriError")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.associated_in_trait
                                                                                                                    "p3_commit::mmcs::Mmcs"
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Challenge
                                                                                                                    ]
                                                                                                                    FriMmcs
                                                                                                                    "Error";
                                                                                                                  Ty.associated_in_trait
                                                                                                                    "p3_commit::mmcs::Mmcs"
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Val
                                                                                                                    ]
                                                                                                                    InputMmcs
                                                                                                                    "Error"
                                                                                                                ]
                                                                                                            ],
                                                                                                          [],
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::result::Result")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "core::convert::Infallible";
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "p3_fri::verifier::FriError")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.associated_in_trait
                                                                                                                      "p3_commit::mmcs::Mmcs"
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Challenge
                                                                                                                      ]
                                                                                                                      FriMmcs
                                                                                                                      "Error";
                                                                                                                    Ty.associated_in_trait
                                                                                                                      "p3_commit::mmcs::Mmcs"
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Val
                                                                                                                      ]
                                                                                                                      InputMmcs
                                                                                                                      "Error"
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ],
                                                                                                          "from_residual",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            residual
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              |)));
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ0_0 :=
                                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                                  γ,
                                                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                                                  0
                                                                                                |) in
                                                                                              let
                                                                                                    val :=
                                                                                                M.copy (|
                                                                                                  γ0_0
                                                                                                |) in
                                                                                              val))
                                                                                        ]
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let iter :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.loop (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "*")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            []
                                                                                        ],
                                                                                      ltac:(M.monadic
                                                                                        (let~ _ :
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "*")
                                                                                              []
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  []
                                                                                              ] :=
                                                                                          M.match_operator (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "*")
                                                                                              []
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  []
                                                                                              ],
                                                                                            M.alloc (|
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::option::Option")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&mut")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.tuple
                                                                                                              [
                                                                                                                Challenge;
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "alloc::vec::Vec")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Challenge;
                                                                                                                    Ty.path
                                                                                                                      "alloc::alloc::Global"
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ];
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              []
                                                                                                              [
                                                                                                                Challenge;
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ]
                                                                                                          ]
                                                                                                      ]
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "p3_util::zip_eq::ZipEq")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::IterMut")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            [
                                                                                                              Challenge;
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::vec::Vec")
                                                                                                                []
                                                                                                                [
                                                                                                                  Challenge;
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ]
                                                                                                            ]
                                                                                                        ];
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::Iter")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            []
                                                                                                            [
                                                                                                              Challenge;
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ]
                                                                                                        ]
                                                                                                    ],
                                                                                                  [],
                                                                                                  [],
                                                                                                  "next",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.MutRef,
                                                                                                    M.deref (|
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.MutRef,
                                                                                                        iter
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |),
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let
                                                                                                        _ :=
                                                                                                    M.is_struct_tuple (|
                                                                                                      γ,
                                                                                                      "core::option::Option::None"
                                                                                                    |) in
                                                                                                  M.alloc (|
                                                                                                    M.never_to_any (|
                                                                                                      M.read (|
                                                                                                        M.break (||)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)));
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let
                                                                                                        γ0_0 :=
                                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                                      γ,
                                                                                                      "core::option::Option::Some",
                                                                                                      0
                                                                                                    |) in
                                                                                                  let
                                                                                                        γ1_0 :=
                                                                                                    M.SubPointer.get_tuple_field (|
                                                                                                      γ0_0,
                                                                                                      0
                                                                                                    |) in
                                                                                                  let
                                                                                                        γ1_1 :=
                                                                                                    M.SubPointer.get_tuple_field (|
                                                                                                      γ0_0,
                                                                                                      1
                                                                                                    |) in
                                                                                                  let
                                                                                                        point :=
                                                                                                    M.copy (|
                                                                                                      γ1_0
                                                                                                    |) in
                                                                                                  let
                                                                                                        rand_point :=
                                                                                                    M.copy (|
                                                                                                      γ1_1
                                                                                                    |) in
                                                                                                  let~
                                                                                                        _ :
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "*")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            []
                                                                                                        ] :=
                                                                                                    M.alloc (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.tuple
                                                                                                          [],
                                                                                                        M.get_trait_method (|
                                                                                                          "core::iter::traits::collect::Extend",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            []
                                                                                                            [
                                                                                                              Challenge;
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ],
                                                                                                          [],
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Challenge
                                                                                                              ]
                                                                                                          ],
                                                                                                          "extend",
                                                                                                          [],
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "alloc::vec::Vec")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Challenge;
                                                                                                                    Ty.path
                                                                                                                      "alloc::alloc::Global"
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ]
                                                                                                        |),
                                                                                                        [
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.MutRef,
                                                                                                            M.SubPointer.get_tuple_field (|
                                                                                                              M.deref (|
                                                                                                                M.read (|
                                                                                                                  point
                                                                                                                |)
                                                                                                              |),
                                                                                                              1
                                                                                                            |)
                                                                                                          |);
                                                                                                          M.read (|
                                                                                                            rand_point
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |) in
                                                                                                  M.alloc (|
                                                                                                    Value.Tuple
                                                                                                      []
                                                                                                  |)))
                                                                                            ]
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |)))
                                                                                    |)))
                                                                              ]
                                                                            |))))
                                                                    ]
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)))
                                                            |)))
                                                      ]
                                                    |))))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                    |)))
                              ]
                            |)) in
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.apply
                                  (Ty.path "p3_fri::verifier::FriError")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::mmcs::Mmcs"
                                      []
                                      [ Challenge ]
                                      FriMmcs
                                      "Error";
                                    Ty.associated_in_trait
                                      "p3_commit::mmcs::Mmcs"
                                      []
                                      [ Val ]
                                      InputMmcs
                                      "Error"
                                  ]
                              ],
                            M.get_trait_method (|
                              "p3_commit::pcs::Pcs",
                              Ty.apply
                                (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                                []
                                [ Val; Dft; InputMmcs; FriMmcs ],
                              [],
                              [ Challenge; Challenger ],
                              "verify",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "p3_fri::hiding_pcs::HidingFriPcs",
                                  "inner"
                                |)
                              |);
                              M.read (| rounds |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.read (| inner_proof |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (| M.read (| challenger |) |)
                              |)
                            ]
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Val Dft InputMmcs FriMmcs Challenge Challenger R : Ty.t),
      M.IsTraitInstance
        "p3_commit::pcs::Pcs"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Challenge; Challenger ]
        (Self Val Dft InputMmcs FriMmcs Challenge Challenger R)
        (* Instance *)
        [
          ("Domain", InstanceField.Ty (_Domain Val Dft InputMmcs FriMmcs Challenge Challenger R));
          ("Commitment",
            InstanceField.Ty (_Commitment Val Dft InputMmcs FriMmcs Challenge Challenger R));
          ("ProverData",
            InstanceField.Ty (_ProverData Val Dft InputMmcs FriMmcs Challenge Challenger R));
          ("EvaluationsOnDomain",
            InstanceField.Ty
              (_EvaluationsOnDomain Val Dft InputMmcs FriMmcs Challenge Challenger R));
          ("Proof", InstanceField.Ty (_Proof Val Dft InputMmcs FriMmcs Challenge Challenger R));
          ("Error", InstanceField.Ty (_Error Val Dft InputMmcs FriMmcs Challenge Challenger R));
          ("natural_domain_for_degree",
            InstanceField.Method
              (natural_domain_for_degree Val Dft InputMmcs FriMmcs Challenge Challenger R));
          ("commit",
            InstanceField.Method (commit Val Dft InputMmcs FriMmcs Challenge Challenger R));
          ("get_evaluations_on_domain",
            InstanceField.Method
              (get_evaluations_on_domain Val Dft InputMmcs FriMmcs Challenge Challenger R));
          ("open", InstanceField.Method (open Val Dft InputMmcs FriMmcs Challenge Challenger R));
          ("verify", InstanceField.Method (verify Val Dft InputMmcs FriMmcs Challenge Challenger R))
        ].
  End Impl_p3_commit_pcs_Pcs_where_p3_field_field_TwoAdicField_Val_where_rand_distr_distribution_Distribution_rand_distr_StandardUniform_Val_where_p3_dft_traits_TwoAdicSubgroupDft_Dft_Val_where_p3_commit_mmcs_Mmcs_InputMmcs_Val_where_p3_commit_mmcs_Mmcs_FriMmcs_Challenge_where_p3_field_field_TwoAdicField_Challenge_where_p3_field_field_ExtensionField_Challenge_Val_where_p3_challenger_FieldChallenger_Challenger_Val_where_p3_challenger_CanObserve_Challenger_associated_in_trait_p3_commit_mmcs_Mmcs__Challenge_FriMmcs_Commitment_where_p3_challenger_grinding_challenger_GrindingChallenger_Challenger_where_rand_rng_Rng_R_where_core_marker_Send_R_where_core_marker_Sync_R_Challenge_Challenger_for_p3_fri_hiding_pcs_HidingFriPcs_Val_Dft_InputMmcs_FriMmcs_R.
  
  (* #[instrument(level = "debug", skip_all)] *)
  Definition add_random_cols (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ Val; R ], [ mat; num_random_codewords; rng ] =>
      ltac:(M.monadic
        (let mat := M.alloc (| mat |) in
        let num_random_codewords := M.alloc (| num_random_codewords |) in
        let rng := M.alloc (| rng |) in
        M.catch_return
          (Ty.apply
            (Ty.path "p3_matrix::dense::DenseMatrix")
            []
            [ Val; Ty.apply (Ty.path "alloc::vec::Vec") [] [ Val; Ty.path "alloc::alloc::Global" ]
            ]) (|
          ltac:(M.monadic
            (M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] := M.alloc (| Value.Tuple [] |) in
              let __tracing_attr_span := M.copy (| Value.DeclaredButUndefined |) in
              let __tracing_attr_guard := M.copy (| Value.DeclaredButUndefined |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.path "tracing_core::metadata::Level",
                                      [],
                                      [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                      "le",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_associated_constant (|
                                          Ty.path "tracing_core::metadata::Level",
                                          "DEBUG",
                                          Ty.path "tracing_core::metadata::Level"
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "tracing::level_filters::STATIC_MAX_LEVEL",
                                          Ty.path "tracing_core::metadata::LevelFilter"
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "DEBUG",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing_core::metadata::LevelFilter",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                "current",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic (Value.Bool false))
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_span,
                              M.read (|
                                let~ interest :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [ Ty.path "tracing_core::subscriber::Interest" ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "never",
                                        [],
                                        []
                                      |),
                                      []
                                    |)
                                  |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.path "tracing::span::Span" ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              LogicalOp.and (|
                                                LogicalOp.and (|
                                                  LogicalOp.and (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialOrd",
                                                        Ty.path "tracing_core::metadata::Level",
                                                        [],
                                                        [
                                                          Ty.path
                                                            "tracing_core::metadata::LevelFilter"
                                                        ],
                                                        "le",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_associated_constant (|
                                                            Ty.path "tracing_core::metadata::Level",
                                                            "DEBUG",
                                                            Ty.path "tracing_core::metadata::Level"
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_constant (|
                                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          |)
                                                        |)
                                                      ]
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "tracing_core::metadata::Level",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          ],
                                                          "le",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_associated_constant (|
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              "DEBUG",
                                                              Ty.path
                                                                "tracing_core::metadata::Level"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  "current",
                                                                  [],
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.alloc (|
                                                          M.write (|
                                                            interest,
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                "interest",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "p3_fri::hiding_pcs::add_random_cols::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |) in
                                                      M.alloc (|
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              "is_never",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                interest
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)))
                                                |),
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_function (|
                                                      "tracing::__macro_support::__is_enabled",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "p3_fri::hiding_pcs::add_random_cols::__CALLSITE",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (| interest |)
                                                    ]
                                                  |)))
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ meta :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ]
                                              ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "tracing_core::metadata::Metadata" ],
                                              M.get_trait_method (|
                                                "tracing_core::callsite::Callsite",
                                                Ty.path "tracing_core::callsite::DefaultCallsite",
                                                [],
                                                [],
                                                "metadata",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.read (|
                                                      get_constant (|
                                                        "p3_fri::hiding_pcs::add_random_cols::__CALLSITE",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite"
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "tracing::span::Span",
                                            M.get_associated_function (|
                                              Ty.path "tracing::span::Span",
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| meta |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "tracing_core::field::ValueSet",
                                                        M.get_associated_function (|
                                                          Ty.path "tracing_core::field::FieldSet",
                                                          "value_set",
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 0 ]
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::Field"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("tracing_core::field::Value::Trait",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::FieldSet"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata",
                                                                  "fields",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| meta |) |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (| Value.Array [] |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let~ span :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "tracing::span::Span" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing::span::Span",
                                              M.get_function (|
                                                "tracing::__macro_support::__disabled_span",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::metadata::Metadata"
                                                        ],
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        [],
                                                        "metadata",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (|
                                                              get_constant (|
                                                                "p3_fri::hiding_pcs::add_random_cols::__CALLSITE",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::callsite::DefaultCallsite"
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (| Value.Tuple [] |) in
                                        span))
                                  ]
                                |)
                              |)
                            |)
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_guard,
                              M.call_closure (|
                                Ty.path "tracing::span::Entered",
                                M.get_associated_function (|
                                  Ty.path "tracing::span::Span",
                                  "enter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool false |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              let~ __tracing_attr_fake_return :
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Val;
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Val; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ] :=
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.loop (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                        ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      |)
                                    |)
                                  |)
                                |) in
                              M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ old_w : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "p3_matrix::Matrix",
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Val;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Val; Ty.path "alloc::alloc::Global" ]
                        ],
                      [],
                      [ Val ],
                      "width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                  |)
                |) in
              let~ new_w : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.add,
                    [ M.read (| old_w |); M.read (| num_random_codewords |) ]
                  |)
                |) in
              let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "p3_matrix::Matrix",
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Val;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Val; Ty.path "alloc::alloc::Global" ]
                        ],
                      [],
                      [ Val ],
                      "height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                  |)
                |) in
              let~ new_values :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Val; Ty.path "alloc::alloc::Global" ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ Val; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "p3_field::field::PrimeCharacteristicRing",
                      Val,
                      [],
                      [],
                      "zero_vec",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.mul,
                        [ M.read (| new_w |); M.read (| h |) ]
                      |)
                    ]
                  |)
                |) in
              let~ result :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Val;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Val; Ty.path "alloc::alloc::Global" ]
                        ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        Val;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Val; Ty.path "alloc::alloc::Global" ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Val;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Val; Ty.path "alloc::alloc::Global" ]
                        ],
                      "new",
                      [],
                      []
                    |),
                    [ M.read (| new_values |); M.read (| new_w |) ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        []
                        [ Ty.associated_unknown; Ty.associated_unknown ],
                      [],
                      [],
                      "for_each",
                      [],
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Val ] ];
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Val ] ]
                                  ]
                              ]
                          ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [ Ty.associated_unknown; Ty.associated_unknown ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.associated_unknown,
                          [],
                          [],
                          "zip",
                          [],
                          [ Ty.associated_unknown ]
                        |),
                        [
                          M.call_closure (|
                            Ty.associated_unknown,
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Val;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Val; Ty.path "alloc::alloc::Global" ]
                                ],
                              "rows_mut",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, result |) ]
                          |);
                          M.call_closure (|
                            Ty.associated_unknown,
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Val;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Val; Ty.path "alloc::alloc::Global" ]
                                ],
                              "row_slices",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [ Ty.apply (Ty.path "slice") [] [ Val ] ];
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.apply (Ty.path "slice") [] [ Val ] ]
                                                ]
                                            ]
                                        ]
                                        (Ty.tuple [])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let new_row := M.copy (| γ0_0 |) in
                                        let old_row := M.copy (| γ0_1 |) in
                                        M.read (|
                                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ Val ],
                                                  "copy_from_slice",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ Val ] ],
                                                        M.get_trait_method (|
                                                          "core::ops::index::IndexMut",
                                                          Ty.apply (Ty.path "slice") [] [ Val ],
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::ops::range::RangeTo")
                                                              []
                                                              [ Ty.path "usize" ]
                                                          ],
                                                          "index_mut",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (| M.read (| new_row |) |)
                                                          |);
                                                          Value.StructRecord
                                                            "core::ops::range::RangeTo"
                                                            [ ("end_", M.read (| old_w |)) ]
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| old_row |) |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::IterMut")
                                                    []
                                                    [ Val ],
                                                  [],
                                                  [],
                                                  "for_each",
                                                  [],
                                                  [
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [ Ty.apply (Ty.path "&mut") [] [ Val ] ]
                                                      ]
                                                      (Ty.tuple [])
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [ Val ],
                                                    M.get_associated_function (|
                                                      Ty.apply (Ty.path "slice") [] [ Val ],
                                                      "iter_mut",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [ Val ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::index::IndexMut",
                                                              Ty.apply (Ty.path "slice") [] [ Val ],
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::RangeFrom")
                                                                  []
                                                                  [ Ty.path "usize" ]
                                                              ],
                                                              "index_mut",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (| M.read (| new_row |) |)
                                                              |);
                                                              Value.StructRecord
                                                                "core::ops::range::RangeFrom"
                                                                [ ("start", M.read (| old_w |)) ]
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [ Val ]
                                                                        ]
                                                                    ]
                                                                    (Ty.tuple [])
                                                                ],
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let v := M.copy (| γ |) in
                                                                    M.write (|
                                                                      M.deref (| M.read (| v |) |),
                                                                      M.call_closure (|
                                                                        Val,
                                                                        M.get_trait_method (|
                                                                          "rand::rng::Rng",
                                                                          R,
                                                                          [],
                                                                          [],
                                                                          "random",
                                                                          [],
                                                                          [ Val ]
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            rng
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)))
                                                              ]
                                                            |)))
                                                        | _ =>
                                                          M.impossible "wrong number of arguments"
                                                        end))
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |) in
              result
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_add_random_cols :
    M.IsFunction.C "p3_fri::hiding_pcs::add_random_cols" add_random_cols.
  Admitted.
  Global Typeclasses Opaque add_random_cols.
End hiding_pcs.
