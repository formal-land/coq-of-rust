(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module verifier.
  (*
  Enum FriError
  {
    const_params := [];
    ty_params := [ "CommitMmcsErr"; "InputError" ];
    variants :=
      [
        {
          name := "InvalidProofShape";
          item := StructTuple [];
        };
        {
          name := "CommitPhaseMmcsError";
          item := StructTuple [ CommitMmcsErr ];
        };
        {
          name := "InputError";
          item := StructTuple [ InputError ];
        };
        {
          name := "FinalPolyMismatch";
          item := StructTuple [];
        };
        {
          name := "InvalidPowWitness";
          item := StructTuple [];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_FriError_InvalidProofShape :
    M.IsDiscriminant "p3_fri::verifier::FriError::InvalidProofShape" 0.
  Axiom IsDiscriminant_FriError_CommitPhaseMmcsError :
    M.IsDiscriminant "p3_fri::verifier::FriError::CommitPhaseMmcsError" 1.
  Axiom IsDiscriminant_FriError_InputError :
    M.IsDiscriminant "p3_fri::verifier::FriError::InputError" 2.
  Axiom IsDiscriminant_FriError_FinalPolyMismatch :
    M.IsDiscriminant "p3_fri::verifier::FriError::FinalPolyMismatch" 3.
  Axiom IsDiscriminant_FriError_InvalidPowWitness :
    M.IsDiscriminant "p3_fri::verifier::FriError::InvalidPowWitness" 4.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_CommitMmcsErr_where_core_fmt_Debug_InputError_for_p3_fri_verifier_FriError_CommitMmcsErr_InputError.
    Definition Self (CommitMmcsErr InputError : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_fri::verifier::FriError") [] [ CommitMmcsErr; InputError ].
    
    (* Debug *)
    Definition fmt
        (CommitMmcsErr InputError : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self CommitMmcsErr InputError in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ]
                ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "p3_fri::verifier::FriError::InvalidProofShape" |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "InvalidProofShape" |) |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_fri::verifier::FriError::CommitPhaseMmcsError",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "CommitPhaseMmcsError" |) |)
                          |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_fri::verifier::FriError::InputError",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "InputError" |) |) |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "p3_fri::verifier::FriError::FinalPolyMismatch" |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "FinalPolyMismatch" |) |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "p3_fri::verifier::FriError::InvalidPowWitness" |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "InvalidPowWitness" |) |)
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (CommitMmcsErr InputError : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self CommitMmcsErr InputError)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt CommitMmcsErr InputError)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_CommitMmcsErr_where_core_fmt_Debug_InputError_for_p3_fri_verifier_FriError_CommitMmcsErr_InputError.
  
  (*
  pub fn verify<G, Val, Challenge, M, Challenger>(
      g: &G,
      config: &FriConfig<M>,
      proof: &FriProof<Challenge, M, Challenger::Witness, G::InputProof>,
      challenger: &mut Challenger,
      open_input: impl Fn(
          usize,
          &G::InputProof,
      ) -> Result<Vec<(usize, Challenge)>, FriError<M::Error, G::InputError>>,
  ) -> Result<(), FriError<M::Error, G::InputError>>
  where
      Val: Field,
      Challenge: ExtensionField<Val> + TwoAdicField,
      M: Mmcs<Challenge>,
      Challenger: FieldChallenger<Val> + GrindingChallenger + CanObserve<M::Commitment>,
      G: FriGenericConfig<Challenge>,
  {
      let betas: Vec<Challenge> = proof
          .commit_phase_commits
          .iter()
          .map(|comm| {
              challenger.observe(comm.clone());
              challenger.sample_algebra_element()
          })
          .collect();
  
      // Observe all coefficients of the final polynomial.
      proof
          .final_poly
          .iter()
          .for_each(|x| challenger.observe_algebra_element( *x));
  
      if proof.query_proofs.len() != config.num_queries {
          return Err(FriError::InvalidProofShape);
      }
  
      // Check PoW.
      if !challenger.check_witness(config.proof_of_work_bits, proof.pow_witness) {
          return Err(FriError::InvalidPowWitness);
      }
  
      // The log of the maximum domain size.
      let log_max_height =
          proof.commit_phase_commits.len() + config.log_blowup + config.log_final_poly_len;
  
      // The log of the final domain size.
      let log_final_height = config.log_blowup + config.log_final_poly_len;
  
      for qp in &proof.query_proofs {
          let index = challenger.sample_bits(log_max_height + g.extra_query_index_bits());
          let ro = open_input(index, &qp.input_proof)?;
  
          debug_assert!(
              ro.iter().tuple_windows().all(|((l, _), (r, _))| l > r),
              "reduced openings sorted by height descending"
          );
  
          let mut domain_index = index >> g.extra_query_index_bits();
  
          // Starting at the evaluation at `index` of the initial domain,
          // perform fri folds until the domain size reaches the final domain size.
          // Check after each fold that the pair of sibling evaluations at the current
          // node match the commitment.
          let folded_eval = verify_query(
              g,
              config,
              &mut domain_index,
              zip_eq(
                  zip_eq(
                      &betas,
                      &proof.commit_phase_commits,
                      FriError::InvalidProofShape,
                  )?,
                  &qp.commit_phase_openings,
                  FriError::InvalidProofShape,
              )?,
              ro,
              log_max_height,
              log_final_height,
          )?;
  
          let mut eval = Challenge::ZERO;
  
          // We open the final polynomial at index `domain_index`, which corresponds to evaluating
          // the polynomial at x^k, where x is the 2-adic generator of order `max_height` and k is
          // `reverse_bits_len(domain_index, log_max_height)`.
          let x = Challenge::two_adic_generator(log_max_height)
              .exp_u64(reverse_bits_len(domain_index, log_max_height) as u64);
          let mut x_pow = Challenge::ONE;
  
          // Evaluate the final polynomial at x.
          for coeff in &proof.final_poly {
              eval += *coeff * x_pow;
              x_pow *= x;
          }
  
          if eval != folded_eval {
              return Err(FriError::FinalPolyMismatch);
          }
      }
  
      Ok(())
  }
  *)
  Definition verify (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [],
        [
          G;
          Val;
          Challenge;
          M_;
          Challenger;
          impl_Fn_usize___G_InputProof__arrow_Result_Vec__usize__Challenge____FriError_M_Error__G_InputError__
        ],
        [ g; config; proof; challenger; open_input ] =>
      ltac:(M.monadic
        (let g := M.alloc (| g |) in
        let config := M.alloc (| config |) in
        let proof := M.alloc (| proof |) in
        let challenger := M.alloc (| challenger |) in
        let open_input := M.alloc (| open_input |) in
        M.catch_return
          (Ty.apply
            (Ty.path "core::result::Result")
            []
            [
              Ty.tuple [];
              Ty.apply
                (Ty.path "p3_fri::verifier::FriError")
                []
                [
                  Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ Challenge ] M_ "Error";
                  Ty.associated_in_trait
                    "p3_fri::config::FriGenericConfig"
                    []
                    [ Challenge ]
                    G
                    "InputError"
                ]
            ]) (|
          ltac:(M.monadic
            (M.read (|
              let~ betas :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Challenge; Ty.path "alloc::alloc::Global" ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Challenge; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::mmcs::Mmcs"
                                []
                                [ Challenge ]
                                M_
                                "Commitment"
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::mmcs::Mmcs"
                                        []
                                        [ Challenge ]
                                        M_
                                        "Commitment"
                                    ]
                                ]
                            ]
                            Challenge
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Challenge; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_commit::mmcs::Mmcs"
                                  []
                                  [ Challenge ]
                                  M_
                                  "Commitment"
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::mmcs::Mmcs"
                                          []
                                          [ Challenge ]
                                          M_
                                          "Commitment"
                                      ]
                                  ]
                              ]
                              Challenge
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::mmcs::Mmcs"
                                []
                                [ Challenge ]
                                M_
                                "Commitment"
                            ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Challenge;
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::mmcs::Mmcs"
                                          []
                                          [ Challenge ]
                                          M_
                                          "Commitment"
                                      ]
                                  ]
                              ]
                              Challenge
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_commit::mmcs::Mmcs"
                                  []
                                  [ Challenge ]
                                  M_
                                  "Commitment"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::mmcs::Mmcs"
                                    []
                                    [ Challenge ]
                                    M_
                                    "Commitment"
                                ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::mmcs::Mmcs"
                                              []
                                              [ Challenge ]
                                              M_
                                              "Commitment"
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::mmcs::Mmcs"
                                            []
                                            [ Challenge ]
                                            M_
                                            "Commitment";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| proof |) |),
                                          "p3_fri::proof::FriProof",
                                          "commit_phase_commits"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::mmcs::Mmcs"
                                                        []
                                                        [ Challenge ]
                                                        M_
                                                        "Commitment"
                                                    ]
                                                ]
                                            ]
                                            Challenge
                                        ],
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let comm := M.copy (| γ |) in
                                            M.read (|
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "p3_challenger::CanObserve",
                                                      Challenger,
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::mmcs::Mmcs"
                                                          []
                                                          [ Challenge ]
                                                          M_
                                                          "Commitment"
                                                      ],
                                                      "observe",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| challenger |) |)
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_commit::mmcs::Mmcs"
                                                          []
                                                          [ Challenge ]
                                                          M_
                                                          "Commitment",
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Ty.associated_in_trait
                                                            "p3_commit::mmcs::Mmcs"
                                                            []
                                                            [ Challenge ]
                                                            M_
                                                            "Commitment",
                                                          [],
                                                          [],
                                                          "clone",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| comm |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  Challenge,
                                                  M.get_trait_method (|
                                                    "p3_challenger::FieldChallenger",
                                                    Challenger,
                                                    [],
                                                    [ Val ],
                                                    "sample_algebra_element",
                                                    [],
                                                    [ Challenge ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.deref (| M.read (| challenger |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Challenge ],
                      [],
                      [],
                      "for_each",
                      [],
                      [
                        Ty.function
                          [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Challenge ] ] ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Challenge ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Challenge ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Challenge ] ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| proof |) |),
                                      "p3_fri::proof::FriProof",
                                      "final_poly"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Challenge ] ] ]
                                        (Ty.tuple [])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let x := M.copy (| γ |) in
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "p3_challenger::FieldChallenger",
                                            Challenger,
                                            [],
                                            [ Val ],
                                            "observe_algebra_element",
                                            [],
                                            [ Challenge ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| challenger |) |)
                                            |);
                                            M.read (| M.deref (| M.read (| x |) |) |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ne,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_fri::proof::QueryProof")
                                            []
                                            [
                                              Challenge;
                                              M_;
                                              Ty.associated_in_trait
                                                "p3_fri::config::FriGenericConfig"
                                                []
                                                [ Challenge ]
                                                G
                                                "InputProof"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| proof |) |),
                                          "p3_fri::proof::FriProof",
                                          "query_proofs"
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| config |) |),
                                      "p3_fri::config::FriConfig",
                                      "num_queries"
                                    |)
                                  |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple
                                  "core::result::Result::Err"
                                  [
                                    Value.StructTuple
                                      "p3_fri::verifier::FriError::InvalidProofShape"
                                      []
                                  ]
                              |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "p3_challenger::grinding_challenger::GrindingChallenger",
                                    Challenger,
                                    [],
                                    [],
                                    "check_witness",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| challenger |) |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| config |) |),
                                        "p3_fri::config::FriConfig",
                                        "proof_of_work_bits"
                                      |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| proof |) |),
                                        "p3_fri::proof::FriProof",
                                        "pow_witness"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple
                                  "core::result::Result::Err"
                                  [
                                    Value.StructTuple
                                      "p3_fri::verifier::FriError::InvalidPowWitness"
                                      []
                                  ]
                              |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ log_max_height : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.add,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.add,
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::mmcs::Mmcs"
                                    []
                                    [ Challenge ]
                                    M_
                                    "Commitment";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "len",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| proof |) |),
                                  "p3_fri::proof::FriProof",
                                  "commit_phase_commits"
                                |)
                              |)
                            ]
                          |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| config |) |),
                              "p3_fri::config::FriConfig",
                              "log_blowup"
                            |)
                          |)
                        ]
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| config |) |),
                          "p3_fri::config::FriConfig",
                          "log_final_poly_len"
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ log_final_height : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.add,
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| config |) |),
                          "p3_fri::config::FriConfig",
                          "log_blowup"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| config |) |),
                          "p3_fri::config::FriConfig",
                          "log_final_poly_len"
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.use
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_fri::proof::QueryProof")
                              []
                              [
                                Challenge;
                                M_;
                                Ty.associated_in_trait
                                  "p3_fri::config::FriGenericConfig"
                                  []
                                  [ Challenge ]
                                  G
                                  "InputProof"
                              ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_fri::proof::QueryProof")
                                    []
                                    [
                                      Challenge;
                                      M_;
                                      Ty.associated_in_trait
                                        "p3_fri::config::FriGenericConfig"
                                        []
                                        [ Challenge ]
                                        G
                                        "InputProof"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| proof |) |),
                              "p3_fri::proof::FriProof",
                              "query_proofs"
                            |)
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            ltac:(M.monadic
                              (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_fri::proof::QueryProof")
                                                []
                                                [
                                                  Challenge;
                                                  M_;
                                                  Ty.associated_in_trait
                                                    "p3_fri::config::FriGenericConfig"
                                                    []
                                                    [ Challenge ]
                                                    G
                                                    "InputProof"
                                                ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_fri::proof::QueryProof")
                                              []
                                              [
                                                Challenge;
                                                M_;
                                                Ty.associated_in_trait
                                                  "p3_fri::config::FriGenericConfig"
                                                  []
                                                  [ Challenge ]
                                                  G
                                                  "InputProof"
                                              ]
                                          ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let qp := M.copy (| γ0_0 |) in
                                        let~ index :
                                            Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_trait_method (|
                                                "p3_challenger::CanSampleBits",
                                                Challenger,
                                                [],
                                                [ Ty.path "usize" ],
                                                "sample_bits",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| challenger |) |)
                                                |);
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.read (| log_max_height |);
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_trait_method (|
                                                        "p3_fri::config::FriGenericConfig",
                                                        G,
                                                        [],
                                                        [ Challenge ],
                                                        "extra_query_index_bits",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| g |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ ro :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.tuple [ Ty.path "usize"; Challenge ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ] :=
                                          M.copy (|
                                            M.match_operator (|
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.tuple [ Ty.path "usize"; Challenge ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.apply
                                                            (Ty.path "p3_fri::verifier::FriError")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::mmcs::Mmcs"
                                                                []
                                                                [ Challenge ]
                                                                M_
                                                                "Error";
                                                              Ty.associated_in_trait
                                                                "p3_fri::config::FriGenericConfig"
                                                                []
                                                                [ Challenge ]
                                                                G
                                                                "InputError"
                                                            ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.tuple [ Ty.path "usize"; Challenge ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.tuple [ Ty.path "usize"; Challenge ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "p3_fri::verifier::FriError")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::mmcs::Mmcs"
                                                              []
                                                              [ Challenge ]
                                                              M_
                                                              "Error";
                                                            Ty.associated_in_trait
                                                              "p3_fri::config::FriGenericConfig"
                                                              []
                                                              [ Challenge ]
                                                              G
                                                              "InputError"
                                                          ]
                                                      ],
                                                    [],
                                                    [],
                                                    "branch",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.tuple
                                                                [ Ty.path "usize"; Challenge ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "p3_fri::verifier::FriError")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::mmcs::Mmcs"
                                                                []
                                                                [ Challenge ]
                                                                M_
                                                                "Error";
                                                              Ty.associated_in_trait
                                                                "p3_fri::config::FriGenericConfig"
                                                                []
                                                                [ Challenge ]
                                                                G
                                                                "InputError"
                                                            ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::function::Fn",
                                                        impl_Fn_usize___G_InputProof__arrow_Result_Vec__usize__Challenge____FriError_M_Error__G_InputError__,
                                                        [],
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_fri::config::FriGenericConfig"
                                                                    []
                                                                    [ Challenge ]
                                                                    G
                                                                    "InputProof"
                                                                ]
                                                            ]
                                                        ],
                                                        "call",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.Ref, open_input |);
                                                        Value.Tuple
                                                          [
                                                            M.read (| index |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (| M.read (| qp |) |),
                                                                    "p3_fri::proof::QueryProof",
                                                                    "input_proof"
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_fri::verifier::FriError")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::mmcs::Mmcs"
                                                                        []
                                                                        [ Challenge ]
                                                                        M_
                                                                        "Error";
                                                                      Ty.associated_in_trait
                                                                        "p3_fri::config::FriGenericConfig"
                                                                        []
                                                                        [ Challenge ]
                                                                        G
                                                                        "InputError"
                                                                    ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_fri::verifier::FriError")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_commit::mmcs::Mmcs"
                                                                          []
                                                                          [ Challenge ]
                                                                          M_
                                                                          "Error";
                                                                        Ty.associated_in_trait
                                                                          "p3_fri::config::FriGenericConfig"
                                                                          []
                                                                          [ Challenge ]
                                                                          G
                                                                          "InputError"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_fri::verifier::FriError")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::mmcs::Mmcs"
                                                                            []
                                                                            [ Challenge ]
                                                                            M_
                                                                            "Error";
                                                                          Ty.associated_in_trait
                                                                            "p3_fri::config::FriGenericConfig"
                                                                            []
                                                                            [ Challenge ]
                                                                            G
                                                                            "InputError"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                [],
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.match_operator (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "itertools::tuple_impl::TupleWindows")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Challenge
                                                                                  ]
                                                                              ];
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize";
                                                                                        Challenge
                                                                                      ]
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize";
                                                                                        Challenge
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "all",
                                                                        [],
                                                                        [
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize";
                                                                                              Challenge
                                                                                            ]
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize";
                                                                                              Challenge
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.path "bool")
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "itertools::tuple_impl::TupleWindows")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    []
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize";
                                                                                          Challenge
                                                                                        ]
                                                                                    ];
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize";
                                                                                              Challenge
                                                                                            ]
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize";
                                                                                              Challenge
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "itertools::Itertools",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::Iter")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize";
                                                                                        Challenge
                                                                                      ]
                                                                                  ],
                                                                                [],
                                                                                [],
                                                                                "tuple_windows",
                                                                                [],
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize";
                                                                                              Challenge
                                                                                            ]
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize";
                                                                                              Challenge
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    []
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize";
                                                                                          Challenge
                                                                                        ]
                                                                                    ],
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize";
                                                                                            Challenge
                                                                                          ]
                                                                                      ],
                                                                                    "iter",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.call_closure (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "slice")
                                                                                                []
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize";
                                                                                                      Challenge
                                                                                                    ]
                                                                                                ]
                                                                                            ],
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::deref::Deref",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize";
                                                                                                    Challenge
                                                                                                  ];
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            [],
                                                                                            [],
                                                                                            "deref",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              ro
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                ltac:(M.monadic
                                                                                  (M.match_operator (|
                                                                                    Ty.apply
                                                                                      (Ty.path "*")
                                                                                      []
                                                                                      [
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "usize";
                                                                                                            Challenge
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "usize";
                                                                                                            Challenge
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                          (Ty.path
                                                                                            "bool")
                                                                                      ],
                                                                                    M.alloc (|
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                γ0_0 :=
                                                                                            M.SubPointer.get_tuple_field (|
                                                                                              γ,
                                                                                              0
                                                                                            |) in
                                                                                          let
                                                                                                γ0_1 :=
                                                                                            M.SubPointer.get_tuple_field (|
                                                                                              γ,
                                                                                              1
                                                                                            |) in
                                                                                          let
                                                                                                γ0_0 :=
                                                                                            M.read (|
                                                                                              γ0_0
                                                                                            |) in
                                                                                          let
                                                                                                γ2_0 :=
                                                                                            M.SubPointer.get_tuple_field (|
                                                                                              γ0_0,
                                                                                              0
                                                                                            |) in
                                                                                          let
                                                                                                γ2_1 :=
                                                                                            M.SubPointer.get_tuple_field (|
                                                                                              γ0_0,
                                                                                              1
                                                                                            |) in
                                                                                          let l :=
                                                                                            M.alloc (|
                                                                                              γ2_0
                                                                                            |) in
                                                                                          let
                                                                                                γ0_1 :=
                                                                                            M.read (|
                                                                                              γ0_1
                                                                                            |) in
                                                                                          let
                                                                                                γ2_0 :=
                                                                                            M.SubPointer.get_tuple_field (|
                                                                                              γ0_1,
                                                                                              0
                                                                                            |) in
                                                                                          let
                                                                                                γ2_1 :=
                                                                                            M.SubPointer.get_tuple_field (|
                                                                                              γ0_1,
                                                                                              1
                                                                                            |) in
                                                                                          let r :=
                                                                                            M.alloc (|
                                                                                              γ2_0
                                                                                            |) in
                                                                                          M.call_closure (|
                                                                                            Ty.path
                                                                                              "bool",
                                                                                            M.get_trait_method (|
                                                                                              "core::cmp::PartialOrd",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize"
                                                                                                ],
                                                                                              [],
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ]
                                                                                              ],
                                                                                              "gt",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                l
                                                                                              |);
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.alloc (|
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        r
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)))
                                                                                    ]
                                                                                  |)))
                                                                              | _ =>
                                                                                M.impossible
                                                                                  "wrong number of arguments"
                                                                              end))
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.call_closure (|
                                                                  Ty.path "never",
                                                                  M.get_function (|
                                                                    "core::panicking::panic_fmt",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path
                                                                        "core::fmt::Arguments",
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "core::fmt::Arguments",
                                                                        "new_const",
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    mk_str (|
                                                                                      "reduced openings sorted by height descending"
                                                                                    |)
                                                                                  ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        let~ domain_index :
                                            Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.shr,
                                              [
                                                M.read (| index |);
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_trait_method (|
                                                    "p3_fri::config::FriGenericConfig",
                                                    G,
                                                    [],
                                                    [ Challenge ],
                                                    "extra_query_index_bits",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| g |) |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ folded_eval :
                                            Ty.apply (Ty.path "*") [] [ Challenge ] :=
                                          M.copy (|
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Challenge ],
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.apply
                                                            (Ty.path "p3_fri::verifier::FriError")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::mmcs::Mmcs"
                                                                []
                                                                [ Challenge ]
                                                                M_
                                                                "Error";
                                                              Ty.associated_in_trait
                                                                "p3_fri::config::FriGenericConfig"
                                                                []
                                                                [ Challenge ]
                                                                G
                                                                "InputError"
                                                            ]
                                                        ];
                                                      Challenge
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Challenge;
                                                        Ty.apply
                                                          (Ty.path "p3_fri::verifier::FriError")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::mmcs::Mmcs"
                                                              []
                                                              [ Challenge ]
                                                              M_
                                                              "Error";
                                                            Ty.associated_in_trait
                                                              "p3_fri::config::FriGenericConfig"
                                                              []
                                                              [ Challenge ]
                                                              G
                                                              "InputError"
                                                          ]
                                                      ],
                                                    [],
                                                    [],
                                                    "branch",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Challenge;
                                                          Ty.apply
                                                            (Ty.path "p3_fri::verifier::FriError")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::mmcs::Mmcs"
                                                                []
                                                                [ Challenge ]
                                                                M_
                                                                "Error";
                                                              Ty.associated_in_trait
                                                                "p3_fri::config::FriGenericConfig"
                                                                []
                                                                [ Challenge ]
                                                                G
                                                                "InputError"
                                                            ]
                                                        ],
                                                      M.get_function (|
                                                        "p3_fri::verifier::verify_query",
                                                        [],
                                                        [
                                                          G;
                                                          Challenge;
                                                          M_;
                                                          Ty.apply
                                                            (Ty.path "p3_util::zip_eq::ZipEq")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "p3_util::zip_eq::ZipEq")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [ Challenge ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::mmcs::Mmcs"
                                                                        []
                                                                        [ Challenge ]
                                                                        M_
                                                                        "Commitment"
                                                                    ]
                                                                ];
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_fri::proof::CommitPhaseProofStep")
                                                                    []
                                                                    [ Challenge; M_ ]
                                                                ]
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| g |) |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| config |) |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              domain_index
                                                            |)
                                                          |)
                                                        |);
                                                        M.read (|
                                                          M.match_operator (|
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "p3_util::zip_eq::ZipEq")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_util::zip_eq::ZipEq")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [ Challenge ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_commit::mmcs::Mmcs"
                                                                              []
                                                                              [ Challenge ]
                                                                              M_
                                                                              "Commitment"
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_fri::proof::CommitPhaseProofStep")
                                                                          []
                                                                          [ Challenge; M_ ]
                                                                      ]
                                                                  ]
                                                              ],
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::control_flow::ControlFlow")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_fri::verifier::FriError")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_commit::mmcs::Mmcs"
                                                                              []
                                                                              [ Challenge ]
                                                                              M_
                                                                              "Error";
                                                                            Ty.associated_in_trait
                                                                              "p3_fri::config::FriGenericConfig"
                                                                              []
                                                                              [ Challenge ]
                                                                              G
                                                                              "InputError"
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_util::zip_eq::ZipEq")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_util::zip_eq::ZipEq")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [ Challenge ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::mmcs::Mmcs"
                                                                                  []
                                                                                  [ Challenge ]
                                                                                  M_
                                                                                  "Commitment"
                                                                              ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_fri::proof::CommitPhaseProofStep")
                                                                              []
                                                                              [ Challenge; M_ ]
                                                                          ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::Try",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_util::zip_eq::ZipEq")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_util::zip_eq::ZipEq")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::Iter")
                                                                                []
                                                                                [ Challenge ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::Iter")
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "p3_commit::mmcs::Mmcs"
                                                                                    []
                                                                                    [ Challenge ]
                                                                                    M_
                                                                                    "Commitment"
                                                                                ]
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_fri::proof::CommitPhaseProofStep")
                                                                                []
                                                                                [ Challenge; M_ ]
                                                                            ]
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_fri::verifier::FriError")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::mmcs::Mmcs"
                                                                            []
                                                                            [ Challenge ]
                                                                            M_
                                                                            "Error";
                                                                          Ty.associated_in_trait
                                                                            "p3_fri::config::FriGenericConfig"
                                                                            []
                                                                            [ Challenge ]
                                                                            G
                                                                            "InputError"
                                                                        ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "branch",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_util::zip_eq::ZipEq")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_util::zip_eq::ZipEq")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::Iter")
                                                                                  []
                                                                                  [ Challenge ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::Iter")
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "p3_commit::mmcs::Mmcs"
                                                                                      []
                                                                                      [ Challenge ]
                                                                                      M_
                                                                                      "Commitment"
                                                                                  ]
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "p3_fri::proof::CommitPhaseProofStep")
                                                                                  []
                                                                                  [ Challenge; M_ ]
                                                                              ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_fri::verifier::FriError")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_commit::mmcs::Mmcs"
                                                                              []
                                                                              [ Challenge ]
                                                                              M_
                                                                              "Error";
                                                                            Ty.associated_in_trait
                                                                              "p3_fri::config::FriGenericConfig"
                                                                              []
                                                                              [ Challenge ]
                                                                              G
                                                                              "InputError"
                                                                          ]
                                                                      ],
                                                                    M.get_function (|
                                                                      "p3_util::zip_eq::zip_eq",
                                                                      [],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_util::zip_eq::ZipEq")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [ Challenge ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::mmcs::Mmcs"
                                                                                  []
                                                                                  [ Challenge ]
                                                                                  M_
                                                                                  "Commitment"
                                                                              ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_util::zip_eq::ZipEq")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [ Challenge ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::mmcs::Mmcs"
                                                                                  []
                                                                                  [ Challenge ]
                                                                                  M_
                                                                                  "Commitment"
                                                                              ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "p3_fri::proof::CommitPhaseProofStep")
                                                                                  []
                                                                                  [ Challenge; M_ ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_fri::proof::CommitPhaseProofStep")
                                                                              []
                                                                              [ Challenge; M_ ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_fri::verifier::FriError")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_commit::mmcs::Mmcs"
                                                                              []
                                                                              [ Challenge ]
                                                                              M_
                                                                              "Error";
                                                                            Ty.associated_in_trait
                                                                              "p3_fri::config::FriGenericConfig"
                                                                              []
                                                                              [ Challenge ]
                                                                              G
                                                                              "InputError"
                                                                          ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (|
                                                                        M.match_operator (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_util::zip_eq::ZipEq")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    []
                                                                                    [ Challenge ];
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "p3_commit::mmcs::Mmcs"
                                                                                        []
                                                                                        [ Challenge
                                                                                        ]
                                                                                        M_
                                                                                        "Commitment"
                                                                                    ]
                                                                                ]
                                                                            ],
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::ops::control_flow::ControlFlow")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "core::convert::Infallible";
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "p3_fri::verifier::FriError")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_commit::mmcs::Mmcs"
                                                                                            []
                                                                                            [
                                                                                              Challenge
                                                                                            ]
                                                                                            M_
                                                                                            "Error";
                                                                                          Ty.associated_in_trait
                                                                                            "p3_fri::config::FriGenericConfig"
                                                                                            []
                                                                                            [
                                                                                              Challenge
                                                                                            ]
                                                                                            G
                                                                                            "InputError"
                                                                                        ]
                                                                                    ];
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "p3_util::zip_eq::ZipEq")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        []
                                                                                        [ Challenge
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_commit::mmcs::Mmcs"
                                                                                            []
                                                                                            [
                                                                                              Challenge
                                                                                            ]
                                                                                            M_
                                                                                            "Commitment"
                                                                                        ]
                                                                                    ]
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::ops::try_trait::Try",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "p3_util::zip_eq::ZipEq")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::slice::iter::Iter")
                                                                                          []
                                                                                          [
                                                                                            Challenge
                                                                                          ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::slice::iter::Iter")
                                                                                          []
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "p3_commit::mmcs::Mmcs"
                                                                                              []
                                                                                              [
                                                                                                Challenge
                                                                                              ]
                                                                                              M_
                                                                                              "Commitment"
                                                                                          ]
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "p3_fri::verifier::FriError")
                                                                                      []
                                                                                      [
                                                                                        Ty.associated_in_trait
                                                                                          "p3_commit::mmcs::Mmcs"
                                                                                          []
                                                                                          [
                                                                                            Challenge
                                                                                          ]
                                                                                          M_
                                                                                          "Error";
                                                                                        Ty.associated_in_trait
                                                                                          "p3_fri::config::FriGenericConfig"
                                                                                          []
                                                                                          [
                                                                                            Challenge
                                                                                          ]
                                                                                          G
                                                                                          "InputError"
                                                                                      ]
                                                                                  ],
                                                                                [],
                                                                                [],
                                                                                "branch",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "p3_util::zip_eq::ZipEq")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::slice::iter::Iter")
                                                                                            []
                                                                                            [
                                                                                              Challenge
                                                                                            ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::slice::iter::Iter")
                                                                                            []
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "p3_commit::mmcs::Mmcs"
                                                                                                []
                                                                                                [
                                                                                                  Challenge
                                                                                                ]
                                                                                                M_
                                                                                                "Commitment"
                                                                                            ]
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "p3_fri::verifier::FriError")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_commit::mmcs::Mmcs"
                                                                                            []
                                                                                            [
                                                                                              Challenge
                                                                                            ]
                                                                                            M_
                                                                                            "Error";
                                                                                          Ty.associated_in_trait
                                                                                            "p3_fri::config::FriGenericConfig"
                                                                                            []
                                                                                            [
                                                                                              Challenge
                                                                                            ]
                                                                                            G
                                                                                            "InputError"
                                                                                        ]
                                                                                    ],
                                                                                  M.get_function (|
                                                                                    "p3_util::zip_eq::zip_eq",
                                                                                    [],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            []
                                                                                            [
                                                                                              Challenge;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        []
                                                                                        [ Challenge
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            []
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "p3_commit::mmcs::Mmcs"
                                                                                                []
                                                                                                [
                                                                                                  Challenge
                                                                                                ]
                                                                                                M_
                                                                                                "Commitment";
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_commit::mmcs::Mmcs"
                                                                                            []
                                                                                            [
                                                                                              Challenge
                                                                                            ]
                                                                                            M_
                                                                                            "Commitment"
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "p3_fri::verifier::FriError")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_commit::mmcs::Mmcs"
                                                                                            []
                                                                                            [
                                                                                              Challenge
                                                                                            ]
                                                                                            M_
                                                                                            "Error";
                                                                                          Ty.associated_in_trait
                                                                                            "p3_fri::config::FriGenericConfig"
                                                                                            []
                                                                                            [
                                                                                              Challenge
                                                                                            ]
                                                                                            G
                                                                                            "InputError"
                                                                                        ]
                                                                                    ]
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      betas
                                                                                    |);
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            proof
                                                                                          |)
                                                                                        |),
                                                                                        "p3_fri::proof::FriProof",
                                                                                        "commit_phase_commits"
                                                                                      |)
                                                                                    |);
                                                                                    Value.StructTuple
                                                                                      "p3_fri::verifier::FriError::InvalidProofShape"
                                                                                      []
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::ops::control_flow::ControlFlow::Break",
                                                                                    0
                                                                                  |) in
                                                                                let residual :=
                                                                                  M.copy (|
                                                                                    γ0_0
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  M.never_to_any (|
                                                                                    M.read (|
                                                                                      M.return_ (|
                                                                                        M.call_closure (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::result::Result")
                                                                                            []
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [];
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "p3_fri::verifier::FriError")
                                                                                                []
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_commit::mmcs::Mmcs"
                                                                                                    []
                                                                                                    [
                                                                                                      Challenge
                                                                                                    ]
                                                                                                    M_
                                                                                                    "Error";
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_fri::config::FriGenericConfig"
                                                                                                    []
                                                                                                    [
                                                                                                      Challenge
                                                                                                    ]
                                                                                                    G
                                                                                                    "InputError"
                                                                                                ]
                                                                                            ],
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::try_trait::FromResidual",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::result::Result")
                                                                                              []
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [];
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "p3_fri::verifier::FriError")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_commit::mmcs::Mmcs"
                                                                                                      []
                                                                                                      [
                                                                                                        Challenge
                                                                                                      ]
                                                                                                      M_
                                                                                                      "Error";
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_fri::config::FriGenericConfig"
                                                                                                      []
                                                                                                      [
                                                                                                        Challenge
                                                                                                      ]
                                                                                                      G
                                                                                                      "InputError"
                                                                                                  ]
                                                                                              ],
                                                                                            [],
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::result::Result")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "core::convert::Infallible";
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "p3_fri::verifier::FriError")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "p3_commit::mmcs::Mmcs"
                                                                                                        []
                                                                                                        [
                                                                                                          Challenge
                                                                                                        ]
                                                                                                        M_
                                                                                                        "Error";
                                                                                                      Ty.associated_in_trait
                                                                                                        "p3_fri::config::FriGenericConfig"
                                                                                                        []
                                                                                                        [
                                                                                                          Challenge
                                                                                                        ]
                                                                                                        G
                                                                                                        "InputError"
                                                                                                    ]
                                                                                                ]
                                                                                            ],
                                                                                            "from_residual",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              residual
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                                                    0
                                                                                  |) in
                                                                                let val :=
                                                                                  M.copy (|
                                                                                    γ0_0
                                                                                  |) in
                                                                                val))
                                                                          ]
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| qp |)
                                                                          |),
                                                                          "p3_fri::proof::QueryProof",
                                                                          "commit_phase_openings"
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "p3_fri::verifier::FriError::InvalidProofShape"
                                                                        []
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Break",
                                                                      0
                                                                    |) in
                                                                  let residual :=
                                                                    M.copy (| γ0_0 |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        M.return_ (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              []
                                                                              [
                                                                                Ty.tuple [];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "p3_fri::verifier::FriError")
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "p3_commit::mmcs::Mmcs"
                                                                                      []
                                                                                      [ Challenge ]
                                                                                      M_
                                                                                      "Error";
                                                                                    Ty.associated_in_trait
                                                                                      "p3_fri::config::FriGenericConfig"
                                                                                      []
                                                                                      [ Challenge ]
                                                                                      G
                                                                                      "InputError"
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::try_trait::FromResidual",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "p3_fri::verifier::FriError")
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "p3_commit::mmcs::Mmcs"
                                                                                        []
                                                                                        [ Challenge
                                                                                        ]
                                                                                        M_
                                                                                        "Error";
                                                                                      Ty.associated_in_trait
                                                                                        "p3_fri::config::FriGenericConfig"
                                                                                        []
                                                                                        [ Challenge
                                                                                        ]
                                                                                        G
                                                                                        "InputError"
                                                                                    ]
                                                                                ],
                                                                              [],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::convert::Infallible";
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "p3_fri::verifier::FriError")
                                                                                      []
                                                                                      [
                                                                                        Ty.associated_in_trait
                                                                                          "p3_commit::mmcs::Mmcs"
                                                                                          []
                                                                                          [
                                                                                            Challenge
                                                                                          ]
                                                                                          M_
                                                                                          "Error";
                                                                                        Ty.associated_in_trait
                                                                                          "p3_fri::config::FriGenericConfig"
                                                                                          []
                                                                                          [
                                                                                            Challenge
                                                                                          ]
                                                                                          G
                                                                                          "InputError"
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                              "from_residual",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [ M.read (| residual |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                                      0
                                                                    |) in
                                                                  let val := M.copy (| γ0_0 |) in
                                                                  val))
                                                            ]
                                                          |)
                                                        |);
                                                        M.read (| ro |);
                                                        M.read (| log_max_height |);
                                                        M.read (| log_final_height |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_fri::verifier::FriError")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::mmcs::Mmcs"
                                                                        []
                                                                        [ Challenge ]
                                                                        M_
                                                                        "Error";
                                                                      Ty.associated_in_trait
                                                                        "p3_fri::config::FriGenericConfig"
                                                                        []
                                                                        [ Challenge ]
                                                                        G
                                                                        "InputError"
                                                                    ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_fri::verifier::FriError")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_commit::mmcs::Mmcs"
                                                                          []
                                                                          [ Challenge ]
                                                                          M_
                                                                          "Error";
                                                                        Ty.associated_in_trait
                                                                          "p3_fri::config::FriGenericConfig"
                                                                          []
                                                                          [ Challenge ]
                                                                          G
                                                                          "InputError"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_fri::verifier::FriError")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::mmcs::Mmcs"
                                                                            []
                                                                            [ Challenge ]
                                                                            M_
                                                                            "Error";
                                                                          Ty.associated_in_trait
                                                                            "p3_fri::config::FriGenericConfig"
                                                                            []
                                                                            [ Challenge ]
                                                                            G
                                                                            "InputError"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                [],
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |)
                                          |) in
                                        let~ eval : Ty.apply (Ty.path "*") [] [ Challenge ] :=
                                          M.copy (|
                                            get_constant (|
                                              "p3_field::field::PrimeCharacteristicRing::ZERO",
                                              Challenge
                                            |)
                                          |) in
                                        let~ x : Ty.apply (Ty.path "*") [] [ Challenge ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Challenge,
                                              M.get_trait_method (|
                                                "p3_field::field::PrimeCharacteristicRing",
                                                Challenge,
                                                [],
                                                [],
                                                "exp_u64",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Challenge,
                                                      M.get_trait_method (|
                                                        "p3_field::field::TwoAdicField",
                                                        Challenge,
                                                        [],
                                                        [],
                                                        "two_adic_generator",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.read (| log_max_height |) ]
                                                    |)
                                                  |)
                                                |);
                                                M.cast
                                                  (Ty.path "u64")
                                                  (M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_function (|
                                                      "p3_util::reverse_bits_len",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| domain_index |);
                                                      M.read (| log_max_height |)
                                                    ]
                                                  |))
                                              ]
                                            |)
                                          |) in
                                        let~ x_pow : Ty.apply (Ty.path "*") [] [ Challenge ] :=
                                          M.copy (|
                                            get_constant (|
                                              "p3_field::field::PrimeCharacteristicRing::ONE",
                                              Challenge
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.use
                                            (M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Challenge ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Challenge;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ],
                                                    [],
                                                    [],
                                                    "into_iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| proof |) |),
                                                        "p3_fri::proof::FriProof",
                                                        "final_poly"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let iter := M.copy (| γ |) in
                                                    M.loop (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      ltac:(M.monadic
                                                        (let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.match_operator (|
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ],
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ Challenge ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [ Challenge ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let coeff := M.copy (| γ0_0 |) in
                                                                  let~ _ :
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [ Ty.tuple [] ] :=
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.tuple [],
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::AddAssign",
                                                                          Challenge,
                                                                          [],
                                                                          [ Challenge ],
                                                                          "add_assign",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            eval
                                                                          |);
                                                                          M.call_closure (|
                                                                            Challenge,
                                                                            M.get_trait_method (|
                                                                              "core::ops::arith::Mul",
                                                                              Challenge,
                                                                              [],
                                                                              [ Challenge ],
                                                                              "mul",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                M.deref (|
                                                                                  M.read (| coeff |)
                                                                                |)
                                                                              |);
                                                                              M.read (| x_pow |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |) in
                                                                  let~ _ :
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [ Ty.tuple [] ] :=
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.tuple [],
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::MulAssign",
                                                                          Challenge,
                                                                          [],
                                                                          [ Challenge ],
                                                                          "mul_assign",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            x_pow
                                                                          |);
                                                                          M.read (| x |)
                                                                        ]
                                                                      |)
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                    |)))
                                              ]
                                            |)) in
                                        M.match_operator (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialEq",
                                                          Challenge,
                                                          [],
                                                          [ Challenge ],
                                                          "ne",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (| Pointer.Kind.Ref, eval |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            folded_eval
                                                          |)
                                                        ]
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        Value.StructTuple
                                                          "core::result::Result::Err"
                                                          [
                                                            Value.StructTuple
                                                              "p3_fri::verifier::FriError::FinalPolyMismatch"
                                                              []
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_verify : M.IsFunction.C "p3_fri::verifier::verify" verify.
  Admitted.
  Global Typeclasses Opaque verify.
  
  Axiom CommitStep :
    forall (F M_ : Ty.t),
    (Ty.apply (Ty.path "p3_fri::verifier::CommitStep") [] [ F; M_ ]) =
      (Ty.tuple
        [
          Ty.tuple
            [
              Ty.apply (Ty.path "&") [] [ F ];
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ F ] M_ "Commitment" ]
            ];
          Ty.apply
            (Ty.path "&")
            []
            [ Ty.apply (Ty.path "p3_fri::proof::CommitPhaseProofStep") [] [ F; M_ ] ]
        ]).
  
  (*
  fn verify_query<'a, G, F, M>(
      g: &G,
      config: &FriConfig<M>,
      index: &mut usize,
      steps: impl ExactSizeIterator<Item = CommitStep<'a, F, M>>,
      reduced_openings: Vec<(usize, F)>,
      log_max_height: usize,
      log_final_height: usize,
  ) -> Result<F, FriError<M::Error, G::InputError>>
  where
      F: Field,
      M: Mmcs<F> + 'a,
      G: FriGenericConfig<F>,
  {
      let mut folded_eval = F::ZERO;
      let mut ro_iter = reduced_openings.into_iter().peekable();
  
      // We start with evaluations over a domain of size (1 << log_max_height). We fold
      // using FRI until the domain size reaches (1 << log_final_height).
      for (log_folded_height, ((&beta, comm), opening)) in zip_eq(
          (log_final_height..log_max_height).rev(),
          steps,
          FriError::InvalidProofShape,
      )? {
          // If there are new polynomials to roll in at this height, do so.
          if let Some((_, ro)) = ro_iter.next_if(|(lh, _)| *lh == log_folded_height + 1) {
              folded_eval += ro;
          }
  
          // Get the index of the other sibling of the current fri node.
          let index_sibling = *index ^ 1;
  
          let mut evals = vec![folded_eval; 2];
          evals[index_sibling % 2] = opening.sibling_value;
  
          let dims = &[Dimensions {
              width: 2,
              height: 1 << log_folded_height,
          }];
  
          // Replace index with the index of the parent fri node.
          *index >>= 1;
  
          // Verify the commitment to the evaluations of the sibling nodes.
          config
              .mmcs
              .verify_batch(comm, dims, *index, &[evals.clone()], &opening.opening_proof)
              .map_err(FriError::CommitPhaseMmcsError)?;
  
          // Fold the pair of evaluations of sibling nodes into the evaluation of the parent fri node.
          folded_eval = g.fold_row( *index, log_folded_height, beta, evals.into_iter());
      }
  
      // If ro_iter is not empty, we failed to fold in some polynomial evaluations.
      if ro_iter.next().is_some() {
          return Err(FriError::InvalidProofShape);
      }
  
      // If we reached this point, we have verified that, starting at the initial index,
      // the chain of folds has produced folded_eval.
      Ok(folded_eval)
  }
  *)
  Definition verify_query (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [],
        [ G; F; M_; impl_ExactSizeIterator_Item___CommitStep_'a__F__M__ ],
        [ g; config; index; steps; reduced_openings; log_max_height; log_final_height ] =>
      ltac:(M.monadic
        (let g := M.alloc (| g |) in
        let config := M.alloc (| config |) in
        let index := M.alloc (| index |) in
        let steps := M.alloc (| steps |) in
        let reduced_openings := M.alloc (| reduced_openings |) in
        let log_max_height := M.alloc (| log_max_height |) in
        let log_final_height := M.alloc (| log_final_height |) in
        M.catch_return
          (Ty.apply
            (Ty.path "core::result::Result")
            []
            [
              F;
              Ty.apply
                (Ty.path "p3_fri::verifier::FriError")
                []
                [
                  Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ F ] M_ "Error";
                  Ty.associated_in_trait "p3_fri::config::FriGenericConfig" [] [ F ] G "InputError"
                ]
            ]) (|
          ltac:(M.monadic
            (M.read (|
              let~ folded_eval : Ty.apply (Ty.path "*") [] [ F ] :=
                M.copy (|
                  get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", F |)
                |) in
              let~ ro_iter :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::peekable::Peekable")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ]
                        ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::peekable::Peekable")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "peekable",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [ M.read (| reduced_openings |) ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.use
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_util::zip_eq::ZipEq")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              []
                              [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ]
                              ];
                            impl_ExactSizeIterator_Item___CommitStep_'a__F__M__
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "p3_util::zip_eq::ZipEq")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ]
                                ];
                              impl_ExactSizeIterator_Item___CommitStep_'a__F__M__
                            ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_util::zip_eq::ZipEq")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::rev::Rev")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ]
                                        ];
                                      impl_ExactSizeIterator_Item___CommitStep_'a__F__M__
                                    ]
                                ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.apply
                                            (Ty.path "p3_fri::verifier::FriError")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::mmcs::Mmcs"
                                                []
                                                [ F ]
                                                M_
                                                "Error";
                                              Ty.associated_in_trait
                                                "p3_fri::config::FriGenericConfig"
                                                []
                                                [ F ]
                                                G
                                                "InputError"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_util::zip_eq::ZipEq")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::rev::Rev")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ]
                                            ];
                                          impl_ExactSizeIterator_Item___CommitStep_'a__F__M__
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_util::zip_eq::ZipEq")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::rev::Rev")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ]
                                              ];
                                            impl_ExactSizeIterator_Item___CommitStep_'a__F__M__
                                          ];
                                        Ty.apply
                                          (Ty.path "p3_fri::verifier::FriError")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::mmcs::Mmcs"
                                              []
                                              [ F ]
                                              M_
                                              "Error";
                                            Ty.associated_in_trait
                                              "p3_fri::config::FriGenericConfig"
                                              []
                                              [ F ]
                                              G
                                              "InputError"
                                          ]
                                      ],
                                    [],
                                    [],
                                    "branch",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_util::zip_eq::ZipEq")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::rev::Rev")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ]
                                                ];
                                              impl_ExactSizeIterator_Item___CommitStep_'a__F__M__
                                            ];
                                          Ty.apply
                                            (Ty.path "p3_fri::verifier::FriError")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::mmcs::Mmcs"
                                                []
                                                [ F ]
                                                M_
                                                "Error";
                                              Ty.associated_in_trait
                                                "p3_fri::config::FriGenericConfig"
                                                []
                                                [ F ]
                                                G
                                                "InputError"
                                            ]
                                        ],
                                      M.get_function (|
                                        "p3_util::zip_eq::zip_eq",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::rev::Rev")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::rev::Rev")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ]
                                            ];
                                          impl_ExactSizeIterator_Item___CommitStep_'a__F__M__;
                                          impl_ExactSizeIterator_Item___CommitStep_'a__F__M__;
                                          Ty.apply
                                            (Ty.path "p3_fri::verifier::FriError")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::mmcs::Mmcs"
                                                []
                                                [ F ]
                                                M_
                                                "Error";
                                              Ty.associated_in_trait
                                                "p3_fri::config::FriGenericConfig"
                                                []
                                                [ F ]
                                                G
                                                "InputError"
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::rev::Rev")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "rev",
                                            [],
                                            []
                                          |),
                                          [
                                            Value.StructRecord
                                              "core::ops::range::Range"
                                              [
                                                ("start", M.read (| log_final_height |));
                                                ("end_", M.read (| log_max_height |))
                                              ]
                                          ]
                                        |);
                                        M.read (| steps |);
                                        Value.StructTuple
                                          "p3_fri::verifier::FriError::InvalidProofShape"
                                          []
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  F;
                                                  Ty.apply
                                                    (Ty.path "p3_fri::verifier::FriError")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::mmcs::Mmcs"
                                                        []
                                                        [ F ]
                                                        M_
                                                        "Error";
                                                      Ty.associated_in_trait
                                                        "p3_fri::config::FriGenericConfig"
                                                        []
                                                        [ F ]
                                                        G
                                                        "InputError"
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    F;
                                                    Ty.apply
                                                      (Ty.path "p3_fri::verifier::FriError")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::mmcs::Mmcs"
                                                          []
                                                          [ F ]
                                                          M_
                                                          "Error";
                                                        Ty.associated_in_trait
                                                          "p3_fri::config::FriGenericConfig"
                                                          []
                                                          [ F ]
                                                          G
                                                          "InputError"
                                                      ]
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.apply
                                                        (Ty.path "p3_fri::verifier::FriError")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::mmcs::Mmcs"
                                                            []
                                                            [ F ]
                                                            M_
                                                            "Error";
                                                          Ty.associated_in_trait
                                                            "p3_fri::config::FriGenericConfig"
                                                            []
                                                            [ F ]
                                                            G
                                                            "InputError"
                                                        ]
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            ltac:(M.monadic
                              (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.tuple
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ F ];
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::mmcs::Mmcs"
                                                            []
                                                            [ F ]
                                                            M_
                                                            "Commitment"
                                                        ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "p3_fri::proof::CommitPhaseProofStep")
                                                        []
                                                        [ F; M_ ]
                                                    ]
                                                ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "p3_util::zip_eq::ZipEq")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::rev::Rev")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ]
                                              ];
                                            impl_ExactSizeIterator_Item___CommitStep_'a__F__M__
                                          ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                        let log_folded_height := M.copy (| γ1_0 |) in
                                        let γ2_0 := M.SubPointer.get_tuple_field (| γ1_1, 0 |) in
                                        let γ2_1 := M.SubPointer.get_tuple_field (| γ1_1, 1 |) in
                                        let γ3_0 := M.SubPointer.get_tuple_field (| γ2_0, 0 |) in
                                        let γ3_1 := M.SubPointer.get_tuple_field (| γ2_0, 1 |) in
                                        let γ3_0 := M.read (| γ3_0 |) in
                                        let beta := M.copy (| γ3_0 |) in
                                        let comm := M.copy (| γ3_1 |) in
                                        let opening := M.copy (| γ2_1 |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.tuple [ Ty.path "usize"; F ] ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::peekable::Peekable")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::vec::into_iter::IntoIter")
                                                                []
                                                                [
                                                                  Ty.tuple [ Ty.path "usize"; F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          "next_if",
                                                          [],
                                                          [
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [ Ty.path "usize"; F ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.path "bool")
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            ro_iter
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize";
                                                                                          F
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.path "bool")
                                                                        ],
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ :=
                                                                              M.read (| γ |) in
                                                                            let γ1_0 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                0
                                                                              |) in
                                                                            let γ1_1 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                1
                                                                              |) in
                                                                            let lh :=
                                                                              M.alloc (| γ1_0 |) in
                                                                            M.call_closure (|
                                                                              Ty.path "bool",
                                                                              BinOp.eq,
                                                                              [
                                                                                M.read (|
                                                                                  M.deref (|
                                                                                    M.read (| lh |)
                                                                                  |)
                                                                                |);
                                                                                M.call_closure (|
                                                                                  Ty.path "usize",
                                                                                  BinOp.Wrap.add,
                                                                                  [
                                                                                    M.read (|
                                                                                      log_folded_height
                                                                                    |);
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      1
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    |) in
                                                  let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let γ1_0 :=
                                                    M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                  let γ1_1 :=
                                                    M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                  let ro := M.copy (| γ1_1 |) in
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_trait_method (|
                                                          "core::ops::arith::AddAssign",
                                                          F,
                                                          [],
                                                          [ F ],
                                                          "add_assign",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            folded_eval
                                                          |);
                                                          M.read (| ro |)
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        let~ index_sibling :
                                            Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.bit_xor,
                                              [
                                                M.read (| M.deref (| M.read (| index |) |) |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          |) in
                                        let~ evals :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ F; Ty.path "alloc::alloc::Global" ]
                                              ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ],
                                              M.get_function (|
                                                "alloc::vec::from_elem",
                                                [],
                                                [ F ]
                                              |),
                                              [
                                                M.read (| folded_eval |);
                                                Value.Integer IntegerKind.Usize 2
                                              ]
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.write (|
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply (Ty.path "&mut") [] [ F ],
                                                  M.get_trait_method (|
                                                    "core::ops::index::IndexMut",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ F; Ty.path "alloc::alloc::Global" ],
                                                    [],
                                                    [ Ty.path "usize" ],
                                                    "index_mut",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (| Pointer.Kind.MutRef, evals |);
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.rem,
                                                      [
                                                        M.read (| index_sibling |);
                                                        Value.Integer IntegerKind.Usize 2
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| opening |) |),
                                                  "p3_fri::proof::CommitPhaseProofStep",
                                                  "sibling_value"
                                                |)
                                              |)
                                            |)
                                          |) in
                                        let~ dims :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 1 ]
                                                      [ Ty.path "p3_matrix::Dimensions" ]
                                                  ]
                                              ] :=
                                          M.alloc (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Value.Array
                                                  [
                                                    Value.StructRecord
                                                      "p3_matrix::Dimensions"
                                                      [
                                                        ("width",
                                                          Value.Integer IntegerKind.Usize 2);
                                                        ("height",
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.shl,
                                                            [
                                                              Value.Integer IntegerKind.Usize 1;
                                                              M.read (| log_folded_height |)
                                                            ]
                                                          |))
                                                      ]
                                                  ]
                                              |)
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            let β := M.deref (| M.read (| index |) |) in
                                            M.write (|
                                              β,
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.shr,
                                                [ M.read (| β |); Value.Integer IntegerKind.I32 1 ]
                                              |)
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.apply
                                                          (Ty.path "p3_fri::verifier::FriError")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::mmcs::Mmcs"
                                                              []
                                                              [ F ]
                                                              M_
                                                              "Error";
                                                            Ty.associated_in_trait
                                                              "p3_fri::config::FriGenericConfig"
                                                              []
                                                              [ F ]
                                                              G
                                                              "InputError"
                                                          ]
                                                      ];
                                                    Ty.tuple []
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.apply
                                                        (Ty.path "p3_fri::verifier::FriError")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::mmcs::Mmcs"
                                                            []
                                                            [ F ]
                                                            M_
                                                            "Error";
                                                          Ty.associated_in_trait
                                                            "p3_fri::config::FriGenericConfig"
                                                            []
                                                            [ F ]
                                                            G
                                                            "InputError"
                                                        ]
                                                    ],
                                                  [],
                                                  [],
                                                  "branch",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.tuple [];
                                                        Ty.apply
                                                          (Ty.path "p3_fri::verifier::FriError")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::mmcs::Mmcs"
                                                              []
                                                              [ F ]
                                                              M_
                                                              "Error";
                                                            Ty.associated_in_trait
                                                              "p3_fri::config::FriGenericConfig"
                                                              []
                                                              [ F ]
                                                              G
                                                              "InputError"
                                                          ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.tuple [];
                                                          Ty.associated_in_trait
                                                            "p3_commit::mmcs::Mmcs"
                                                            []
                                                            [ F ]
                                                            M_
                                                            "Error"
                                                        ],
                                                      "map_err",
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "p3_fri::verifier::FriError")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::mmcs::Mmcs"
                                                              []
                                                              [ F ]
                                                              M_
                                                              "Error";
                                                            Ty.associated_in_trait
                                                              "p3_fri::config::FriGenericConfig"
                                                              []
                                                              [ F ]
                                                              G
                                                              "InputError"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::mmcs::Mmcs"
                                                              []
                                                              [ F ]
                                                              M_
                                                              "Error"
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "p3_fri::verifier::FriError")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::mmcs::Mmcs"
                                                                []
                                                                [ F ]
                                                                M_
                                                                "Error";
                                                              Ty.associated_in_trait
                                                                "p3_fri::config::FriGenericConfig"
                                                                []
                                                                [ F ]
                                                                G
                                                                "InputError"
                                                            ])
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.tuple [];
                                                            Ty.associated_in_trait
                                                              "p3_commit::mmcs::Mmcs"
                                                              []
                                                              [ F ]
                                                              M_
                                                              "Error"
                                                          ],
                                                        M.get_trait_method (|
                                                          "p3_commit::mmcs::Mmcs",
                                                          M_,
                                                          [],
                                                          [ F ],
                                                          "verify_batch",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| config |) |),
                                                              "p3_fri::config::FriConfig",
                                                              "mmcs"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| comm |) |)
                                                          |);
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| dims |) |)
                                                            |));
                                                          M.read (|
                                                            M.deref (| M.read (| index |) |)
                                                          |);
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              F;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::clone::Clone",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                F;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            [],
                                                                            "clone",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              evals
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |));
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (|
                                                                    M.read (| opening |)
                                                                  |),
                                                                  "p3_fri::proof::CommitPhaseProofStep",
                                                                  "opening_proof"
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.constructor_as_closure
                                                        "p3_fri::verifier::FriError::CommitPhaseMmcsError"
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                F;
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_fri::verifier::FriError")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::mmcs::Mmcs"
                                                                      []
                                                                      [ F ]
                                                                      M_
                                                                      "Error";
                                                                    Ty.associated_in_trait
                                                                      "p3_fri::config::FriGenericConfig"
                                                                      []
                                                                      [ F ]
                                                                      G
                                                                      "InputError"
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  F;
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_fri::verifier::FriError")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::mmcs::Mmcs"
                                                                        []
                                                                        [ F ]
                                                                        M_
                                                                        "Error";
                                                                      Ty.associated_in_trait
                                                                        "p3_fri::config::FriGenericConfig"
                                                                        []
                                                                        [ F ]
                                                                        G
                                                                        "InputError"
                                                                    ]
                                                                ],
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_fri::verifier::FriError")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_commit::mmcs::Mmcs"
                                                                          []
                                                                          [ F ]
                                                                          M_
                                                                          "Error";
                                                                        Ty.associated_in_trait
                                                                          "p3_fri::config::FriGenericConfig"
                                                                          []
                                                                          [ F ]
                                                                          G
                                                                          "InputError"
                                                                      ]
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.write (|
                                              folded_eval,
                                              M.call_closure (|
                                                F,
                                                M.get_trait_method (|
                                                  "p3_fri::config::FriGenericConfig",
                                                  G,
                                                  [],
                                                  [ F ],
                                                  "fold_row",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                                      []
                                                      [ F; Ty.path "alloc::alloc::Global" ]
                                                  ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| g |) |)
                                                  |);
                                                  M.read (| M.deref (| M.read (| index |) |) |);
                                                  M.read (| log_folded_height |);
                                                  M.read (| beta |);
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                                      []
                                                      [ F; Ty.path "alloc::alloc::Global" ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ],
                                                      [],
                                                      [],
                                                      "into_iter",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| evals |) ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.tuple [ Ty.path "usize"; F ] ],
                                  "is_some",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.tuple [ Ty.path "usize"; F ] ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::peekable::Peekable")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.tuple [ Ty.path "usize"; F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.MutRef, ro_iter |) ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple
                                  "core::result::Result::Err"
                                  [
                                    Value.StructTuple
                                      "p3_fri::verifier::FriError::InvalidProofShape"
                                      []
                                  ]
                              |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                Value.StructTuple "core::result::Result::Ok" [ M.read (| folded_eval |) ]
              |)
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_verify_query :
    M.IsFunction.C "p3_fri::verifier::verify_query" verify_query.
  Admitted.
  Global Typeclasses Opaque verify_query.
End verifier.
