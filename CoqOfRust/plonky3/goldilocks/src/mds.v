(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module mds.
  (* StructTuple
    {
      name := "MdsMatrixGoldilocks";
      const_params := [];
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_clone_Clone_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "p3_goldilocks::mds::MdsMatrixGoldilocks" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Module Impl_core_fmt_Debug_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MdsMatrixGoldilocks" |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Module Impl_core_default_Default_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic (Value.StructTuple "p3_goldilocks::mds::MdsMatrixGoldilocks" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  (* StructTuple
    {
      name := "SmallConvolveGoldilocks";
      const_params := [];
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_fmt_Debug_for_p3_goldilocks_mds_SmallConvolveGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::SmallConvolveGoldilocks".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "SmallConvolveGoldilocks" |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_p3_goldilocks_mds_SmallConvolveGoldilocks.
  
  Module Impl_p3_mds_karatsuba_convolution_Convolve_p3_goldilocks_goldilocks_Goldilocks_i128_i64_i128_for_p3_goldilocks_mds_SmallConvolveGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::SmallConvolveGoldilocks".
    
    (*
        fn read(input: Goldilocks) -> i128 {
            input.value as i128
        }
    *)
    Definition read (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ input ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          M.cast
            (Ty.path "i128")
            (M.read (|
              M.SubPointer.get_struct_record_field (|
                input,
                "p3_goldilocks::goldilocks::Goldilocks",
                "value"
              |)
            |))))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn parity_dot<const N: usize>(u: [i128; N], v: [i64; N]) -> i128 {
            let mut s = 0i128;
            for i in 0..N {
                s += u[i] * v[i] as i128;
            }
            s
        }
    *)
    Definition parity_dot (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ N ], [], [ u; v ] =>
        ltac:(M.monadic
          (let u := M.alloc (| u |) in
          let v := M.alloc (| v |) in
          M.read (|
            let~ s : Ty.apply (Ty.path "*") [] [ Ty.path "i128" ] :=
              M.alloc (| Value.Integer IntegerKind.I128 0 |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", N) ]
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let i := M.copy (| γ0_0 |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          let β := s in
                                          M.write (|
                                            β,
                                            M.call_closure (|
                                              Ty.path "i128",
                                              BinOp.Wrap.add,
                                              [
                                                M.read (| β |);
                                                M.call_closure (|
                                                  Ty.path "i128",
                                                  BinOp.Wrap.mul,
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        u,
                                                        M.read (| i |)
                                                      |)
                                                    |);
                                                    M.cast
                                                      (Ty.path "i128")
                                                      (M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          v,
                                                          M.read (| i |)
                                                        |)
                                                      |))
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            s
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn reduce(z: i128) -> Goldilocks {
            debug_assert!(z >= 0);
            reduce128(z as u128)
        }
    *)
    Definition reduce (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ z ] =>
        ltac:(M.monadic
          (let z := M.alloc (| z |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.ge,
                                          [ M.read (| z |); Value.Integer IntegerKind.I128 0 ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic", [], [] |),
                                      [ mk_str (| "assertion failed: z >= 0" |) ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "p3_goldilocks::goldilocks::Goldilocks",
                M.get_function (| "p3_goldilocks::goldilocks::reduce128", [], [] |),
                [ M.cast (Ty.path "u128") (M.read (| z |)) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_mds::karatsuba_convolution::Convolve"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.path "p3_goldilocks::goldilocks::Goldilocks";
          Ty.path "i128";
          Ty.path "i64";
          Ty.path "i128"
        ]
        Self
        (* Instance *)
        [
          ("read", InstanceField.Method read);
          ("parity_dot", InstanceField.Method parity_dot);
          ("reduce", InstanceField.Method reduce)
        ].
  End Impl_p3_mds_karatsuba_convolution_Convolve_p3_goldilocks_goldilocks_Goldilocks_i128_i64_i128_for_p3_goldilocks_mds_SmallConvolveGoldilocks.
  
  Definition value_FFT_ALGO (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Value.StructTuple "p3_dft::radix_2_bowers::Radix2Bowers" [] |))).
  
  Global Instance Instance_IsConstant_value_FFT_ALGO :
    M.IsFunction.C "p3_goldilocks::mds::FFT_ALGO" value_FFT_ALGO.
  Admitted.
  Global Typeclasses Opaque value_FFT_ALGO.
  
  Definition value_MATRIX_CIRC_MDS_8_SML_ROW
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.Array
          [
            Value.Integer IntegerKind.I64 7;
            Value.Integer IntegerKind.I64 1;
            Value.Integer IntegerKind.I64 3;
            Value.Integer IntegerKind.I64 8;
            Value.Integer IntegerKind.I64 8;
            Value.Integer IntegerKind.I64 3;
            Value.Integer IntegerKind.I64 4;
            Value.Integer IntegerKind.I64 9
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_MATRIX_CIRC_MDS_8_SML_ROW :
    M.IsFunction.C "p3_goldilocks::mds::MATRIX_CIRC_MDS_8_SML_ROW" value_MATRIX_CIRC_MDS_8_SML_ROW.
  Admitted.
  Global Typeclasses Opaque value_MATRIX_CIRC_MDS_8_SML_ROW.
  
  Module Impl_p3_symmetric_permutation_Permutation_array_Usize_8_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    (*
        fn permute(&self, input: [Goldilocks; 8]) -> [Goldilocks; 8] {
            const MATRIX_CIRC_MDS_8_SML_COL: [i64; 8] =
                first_row_to_first_col(&MATRIX_CIRC_MDS_8_SML_ROW);
            SmallConvolveGoldilocks::apply(
                input,
                MATRIX_CIRC_MDS_8_SML_COL,
                SmallConvolveGoldilocks::conv8,
            )
        }
    *)
    Definition permute (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 8 ]
              [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ],
            M.get_trait_method (|
              "p3_mds::karatsuba_convolution::Convolve",
              Ty.path "p3_goldilocks::mds::SmallConvolveGoldilocks",
              [],
              [
                Ty.path "p3_goldilocks::goldilocks::Goldilocks";
                Ty.path "i128";
                Ty.path "i64";
                Ty.path "i128"
              ],
              "apply",
              [ Value.Integer IntegerKind.Usize 8 ],
              [
                Ty.function
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [ Ty.path "i128" ];
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [ Ty.path "i64" ];
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "i128" ] ]
                  ]
                  (Ty.tuple [])
              ]
            |),
            [
              M.read (| input |);
              M.read (|
                get_constant (|
                  "p3_goldilocks::mds::permute::MATRIX_CIRC_MDS_8_SML_COL",
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ Ty.path "i64" ]
                |)
              |);
              M.get_trait_method (|
                "p3_mds::karatsuba_convolution::Convolve",
                Ty.path "p3_goldilocks::mds::SmallConvolveGoldilocks",
                [],
                [
                  Ty.path "p3_goldilocks::goldilocks::Goldilocks";
                  Ty.path "i128";
                  Ty.path "i64";
                  Ty.path "i128"
                ],
                "conv8",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_mut(&self, input: &mut [Goldilocks; 8]) {
            *input = self.permute( *input);
        }
    *)
    Definition permute_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| input |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks",
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
                      ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| M.deref (| M.read (| input |) |) |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "array")
            [ Value.Integer IntegerKind.Usize 8 ]
            [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
        ]
        Self
        (* Instance *)
        [
          ("permute", InstanceField.Method permute);
          ("permute_mut", InstanceField.Method permute_mut)
        ].
  End Impl_p3_symmetric_permutation_Permutation_array_Usize_8_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Module Impl_p3_mds_MdsPermutation_Usize_8_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 8 ]
        (* Trait polymorphic types *) [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
        Self
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_Usize_8_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Definition value_MATRIX_CIRC_MDS_12_SML_ROW
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.Array
          [
            Value.Integer IntegerKind.I64 1;
            Value.Integer IntegerKind.I64 1;
            Value.Integer IntegerKind.I64 2;
            Value.Integer IntegerKind.I64 1;
            Value.Integer IntegerKind.I64 8;
            Value.Integer IntegerKind.I64 9;
            Value.Integer IntegerKind.I64 10;
            Value.Integer IntegerKind.I64 7;
            Value.Integer IntegerKind.I64 5;
            Value.Integer IntegerKind.I64 9;
            Value.Integer IntegerKind.I64 4;
            Value.Integer IntegerKind.I64 10
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_MATRIX_CIRC_MDS_12_SML_ROW :
    M.IsFunction.C
      "p3_goldilocks::mds::MATRIX_CIRC_MDS_12_SML_ROW"
      value_MATRIX_CIRC_MDS_12_SML_ROW.
  Admitted.
  Global Typeclasses Opaque value_MATRIX_CIRC_MDS_12_SML_ROW.
  
  Module Impl_p3_symmetric_permutation_Permutation_array_Usize_12_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    (*
        fn permute(&self, input: [Goldilocks; 12]) -> [Goldilocks; 12] {
            const MATRIX_CIRC_MDS_12_SML_COL: [i64; 12] =
                first_row_to_first_col(&MATRIX_CIRC_MDS_12_SML_ROW);
            SmallConvolveGoldilocks::apply(
                input,
                MATRIX_CIRC_MDS_12_SML_COL,
                SmallConvolveGoldilocks::conv12,
            )
        }
    *)
    Definition permute (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 12 ]
              [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ],
            M.get_trait_method (|
              "p3_mds::karatsuba_convolution::Convolve",
              Ty.path "p3_goldilocks::mds::SmallConvolveGoldilocks",
              [],
              [
                Ty.path "p3_goldilocks::goldilocks::Goldilocks";
                Ty.path "i128";
                Ty.path "i64";
                Ty.path "i128"
              ],
              "apply",
              [ Value.Integer IntegerKind.Usize 12 ],
              [
                Ty.function
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 12 ]
                      [ Ty.path "i128" ];
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 12 ]
                      [ Ty.path "i64" ];
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "i128" ] ]
                  ]
                  (Ty.tuple [])
              ]
            |),
            [
              M.read (| input |);
              M.read (|
                get_constant (|
                  "p3_goldilocks::mds::permute::MATRIX_CIRC_MDS_12_SML_COL",
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 12 ]
                    [ Ty.path "i64" ]
                |)
              |);
              M.get_trait_method (|
                "p3_mds::karatsuba_convolution::Convolve",
                Ty.path "p3_goldilocks::mds::SmallConvolveGoldilocks",
                [],
                [
                  Ty.path "p3_goldilocks::goldilocks::Goldilocks";
                  Ty.path "i128";
                  Ty.path "i64";
                  Ty.path "i128"
                ],
                "conv12",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_mut(&self, input: &mut [Goldilocks; 12]) {
            *input = self.permute( *input);
        }
    *)
    Definition permute_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| input |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 12 ]
                      [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks",
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 12 ]
                          [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
                      ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| M.deref (| M.read (| input |) |) |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "array")
            [ Value.Integer IntegerKind.Usize 12 ]
            [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
        ]
        Self
        (* Instance *)
        [
          ("permute", InstanceField.Method permute);
          ("permute_mut", InstanceField.Method permute_mut)
        ].
  End Impl_p3_symmetric_permutation_Permutation_array_Usize_12_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Module Impl_p3_mds_MdsPermutation_Usize_12_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 12 ]
        (* Trait polymorphic types *) [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
        Self
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_Usize_12_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Definition value_MATRIX_CIRC_MDS_16_SML_ROW
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.Array
          [
            Value.Integer IntegerKind.I64 1;
            Value.Integer IntegerKind.I64 1;
            Value.Integer IntegerKind.I64 51;
            Value.Integer IntegerKind.I64 1;
            Value.Integer IntegerKind.I64 11;
            Value.Integer IntegerKind.I64 17;
            Value.Integer IntegerKind.I64 2;
            Value.Integer IntegerKind.I64 1;
            Value.Integer IntegerKind.I64 101;
            Value.Integer IntegerKind.I64 63;
            Value.Integer IntegerKind.I64 15;
            Value.Integer IntegerKind.I64 2;
            Value.Integer IntegerKind.I64 67;
            Value.Integer IntegerKind.I64 22;
            Value.Integer IntegerKind.I64 13;
            Value.Integer IntegerKind.I64 3
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_MATRIX_CIRC_MDS_16_SML_ROW :
    M.IsFunction.C
      "p3_goldilocks::mds::MATRIX_CIRC_MDS_16_SML_ROW"
      value_MATRIX_CIRC_MDS_16_SML_ROW.
  Admitted.
  Global Typeclasses Opaque value_MATRIX_CIRC_MDS_16_SML_ROW.
  
  Module Impl_p3_symmetric_permutation_Permutation_array_Usize_16_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    (*
        fn permute(&self, input: [Goldilocks; 16]) -> [Goldilocks; 16] {
            const MATRIX_CIRC_MDS_16_SML_COL: [i64; 16] =
                first_row_to_first_col(&MATRIX_CIRC_MDS_16_SML_ROW);
            SmallConvolveGoldilocks::apply(
                input,
                MATRIX_CIRC_MDS_16_SML_COL,
                SmallConvolveGoldilocks::conv16,
            )
        }
    *)
    Definition permute (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 16 ]
              [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ],
            M.get_trait_method (|
              "p3_mds::karatsuba_convolution::Convolve",
              Ty.path "p3_goldilocks::mds::SmallConvolveGoldilocks",
              [],
              [
                Ty.path "p3_goldilocks::goldilocks::Goldilocks";
                Ty.path "i128";
                Ty.path "i64";
                Ty.path "i128"
              ],
              "apply",
              [ Value.Integer IntegerKind.Usize 16 ],
              [
                Ty.function
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 16 ]
                      [ Ty.path "i128" ];
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 16 ]
                      [ Ty.path "i64" ];
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "i128" ] ]
                  ]
                  (Ty.tuple [])
              ]
            |),
            [
              M.read (| input |);
              M.read (|
                get_constant (|
                  "p3_goldilocks::mds::permute::MATRIX_CIRC_MDS_16_SML_COL",
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 16 ]
                    [ Ty.path "i64" ]
                |)
              |);
              M.get_trait_method (|
                "p3_mds::karatsuba_convolution::Convolve",
                Ty.path "p3_goldilocks::mds::SmallConvolveGoldilocks",
                [],
                [
                  Ty.path "p3_goldilocks::goldilocks::Goldilocks";
                  Ty.path "i128";
                  Ty.path "i64";
                  Ty.path "i128"
                ],
                "conv16",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_mut(&self, input: &mut [Goldilocks; 16]) {
            *input = self.permute( *input);
        }
    *)
    Definition permute_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| input |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 16 ]
                      [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks",
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 16 ]
                          [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
                      ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| M.deref (| M.read (| input |) |) |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "array")
            [ Value.Integer IntegerKind.Usize 16 ]
            [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
        ]
        Self
        (* Instance *)
        [
          ("permute", InstanceField.Method permute);
          ("permute_mut", InstanceField.Method permute_mut)
        ].
  End Impl_p3_symmetric_permutation_Permutation_array_Usize_16_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Module Impl_p3_mds_MdsPermutation_Usize_16_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 16 ]
        (* Trait polymorphic types *) [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
        Self
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_Usize_16_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Definition value_MATRIX_CIRC_MDS_24_GOLDILOCKS
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.Array
          [
            Value.Integer IntegerKind.U64 6917529026031168171;
            Value.Integer IntegerKind.U64 2594665710139467350;
            Value.Integer IntegerKind.U64 8928676727546211829;
            Value.Integer IntegerKind.U64 2486697547729099362;
            Value.Integer IntegerKind.U64 16142902660452610504;
            Value.Integer IntegerKind.U64 8749568676760001123;
            Value.Integer IntegerKind.U64 15833459999171796451;
            Value.Integer IntegerKind.U64 2573964288754829762;
            Value.Integer IntegerKind.U64 2306700837125844407;
            Value.Integer IntegerKind.U64 2577121421704437277;
            Value.Integer IntegerKind.U64 1122442809489569326;
            Value.Integer IntegerKind.U64 14310083402291774730;
            Value.Integer IntegerKind.U64 16140901060737528264;
            Value.Integer IntegerKind.U64 13932536178110956290;
            Value.Integer IntegerKind.U64 14131600989728140786;
            Value.Integer IntegerKind.U64 1763293103076435042;
            Value.Integer IntegerKind.U64 6916671197581048296;
            Value.Integer IntegerKind.U64 2036153767895906702;
            Value.Integer IntegerKind.U64 7224970087596154330;
            Value.Integer IntegerKind.U64 8569747244845440917;
            Value.Integer IntegerKind.U64 2303841408961973817;
            Value.Integer IntegerKind.U64 2396259962197155997;
            Value.Integer IntegerKind.U64 3487395577358169633;
            Value.Integer IntegerKind.U64 2573512939445538524
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_MATRIX_CIRC_MDS_24_GOLDILOCKS :
    M.IsFunction.C
      "p3_goldilocks::mds::MATRIX_CIRC_MDS_24_GOLDILOCKS"
      value_MATRIX_CIRC_MDS_24_GOLDILOCKS.
  Admitted.
  Global Typeclasses Opaque value_MATRIX_CIRC_MDS_24_GOLDILOCKS.
  
  Module Impl_p3_symmetric_permutation_Permutation_array_Usize_24_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    (*
        fn permute(&self, input: [Goldilocks; 24]) -> [Goldilocks; 24] {
            apply_circulant(&MATRIX_CIRC_MDS_24_GOLDILOCKS, input)
        }
    *)
    Definition permute (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 24 ]
              [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ],
            M.get_function (|
              "p3_mds::util::apply_circulant",
              [ Value.Integer IntegerKind.Usize 24 ],
              [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    get_constant (|
                      "p3_goldilocks::mds::MATRIX_CIRC_MDS_24_GOLDILOCKS",
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 24 ]
                        [ Ty.path "u64" ]
                    |)
                  |)
                |)
              |);
              M.read (| input |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_mut(&self, input: &mut [Goldilocks; 24]) {
            *input = self.permute( *input);
        }
    *)
    Definition permute_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| input |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 24 ]
                      [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks",
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 24 ]
                          [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
                      ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| M.deref (| M.read (| input |) |) |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "array")
            [ Value.Integer IntegerKind.Usize 24 ]
            [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
        ]
        Self
        (* Instance *)
        [
          ("permute", InstanceField.Method permute);
          ("permute_mut", InstanceField.Method permute_mut)
        ].
  End Impl_p3_symmetric_permutation_Permutation_array_Usize_24_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Module Impl_p3_mds_MdsPermutation_Usize_24_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 24 ]
        (* Trait polymorphic types *) [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
        Self
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_Usize_24_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Definition value_MATRIX_CIRC_MDS_32_GOLDILOCKS
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.Array
          [
            Value.Integer IntegerKind.U64 576460752303423488;
            Value.Integer IntegerKind.U64 7576341314108803365;
            Value.Integer IntegerKind.U64 4232643330878141819;
            Value.Integer IntegerKind.U64 2975281301379934010;
            Value.Integer IntegerKind.U64 6476970999348970918;
            Value.Integer IntegerKind.U64 612416985841271328;
            Value.Integer IntegerKind.U64 11913334469707475606;
            Value.Integer IntegerKind.U64 17293964401805590533;
            Value.Integer IntegerKind.U64 7263405477305149850;
            Value.Integer IntegerKind.U64 6562779887872063961;
            Value.Integer IntegerKind.U64 12486887116834002346;
            Value.Integer IntegerKind.U64 15729223723444788106;
            Value.Integer IntegerKind.U64 5392663172032664757;
            Value.Integer IntegerKind.U64 11864366643481450195;
            Value.Integer IntegerKind.U64 12055750695168234409;
            Value.Integer IntegerKind.U64 14310385338934946188;
            Value.Integer IntegerKind.U64 12105675795508581718;
            Value.Integer IntegerKind.U64 5380300353489775275;
            Value.Integer IntegerKind.U64 12702363240630394737;
            Value.Integer IntegerKind.U64 10061860401368713651;
            Value.Integer IntegerKind.U64 15157261934985432366;
            Value.Integer IntegerKind.U64 12093643474696317430;
            Value.Integer IntegerKind.U64 10047128541333234844;
            Value.Integer IntegerKind.U64 18062390355220769453;
            Value.Integer IntegerKind.U64 14642103105070981940;
            Value.Integer IntegerKind.U64 15076669885533893239;
            Value.Integer IntegerKind.U64 5022197013251962698;
            Value.Integer IntegerKind.U64 5956948572525647211;
            Value.Integer IntegerKind.U64 7560749023753696919;
            Value.Integer IntegerKind.U64 10026785838912675131;
            Value.Integer IntegerKind.U64 714985852497066761;
            Value.Integer IntegerKind.U64 3213966111407294885
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_MATRIX_CIRC_MDS_32_GOLDILOCKS :
    M.IsFunction.C
      "p3_goldilocks::mds::MATRIX_CIRC_MDS_32_GOLDILOCKS"
      value_MATRIX_CIRC_MDS_32_GOLDILOCKS.
  Admitted.
  Global Typeclasses Opaque value_MATRIX_CIRC_MDS_32_GOLDILOCKS.
  
  Module Impl_p3_symmetric_permutation_Permutation_array_Usize_32_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    (*
        fn permute(&self, input: [Goldilocks; 32]) -> [Goldilocks; 32] {
            const ENTRIES: [u64; 32] = first_row_to_first_col(&MATRIX_CIRC_MDS_32_GOLDILOCKS);
            apply_circulant_fft(FFT_ALGO, ENTRIES, &input)
        }
    *)
    Definition permute (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 32 ]
              [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ],
            M.get_function (|
              "p3_mds::util::apply_circulant_fft",
              [ Value.Integer IntegerKind.Usize 32 ],
              [
                Ty.path "p3_goldilocks::goldilocks::Goldilocks";
                Ty.path "p3_dft::radix_2_bowers::Radix2Bowers"
              ]
            |),
            [
              M.read (|
                get_constant (|
                  "p3_goldilocks::mds::FFT_ALGO",
                  Ty.path "p3_dft::radix_2_bowers::Radix2Bowers"
                |)
              |);
              M.read (|
                get_constant (|
                  "p3_goldilocks::mds::permute::ENTRIES",
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 32 ]
                    [ Ty.path "u64" ]
                |)
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.borrow (| Pointer.Kind.Ref, input |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_mut(&self, input: &mut [Goldilocks; 32]) {
            *input = self.permute( *input);
        }
    *)
    Definition permute_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| input |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks",
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
                      ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| M.deref (| M.read (| input |) |) |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "array")
            [ Value.Integer IntegerKind.Usize 32 ]
            [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
        ]
        Self
        (* Instance *)
        [
          ("permute", InstanceField.Method permute);
          ("permute_mut", InstanceField.Method permute_mut)
        ].
  End Impl_p3_symmetric_permutation_Permutation_array_Usize_32_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Module Impl_p3_mds_MdsPermutation_Usize_32_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 32 ]
        (* Trait polymorphic types *) [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
        Self
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_Usize_32_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Definition value_MATRIX_CIRC_MDS_64_GOLDILOCKS
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.Array
          [
            Value.Integer IntegerKind.U64 576460752236314624;
            Value.Integer IntegerKind.U64 18158513693329981441;
            Value.Integer IntegerKind.U64 4858740625349466990;
            Value.Integer IntegerKind.U64 5380300353489775275;
            Value.Integer IntegerKind.U64 5022315594189818726;
            Value.Integer IntegerKind.U64 4307618807347444680;
            Value.Integer IntegerKind.U64 7140675123575081555;
            Value.Integer IntegerKind.U64 14643017462390240104;
            Value.Integer IntegerKind.U64 12987455129285851500;
            Value.Integer IntegerKind.U64 18157383378062277629;
            Value.Integer IntegerKind.U64 9817212840249795088;
            Value.Integer IntegerKind.U64 9977313437574929827;
            Value.Integer IntegerKind.U64 17870001704695496705;
            Value.Integer IntegerKind.U64 8898131806318740604;
            Value.Integer IntegerKind.U64 17289390442159243139;
            Value.Integer IntegerKind.U64 3231529968755438282;
            Value.Integer IntegerKind.U64 10952756050420092519;
            Value.Integer IntegerKind.U64 18158509295350578177;
            Value.Integer IntegerKind.U64 10731033880842651176;
            Value.Integer IntegerKind.U64 15733988623389634079;
            Value.Integer IntegerKind.U64 18442170659321692159;
            Value.Integer IntegerKind.U64 13562726354327420025;
            Value.Integer IntegerKind.U64 13011703514980988659;
            Value.Integer IntegerKind.U64 2141059593666438263;
            Value.Integer IntegerKind.U64 8647440078907375376;
            Value.Integer IntegerKind.U64 18160769873875829769;
            Value.Integer IntegerKind.U64 3999475761173426716;
            Value.Integer IntegerKind.U64 10048827240205135252;
            Value.Integer IntegerKind.U64 3631180266689435939;
            Value.Integer IntegerKind.U64 4306500913260118980;
            Value.Integer IntegerKind.U64 8768271440878902003;
            Value.Integer IntegerKind.U64 11396185639073510952;
            Value.Integer IntegerKind.U64 5956761105726089899;
            Value.Integer IntegerKind.U64 18158513693195763713;
            Value.Integer IntegerKind.U64 17870283317245378561;
            Value.Integer IntegerKind.U64 3228180212093865165;
            Value.Integer IntegerKind.U64 14927299477138874800;
            Value.Integer IntegerKind.U64 13567159279206235209;
            Value.Integer IntegerKind.U64 15651782846710935677;
            Value.Integer IntegerKind.U64 12491459968582210986;
            Value.Integer IntegerKind.U64 18412703205591937505;
            Value.Integer IntegerKind.U64 18159635212236225541;
            Value.Integer IntegerKind.U64 15173917579729482918;
            Value.Integer IntegerKind.U64 7823436250821745509;
            Value.Integer IntegerKind.U64 2223692428017551671;
            Value.Integer IntegerKind.U64 8969908472979932029;
            Value.Integer IntegerKind.U64 11915000324447458604;
            Value.Integer IntegerKind.U64 5374718107188630694;
            Value.Integer IntegerKind.U64 18331450159748716545;
            Value.Integer IntegerKind.U64 18158518091443602433;
            Value.Integer IntegerKind.U64 2217161475366866314;
            Value.Integer IntegerKind.U64 11393576184446667355;
            Value.Integer IntegerKind.U64 15647485564039161052;
            Value.Integer IntegerKind.U64 4303044601692044152;
            Value.Integer IntegerKind.U64 18446743932042674209;
            Value.Integer IntegerKind.U64 6474054332035261081;
            Value.Integer IntegerKind.U64 14071893378084480181;
            Value.Integer IntegerKind.U64 18156266308608721913;
            Value.Integer IntegerKind.U64 6831286866257651793;
            Value.Integer IntegerKind.U64 7895475781513922934;
            Value.Integer IntegerKind.U64 12154759492517243801;
            Value.Integer IntegerKind.U64 13566043034386449477;
            Value.Integer IntegerKind.U64 16133004338111741504;
            Value.Integer IntegerKind.U64 15729143380588139082
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_MATRIX_CIRC_MDS_64_GOLDILOCKS :
    M.IsFunction.C
      "p3_goldilocks::mds::MATRIX_CIRC_MDS_64_GOLDILOCKS"
      value_MATRIX_CIRC_MDS_64_GOLDILOCKS.
  Admitted.
  Global Typeclasses Opaque value_MATRIX_CIRC_MDS_64_GOLDILOCKS.
  
  Module Impl_p3_symmetric_permutation_Permutation_array_Usize_64_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    (*
        fn permute(&self, input: [Goldilocks; 64]) -> [Goldilocks; 64] {
            const ENTRIES: [u64; 64] = first_row_to_first_col(&MATRIX_CIRC_MDS_64_GOLDILOCKS);
            apply_circulant_fft(FFT_ALGO, ENTRIES, &input)
        }
    *)
    Definition permute (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 64 ]
              [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ],
            M.get_function (|
              "p3_mds::util::apply_circulant_fft",
              [ Value.Integer IntegerKind.Usize 64 ],
              [
                Ty.path "p3_goldilocks::goldilocks::Goldilocks";
                Ty.path "p3_dft::radix_2_bowers::Radix2Bowers"
              ]
            |),
            [
              M.read (|
                get_constant (|
                  "p3_goldilocks::mds::FFT_ALGO",
                  Ty.path "p3_dft::radix_2_bowers::Radix2Bowers"
                |)
              |);
              M.read (|
                get_constant (|
                  "p3_goldilocks::mds::permute::ENTRIES",
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 64 ]
                    [ Ty.path "u64" ]
                |)
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.borrow (| Pointer.Kind.Ref, input |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_mut(&self, input: &mut [Goldilocks; 64]) {
            *input = self.permute( *input);
        }
    *)
    Definition permute_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| input |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 64 ]
                      [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks",
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 64 ]
                          [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
                      ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| M.deref (| M.read (| input |) |) |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "array")
            [ Value.Integer IntegerKind.Usize 64 ]
            [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
        ]
        Self
        (* Instance *)
        [
          ("permute", InstanceField.Method permute);
          ("permute_mut", InstanceField.Method permute_mut)
        ].
  End Impl_p3_symmetric_permutation_Permutation_array_Usize_64_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Module Impl_p3_mds_MdsPermutation_Usize_64_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 64 ]
        (* Trait polymorphic types *) [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
        Self
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_Usize_64_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Definition value_MATRIX_CIRC_MDS_68_GOLDILOCKS
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.Array
          [
            Value.Integer IntegerKind.U64 271275649090206780;
            Value.Integer IntegerKind.U64 7465191119235169405;
            Value.Integer IntegerKind.U64 15748010690838048827;
            Value.Integer IntegerKind.U64 2189907731641455145;
            Value.Integer IntegerKind.U64 10536692637845038726;
            Value.Integer IntegerKind.U64 7936420152229996740;
            Value.Integer IntegerKind.U64 8918273543568517946;
            Value.Integer IntegerKind.U64 10412891406777177340;
            Value.Integer IntegerKind.U64 10709964159165112046;
            Value.Integer IntegerKind.U64 9612105236608260553;
            Value.Integer IntegerKind.U64 1585394966113897953;
            Value.Integer IntegerKind.U64 18446044809146671275;
            Value.Integer IntegerKind.U64 2431354478429793642;
            Value.Integer IntegerKind.U64 10001951866903388995;
            Value.Integer IntegerKind.U64 18430736378507738542;
            Value.Integer IntegerKind.U64 13984107499717922637;
            Value.Integer IntegerKind.U64 11261964000454675910;
            Value.Integer IntegerKind.U64 7324444153682955662;
            Value.Integer IntegerKind.U64 10708918948449014042;
            Value.Integer IntegerKind.U64 2573472369486839378;
            Value.Integer IntegerKind.U64 15353490070083164725;
            Value.Integer IntegerKind.U64 17670942257804425738;
            Value.Integer IntegerKind.U64 13437704530023854541;
            Value.Integer IntegerKind.U64 5445864171737617233;
            Value.Integer IntegerKind.U64 7292655891034853835;
            Value.Integer IntegerKind.U64 7205866835094373381;
            Value.Integer IntegerKind.U64 1037765223939609361;
            Value.Integer IntegerKind.U64 3587227720350127487;
            Value.Integer IntegerKind.U64 1049779417187133683;
            Value.Integer IntegerKind.U64 5971548168641902873;
            Value.Integer IntegerKind.U64 4327790569699960229;
            Value.Integer IntegerKind.U64 13727412105316204593;
            Value.Integer IntegerKind.U64 6918530248077218072;
            Value.Integer IntegerKind.U64 8354464902371715211;
            Value.Integer IntegerKind.U64 18356318853051182061;
            Value.Integer IntegerKind.U64 8021498326353458279;
            Value.Integer IntegerKind.U64 18135453773930245974;
            Value.Integer IntegerKind.U64 1824038370176468598;
            Value.Integer IntegerKind.U64 2920114925766556607;
            Value.Integer IntegerKind.U64 1562753292205916631;
            Value.Integer IntegerKind.U64 4201433616803234040;
            Value.Integer IntegerKind.U64 7837296383066760864;
            Value.Integer IntegerKind.U64 9089361929032967653;
            Value.Integer IntegerKind.U64 548556620554639894;
            Value.Integer IntegerKind.U64 17011688094859185361;
            Value.Integer IntegerKind.U64 14937439602419403278;
            Value.Integer IntegerKind.U64 13959873883272485414;
            Value.Integer IntegerKind.U64 13130905733325897184;
            Value.Integer IntegerKind.U64 4873085061467210119;
            Value.Integer IntegerKind.U64 9100447910491967200;
            Value.Integer IntegerKind.U64 8305011495029382235;
            Value.Integer IntegerKind.U64 11013789656095545947;
            Value.Integer IntegerKind.U64 6163688520267989176;
            Value.Integer IntegerKind.U64 12889118373529593097;
            Value.Integer IntegerKind.U64 18067376856198695482;
            Value.Integer IntegerKind.U64 8072210505730930325;
            Value.Integer IntegerKind.U64 18421501637782139838;
            Value.Integer IntegerKind.U64 3142567615424221273;
            Value.Integer IntegerKind.U64 9055796506489509342;
            Value.Integer IntegerKind.U64 12298617341496868515;
            Value.Integer IntegerKind.U64 12143256562117758294;
            Value.Integer IntegerKind.U64 8698453937620994506;
            Value.Integer IntegerKind.U64 14393233233280171942;
            Value.Integer IntegerKind.U64 8693648498431067059;
            Value.Integer IntegerKind.U64 14633759743031073964;
            Value.Integer IntegerKind.U64 12213341685221239628;
            Value.Integer IntegerKind.U64 11513509197872118169;
            Value.Integer IntegerKind.U64 29986708444946460
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_MATRIX_CIRC_MDS_68_GOLDILOCKS :
    M.IsFunction.C
      "p3_goldilocks::mds::MATRIX_CIRC_MDS_68_GOLDILOCKS"
      value_MATRIX_CIRC_MDS_68_GOLDILOCKS.
  Admitted.
  Global Typeclasses Opaque value_MATRIX_CIRC_MDS_68_GOLDILOCKS.
  
  Module Impl_p3_symmetric_permutation_Permutation_array_Usize_68_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    (*
        fn permute(&self, input: [Goldilocks; 68]) -> [Goldilocks; 68] {
            apply_circulant(&MATRIX_CIRC_MDS_68_GOLDILOCKS, input)
        }
    *)
    Definition permute (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 68 ]
              [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ],
            M.get_function (|
              "p3_mds::util::apply_circulant",
              [ Value.Integer IntegerKind.Usize 68 ],
              [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    get_constant (|
                      "p3_goldilocks::mds::MATRIX_CIRC_MDS_68_GOLDILOCKS",
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 68 ]
                        [ Ty.path "u64" ]
                    |)
                  |)
                |)
              |);
              M.read (| input |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_mut(&self, input: &mut [Goldilocks; 68]) {
            *input = self.permute( *input);
        }
    *)
    Definition permute_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| input |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 68 ]
                      [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks",
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 68 ]
                          [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
                      ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| M.deref (| M.read (| input |) |) |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "array")
            [ Value.Integer IntegerKind.Usize 68 ]
            [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
        ]
        Self
        (* Instance *)
        [
          ("permute", InstanceField.Method permute);
          ("permute_mut", InstanceField.Method permute_mut)
        ].
  End Impl_p3_symmetric_permutation_Permutation_array_Usize_68_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
  
  Module Impl_p3_mds_MdsPermutation_Usize_68_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
    Definition Self : Ty.t := Ty.path "p3_goldilocks::mds::MdsMatrixGoldilocks".
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 68 ]
        (* Trait polymorphic types *) [ Ty.path "p3_goldilocks::goldilocks::Goldilocks" ]
        Self
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_Usize_68_p3_goldilocks_goldilocks_Goldilocks_for_p3_goldilocks_mds_MdsMatrixGoldilocks.
End mds.
