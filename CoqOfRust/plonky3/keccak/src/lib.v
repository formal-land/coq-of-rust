(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructTuple
  {
    name := "KeccakF";
    const_params := [];
    ty_params := [];
    fields := [];
  } *)

Module Impl_core_marker_Copy_for_p3_keccak_KeccakF.
  Definition Self : Ty.t := Ty.path "p3_keccak::KeccakF".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_Copy_for_p3_keccak_KeccakF.

Module Impl_core_clone_Clone_for_p3_keccak_KeccakF.
  Definition Self : Ty.t := Ty.path "p3_keccak::KeccakF".
  
  (* Clone *)
  Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.read (| M.deref (| M.read (| self |) |) |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_p3_keccak_KeccakF.

Module Impl_core_fmt_Debug_for_p3_keccak_KeccakF.
  Definition Self : Ty.t := Ty.path "p3_keccak::KeccakF".
  
  (* Debug *)
  Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; Ty.path "core::fmt::Error" ],
          M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
          [
            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "KeccakF" |) |) |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_p3_keccak_KeccakF.

Module Impl_p3_symmetric_permutation_Permutation_array_Usize_25_u64_for_p3_keccak_KeccakF.
  Definition Self : Ty.t := Ty.path "p3_keccak::KeccakF".
  
  (*
      fn permute_mut(&self, input: &mut [u64; 25]) {
          keccakf(input);
      }
  *)
  Definition permute_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; input ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let input := M.alloc (| input |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "tiny_keccak::keccakf::keccakf", [], [] |),
                [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |) ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "p3_symmetric::permutation::Permutation"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *)
      [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 25 ] [ Ty.path "u64" ] ]
      Self
      (* Instance *) [ ("permute_mut", InstanceField.Method permute_mut) ].
End Impl_p3_symmetric_permutation_Permutation_array_Usize_25_u64_for_p3_keccak_KeccakF.

Module Impl_p3_symmetric_permutation_CryptographicPermutation_array_Usize_25_u64_for_p3_keccak_KeccakF.
  Definition Self : Ty.t := Ty.path "p3_keccak::KeccakF".
  
  Axiom Implements :
    M.IsTraitInstance
      "p3_symmetric::permutation::CryptographicPermutation"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *)
      [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 25 ] [ Ty.path "u64" ] ]
      Self
      (* Instance *) [].
End Impl_p3_symmetric_permutation_CryptographicPermutation_array_Usize_25_u64_for_p3_keccak_KeccakF.

Module Impl_p3_symmetric_permutation_Permutation_array_Usize_200_u8_for_p3_keccak_KeccakF.
  Definition Self : Ty.t := Ty.path "p3_keccak::KeccakF".
  
  (*
      fn permute(&self, input_u8s: [u8; 200]) -> [u8; 200] {
          let mut state_u64s: [u64; 25] = core::array::from_fn(|i| {
              u64::from_le_bytes(input_u8s[i * 8..][..8].try_into().unwrap())
          });
  
          keccakf(&mut state_u64s);
  
          core::array::from_fn(|i| {
              let u64_limb = state_u64s[i / 8];
              u64_limb.to_le_bytes()[i % 8]
          })
      }
  *)
  Definition permute (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; input_u8s ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let input_u8s := M.alloc (| input_u8s |) in
        M.read (|
          let~ state_u64s :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 25 ]
                    [ Ty.path "u64" ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 25 ] [ Ty.path "u64" ],
                M.get_function (|
                  "core::array::from_fn",
                  [ Value.Integer IntegerKind.Usize 25 ],
                  [ Ty.path "u64"; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "u64") ]
                |),
                [
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "u64") ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let i := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.path "u64",
                                      M.get_associated_function (|
                                        Ty.path "u64",
                                        "from_le_bytes",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [ Ty.path "u8" ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 8 ]
                                                  [ Ty.path "u8" ];
                                                Ty.path "core::array::TryFromSliceError"
                                              ],
                                            "unwrap",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 8 ]
                                                    [ Ty.path "u8" ];
                                                  Ty.path "core::array::TryFromSliceError"
                                                ],
                                              M.get_trait_method (|
                                                "core::convert::TryInto",
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ]
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 8 ]
                                                    [ Ty.path "u8" ]
                                                ],
                                                "try_into",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::index::Index",
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u8" ],
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::RangeTo")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ],
                                                        "index",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "u8" ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::index::Index",
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      200
                                                                  ]
                                                                  [ Ty.path "u8" ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::RangeFrom")
                                                                    []
                                                                    [ Ty.path "usize" ]
                                                                ],
                                                                "index",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  input_u8s
                                                                |);
                                                                Value.StructRecord
                                                                  "core::ops::range::RangeFrom"
                                                                  [
                                                                    ("start",
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.mul,
                                                                        [
                                                                          M.read (| i |);
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            8
                                                                        ]
                                                                      |))
                                                                  ]
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        Value.StructRecord
                                                          "core::ops::range::RangeTo"
                                                          [
                                                            ("end_",
                                                              Value.Integer IntegerKind.Usize 8)
                                                          ]
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "tiny_keccak::keccakf::keccakf", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, state_u64s |) |)
                  |)
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 200 ] [ Ty.path "u8" ],
              M.get_function (|
                "core::array::from_fn",
                [ Value.Integer IntegerKind.Usize 200 ],
                [ Ty.path "u8"; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "u8") ]
              |),
              [
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply
                              (Ty.path "*")
                              []
                              [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "u8") ],
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let i := M.copy (| γ |) in
                                  M.read (|
                                    let~ u64_limb : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                      M.copy (|
                                        M.SubPointer.get_array_field (|
                                          state_u64s,
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.div,
                                            [ M.read (| i |); Value.Integer IntegerKind.Usize 8 ]
                                          |)
                                        |)
                                      |) in
                                    M.SubPointer.get_array_field (|
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [ Ty.path "u8" ],
                                          M.get_associated_function (|
                                            Ty.path "u64",
                                            "to_le_bytes",
                                            [],
                                            []
                                          |),
                                          [ M.read (| u64_limb |) ]
                                        |)
                                      |),
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.rem,
                                        [ M.read (| i |); Value.Integer IntegerKind.Usize 8 ]
                                      |)
                                    |)
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  (*
      fn permute_mut(&self, input: &mut [u8; 200]) {
          *input = self.permute( *input);
      }
  *)
  Definition permute_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; input ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let input := M.alloc (| input |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.deref (| M.read (| input |) |),
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 200 ]
                    [ Ty.path "u8" ],
                  M.get_trait_method (|
                    "p3_symmetric::permutation::Permutation",
                    Ty.path "p3_keccak::KeccakF",
                    [],
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 200 ]
                        [ Ty.path "u8" ]
                    ],
                    "permute",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.read (| M.deref (| M.read (| input |) |) |)
                  ]
                |)
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "p3_symmetric::permutation::Permutation"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *)
      [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 200 ] [ Ty.path "u8" ] ]
      Self
      (* Instance *)
      [ ("permute", InstanceField.Method permute); ("permute_mut", InstanceField.Method permute_mut)
      ].
End Impl_p3_symmetric_permutation_Permutation_array_Usize_200_u8_for_p3_keccak_KeccakF.

Module Impl_p3_symmetric_permutation_CryptographicPermutation_array_Usize_200_u8_for_p3_keccak_KeccakF.
  Definition Self : Ty.t := Ty.path "p3_keccak::KeccakF".
  
  Axiom Implements :
    M.IsTraitInstance
      "p3_symmetric::permutation::CryptographicPermutation"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *)
      [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 200 ] [ Ty.path "u8" ] ]
      Self
      (* Instance *) [].
End Impl_p3_symmetric_permutation_CryptographicPermutation_array_Usize_200_u8_for_p3_keccak_KeccakF.

(* StructTuple
  {
    name := "Keccak256Hash";
    const_params := [];
    ty_params := [];
    fields := [];
  } *)

Module Impl_core_marker_Copy_for_p3_keccak_Keccak256Hash.
  Definition Self : Ty.t := Ty.path "p3_keccak::Keccak256Hash".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_Copy_for_p3_keccak_Keccak256Hash.

Module Impl_core_clone_Clone_for_p3_keccak_Keccak256Hash.
  Definition Self : Ty.t := Ty.path "p3_keccak::Keccak256Hash".
  
  (* Clone *)
  Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.read (| M.deref (| M.read (| self |) |) |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_p3_keccak_Keccak256Hash.

Module Impl_core_fmt_Debug_for_p3_keccak_Keccak256Hash.
  Definition Self : Ty.t := Ty.path "p3_keccak::Keccak256Hash".
  
  (* Debug *)
  Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; Ty.path "core::fmt::Error" ],
          M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
          [
            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Keccak256Hash" |) |) |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_p3_keccak_Keccak256Hash.

Module Impl_p3_symmetric_hasher_CryptographicHasher_u8_array_Usize_32_u8_for_p3_keccak_Keccak256Hash.
  Definition Self : Ty.t := Ty.path "p3_keccak::Keccak256Hash".
  
  (*
      fn hash_iter<I>(&self, input: I) -> [u8; 32]
      where
          I: IntoIterator<Item = u8>,
      {
          const BUFLEN: usize = 512; // Tweakable parameter; determined by experiment
          let mut hasher = Keccak::v256();
          p3_util::apply_to_chunks::<BUFLEN, _, _>(input, |buf| hasher.update(buf));
  
          let mut output = [0u8; 32];
          hasher.finalize(&mut output);
          output
      }
  *)
  Definition hash_iter (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ _ as I ], [ self; input ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let input := M.alloc (| input |) in
        M.read (|
          let~ hasher : Ty.apply (Ty.path "*") [] [ Ty.path "tiny_keccak::keccak::Keccak" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "tiny_keccak::keccak::Keccak",
                M.get_associated_function (|
                  Ty.path "tiny_keccak::keccak::Keccak",
                  "v256",
                  [],
                  []
                |),
                []
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_util::apply_to_chunks",
                  [ Value.Integer IntegerKind.Usize 512 ],
                  [
                    I;
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.read (| input |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let buf := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "tiny_keccak::Hasher",
                                        Ty.path "tiny_keccak::keccak::Keccak",
                                        [],
                                        [],
                                        "update",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.MutRef, hasher |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| buf |) |)
                                        |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          let~ output :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
                ] :=
            M.alloc (|
              repeat (| Value.Integer IntegerKind.U8 0, Value.Integer IntegerKind.Usize 32 |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "tiny_keccak::Hasher",
                  Ty.path "tiny_keccak::keccak::Keccak",
                  [],
                  [],
                  "finalize",
                  [],
                  []
                |),
                [
                  M.read (| hasher |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (| M.borrow (| Pointer.Kind.MutRef, output |) |)
                    |))
                ]
              |)
            |) in
          output
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  (*
      fn hash_iter_slices<'a, I>(&self, input: I) -> [u8; 32]
      where
          I: IntoIterator<Item = &'a [u8]>,
      {
          let mut hasher = Keccak::v256();
          for chunk in input {
              hasher.update(chunk);
          }
  
          let mut output = [0u8; 32];
          hasher.finalize(&mut output);
          output
      }
  *)
  Definition hash_iter_slices (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ _ as I ], [ self; input ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let input := M.alloc (| input |) in
        M.read (|
          let~ hasher : Ty.apply (Ty.path "*") [] [ Ty.path "tiny_keccak::keccak::Keccak" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "tiny_keccak::keccak::Keccak",
                M.get_associated_function (|
                  Ty.path "tiny_keccak::keccak::Keccak",
                  "v256",
                  [],
                  []
                |),
                []
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter",
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      I,
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| input |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.associated_in_trait
                                      "core::iter::traits::collect::IntoIterator"
                                      []
                                      []
                                      I
                                      "IntoIter",
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let chunk := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "tiny_keccak::Hasher",
                                            Ty.path "tiny_keccak::keccak::Keccak",
                                            [],
                                            [],
                                            "update",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (| Pointer.Kind.MutRef, hasher |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| chunk |) |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          let~ output :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
                ] :=
            M.alloc (|
              repeat (| Value.Integer IntegerKind.U8 0, Value.Integer IntegerKind.Usize 32 |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "tiny_keccak::Hasher",
                  Ty.path "tiny_keccak::keccak::Keccak",
                  [],
                  [],
                  "finalize",
                  [],
                  []
                |),
                [
                  M.read (| hasher |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (| M.borrow (| Pointer.Kind.MutRef, output |) |)
                    |))
                ]
              |)
            |) in
          output
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "p3_symmetric::hasher::CryptographicHasher"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *)
      [
        Ty.path "u8";
        Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
      ]
      Self
      (* Instance *)
      [
        ("hash_iter", InstanceField.Method hash_iter);
        ("hash_iter_slices", InstanceField.Method hash_iter_slices)
      ].
End Impl_p3_symmetric_hasher_CryptographicHasher_u8_array_Usize_32_u8_for_p3_keccak_Keccak256Hash.
