(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module generation.
  (* #[instrument(name = "generate Keccak trace", skip_all)] *)
  Definition generate_trace_rows (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ inputs; extra_capacity_bits ] =>
      ltac:(M.monadic
        (let inputs := M.alloc (| inputs |) in
        let extra_capacity_bits := M.alloc (| extra_capacity_bits |) in
        M.read (|
          M.catch_return
            (Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
              ]) (|
            ltac:(M.monadic
              (M.alloc (|
                M.read (|
                  let~ _ : Ty.tuple [] := Value.Tuple [] in
                  let __tracing_attr_span := M.read (| Value.DeclaredButUndefined |) in
                  let __tracing_attr_guard := M.read (| Value.DeclaredButUndefined |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    LogicalOp.or (|
                                      LogicalOp.and (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_trait_method (|
                                            "core::cmp::PartialOrd",
                                            Ty.path "tracing_core::metadata::Level",
                                            [],
                                            [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                            "le",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              get_associated_constant (|
                                                Ty.path "tracing_core::metadata::Level",
                                                "INFO",
                                                Ty.path "tracing_core::metadata::Level"
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              get_constant (|
                                                "tracing::level_filters::STATIC_MAX_LEVEL",
                                                Ty.path "tracing_core::metadata::LevelFilter"
                                              |)
                                            |)
                                          ]
                                        |),
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Ty.path "bool",
                                            M.get_trait_method (|
                                              "core::cmp::PartialOrd",
                                              Ty.path "tracing_core::metadata::Level",
                                              [],
                                              [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                              "le",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                get_associated_constant (|
                                                  Ty.path "tracing_core::metadata::Level",
                                                  "INFO",
                                                  Ty.path "tracing_core::metadata::Level"
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.path "tracing_core::metadata::LevelFilter",
                                                    M.get_associated_function (|
                                                      Ty.path "tracing_core::metadata::LevelFilter",
                                                      "current",
                                                      [],
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)))
                                      |),
                                      ltac:(M.monadic (Value.Bool false))
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.tuple [] :=
                                M.write (|
                                  __tracing_attr_span,
                                  M.read (|
                                    let~ interest : Ty.path "tracing_core::subscriber::Interest" :=
                                      M.call_closure (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        M.get_associated_function (|
                                          Ty.path "tracing_core::subscriber::Interest",
                                          "never",
                                          [],
                                          []
                                        |),
                                        []
                                      |) in
                                    M.match_operator (|
                                      Ty.path "tracing::span::Span",
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  LogicalOp.and (|
                                                    LogicalOp.and (|
                                                      LogicalOp.and (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "tracing_core::metadata::Level",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            ],
                                                            "le",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_associated_constant (|
                                                                Ty.path
                                                                  "tracing_core::metadata::Level",
                                                                "INFO",
                                                                Ty.path
                                                                  "tracing_core::metadata::Level"
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_constant (|
                                                                "tracing::level_filters::STATIC_MAX_LEVEL",
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter"
                                                              |)
                                                            |)
                                                          ]
                                                        |),
                                                        ltac:(M.monadic
                                                          (M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialOrd",
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              [],
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter"
                                                              ],
                                                              "le",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                get_associated_constant (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level",
                                                                  "INFO",
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level"
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "tracing_core::metadata::LevelFilter",
                                                                      "current",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)))
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              interest,
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  "interest",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "p3_keccak_air::generation::generate_trace_rows::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (|
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::subscriber::Interest",
                                                                  "is_never",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    interest
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)))
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_function (|
                                                          "tracing::__macro_support::__is_enabled",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "tracing_core::callsite::Callsite",
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  [],
                                                                  [],
                                                                  "metadata",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "p3_keccak_air::generation::generate_trace_rows::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.read (| interest |)
                                                        ]
                                                      |)))
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            let~ meta :
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ] :=
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ],
                                                M.get_trait_method (|
                                                  "tracing_core::callsite::Callsite",
                                                  Ty.path "tracing_core::callsite::DefaultCallsite",
                                                  [],
                                                  [],
                                                  "metadata",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_keccak_air::generation::generate_trace_rows::__CALLSITE",
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite"
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |) in
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "tracing::span::Span",
                                                M.get_associated_function (|
                                                  Ty.path "tracing::span::Span",
                                                  "new",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| meta |) |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.path "tracing_core::field::ValueSet",
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "tracing_core::field::FieldSet",
                                                              "value_set",
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      0
                                                                  ]
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::field::Field"
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.dyn
                                                                                  [
                                                                                    ("tracing_core::field::Value::Trait",
                                                                                      [])
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::FieldSet"
                                                                      ],
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "tracing_core::metadata::Metadata",
                                                                      "fields",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| meta |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (| Value.Array [] |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let~ span : Ty.path "tracing::span::Span" :=
                                              M.call_closure (|
                                                Ty.path "tracing::span::Span",
                                                M.get_function (|
                                                  "tracing::__macro_support::__disabled_span",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::Metadata"
                                                          ],
                                                        M.get_trait_method (|
                                                          "tracing_core::callsite::Callsite",
                                                          Ty.path
                                                            "tracing_core::callsite::DefaultCallsite",
                                                          [],
                                                          [],
                                                          "metadata",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_keccak_air::generation::generate_trace_rows::__CALLSITE",
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::callsite::DefaultCallsite"
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] := Value.Tuple [] in
                                            span))
                                      ]
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.write (|
                                  __tracing_attr_guard,
                                  M.call_closure (|
                                    Ty.path "tracing::span::Entered",
                                    M.get_associated_function (|
                                      Ty.path "tracing::span::Span",
                                      "enter",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Value.Bool false |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ __tracing_attr_fake_return :
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ] :=
                                      M.never_to_any (|
                                        M.read (|
                                          M.loop (|
                                            Ty.path "never",
                                            ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          |)
                                        |)
                                      |) in
                                    M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)
                    |) in
                  let~ num_rows : Ty.path "usize" :=
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (| Ty.path "usize", "next_power_of_two", [], [] |),
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.mul,
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 25 ]
                                      [ Ty.path "u64" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "len",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, inputs |) ]
                            |);
                            M.read (|
                              get_constant (| "p3_keccak_air::NUM_ROUNDS", Ty.path "usize" |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  let~ trace_length : Ty.path "usize" :=
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.mul,
                      [
                        M.read (| num_rows |);
                        M.read (|
                          get_constant (|
                            "p3_keccak_air::columns::NUM_KECCAK_COLS",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |) in
                  let~ long_trace :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ F; Ty.path "alloc::alloc::Global" ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "p3_field::field::PrimeCharacteristicRing",
                        F,
                        [],
                        [],
                        "zero_vec",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.shl,
                          [ M.read (| trace_length |); M.read (| extra_capacity_bits |) ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ],
                        "truncate",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, long_trace |); M.read (| trace_length |) ]
                    |) in
                  let~ trace :
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        "new",
                        [],
                        []
                      |),
                      [
                        M.read (| long_trace |);
                        M.read (|
                          get_constant (|
                            "p3_keccak_air::columns::NUM_KECCAK_COLS",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |) in
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ];
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.apply (Ty.path "p3_keccak_air::columns::KeccakCols") [] [ F ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]
                          ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ F ],
                          "align_to_mut",
                          [],
                          [ Ty.apply (Ty.path "p3_keccak_air::columns::KeccakCols") [] [ F ] ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                M.get_trait_method (|
                                  "core::ops::deref::DerefMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ F; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [],
                                  "deref_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      trace,
                                      "p3_matrix::dense::DenseMatrix",
                                      "values"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                          let prefix := M.copy (| γ0_0 |) in
                          let rows := M.copy (| γ0_1 |) in
                          let suffix := M.copy (| γ0_2 |) in
                          let~ _ : Ty.tuple [] :=
                            M.read (|
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ F ],
                                                  "is_empty",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| prefix |) |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.call_closure (|
                                            Ty.path "never",
                                            M.get_function (|
                                              "core::panicking::panic_fmt",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "core::fmt::Arguments",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::Arguments",
                                                  "new_const",
                                                  [ Value.Integer IntegerKind.Usize 1 ],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Value.Array
                                                            [ mk_str (| "Alignment should match" |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.read (|
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ F ],
                                                  "is_empty",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| suffix |) |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.call_closure (|
                                            Ty.path "never",
                                            M.get_function (|
                                              "core::panicking::panic_fmt",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "core::fmt::Arguments",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::Arguments",
                                                  "new_const",
                                                  [ Value.Integer IntegerKind.Usize 1 ],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Value.Array
                                                            [ mk_str (| "Alignment should match" |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.read (|
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Value.Tuple
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_keccak_air::columns::KeccakCols")
                                                    []
                                                    [ F ]
                                                ],
                                              "len",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| rows |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (| Pointer.Kind.Ref, num_rows |)
                                    ]
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let left_val := M.copy (| γ0_0 |) in
                                      let right_val := M.copy (| γ0_1 |) in
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    UnOp.not (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.eq,
                                                        [
                                                          M.read (|
                                                            M.deref (| M.read (| left_val |) |)
                                                          |);
                                                          M.read (|
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |)))
                                ]
                              |)
                            |) in
                          let~ num_padding_inputs : Ty.path "usize" :=
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.sub,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.path "usize",
                                    "div_ceil",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| num_rows |);
                                    M.read (|
                                      get_constant (|
                                        "p3_keccak_air::NUM_ROUNDS",
                                        Ty.path "usize"
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 25 ]
                                          [ Ty.path "u64" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, inputs |) ]
                                |)
                              ]
                            |) in
                          let~ padded_inputs :
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 25 ]
                                        [ Ty.path "u64" ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.apply
                                    (Ty.path "core::iter::sources::repeat_n::RepeatN")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 25 ]
                                        [ Ty.path "u64" ]
                                    ]
                                ] :=
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 25 ]
                                        [ Ty.path "u64" ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.apply
                                    (Ty.path "core::iter::sources::repeat_n::RepeatN")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 25 ]
                                        [ Ty.path "u64" ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 25 ]
                                      [ Ty.path "u64" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "chain",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::sources::repeat_n::RepeatN")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 25 ]
                                        [ Ty.path "u64" ]
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 25 ]
                                        [ Ty.path "u64" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_trait_method (|
                                    "p3_maybe_rayon::serial::IntoParallelIterator",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 25 ]
                                          [ Ty.path "u64" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "into_par_iter",
                                    [],
                                    []
                                  |),
                                  [ M.read (| inputs |) ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::sources::repeat_n::RepeatN")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 25 ]
                                        [ Ty.path "u64" ]
                                    ],
                                  M.get_function (|
                                    "core::iter::sources::repeat_n::repeat_n",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 25 ]
                                        [ Ty.path "u64" ]
                                    ]
                                  |),
                                  [
                                    repeat (|
                                      Value.Integer IntegerKind.U64 0,
                                      Value.Integer IntegerKind.Usize 25
                                    |);
                                    M.read (| num_padding_inputs |)
                                  ]
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::ChunksMut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_keccak_air::columns::KeccakCols")
                                          []
                                          [ F ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::chain::Chain")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 25 ]
                                              [ Ty.path "u64" ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.apply
                                          (Ty.path "core::iter::sources::repeat_n::RepeatN")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 25 ]
                                              [ Ty.path "u64" ]
                                          ]
                                      ]
                                  ],
                                [],
                                [],
                                "for_each",
                                [],
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "p3_keccak_air::columns::KeccakCols")
                                                        []
                                                        [ F ]
                                                    ]
                                                ];
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 25 ]
                                                [ Ty.path "u64" ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::ChunksMut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_keccak_air::columns::KeccakCols")
                                            []
                                            [ F ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 25 ]
                                                [ Ty.path "u64" ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.apply
                                            (Ty.path "core::iter::sources::repeat_n::RepeatN")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 25 ]
                                                [ Ty.path "u64" ]
                                            ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::ChunksMut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_keccak_air::columns::KeccakCols")
                                          []
                                          [ F ]
                                      ],
                                    [],
                                    [],
                                    "zip",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 25 ]
                                                [ Ty.path "u64" ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.apply
                                            (Ty.path "core::iter::sources::repeat_n::RepeatN")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 25 ]
                                                [ Ty.path "u64" ]
                                            ]
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::ChunksMut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_keccak_air::columns::KeccakCols")
                                            []
                                            [ F ]
                                        ],
                                      M.get_trait_method (|
                                        "p3_maybe_rayon::serial::ParallelSliceMut",
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_keccak_air::columns::KeccakCols")
                                              []
                                              [ F ]
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "p3_keccak_air::columns::KeccakCols")
                                            []
                                            [ F ]
                                        ],
                                        "par_chunks_mut",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| rows |) |)
                                        |);
                                        M.read (|
                                          get_constant (|
                                            "p3_keccak_air::NUM_ROUNDS",
                                            Ty.path "usize"
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.read (| padded_inputs |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_keccak_air::columns::KeccakCols")
                                                                  []
                                                                  [ F ]
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 25 ]
                                                          [ Ty.path "u64" ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.tuple []),
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let row := M.copy (| γ0_0 |) in
                                                  let input := M.copy (| γ0_1 |) in
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_function (|
                                                          "p3_keccak_air::generation::generate_trace_rows_for_perm",
                                                          [],
                                                          [ F ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (| M.read (| row |) |)
                                                          |);
                                                          M.read (| input |)
                                                        ]
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |) in
                          trace))
                    ]
                  |)
                |)
              |)))
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_generate_trace_rows :
    M.IsFunction.C "p3_keccak_air::generation::generate_trace_rows" generate_trace_rows.
  Admitted.
  Global Typeclasses Opaque generate_trace_rows.
  
  (*
  fn generate_trace_rows_for_perm<F: PrimeField64>(rows: &mut [KeccakCols<F>], input: [u64; 25]) {
      let mut current_state: [[u64; 5]; 5] = unsafe { transmute(input) };
  
      let initial_state: [[[F; 4]; 5]; 5] =
          array::from_fn(|y| array::from_fn(|x| u64_to_16_bit_limbs(current_state[x][y])));
  
      // Populate the round input for the first round.
      rows[0].a = initial_state;
      rows[0].preimage = initial_state;
  
      generate_trace_row_for_round(&mut rows[0], 0, &mut current_state);
  
      for round in 1..rows.len() {
          rows[round].preimage = initial_state;
  
          // Copy previous row's output to next row's input.
          for y in 0..5 {
              for x in 0..5 {
                  for limb in 0..U64_LIMBS {
                      rows[round].a[y][x][limb] = rows[round - 1].a_prime_prime_prime(y, x, limb);
                  }
              }
          }
  
          generate_trace_row_for_round(&mut rows[round], round, &mut current_state);
      }
  }
  *)
  Definition generate_trace_rows_for_perm
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F ], [ rows; input ] =>
      ltac:(M.monadic
        (let rows := M.alloc (| rows |) in
        let input := M.alloc (| input |) in
        M.read (|
          let~ current_state :
              Ty.apply
                (Ty.path "array")
                [ Value.Integer IntegerKind.Usize 5 ]
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 5 ] [ Ty.path "u64" ]
                ] :=
            M.call_closure (|
              Ty.apply
                (Ty.path "array")
                [ Value.Integer IntegerKind.Usize 5 ]
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 5 ] [ Ty.path "u64" ]
                ],
              M.get_function (|
                "core::intrinsics::transmute",
                [],
                [
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 25 ]
                    [ Ty.path "u64" ];
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 5 ]
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 5 ]
                        [ Ty.path "u64" ]
                    ]
                ]
              |),
              [ M.read (| input |) ]
            |) in
          let~ initial_state :
              Ty.apply
                (Ty.path "array")
                [ Value.Integer IntegerKind.Usize 5 ]
                [
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 5 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ] ]
                ] :=
            M.call_closure (|
              Ty.apply
                (Ty.path "array")
                [ Value.Integer IntegerKind.Usize 5 ]
                [
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 5 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ] ]
                ],
              M.get_function (|
                "core::array::from_fn",
                [ Value.Integer IntegerKind.Usize 5 ],
                [
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 5 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ] ];
                  Ty.function
                    [ Ty.tuple [ Ty.path "usize" ] ]
                    (Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 5 ]
                      [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ] ])
                ]
              |),
              [
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize" ] ]
                              (Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 5 ]
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [ F ]
                                ]),
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let y := M.copy (| γ |) in
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 5 ]
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 4 ]
                                          [ F ]
                                      ],
                                    M.get_function (|
                                      "core::array::from_fn",
                                      [ Value.Integer IntegerKind.Usize 5 ],
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 4 ]
                                          [ F ];
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                          (Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 4 ]
                                            [ F ])
                                      ]
                                    |),
                                    [
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.function
                                                    [ Ty.tuple [ Ty.path "usize" ] ]
                                                    (Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 4 ]
                                                      [ F ]),
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let x := M.copy (| γ |) in
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 4 ]
                                                            [ F ],
                                                          M.get_function (|
                                                            "p3_air::utils::u64_to_16_bit_limbs",
                                                            [],
                                                            [ F ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.SubPointer.get_array_field (|
                                                                  current_state,
                                                                  M.read (| x |)
                                                                |),
                                                                M.read (| y |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)))
                                                  ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end))
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              M.SubPointer.get_struct_record_field (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| rows |) |),
                  Value.Integer IntegerKind.Usize 0
                |),
                "p3_keccak_air::columns::KeccakCols",
                "a"
              |),
              M.read (| initial_state |)
            |) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              M.SubPointer.get_struct_record_field (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| rows |) |),
                  Value.Integer IntegerKind.Usize 0
                |),
                "p3_keccak_air::columns::KeccakCols",
                "preimage"
              |),
              M.read (| initial_state |)
            |) in
          let~ _ : Ty.tuple [] :=
            M.call_closure (|
              Ty.tuple [],
              M.get_function (|
                "p3_keccak_air::generation::generate_trace_row_for_round",
                [],
                [ F ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_array_field (|
                        M.deref (| M.read (| rows |) |),
                        Value.Integer IntegerKind.Usize 0
                      |)
                    |)
                  |)
                |);
                Value.Integer IntegerKind.Usize 0;
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.borrow (| Pointer.Kind.MutRef, current_state |) |)
                |)
              ]
            |) in
          M.use
            (M.match_operator (|
              Ty.tuple [],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      []
                      [ Ty.path "usize" ]
                      [
                        ("start", Value.Integer IntegerKind.Usize 1);
                        ("end_",
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.apply (Ty.path "p3_keccak_air::columns::KeccakCols") [] [ F ]
                                ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rows |) |) |) ]
                          |))
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.tuple [],
                      ltac:(M.monadic
                        (let~ _ : Ty.tuple [] :=
                          M.read (|
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let round := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.write (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.SubPointer.get_array_field (|
                                            M.deref (| M.read (| rows |) |),
                                            M.read (| round |)
                                          |),
                                          "p3_keccak_air::columns::KeccakCols",
                                          "preimage"
                                        |),
                                        M.read (| initial_state |)
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.read (|
                                        M.use
                                          (M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  [],
                                                  [],
                                                  "into_iter",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  Value.StructRecord
                                                    "core::ops::range::Range"
                                                    []
                                                    [ Ty.path "usize" ]
                                                    [
                                                      ("start", Value.Integer IntegerKind.Usize 0);
                                                      ("end_", Value.Integer IntegerKind.Usize 5)
                                                    ]
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter := M.copy (| γ |) in
                                                  M.loop (|
                                                    Ty.tuple [],
                                                    ltac:(M.monadic
                                                      (let~ _ : Ty.tuple [] :=
                                                        M.read (|
                                                          M.match_operator (|
                                                            Ty.tuple [],
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [ Ty.path "usize" ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let y := M.copy (| γ0_0 |) in
                                                                  M.use
                                                                    (M.match_operator (|
                                                                      Ty.tuple [],
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::ops::range::Range")
                                                                            []
                                                                            [ Ty.path "usize" ],
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::collect::IntoIterator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::ops::range::Range")
                                                                              []
                                                                              [ Ty.path "usize" ],
                                                                            [],
                                                                            [],
                                                                            "into_iter",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            Value.StructRecord
                                                                              "core::ops::range::Range"
                                                                              []
                                                                              [ Ty.path "usize" ]
                                                                              [
                                                                                ("start",
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    0);
                                                                                ("end_",
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    5)
                                                                              ]
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let iter :=
                                                                              M.copy (| γ |) in
                                                                            M.loop (|
                                                                              Ty.tuple [],
                                                                              ltac:(M.monadic
                                                                                (let~ _ :
                                                                                    Ty.tuple [] :=
                                                                                  M.read (|
                                                                                    M.match_operator (|
                                                                                      Ty.tuple [],
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::option::Option")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ],
                                                                                          M.get_trait_method (|
                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::ops::range::Range")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ],
                                                                                            [],
                                                                                            [],
                                                                                            "next",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              M.deref (|
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.MutRef,
                                                                                                  iter
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  _ :=
                                                                                              M.is_struct_tuple (|
                                                                                                γ,
                                                                                                "core::option::Option::None"
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              M.never_to_any (|
                                                                                                M.read (|
                                                                                                  M.break (||)
                                                                                                |)
                                                                                              |)
                                                                                            |)));
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ0_0 :=
                                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                                γ,
                                                                                                "core::option::Option::Some",
                                                                                                0
                                                                                              |) in
                                                                                            let x :=
                                                                                              M.copy (|
                                                                                                γ0_0
                                                                                              |) in
                                                                                            M.use
                                                                                              (M.match_operator (|
                                                                                                Ty.tuple
                                                                                                  [],
                                                                                                M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::ops::range::Range")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "usize"
                                                                                                      ],
                                                                                                    M.get_trait_method (|
                                                                                                      "core::iter::traits::collect::IntoIterator",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::ops::range::Range")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize"
                                                                                                        ],
                                                                                                      [],
                                                                                                      [],
                                                                                                      "into_iter",
                                                                                                      [],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      Value.StructRecord
                                                                                                        "core::ops::range::Range"
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize"
                                                                                                        ]
                                                                                                        [
                                                                                                          ("start",
                                                                                                            Value.Integer
                                                                                                              IntegerKind.Usize
                                                                                                              0);
                                                                                                          ("end_",
                                                                                                            M.read (|
                                                                                                              get_constant (|
                                                                                                                "p3_keccak_air::U64_LIMBS",
                                                                                                                Ty.path
                                                                                                                  "usize"
                                                                                                              |)
                                                                                                            |))
                                                                                                        ]
                                                                                                    ]
                                                                                                  |)
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (let
                                                                                                            iter :=
                                                                                                        M.copy (|
                                                                                                          γ
                                                                                                        |) in
                                                                                                      M.loop (|
                                                                                                        Ty.tuple
                                                                                                          [],
                                                                                                        ltac:(M.monadic
                                                                                                          (let~
                                                                                                                _ :
                                                                                                              Ty.tuple
                                                                                                                [] :=
                                                                                                            M.read (|
                                                                                                              M.match_operator (|
                                                                                                                Ty.tuple
                                                                                                                  [],
                                                                                                                M.alloc (|
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "core::option::Option")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "usize"
                                                                                                                      ],
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "core::ops::range::Range")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.path
                                                                                                                            "usize"
                                                                                                                        ],
                                                                                                                      [],
                                                                                                                      [],
                                                                                                                      "next",
                                                                                                                      [],
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.MutRef,
                                                                                                                        M.deref (|
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.MutRef,
                                                                                                                            iter
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |),
                                                                                                                [
                                                                                                                  fun
                                                                                                                      γ =>
                                                                                                                    ltac:(M.monadic
                                                                                                                      (let
                                                                                                                            _ :=
                                                                                                                        M.is_struct_tuple (|
                                                                                                                          γ,
                                                                                                                          "core::option::Option::None"
                                                                                                                        |) in
                                                                                                                      M.alloc (|
                                                                                                                        M.never_to_any (|
                                                                                                                          M.read (|
                                                                                                                            M.break (||)
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |)));
                                                                                                                  fun
                                                                                                                      γ =>
                                                                                                                    ltac:(M.monadic
                                                                                                                      (let
                                                                                                                            γ0_0 :=
                                                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                                                          γ,
                                                                                                                          "core::option::Option::Some",
                                                                                                                          0
                                                                                                                        |) in
                                                                                                                      let
                                                                                                                            limb :=
                                                                                                                        M.copy (|
                                                                                                                          γ0_0
                                                                                                                        |) in
                                                                                                                      let~
                                                                                                                            _ :
                                                                                                                          Ty.tuple
                                                                                                                            [] :=
                                                                                                                        M.write (|
                                                                                                                          M.SubPointer.get_array_field (|
                                                                                                                            M.SubPointer.get_array_field (|
                                                                                                                              M.SubPointer.get_array_field (|
                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                  M.SubPointer.get_array_field (|
                                                                                                                                    M.deref (|
                                                                                                                                      M.read (|
                                                                                                                                        rows
                                                                                                                                      |)
                                                                                                                                    |),
                                                                                                                                    M.read (|
                                                                                                                                      round
                                                                                                                                    |)
                                                                                                                                  |),
                                                                                                                                  "p3_keccak_air::columns::KeccakCols",
                                                                                                                                  "a"
                                                                                                                                |),
                                                                                                                                M.read (|
                                                                                                                                  y
                                                                                                                                |)
                                                                                                                              |),
                                                                                                                              M.read (|
                                                                                                                                x
                                                                                                                              |)
                                                                                                                            |),
                                                                                                                            M.read (|
                                                                                                                              limb
                                                                                                                            |)
                                                                                                                          |),
                                                                                                                          M.call_closure (|
                                                                                                                            F,
                                                                                                                            M.get_associated_function (|
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "p3_keccak_air::columns::KeccakCols")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  F
                                                                                                                                ],
                                                                                                                              "a_prime_prime_prime",
                                                                                                                              [],
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              M.borrow (|
                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                M.SubPointer.get_array_field (|
                                                                                                                                  M.deref (|
                                                                                                                                    M.read (|
                                                                                                                                      rows
                                                                                                                                    |)
                                                                                                                                  |),
                                                                                                                                  M.call_closure (|
                                                                                                                                    Ty.path
                                                                                                                                      "usize",
                                                                                                                                    BinOp.Wrap.sub,
                                                                                                                                    [
                                                                                                                                      M.read (|
                                                                                                                                        round
                                                                                                                                      |);
                                                                                                                                      Value.Integer
                                                                                                                                        IntegerKind.Usize
                                                                                                                                        1
                                                                                                                                    ]
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |);
                                                                                                                              M.read (|
                                                                                                                                y
                                                                                                                              |);
                                                                                                                              M.read (|
                                                                                                                                x
                                                                                                                              |);
                                                                                                                              M.read (|
                                                                                                                                limb
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                          |)
                                                                                                                        |) in
                                                                                                                      M.alloc (|
                                                                                                                        Value.Tuple
                                                                                                                          []
                                                                                                                      |)))
                                                                                                                ]
                                                                                                              |)
                                                                                                            |) in
                                                                                                          M.alloc (|
                                                                                                            Value.Tuple
                                                                                                              []
                                                                                                          |)))
                                                                                                      |)))
                                                                                                ]
                                                                                              |))))
                                                                                      ]
                                                                                    |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                            |)))
                                                                      ]
                                                                    |))))
                                                            ]
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                  |)))
                                            ]
                                          |))
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_function (|
                                          "p3_keccak_air::generation::generate_trace_row_for_round",
                                          [],
                                          [ F ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_array_field (|
                                                  M.deref (| M.read (| rows |) |),
                                                  M.read (| round |)
                                                |)
                                              |)
                                            |)
                                          |);
                                          M.read (| round |);
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (|
                                              M.borrow (| Pointer.Kind.MutRef, current_state |)
                                            |)
                                          |)
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_generate_trace_rows_for_perm :
    M.IsFunction.C
      "p3_keccak_air::generation::generate_trace_rows_for_perm"
      generate_trace_rows_for_perm.
  Admitted.
  Global Typeclasses Opaque generate_trace_rows_for_perm.
  
  (*
  fn generate_trace_row_for_round<F: PrimeField64>(
      row: &mut KeccakCols<F>,
      round: usize,
      current_state: &mut [[u64; 5]; 5],
  ) {
      row.step_flags[round] = F::ONE;
  
      // Populate C[x] = xor(A[x, 0], A[x, 1], A[x, 2], A[x, 3], A[x, 4]).
      let state_c: [u64; 5] = current_state.map(|row| row.iter().fold(0, |acc, y| acc ^ y));
      for (x, elem) in state_c.iter().enumerate() {
          row.c[x] = u64_to_bits_le( *elem);
      }
  
      // Populate C'[x, z] = xor(C[x, z], C[x - 1, z], C[x + 1, z - 1]).
      let state_c_prime: [u64; 5] =
          array::from_fn(|x| state_c[x] ^ state_c[(x + 4) % 5] ^ state_c[(x + 1) % 5].rotate_left(1));
      for (x, elem) in state_c_prime.iter().enumerate() {
          row.c_prime[x] = u64_to_bits_le( *elem);
      }
  
      // Populate A'. To avoid shifting indices, we rewrite
      //     A'[x, y, z] = xor(A[x, y, z], C[x - 1, z], C[x + 1, z - 1])
      // as
      //     A'[x, y, z] = xor(A[x, y, z], C[x, z], C'[x, z]).
      *current_state =
          array::from_fn(|i| array::from_fn(|j| current_state[i][j] ^ state_c[i] ^ state_c_prime[i]));
      for (x, x_row) in current_state.iter().enumerate() {
          for (y, elem) in x_row.iter().enumerate() {
              row.a_prime[y][x] = u64_to_bits_le( *elem);
          }
      }
  
      // Rotate the current state to get the B array.
      *current_state = array::from_fn(|i| {
          array::from_fn(|j| {
              let new_i = (i + 3 * j) % 5;
              let new_j = i;
              current_state[new_i][new_j].rotate_left(R[new_i][new_j] as u32)
          })
      });
  
      // Populate A''.
      // A''[x, y] = xor(B[x, y], andn(B[x + 1, y], B[x + 2, y])).
      *current_state = array::from_fn(|i| {
          array::from_fn(|j| {
              current_state[i][j] ^ ((!current_state[(i + 1) % 5][j]) & current_state[(i + 2) % 5][j])
          })
      });
      for (x, x_row) in current_state.iter().enumerate() {
          for (y, elem) in x_row.iter().enumerate() {
              row.a_prime_prime[y][x] = u64_to_16_bit_limbs( *elem);
          }
      }
  
      row.a_prime_prime_0_0_bits = u64_to_bits_le(current_state[0][0]);
  
      // A''[0, 0] is additionally xor'd with RC.
      current_state[0][0] ^= RC[round];
  
      row.a_prime_prime_prime_0_0_limbs = u64_to_16_bit_limbs(current_state[0][0]);
  }
  *)
  Definition generate_trace_row_for_round
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F ], [ row; round; current_state ] =>
      ltac:(M.monadic
        (let row := M.alloc (| row |) in
        let round := M.alloc (| round |) in
        let current_state := M.alloc (| current_state |) in
        M.read (|
          let~ _ : Ty.tuple [] :=
            M.write (|
              M.SubPointer.get_array_field (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| row |) |),
                  "p3_keccak_air::columns::KeccakCols",
                  "step_flags"
                |),
                M.read (| round |)
              |),
              M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", F |) |)
            |) in
          let~ state_c :
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 5 ] [ Ty.path "u64" ] :=
            M.call_closure (|
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 5 ] [ Ty.path "u64" ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 5 ]
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 5 ]
                      [ Ty.path "u64" ]
                  ],
                "map",
                [],
                [
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 5 ]
                            [ Ty.path "u64" ]
                        ]
                    ]
                    (Ty.path "u64");
                  Ty.path "u64"
                ]
              |),
              [
                M.read (| M.deref (| M.read (| current_state |) |) |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 5 ]
                                      [ Ty.path "u64" ]
                                  ]
                              ]
                              (Ty.path "u64"),
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let row := M.copy (| γ |) in
                                  M.call_closure (|
                                    Ty.path "u64",
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "u64" ],
                                      [],
                                      [],
                                      "fold",
                                      [],
                                      [
                                        Ty.path "u64";
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "u64";
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                              ]
                                          ]
                                          (Ty.path "u64")
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.path "u64" ],
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                          "iter",
                                          [],
                                          []
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion (M.borrow (| Pointer.Kind.Ref, row |))
                                        ]
                                      |);
                                      Value.Integer IntegerKind.U64 0;
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0; α1 ] =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "u64";
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "u64" ]
                                                        ]
                                                    ]
                                                    (Ty.path "u64"),
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let acc := M.copy (| γ |) in
                                                        M.match_operator (|
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.path "u64";
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "u64" ]
                                                                ]
                                                            ]
                                                            (Ty.path "u64"),
                                                          M.alloc (| α1 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let y := M.copy (| γ |) in
                                                                M.call_closure (|
                                                                  Ty.path "u64",
                                                                  M.get_trait_method (|
                                                                    "core::ops::bit::BitXor",
                                                                    Ty.path "u64",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "u64" ]
                                                                    ],
                                                                    "bitxor",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ M.read (| acc |); M.read (| y |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                  ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end))
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.use
                (M.match_operator (|
                  Ty.tuple [],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ] ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ] ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ] ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ],
                            [],
                            [],
                            "enumerate",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion (M.borrow (| Pointer.Kind.Ref, state_c |))
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.tuple [],
                          ltac:(M.monadic
                            (let~ _ : Ty.tuple [] :=
                              M.read (|
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.path "u64" ]
                                          ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                        let x := M.copy (| γ1_0 |) in
                                        let elem := M.copy (| γ1_1 |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.write (|
                                            M.SubPointer.get_array_field (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| row |) |),
                                                "p3_keccak_air::columns::KeccakCols",
                                                "c"
                                              |),
                                              M.read (| x |)
                                            |),
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 64 ]
                                                [ F ],
                                              M.get_function (|
                                                "p3_air::utils::u64_to_bits_le",
                                                [],
                                                [ F ]
                                              |),
                                              [ M.read (| M.deref (| M.read (| elem |) |) |) ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |))
            |) in
          let~ state_c_prime :
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 5 ] [ Ty.path "u64" ] :=
            M.call_closure (|
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 5 ] [ Ty.path "u64" ],
              M.get_function (|
                "core::array::from_fn",
                [ Value.Integer IntegerKind.Usize 5 ],
                [ Ty.path "u64"; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "u64") ]
              |),
              [
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "u64"),
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let x := M.copy (| γ |) in
                                  M.call_closure (|
                                    Ty.path "u64",
                                    BinOp.Wrap.bit_xor,
                                    [
                                      M.call_closure (|
                                        Ty.path "u64",
                                        BinOp.Wrap.bit_xor,
                                        [
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              state_c,
                                              M.read (| x |)
                                            |)
                                          |);
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              state_c,
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.rem,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.read (| x |);
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 5
                                                ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        Ty.path "u64",
                                        M.get_associated_function (|
                                          Ty.path "u64",
                                          "rotate_left",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              state_c,
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.rem,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.read (| x |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 5
                                                ]
                                              |)
                                            |)
                                          |);
                                          Value.Integer IntegerKind.U32 1
                                        ]
                                      |)
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.use
                (M.match_operator (|
                  Ty.tuple [],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ] ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ] ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ] ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ],
                            [],
                            [],
                            "enumerate",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion (M.borrow (| Pointer.Kind.Ref, state_c_prime |))
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.tuple [],
                          ltac:(M.monadic
                            (let~ _ : Ty.tuple [] :=
                              M.read (|
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.path "u64" ]
                                          ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                        let x := M.copy (| γ1_0 |) in
                                        let elem := M.copy (| γ1_1 |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.write (|
                                            M.SubPointer.get_array_field (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| row |) |),
                                                "p3_keccak_air::columns::KeccakCols",
                                                "c_prime"
                                              |),
                                              M.read (| x |)
                                            |),
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 64 ]
                                                [ F ],
                                              M.get_function (|
                                                "p3_air::utils::u64_to_bits_le",
                                                [],
                                                [ F ]
                                              |),
                                              [ M.read (| M.deref (| M.read (| elem |) |) |) ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |))
            |) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              M.deref (| M.read (| current_state |) |),
              M.call_closure (|
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 5 ]
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 5 ]
                      [ Ty.path "u64" ]
                  ],
                M.get_function (|
                  "core::array::from_fn",
                  [ Value.Integer IntegerKind.Usize 5 ],
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 5 ]
                      [ Ty.path "u64" ];
                    Ty.function
                      [ Ty.tuple [ Ty.path "usize" ] ]
                      (Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 5 ]
                        [ Ty.path "u64" ])
                  ]
                |),
                [
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.function
                                [ Ty.tuple [ Ty.path "usize" ] ]
                                (Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 5 ]
                                  [ Ty.path "u64" ]),
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let i := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 5 ]
                                        [ Ty.path "u64" ],
                                      M.get_function (|
                                        "core::array::from_fn",
                                        [ Value.Integer IntegerKind.Usize 5 ],
                                        [
                                          Ty.path "u64";
                                          Ty.function
                                            [ Ty.tuple [ Ty.path "usize" ] ]
                                            (Ty.path "u64")
                                        ]
                                      |),
                                      [
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.function
                                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                                      (Ty.path "u64"),
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let j := M.copy (| γ |) in
                                                          M.call_closure (|
                                                            Ty.path "u64",
                                                            BinOp.Wrap.bit_xor,
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "u64",
                                                                BinOp.Wrap.bit_xor,
                                                                [
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.read (| current_state |)
                                                                        |),
                                                                        M.read (| i |)
                                                                      |),
                                                                      M.read (| j |)
                                                                    |)
                                                                  |);
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      state_c,
                                                                      M.read (| i |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  state_c_prime,
                                                                  M.read (| i |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.use
                (M.match_operator (|
                  Ty.tuple [],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 5 ]
                                [ Ty.path "u64" ]
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 5 ]
                                  [ Ty.path "u64" ]
                              ]
                          ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 5 ]
                                    [ Ty.path "u64" ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 5 ]
                                  [ Ty.path "u64" ]
                              ],
                            [],
                            [],
                            "enumerate",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 5 ]
                                    [ Ty.path "u64" ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 5 ]
                                      [ Ty.path "u64" ]
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.read (| current_state |) |)
                                  |))
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.tuple [],
                          ltac:(M.monadic
                            (let~ _ : Ty.tuple [] :=
                              M.read (|
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 5 ]
                                                    [ Ty.path "u64" ]
                                                ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 5 ]
                                                  [ Ty.path "u64" ]
                                              ]
                                          ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                        let x := M.copy (| γ1_0 |) in
                                        let x_row := M.copy (| γ1_1 |) in
                                        M.use
                                          (M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ Ty.path "u64" ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::enumerate::Enumerate")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.path "u64" ]
                                                    ],
                                                  [],
                                                  [],
                                                  "into_iter",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "u64" ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.path "u64" ],
                                                      [],
                                                      [],
                                                      "enumerate",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "u64" ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u64" ],
                                                          "iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| x_row |) |)
                                                            |))
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter := M.copy (| γ |) in
                                                  M.loop (|
                                                    Ty.tuple [],
                                                    ltac:(M.monadic
                                                      (let~ _ : Ty.tuple [] :=
                                                        M.read (|
                                                          M.match_operator (|
                                                            Ty.tuple [],
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "u64" ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::enumerate::Enumerate")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ Ty.path "u64" ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let γ1_0 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ0_0,
                                                                      0
                                                                    |) in
                                                                  let γ1_1 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ0_0,
                                                                      1
                                                                    |) in
                                                                  let y := M.copy (| γ1_0 |) in
                                                                  let elem := M.copy (| γ1_1 |) in
                                                                  let~ _ : Ty.tuple [] :=
                                                                    M.write (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.SubPointer.get_array_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.deref (|
                                                                              M.read (| row |)
                                                                            |),
                                                                            "p3_keccak_air::columns::KeccakCols",
                                                                            "a_prime"
                                                                          |),
                                                                          M.read (| y |)
                                                                        |),
                                                                        M.read (| x |)
                                                                      |),
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              64
                                                                          ]
                                                                          [ F ],
                                                                        M.get_function (|
                                                                          "p3_air::utils::u64_to_bits_le",
                                                                          [],
                                                                          [ F ]
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| elem |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                  |)))
                                            ]
                                          |))))
                                  ]
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |))
            |) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              M.deref (| M.read (| current_state |) |),
              M.call_closure (|
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 5 ]
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 5 ]
                      [ Ty.path "u64" ]
                  ],
                M.get_function (|
                  "core::array::from_fn",
                  [ Value.Integer IntegerKind.Usize 5 ],
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 5 ]
                      [ Ty.path "u64" ];
                    Ty.function
                      [ Ty.tuple [ Ty.path "usize" ] ]
                      (Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 5 ]
                        [ Ty.path "u64" ])
                  ]
                |),
                [
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.function
                                [ Ty.tuple [ Ty.path "usize" ] ]
                                (Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 5 ]
                                  [ Ty.path "u64" ]),
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let i := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 5 ]
                                        [ Ty.path "u64" ],
                                      M.get_function (|
                                        "core::array::from_fn",
                                        [ Value.Integer IntegerKind.Usize 5 ],
                                        [
                                          Ty.path "u64";
                                          Ty.function
                                            [ Ty.tuple [ Ty.path "usize" ] ]
                                            (Ty.path "u64")
                                        ]
                                      |),
                                      [
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.function
                                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                                      (Ty.path "u64"),
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let j := M.copy (| γ |) in
                                                          M.read (|
                                                            let~ new_i : Ty.path "usize" :=
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.rem,
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    BinOp.Wrap.add,
                                                                    [
                                                                      M.read (| i |);
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.mul,
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            3;
                                                                          M.read (| j |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  Value.Integer IntegerKind.Usize 5
                                                                ]
                                                              |) in
                                                            let~ new_j : Ty.path "usize" :=
                                                              M.read (| i |) in
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path "u64",
                                                                M.get_associated_function (|
                                                                  Ty.path "u64",
                                                                  "rotate_left",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.read (| current_state |)
                                                                        |),
                                                                        M.read (| new_i |)
                                                                      |),
                                                                      M.read (| new_j |)
                                                                    |)
                                                                  |);
                                                                  M.cast
                                                                    (Ty.path "u32")
                                                                    (M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.SubPointer.get_array_field (|
                                                                          get_constant (|
                                                                            "p3_keccak_air::constants::R",
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  5
                                                                              ]
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "array")
                                                                                  [
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      5
                                                                                  ]
                                                                                  [ Ty.path "u8" ]
                                                                              ]
                                                                          |),
                                                                          M.read (| new_i |)
                                                                        |),
                                                                        M.read (| new_j |)
                                                                      |)
                                                                    |))
                                                                ]
                                                              |)
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              M.deref (| M.read (| current_state |) |),
              M.call_closure (|
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 5 ]
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 5 ]
                      [ Ty.path "u64" ]
                  ],
                M.get_function (|
                  "core::array::from_fn",
                  [ Value.Integer IntegerKind.Usize 5 ],
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 5 ]
                      [ Ty.path "u64" ];
                    Ty.function
                      [ Ty.tuple [ Ty.path "usize" ] ]
                      (Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 5 ]
                        [ Ty.path "u64" ])
                  ]
                |),
                [
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.function
                                [ Ty.tuple [ Ty.path "usize" ] ]
                                (Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 5 ]
                                  [ Ty.path "u64" ]),
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let i := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 5 ]
                                        [ Ty.path "u64" ],
                                      M.get_function (|
                                        "core::array::from_fn",
                                        [ Value.Integer IntegerKind.Usize 5 ],
                                        [
                                          Ty.path "u64";
                                          Ty.function
                                            [ Ty.tuple [ Ty.path "usize" ] ]
                                            (Ty.path "u64")
                                        ]
                                      |),
                                      [
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.function
                                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                                      (Ty.path "u64"),
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let j := M.copy (| γ |) in
                                                          M.call_closure (|
                                                            Ty.path "u64",
                                                            BinOp.Wrap.bit_xor,
                                                            [
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.SubPointer.get_array_field (|
                                                                    M.deref (|
                                                                      M.read (| current_state |)
                                                                    |),
                                                                    M.read (| i |)
                                                                  |),
                                                                  M.read (| j |)
                                                                |)
                                                              |);
                                                              M.call_closure (|
                                                                Ty.path "u64",
                                                                BinOp.Wrap.bit_and,
                                                                [
                                                                  UnOp.not (|
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.SubPointer.get_array_field (|
                                                                          M.deref (|
                                                                            M.read (|
                                                                              current_state
                                                                            |)
                                                                          |),
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.rem,
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.add,
                                                                                [
                                                                                  M.read (| i |);
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                ]
                                                                              |);
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                5
                                                                            ]
                                                                          |)
                                                                        |),
                                                                        M.read (| j |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.read (| current_state |)
                                                                        |),
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.rem,
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.path "usize",
                                                                              BinOp.Wrap.add,
                                                                              [
                                                                                M.read (| i |);
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  2
                                                                              ]
                                                                            |);
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              5
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      M.read (| j |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.use
                (M.match_operator (|
                  Ty.tuple [],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 5 ]
                                [ Ty.path "u64" ]
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 5 ]
                                  [ Ty.path "u64" ]
                              ]
                          ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 5 ]
                                    [ Ty.path "u64" ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 5 ]
                                  [ Ty.path "u64" ]
                              ],
                            [],
                            [],
                            "enumerate",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 5 ]
                                    [ Ty.path "u64" ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 5 ]
                                      [ Ty.path "u64" ]
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.read (| current_state |) |)
                                  |))
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.tuple [],
                          ltac:(M.monadic
                            (let~ _ : Ty.tuple [] :=
                              M.read (|
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 5 ]
                                                    [ Ty.path "u64" ]
                                                ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 5 ]
                                                  [ Ty.path "u64" ]
                                              ]
                                          ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                        let x := M.copy (| γ1_0 |) in
                                        let x_row := M.copy (| γ1_1 |) in
                                        M.use
                                          (M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ Ty.path "u64" ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::enumerate::Enumerate")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.path "u64" ]
                                                    ],
                                                  [],
                                                  [],
                                                  "into_iter",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "u64" ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.path "u64" ],
                                                      [],
                                                      [],
                                                      "enumerate",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "u64" ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u64" ],
                                                          "iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| x_row |) |)
                                                            |))
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter := M.copy (| γ |) in
                                                  M.loop (|
                                                    Ty.tuple [],
                                                    ltac:(M.monadic
                                                      (let~ _ : Ty.tuple [] :=
                                                        M.read (|
                                                          M.match_operator (|
                                                            Ty.tuple [],
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "u64" ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::enumerate::Enumerate")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ Ty.path "u64" ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let γ1_0 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ0_0,
                                                                      0
                                                                    |) in
                                                                  let γ1_1 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ0_0,
                                                                      1
                                                                    |) in
                                                                  let y := M.copy (| γ1_0 |) in
                                                                  let elem := M.copy (| γ1_1 |) in
                                                                  let~ _ : Ty.tuple [] :=
                                                                    M.write (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.SubPointer.get_array_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.deref (|
                                                                              M.read (| row |)
                                                                            |),
                                                                            "p3_keccak_air::columns::KeccakCols",
                                                                            "a_prime_prime"
                                                                          |),
                                                                          M.read (| y |)
                                                                        |),
                                                                        M.read (| x |)
                                                                      |),
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              4
                                                                          ]
                                                                          [ F ],
                                                                        M.get_function (|
                                                                          "p3_air::utils::u64_to_16_bit_limbs",
                                                                          [],
                                                                          [ F ]
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| elem |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                  |)))
                                            ]
                                          |))))
                                  ]
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |))
            |) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| row |) |),
                "p3_keccak_air::columns::KeccakCols",
                "a_prime_prime_0_0_bits"
              |),
              M.call_closure (|
                Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 64 ] [ F ],
                M.get_function (| "p3_air::utils::u64_to_bits_le", [], [ F ] |),
                [
                  M.read (|
                    M.SubPointer.get_array_field (|
                      M.SubPointer.get_array_field (|
                        M.deref (| M.read (| current_state |) |),
                        Value.Integer IntegerKind.Usize 0
                      |),
                      Value.Integer IntegerKind.Usize 0
                    |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.tuple [] :=
            let β :=
              M.SubPointer.get_array_field (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| current_state |) |),
                  Value.Integer IntegerKind.Usize 0
                |),
                Value.Integer IntegerKind.Usize 0
              |) in
            M.write (|
              β,
              M.call_closure (|
                Ty.path "u64",
                BinOp.Wrap.bit_xor,
                [
                  M.read (| β |);
                  M.read (|
                    M.SubPointer.get_array_field (|
                      get_constant (|
                        "p3_keccak_air::constants::RC",
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 24 ]
                          [ Ty.path "u64" ]
                      |),
                      M.read (| round |)
                    |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| row |) |),
                "p3_keccak_air::columns::KeccakCols",
                "a_prime_prime_prime_0_0_limbs"
              |),
              M.call_closure (|
                Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ],
                M.get_function (| "p3_air::utils::u64_to_16_bit_limbs", [], [ F ] |),
                [
                  M.read (|
                    M.SubPointer.get_array_field (|
                      M.SubPointer.get_array_field (|
                        M.deref (| M.read (| current_state |) |),
                        Value.Integer IntegerKind.Usize 0
                      |),
                      Value.Integer IntegerKind.Usize 0
                    |)
                  |)
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_generate_trace_row_for_round :
    M.IsFunction.C
      "p3_keccak_air::generation::generate_trace_row_for_round"
      generate_trace_row_for_round.
  Admitted.
  Global Typeclasses Opaque generate_trace_row_for_round.
End generation.
