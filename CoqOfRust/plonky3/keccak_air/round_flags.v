(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module round_flags.
  Definition value_NUM_ROUNDS_MIN_1 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "usize",
        M.call_closure (|
          Ty.path "usize",
          BinOp.Wrap.sub,
          [
            M.read (| get_constant (| "p3_keccak_air::NUM_ROUNDS", Ty.path "usize" |) |);
            Value.Integer IntegerKind.Usize 1
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_NUM_ROUNDS_MIN_1 :
    M.IsFunction.C "p3_keccak_air::round_flags::NUM_ROUNDS_MIN_1" value_NUM_ROUNDS_MIN_1.
  Admitted.
  Global Typeclasses Opaque value_NUM_ROUNDS_MIN_1.
  
  (*
  pub(crate) fn eval_round_flags<AB: AirBuilder>(builder: &mut AB) {
      let main = builder.main();
      let (local, next) = (main.row_slice(0), main.row_slice(1));
      let local: &KeccakCols<AB::Var> = ( *local).borrow();
      let next: &KeccakCols<AB::Var> = ( *next).borrow();
  
      // Initially, the first step flag should be 1 while the others should be 0.
      builder.when_first_row().assert_one(local.step_flags[0]);
      builder
          .when_first_row()
          .assert_zeros::<NUM_ROUNDS_MIN_1, _>(local.step_flags[1..].try_into().unwrap());
  
      builder
          .when_transition()
          .assert_zeros::<NUM_ROUNDS, _>(array::from_fn(|i| {
              local.step_flags[i] - next.step_flags[(i + 1) % NUM_ROUNDS]
          }));
  }
  *)
  Definition eval_round_flags (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ AB ], [ builder ] =>
      ltac:(M.monadic
        (let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
        M.read (|
          let~ main : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M" :=
            M.call_closure (|
              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
              M.get_trait_method (| "p3_air::air::AirBuilder", AB, [], [], "main", [], [] |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
            |) in
          M.match_operator (|
            Ty.tuple [],
            M.alloc (|
              Ty.tuple
                [
                  Ty.associated_in_trait
                    "p3_matrix::Matrix"
                    []
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                    "{{synthetic}}'2";
                  Ty.associated_in_trait
                    "p3_matrix::Matrix"
                    []
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                    "{{synthetic}}'2"
                ],
              Value.Tuple
                [
                  M.call_closure (|
                    Ty.associated_in_trait
                      "p3_matrix::Matrix"
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                      "{{synthetic}}'2",
                    M.get_trait_method (|
                      "p3_matrix::Matrix",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      "row_slice",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, main |); Value.Integer IntegerKind.Usize 0 ]
                  |);
                  M.call_closure (|
                    Ty.associated_in_trait
                      "p3_matrix::Matrix"
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                      "{{synthetic}}'2",
                    M.get_trait_method (|
                      "p3_matrix::Matrix",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      "row_slice",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, main |); Value.Integer IntegerKind.Usize 1 ]
                  |)
                ]
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                  let local :=
                    M.copy (|
                      Ty.associated_in_trait
                        "p3_matrix::Matrix"
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                        "{{synthetic}}'2",
                      γ0_0
                    |) in
                  let next :=
                    M.copy (|
                      Ty.associated_in_trait
                        "p3_matrix::Matrix"
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                        "{{synthetic}}'2",
                      γ0_1
                    |) in
                  let~ local :
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_keccak_air::columns::KeccakCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ] :=
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_keccak_air::columns::KeccakCols")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                          M.get_trait_method (|
                            "core::borrow::Borrow",
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            [],
                            [
                              Ty.apply
                                (Ty.path "p3_keccak_air::columns::KeccakCols")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                            "borrow",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.associated_in_trait
                                      "p3_matrix::Matrix"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "M")
                                      "{{synthetic}}'2",
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, local |) ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |) in
                  let~ next :
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_keccak_air::columns::KeccakCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ] :=
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_keccak_air::columns::KeccakCols")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                          M.get_trait_method (|
                            "core::borrow::Borrow",
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            [],
                            [
                              Ty.apply
                                (Ty.path "p3_keccak_air::columns::KeccakCols")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                            "borrow",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.associated_in_trait
                                      "p3_matrix::Matrix"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "M")
                                      "{{synthetic}}'2",
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, next |) ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "p3_air::air::AirBuilder",
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        [],
                        [],
                        "assert_one",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.alloc (|
                            Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                            M.call_closure (|
                              Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                              M.get_trait_method (|
                                "p3_air::air::AirBuilder",
                                AB,
                                [],
                                [],
                                "when_first_row",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local |) |),
                              "p3_keccak_air::columns::KeccakCols",
                              "step_flags"
                            |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "p3_air::air::AirBuilder",
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        [],
                        [],
                        "assert_zeros",
                        [ Value.Integer IntegerKind.Usize 23 ],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.alloc (|
                            Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                            M.call_closure (|
                              Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                              M.get_trait_method (|
                                "p3_air::air::AirBuilder",
                                AB,
                                [],
                                [],
                                "when_first_row",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 23 ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 23 ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ];
                                Ty.path "core::array::TryFromSliceError"
                              ],
                            "unwrap",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 23 ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ];
                                  Ty.path "core::array::TryFromSliceError"
                                ],
                              M.get_trait_method (|
                                "core::convert::TryInto",
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 23 ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ],
                                "try_into",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::index::Index",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 24 ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeFrom")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                        "index",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| local |) |),
                                            "p3_keccak_air::columns::KeccakCols",
                                            "step_flags"
                                          |)
                                        |);
                                        Value.StructRecord
                                          "core::ops::range::RangeFrom"
                                          []
                                          [ Ty.path "usize" ]
                                          [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "p3_air::air::AirBuilder",
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        [],
                        [],
                        "assert_zeros",
                        [ Value.Integer IntegerKind.Usize 24 ],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.alloc (|
                            Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                            M.call_closure (|
                              Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                              M.get_trait_method (|
                                "p3_air::air::AirBuilder",
                                AB,
                                [],
                                [],
                                "when_transition",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 24 ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          M.get_function (|
                            "core::array::from_fn",
                            [ Value.Integer IntegerKind.Usize 24 ],
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.function
                                [ Ty.tuple [ Ty.path "usize" ] ]
                                (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                            ]
                          |),
                          [
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                          (Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"),
                                        M.alloc (| Ty.path "usize", α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let i := M.copy (| Ty.path "usize", γ |) in
                                              M.call_closure (|
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr",
                                                M.get_trait_method (|
                                                  "core::ops::arith::Sub",
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var",
                                                  [],
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Var"
                                                  ],
                                                  "sub",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| local |) |),
                                                        "p3_keccak_air::columns::KeccakCols",
                                                        "step_flags"
                                                      |),
                                                      M.read (| i |)
                                                    |)
                                                  |);
                                                  M.read (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| next |) |),
                                                        "p3_keccak_air::columns::KeccakCols",
                                                        "step_flags"
                                                      |),
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.rem,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.read (| i |);
                                                              Value.Integer IntegerKind.Usize 1
                                                            ]
                                                          |);
                                                          M.read (|
                                                            get_constant (|
                                                              "p3_keccak_air::NUM_ROUNDS",
                                                              Ty.path "usize"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |) in
                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_eval_round_flags :
    M.IsFunction.C "p3_keccak_air::round_flags::eval_round_flags" eval_round_flags.
  Admitted.
  Global Typeclasses Opaque eval_round_flags.
End round_flags.
