(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module bitrev.
  (* Trait *)
  (* Empty module 'BitReversibleMatrix' *)
  
  (* StructRecord
    {
      name := "BitReversalPerm";
      const_params := [];
      ty_params := [];
      fields := [ ("log_height", Ty.path "usize") ];
    } *)
  
  Module Impl_core_fmt_Debug_for_p3_matrix_bitrev_BitReversalPerm.
    Definition Self : Ty.t := Ty.path "p3_matrix::bitrev::BitReversalPerm".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field1_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "BitReversalPerm" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "log_height" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::bitrev::BitReversalPerm",
                            "log_height"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_p3_matrix_bitrev_BitReversalPerm.
  
  Module Impl_p3_matrix_bitrev_BitReversalPerm.
    Definition Self : Ty.t := Ty.path "p3_matrix::bitrev::BitReversalPerm".
    
    (*
        pub fn new_view<T: Send + Sync, Inner: Matrix<T>>(
            inner: Inner,
        ) -> BitReversedMatrixView<Inner> {
            RowIndexMappedView {
                index_map: Self {
                    log_height: log2_strict_usize(inner.height()),
                },
                inner,
            }
        }
    *)
    Definition new_view (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T; Inner ], [ inner ] =>
        ltac:(M.monadic
          (let inner := M.alloc (| inner |) in
          Value.StructRecord
            "p3_matrix::row_index_mapped::RowIndexMappedView"
            []
            [ Ty.path "p3_matrix::bitrev::BitReversalPerm"; Inner ]
            [
              ("index_map",
                Value.StructRecord
                  "p3_matrix::bitrev::BitReversalPerm"
                  []
                  []
                  [
                    ("log_height",
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_trait_method (|
                              "p3_matrix::Matrix",
                              Inner,
                              [],
                              [ T ],
                              "height",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, inner |) ]
                          |)
                        ]
                      |))
                  ]);
              ("inner", M.read (| inner |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_view : M.IsAssociatedFunction.C Self "new_view" new_view.
    Admitted.
    Global Typeclasses Opaque new_view.
  End Impl_p3_matrix_bitrev_BitReversalPerm.
  
  Module Impl_p3_matrix_row_index_mapped_RowIndexMap_for_p3_matrix_bitrev_BitReversalPerm.
    Definition Self : Ty.t := Ty.path "p3_matrix::bitrev::BitReversalPerm".
    
    (*
        fn height(&self) -> usize {
            1 << self.log_height
        }
    *)
    Definition height (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            BinOp.Wrap.shl,
            [
              Value.Integer IntegerKind.Usize 1;
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::bitrev::BitReversalPerm",
                  "log_height"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn map_row_index(&self, r: usize) -> usize {
            reverse_bits_len(r, self.log_height)
        }
    *)
    Definition map_row_index (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_function (| "p3_util::reverse_bits_len", [], [] |),
            [
              M.read (| r |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::bitrev::BitReversalPerm",
                  "log_height"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn to_row_major_matrix<T: Clone + Send + Sync, Inner: Matrix<T>>(
            &self,
            inner: Inner,
        ) -> RowMajorMatrix<T> {
            let mut inner = inner.to_row_major_matrix();
            reverse_matrix_index_bits(&mut inner);
            inner
        }
    *)
    Definition to_row_major_matrix (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T; Inner ], [ self; inner ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let inner := M.alloc (| inner |) in
          M.read (|
            let~ inner :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        T;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      T;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Inner,
                    [],
                    [ T ],
                    "to_row_major_matrix",
                    [],
                    []
                  |),
                  [ M.read (| inner |) ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (|
                    "p3_matrix::util::reverse_matrix_index_bits",
                    [],
                    [
                      T;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (| M.borrow (| Pointer.Kind.MutRef, inner |) |)
                    |)
                  ]
                |)
              |) in
            inner
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_matrix::row_index_mapped::RowIndexMap"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [
          ("height", InstanceField.Method height);
          ("map_row_index", InstanceField.Method map_row_index);
          ("to_row_major_matrix", InstanceField.Method to_row_major_matrix)
        ].
  End Impl_p3_matrix_row_index_mapped_RowIndexMap_for_p3_matrix_bitrev_BitReversalPerm.
  
  Axiom BitReversedMatrixView :
    forall (Inner : Ty.t),
    (Ty.apply (Ty.path "p3_matrix::bitrev::BitReversedMatrixView") [] [ Inner ]) =
      (Ty.apply
        (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
        []
        [ Ty.path "p3_matrix::bitrev::BitReversalPerm"; Inner ]).
  
  Module Impl_p3_matrix_bitrev_BitReversibleMatrix_where_core_clone_Clone_T_where_core_marker_Send_T_where_core_marker_Sync_T_where_p3_matrix_dense_DenseStorage_S_T_T_for_p3_matrix_row_index_mapped_RowIndexMappedView_p3_matrix_bitrev_BitReversalPerm_p3_matrix_dense_DenseMatrix_T_S.
    Definition Self (T S : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
        []
        [
          Ty.path "p3_matrix::bitrev::BitReversalPerm";
          Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ]
        ].
    
    (*     type BitRev = DenseMatrix<T, S>; *)
    Definition _BitRev (T S : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ].
    
    (*
        fn bit_reverse_rows(self) -> Self::BitRev {
            self.inner
        }
    *)
    Definition bit_reverse_rows
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              self,
              "p3_matrix::row_index_mapped::RowIndexMappedView",
              "inner"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T S : Ty.t),
      M.IsTraitInstance
        "p3_matrix::bitrev::BitReversibleMatrix"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T S)
        (* Instance *)
        [
          ("BitRev", InstanceField.Ty (_BitRev T S));
          ("bit_reverse_rows", InstanceField.Method (bit_reverse_rows T S))
        ].
  End Impl_p3_matrix_bitrev_BitReversibleMatrix_where_core_clone_Clone_T_where_core_marker_Send_T_where_core_marker_Sync_T_where_p3_matrix_dense_DenseStorage_S_T_T_for_p3_matrix_row_index_mapped_RowIndexMappedView_p3_matrix_bitrev_BitReversalPerm_p3_matrix_dense_DenseMatrix_T_S.
  
  Module Impl_p3_matrix_bitrev_BitReversibleMatrix_where_core_clone_Clone_T_where_core_marker_Send_T_where_core_marker_Sync_T_where_p3_matrix_dense_DenseStorage_S_T_T_for_p3_matrix_dense_DenseMatrix_T_S.
    Definition Self (T S : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ].
    
    (*     type BitRev = BitReversedMatrixView<Self>; *)
    Definition _BitRev (T S : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
        []
        [
          Ty.path "p3_matrix::bitrev::BitReversalPerm";
          Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ]
        ].
    
    (*
        fn bit_reverse_rows(self) -> Self::BitRev {
            BitReversalPerm::new_view(self)
        }
    *)
    Definition bit_reverse_rows
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
              []
              [
                Ty.path "p3_matrix::bitrev::BitReversalPerm";
                Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ]
              ],
            M.get_associated_function (|
              Ty.path "p3_matrix::bitrev::BitReversalPerm",
              "new_view",
              [],
              [ T; Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ] ]
            |),
            [ M.read (| self |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T S : Ty.t),
      M.IsTraitInstance
        "p3_matrix::bitrev::BitReversibleMatrix"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T S)
        (* Instance *)
        [
          ("BitRev", InstanceField.Ty (_BitRev T S));
          ("bit_reverse_rows", InstanceField.Method (bit_reverse_rows T S))
        ].
  End Impl_p3_matrix_bitrev_BitReversibleMatrix_where_core_clone_Clone_T_where_core_marker_Send_T_where_core_marker_Sync_T_where_p3_matrix_dense_DenseStorage_S_T_T_for_p3_matrix_dense_DenseMatrix_T_S.
End bitrev.
