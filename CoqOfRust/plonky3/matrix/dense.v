(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module dense.
  (* StructRecord
    {
      name := "DenseMatrix";
      const_params := [];
      ty_params := [ "T"; "V" ];
      fields :=
        [
          ("values", V);
          ("width", Ty.path "usize");
          ("_phantom", Ty.apply (Ty.path "core::marker::PhantomData") [] [ T ])
        ];
    } *)
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_T_where_core_marker_Copy_V_for_p3_matrix_dense_DenseMatrix_T_V.
    Definition Self (T V : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; V ].
    
    Axiom Implements :
      forall (T V : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T V)
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_T_where_core_marker_Copy_V_for_p3_matrix_dense_DenseMatrix_T_V.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_T_where_core_clone_Clone_V_for_p3_matrix_dense_DenseMatrix_T_V.
    Definition Self (T V : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; V ].
    
    (* Clone *)
    Definition clone (T V : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T V in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_matrix::dense::DenseMatrix"
            [
              ("values",
                M.call_closure (|
                  V,
                  M.get_trait_method (| "core::clone::Clone", V, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::dense::DenseMatrix",
                            "values"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("width",
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "usize",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::dense::DenseMatrix",
                            "width"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("_phantom",
                M.call_closure (|
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ T ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "core::marker::PhantomData") [] [ T ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::dense::DenseMatrix",
                            "_phantom"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T V : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T V)
        (* Instance *) [ ("clone", InstanceField.Method (clone T V)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_T_where_core_clone_Clone_V_for_p3_matrix_dense_DenseMatrix_T_V.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_where_core_fmt_Debug_V_for_p3_matrix_dense_DenseMatrix_T_V.
    Definition Self (T V : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; V ].
    
    (* Debug *)
    Definition fmt (T V : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T V in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "DenseMatrix" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "values" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_matrix::dense::DenseMatrix",
                        "values"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "width" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_matrix::dense::DenseMatrix",
                        "width"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_phantom" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::dense::DenseMatrix",
                            "_phantom"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T V : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T V)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt T V)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_T_where_core_fmt_Debug_V_for_p3_matrix_dense_DenseMatrix_T_V.
  
  Module Impl_core_marker_StructuralPartialEq_for_p3_matrix_dense_DenseMatrix_T_V.
    Definition Self (T V : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; V ].
    
    Axiom Implements :
      forall (T V : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T V)
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_p3_matrix_dense_DenseMatrix_T_V.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_T_where_core_cmp_PartialEq_V_p3_matrix_dense_DenseMatrix_T_V_for_p3_matrix_dense_DenseMatrix_T_V.
    Definition Self (T V : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; V ].
    
    (* PartialEq *)
    Definition eq (T V : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T V in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            LogicalOp.and (|
              M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (| "core::cmp::PartialEq", V, [], [ V ], "eq", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_matrix::dense::DenseMatrix",
                      "values"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "p3_matrix::dense::DenseMatrix",
                      "values"
                    |)
                  |)
                ]
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "bool",
                  BinOp.eq,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_matrix::dense::DenseMatrix",
                        "width"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "p3_matrix::dense::DenseMatrix",
                        "width"
                      |)
                    |)
                  ]
                |)))
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ T ],
                  [],
                  [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ T ] ],
                  "eq",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_matrix::dense::DenseMatrix",
                      "_phantom"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "p3_matrix::dense::DenseMatrix",
                      "_phantom"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T V : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; V ] ]
        (Self T V)
        (* Instance *) [ ("eq", InstanceField.Method (eq T V)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_T_where_core_cmp_PartialEq_V_p3_matrix_dense_DenseMatrix_T_V_for_p3_matrix_dense_DenseMatrix_T_V.
  
  Module Impl_core_cmp_Eq_where_core_cmp_Eq_T_where_core_cmp_Eq_V_for_p3_matrix_dense_DenseMatrix_T_V.
    Definition Self (T V : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; V ].
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (T V : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T V in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              Value.DeclaredButUndefined,
                              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T V : Ty.t),
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T V)
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq T V)) ].
  End Impl_core_cmp_Eq_where_core_cmp_Eq_T_where_core_cmp_Eq_V_for_p3_matrix_dense_DenseMatrix_T_V.
  
  Module underscore.
    Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_V_for_p3_matrix_dense_DenseMatrix_T_V.
      Definition Self (T V : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; V ].
      
      (* Serialize *)
      Definition serialize (T V : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T V in
        match ε, τ, α with
        | [], [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let __serializer := M.alloc (| __serializer |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ __serde_state :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct"
                        ] :=
                    M.copy (|
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct"
                          ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "DenseMatrix" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.cast (Ty.path "usize") (Value.Bool false);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ V ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "values" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::dense::DenseMatrix",
                                        "values"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "width" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::dense::DenseMatrix",
                                        "width"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ T ] ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "_phantom" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::dense::DenseMatrix",
                                        "_phantom"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.get_trait_method (|
                        "serde::ser::SerializeStruct",
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        [],
                        [],
                        "end",
                        [],
                        []
                      |),
                      [ M.read (| __serde_state |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T V : Ty.t),
        M.IsTraitInstance
          "serde::ser::Serialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T V)
          (* Instance *) [ ("serialize", InstanceField.Method (serialize T V)) ].
    End Impl_serde_ser_Serialize_where_serde_ser_Serialize_V_for_p3_matrix_dense_DenseMatrix_T_V.
    Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_V_for_p3_matrix_dense_DenseMatrix_T_V.
      Definition Self (T V : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; V ].
      
      (* Deserialize *)
      Definition deserialize
          (T V : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T V in
        match ε, τ, α with
        | [], [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __deserializer |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; V ];
                  Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                ],
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                [],
                "deserialize_struct",
                [],
                [ Ty.apply (Ty.path "p3_matrix::dense::_'1::deserialize::__Visitor") [] [ T; V ] ]
              |),
              [
                M.read (| __deserializer |);
                mk_str (| "DenseMatrix" |);
                M.read (|
                  get_constant (|
                    "p3_matrix::dense::_'1::deserialize::FIELDS",
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ]
                  |)
                |);
                Value.StructRecord
                  "p3_matrix::dense::_'1::deserialize::__Visitor"
                  [
                    ("marker", Value.StructTuple "core::marker::PhantomData" []);
                    ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T V : Ty.t),
        M.IsTraitInstance
          "serde::de::Deserialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T V)
          (* Instance *) [ ("deserialize", InstanceField.Method (deserialize T V)) ].
    End Impl_serde_de_Deserialize_where_serde_de_Deserialize_V_for_p3_matrix_dense_DenseMatrix_T_V.
  End underscore.
  
  
  Axiom RowMajorMatrix :
    forall (T : Ty.t),
    (Ty.apply (Ty.path "p3_matrix::dense::RowMajorMatrix") [] [ T ]) =
      (Ty.apply
        (Ty.path "p3_matrix::dense::DenseMatrix")
        []
        [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ]).
  
  Axiom RowMajorMatrixView :
    forall (T : Ty.t),
    (Ty.apply (Ty.path "p3_matrix::dense::RowMajorMatrixView") [] [ T ]) =
      (Ty.apply
        (Ty.path "p3_matrix::dense::DenseMatrix")
        []
        [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ]).
  
  Axiom RowMajorMatrixViewMut :
    forall (T : Ty.t),
    (Ty.apply (Ty.path "p3_matrix::dense::RowMajorMatrixViewMut") [] [ T ]) =
      (Ty.apply
        (Ty.path "p3_matrix::dense::DenseMatrix")
        []
        [ T; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ]).
  
  Axiom RowMajorMatrixCow :
    forall (T : Ty.t),
    (Ty.apply (Ty.path "p3_matrix::dense::RowMajorMatrixCow") [] [ T ]) =
      (Ty.apply
        (Ty.path "p3_matrix::dense::DenseMatrix")
        []
        [ T; Ty.apply (Ty.path "alloc::borrow::Cow") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ]).
  
  (* Trait *)
  (* Empty module 'DenseStorage' *)
  
  Module Impl_p3_matrix_dense_DenseStorage_where_core_clone_Clone_T_where_core_marker_Send_T_where_core_marker_Sync_T_T_for_alloc_vec_Vec_T_alloc_alloc_Global.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ].
    
    (*
        fn to_vec(self) -> Self {
            self
        }
    *)
    Definition to_vec (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| self |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "p3_matrix::dense::DenseStorage"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T)
        (* Instance *) [ ("to_vec", InstanceField.Method (to_vec T)) ].
  End Impl_p3_matrix_dense_DenseStorage_where_core_clone_Clone_T_where_core_marker_Send_T_where_core_marker_Sync_T_T_for_alloc_vec_Vec_T_alloc_alloc_Global.
  
  Module Impl_p3_matrix_dense_DenseStorage_where_core_clone_Clone_T_where_core_marker_Send_T_where_core_marker_Sync_T_T_for_ref__slice_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ].
    
    (*
        fn to_vec(self) -> Vec<T> {
            <[T]>::to_vec(self)
        }
    *)
    Definition to_vec (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
            M.get_associated_function (| Ty.apply (Ty.path "slice") [] [ T ], "to_vec", [], [] |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "p3_matrix::dense::DenseStorage"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T)
        (* Instance *) [ ("to_vec", InstanceField.Method (to_vec T)) ].
  End Impl_p3_matrix_dense_DenseStorage_where_core_clone_Clone_T_where_core_marker_Send_T_where_core_marker_Sync_T_T_for_ref__slice_T.
  
  Module Impl_p3_matrix_dense_DenseStorage_where_core_clone_Clone_T_where_core_marker_Send_T_where_core_marker_Sync_T_T_for_ref_mut_slice_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ].
    
    (*
        fn to_vec(self) -> Vec<T> {
            <[T]>::to_vec(self)
        }
    *)
    Definition to_vec (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
            M.get_associated_function (| Ty.apply (Ty.path "slice") [] [ T ], "to_vec", [], [] |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "p3_matrix::dense::DenseStorage"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T)
        (* Instance *) [ ("to_vec", InstanceField.Method (to_vec T)) ].
  End Impl_p3_matrix_dense_DenseStorage_where_core_clone_Clone_T_where_core_marker_Send_T_where_core_marker_Sync_T_T_for_ref_mut_slice_T.
  
  Module Impl_p3_matrix_dense_DenseStorage_where_core_clone_Clone_T_where_core_marker_Send_T_where_core_marker_Sync_T_T_for_alloc_borrow_Cow_slice_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "alloc::borrow::Cow") [] [ Ty.apply (Ty.path "slice") [] [ T ] ].
    
    (*
        fn to_vec(self) -> Vec<T> {
            self.into_owned()
        }
    *)
    Definition to_vec (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
            M.get_associated_function (|
              Ty.apply (Ty.path "alloc::borrow::Cow") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
              "into_owned",
              [],
              []
            |),
            [ M.read (| self |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "p3_matrix::dense::DenseStorage"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T)
        (* Instance *) [ ("to_vec", InstanceField.Method (to_vec T)) ].
  End Impl_p3_matrix_dense_DenseStorage_where_core_clone_Clone_T_where_core_marker_Send_T_where_core_marker_Sync_T_T_for_alloc_borrow_Cow_slice_T.
  
  Module Impl_p3_matrix_dense_DenseMatrix_T_alloc_vec_Vec_T_alloc_alloc_Global.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_matrix::dense::DenseMatrix")
        []
        [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ].
    
    (*
        pub fn default(width: usize, height: usize) -> Self {
            Self::new(vec![T::default(); width * height], width)
        }
    *)
    Definition default (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ width; height ] =>
        ltac:(M.monadic
          (let width := M.alloc (| width |) in
          let height := M.alloc (| height |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                ],
              "new",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                M.get_function (| "alloc::vec::from_elem", [], [ T ] |),
                [
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::default::Default", T, [], [], "default", [], [] |),
                    []
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [ M.read (| width |); M.read (| height |) ]
                  |)
                ]
              |);
              M.read (| width |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_default :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "default" (default T).
    Admitted.
    Global Typeclasses Opaque default.
    (*
        pub fn as_cow<'a>(self) -> RowMajorMatrixCow<'a, T> {
            RowMajorMatrixCow::new(Cow::Owned(self.values), self.width)
        }
    *)
    Definition as_cow (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [
                T;
                Ty.apply (Ty.path "alloc::borrow::Cow") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
              ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [
                  T;
                  Ty.apply (Ty.path "alloc::borrow::Cow") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                ],
              "new",
              [],
              []
            |),
            [
              Value.StructTuple
                "alloc::borrow::Cow::Owned"
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "p3_matrix::dense::DenseMatrix",
                      "values"
                    |)
                  |)
                ];
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  self,
                  "p3_matrix::dense::DenseMatrix",
                  "width"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_cow :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "as_cow" (as_cow T).
    Admitted.
    Global Typeclasses Opaque as_cow.
    
    (*
        pub fn rand<R: Rng>(rng: &mut R, rows: usize, cols: usize) -> Self
        where
            StandardUniform: Distribution<T>,
        {
            let values = rng.sample_iter(StandardUniform).take(rows * cols).collect();
            Self::new(values, cols)
        }
    *)
    Definition rand (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [ R ], [ rng; rows; cols ] =>
        ltac:(M.monadic
          (let rng := M.alloc (| rng |) in
          let rows := M.alloc (| rows |) in
          let cols := M.alloc (| cols |) in
          M.read (|
            let~ values :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::take::Take")
                      []
                      [
                        Ty.apply
                          (Ty.path "rand::distr::distribution::Iter")
                          []
                          [
                            Ty.path "rand::distr::StandardUniform";
                            Ty.apply (Ty.path "&mut") [] [ R ];
                            T
                          ]
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::take::Take")
                        []
                        [
                          Ty.apply
                            (Ty.path "rand::distr::distribution::Iter")
                            []
                            [
                              Ty.path "rand::distr::StandardUniform";
                              Ty.apply (Ty.path "&mut") [] [ R ];
                              T
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "rand::distr::distribution::Iter")
                          []
                          [
                            Ty.path "rand::distr::StandardUniform";
                            Ty.apply (Ty.path "&mut") [] [ R ];
                            T
                          ],
                        [],
                        [],
                        "take",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "rand::distr::distribution::Iter")
                            []
                            [
                              Ty.path "rand::distr::StandardUniform";
                              Ty.apply (Ty.path "&mut") [] [ R ];
                              T
                            ],
                          M.get_trait_method (|
                            "rand::rng::Rng",
                            Ty.apply (Ty.path "&mut") [] [ R ],
                            [],
                            [],
                            "sample_iter",
                            [],
                            [ T; Ty.path "rand::distr::StandardUniform" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| rng |) |) |);
                            Value.StructTuple "rand::distr::StandardUniform" []
                          ]
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.mul,
                          [ M.read (| rows |); M.read (| cols |) ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      T;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| values |); M.read (| cols |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_rand :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "rand" (rand T).
    Admitted.
    Global Typeclasses Opaque rand.
    
    (*
        pub fn rand_nonzero<R: Rng>(rng: &mut R, rows: usize, cols: usize) -> Self
        where
            T: Field,
            StandardUniform: Distribution<T>,
        {
            let values = rng
                .sample_iter(StandardUniform)
                .filter(|x| !x.is_zero())
                .take(rows * cols)
                .collect();
            Self::new(values, cols)
        }
    *)
    Definition rand_nonzero (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [ R ], [ rng; rows; cols ] =>
        ltac:(M.monadic
          (let rng := M.alloc (| rng |) in
          let rows := M.alloc (| rows |) in
          let cols := M.alloc (| cols |) in
          M.read (|
            let~ values :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::take::Take")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::filter::Filter")
                          []
                          [
                            Ty.apply
                              (Ty.path "rand::distr::distribution::Iter")
                              []
                              [
                                Ty.path "rand::distr::StandardUniform";
                                Ty.apply (Ty.path "&mut") [] [ R ];
                                T
                              ];
                            Ty.function
                              [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ] ] ]
                              (Ty.path "bool")
                          ]
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::take::Take")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::filter::Filter")
                            []
                            [
                              Ty.apply
                                (Ty.path "rand::distr::distribution::Iter")
                                []
                                [
                                  Ty.path "rand::distr::StandardUniform";
                                  Ty.apply (Ty.path "&mut") [] [ R ];
                                  T
                                ];
                              Ty.function
                                [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ] ] ]
                                (Ty.path "bool")
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::filter::Filter")
                          []
                          [
                            Ty.apply
                              (Ty.path "rand::distr::distribution::Iter")
                              []
                              [
                                Ty.path "rand::distr::StandardUniform";
                                Ty.apply (Ty.path "&mut") [] [ R ];
                                T
                              ];
                            Ty.function
                              [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ] ] ]
                              (Ty.path "bool")
                          ],
                        [],
                        [],
                        "take",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::filter::Filter")
                            []
                            [
                              Ty.apply
                                (Ty.path "rand::distr::distribution::Iter")
                                []
                                [
                                  Ty.path "rand::distr::StandardUniform";
                                  Ty.apply (Ty.path "&mut") [] [ R ];
                                  T
                                ];
                              Ty.function
                                [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ] ] ]
                                (Ty.path "bool")
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "rand::distr::distribution::Iter")
                              []
                              [
                                Ty.path "rand::distr::StandardUniform";
                                Ty.apply (Ty.path "&mut") [] [ R ];
                                T
                              ],
                            [],
                            [],
                            "filter",
                            [],
                            [
                              Ty.function
                                [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ] ] ]
                                (Ty.path "bool")
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "rand::distr::distribution::Iter")
                                []
                                [
                                  Ty.path "rand::distr::StandardUniform";
                                  Ty.apply (Ty.path "&mut") [] [ R ];
                                  T
                                ],
                              M.get_trait_method (|
                                "rand::rng::Rng",
                                Ty.apply (Ty.path "&mut") [] [ R ],
                                [],
                                [],
                                "sample_iter",
                                [],
                                [ T; Ty.path "rand::distr::StandardUniform" ]
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| rng |) |) |);
                                Value.StructTuple "rand::distr::StandardUniform" []
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.function
                                              [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ] ] ]
                                              (Ty.path "bool")
                                          ],
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x := M.copy (| γ |) in
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_trait_method (|
                                                    "p3_field::field::Field",
                                                    T,
                                                    [],
                                                    [],
                                                    "is_zero",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| x |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.mul,
                          [ M.read (| rows |); M.read (| cols |) ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      T;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| values |); M.read (| cols |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_rand_nonzero :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "rand_nonzero" (rand_nonzero T).
    Admitted.
    Global Typeclasses Opaque rand_nonzero.
    
    (*
        pub fn pad_to_height(&mut self, new_height: usize, fill: T) {
            assert!(new_height >= self.height());
            self.values.resize(self.width * new_height, fill);
        }
    *)
    Definition pad_to_height (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self; new_height; fill ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let new_height := M.alloc (| new_height |) in
          let fill := M.alloc (| fill |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ge,
                                [
                                  M.read (| new_height |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_trait_method (|
                                      "p3_matrix::Matrix",
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          T;
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ T; Ty.path "alloc::alloc::Global" ]
                                        ],
                                      [],
                                      [ T ],
                                      "height",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: new_height >= self.height()" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                    "resize",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_matrix::dense::DenseMatrix",
                        "values"
                      |)
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.mul,
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::dense::DenseMatrix",
                            "width"
                          |)
                        |);
                        M.read (| new_height |)
                      ]
                    |);
                    M.read (| fill |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_pad_to_height :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "pad_to_height" (pad_to_height T).
    Admitted.
    Global Typeclasses Opaque pad_to_height.
    (*
        pub fn transpose(&self) -> Self {
            let nelts = self.height() * self.width();
            let mut values = vec![T::default(); nelts];
            transpose::transpose(&self.values, &mut values, self.width(), self.height());
            Self::new(values, self.height())
        }
    *)
    Definition transpose (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ nelts : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.mul,
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "p3_matrix::Matrix",
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            T;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ]
                          ],
                        [],
                        [ T ],
                        "height",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "p3_matrix::Matrix",
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            T;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ]
                          ],
                        [],
                        [ T ],
                        "width",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  ]
                |)
              |) in
            let~ values :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                  M.get_function (| "alloc::vec::from_elem", [], [ T ] |),
                  [
                    M.call_closure (|
                      T,
                      M.get_trait_method (|
                        "core::default::Default",
                        T,
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |);
                    M.read (| nelts |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (| "transpose::out_of_place::transpose", [], [ T ] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "p3_matrix::dense::DenseMatrix",
                                    "values"
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          M.get_trait_method (|
                            "core::ops::deref::DerefMut",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "deref_mut",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (| M.borrow (| Pointer.Kind.MutRef, values |) |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "p3_matrix::Matrix",
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            T;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ]
                          ],
                        [],
                        [ T ],
                        "width",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "p3_matrix::Matrix",
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            T;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ]
                          ],
                        [],
                        [ T ],
                        "height",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      T;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                    ],
                  "new",
                  [],
                  []
                |),
                [
                  M.read (| values |);
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "p3_matrix::Matrix",
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          T;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ]
                        ],
                      [],
                      [ T ],
                      "height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_transpose :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "transpose" (transpose T).
    Admitted.
    Global Typeclasses Opaque transpose.
    
    (*
        pub fn transpose_into(&self, other: &mut Self) {
            assert_eq!(self.height(), other.width());
            assert_eq!(other.height(), self.width());
            transpose::transpose(&self.values, &mut other.values, self.width(), self.height());
        }
    *)
    Definition transpose_into
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_trait_method (|
                              "p3_matrix::Matrix",
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  T;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ T; Ty.path "alloc::alloc::Global" ]
                                ],
                              [],
                              [ T ],
                              "height",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_trait_method (|
                              "p3_matrix::Matrix",
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  T;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ T; Ty.path "alloc::alloc::Global" ]
                                ],
                              [],
                              [ T ],
                              "width",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "usize"; Ty.path "usize" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple "core::option::Option::None" []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_trait_method (|
                              "p3_matrix::Matrix",
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  T;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ T; Ty.path "alloc::alloc::Global" ]
                                ],
                              [],
                              [ T ],
                              "height",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_trait_method (|
                              "p3_matrix::Matrix",
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  T;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ T; Ty.path "alloc::alloc::Global" ]
                                ],
                              [],
                              [ T ],
                              "width",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "usize"; Ty.path "usize" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple "core::option::Option::None" []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (| "transpose::out_of_place::transpose", [], [ T ] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "p3_matrix::dense::DenseMatrix",
                                    "values"
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          M.get_trait_method (|
                            "core::ops::deref::DerefMut",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "deref_mut",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| other |) |),
                                    "p3_matrix::dense::DenseMatrix",
                                    "values"
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "p3_matrix::Matrix",
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            T;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ]
                          ],
                        [],
                        [ T ],
                        "width",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "p3_matrix::Matrix",
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            T;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ]
                          ],
                        [],
                        [ T ],
                        "height",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_transpose_into :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "transpose_into" (transpose_into T).
    Admitted.
    Global Typeclasses Opaque transpose_into.
  End Impl_p3_matrix_dense_DenseMatrix_T_alloc_vec_Vec_T_alloc_alloc_Global.
  
  Module Impl_p3_matrix_dense_DenseMatrix_T_S.
    Definition Self (T S : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ].
    
    (*
        pub fn new(values: S, width: usize) -> Self {
            debug_assert!(width == 0 || values.borrow().len() % width == 0);
            Self {
                values,
                width,
                _phantom: PhantomData,
            }
        }
    *)
    Definition new (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ values; width ] =>
        ltac:(M.monadic
          (let values := M.alloc (| values |) in
          let width := M.alloc (| width |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        LogicalOp.or (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.eq,
                                            [ M.read (| width |); Value.Integer IntegerKind.Usize 0
                                            ]
                                          |),
                                          ltac:(M.monadic
                                            (M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.eq,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.rem,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply (Ty.path "slice") [] [ T ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ T ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::borrow::Borrow",
                                                                S,
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ T ]
                                                                ],
                                                                "borrow",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  values
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.read (| width |)
                                                  ]
                                                |);
                                                Value.Integer IntegerKind.Usize 0
                                              ]
                                            |)))
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic", [], [] |),
                                      [
                                        mk_str (|
                                          "assertion failed: width == 0 || values.borrow().len() % width == 0"
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              Value.StructRecord
                "p3_matrix::dense::DenseMatrix"
                [
                  ("values", M.read (| values |));
                  ("width", M.read (| width |));
                  ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "new" (new T S).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn new_row(values: S) -> Self {
            let width = values.borrow().len();
            Self::new(values, width)
        }
    *)
    Definition new_row (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ values ] =>
        ltac:(M.monadic
          (let values := M.alloc (| values |) in
          M.read (|
            let~ width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ T ],
                    "len",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          M.get_trait_method (|
                            "core::borrow::Borrow",
                            S,
                            [],
                            [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            "borrow",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, values |) ]
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| values |); M.read (| width |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_row :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "new_row" (new_row T S).
    Admitted.
    Global Typeclasses Opaque new_row.
    
    (*
        pub fn new_col(values: S) -> Self {
            Self::new(values, 1)
        }
    *)
    Definition new_col (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ values ] =>
        ltac:(M.monadic
          (let values := M.alloc (| values |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ],
              "new",
              [],
              []
            |),
            [ M.read (| values |); Value.Integer IntegerKind.Usize 1 ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_col :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "new_col" (new_col T S).
    Admitted.
    Global Typeclasses Opaque new_col.
    
    (*
        pub fn as_view(&self) -> RowMajorMatrixView<'_, T> {
            RowMajorMatrixView::new(self.values.borrow(), self.width)
        }
    *)
    Definition as_view (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ],
              "new",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    M.get_trait_method (|
                      "core::borrow::Borrow",
                      S,
                      [],
                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                      "borrow",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_matrix::dense::DenseMatrix",
                          "values"
                        |)
                      |)
                    ]
                  |)
                |)
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::dense::DenseMatrix",
                  "width"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_view :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "as_view" (as_view T S).
    Admitted.
    Global Typeclasses Opaque as_view.
    
    (*
        pub fn as_view_mut(&mut self) -> RowMajorMatrixViewMut<'_, T>
        where
            S: BorrowMut<[T]>,
        {
            RowMajorMatrixViewMut::new(self.values.borrow_mut(), self.width)
        }
    *)
    Definition as_view_mut (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [ T; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [ T; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ],
              "new",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    M.get_trait_method (|
                      "core::borrow::BorrowMut",
                      S,
                      [],
                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                      "borrow_mut",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_matrix::dense::DenseMatrix",
                          "values"
                        |)
                      |)
                    ]
                  |)
                |)
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::dense::DenseMatrix",
                  "width"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_view_mut :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "as_view_mut" (as_view_mut T S).
    Admitted.
    Global Typeclasses Opaque as_view_mut.
    
    (*
        pub fn copy_from<S2>(&mut self, source: &DenseMatrix<T, S2>)
        where
            T: Copy,
            S: BorrowMut<[T]>,
            S2: DenseStorage<T>,
        {
            assert_eq!(self.dimensions(), source.dimensions());
            // Equivalent to:
            // self.values.borrow_mut().copy_from_slice(source.values.borrow());
            self.par_rows_mut()
                .zip(source.par_row_slices())
                .for_each(|(dst, src)| {
                    dst.copy_from_slice(src);
                });
        }
    *)
    Definition copy_from (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [ S2 ], [ self; source ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let source := M.alloc (| source |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "p3_matrix::Dimensions",
                            M.get_trait_method (|
                              "p3_matrix::Matrix",
                              Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ],
                              [],
                              [ T ],
                              "dimensions",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "p3_matrix::Dimensions",
                            M.get_trait_method (|
                              "p3_matrix::Matrix",
                              Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S2 ],
                              [],
                              [ T ],
                              "dimensions",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| source |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          Ty.path "p3_matrix::Dimensions",
                                          [],
                                          [ Ty.path "p3_matrix::Dimensions" ],
                                          "eq",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| left_val |) |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| right_val |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [
                                            Ty.path "p3_matrix::Dimensions";
                                            Ty.path "p3_matrix::Dimensions"
                                          ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple "core::option::Option::None" []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::zip::Zip")
                      []
                      [ Ty.associated_unknown; Ty.associated_unknown ],
                    [],
                    [],
                    "for_each",
                    [],
                    [
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                ]
                            ]
                        ]
                        (Ty.tuple [])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        []
                        [ Ty.associated_unknown; Ty.associated_unknown ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.associated_unknown,
                        [],
                        [],
                        "zip",
                        [],
                        [ Ty.associated_unknown ]
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_unknown,
                          M.get_associated_function (|
                            Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ],
                            "par_rows_mut",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                        |);
                        M.call_closure (|
                          Ty.associated_unknown,
                          M.get_associated_function (|
                            Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S2 ],
                            "par_row_slices",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| source |) |) |) ]
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                              ]
                                          ]
                                      ]
                                      (Ty.tuple [])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let dst := M.copy (| γ0_0 |) in
                                      let src := M.copy (| γ0_1 |) in
                                      M.read (|
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "copy_from_slice",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| dst |) |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| src |) |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_copy_from :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "copy_from" (copy_from T S).
    Admitted.
    Global Typeclasses Opaque copy_from.
    
    (*
        pub fn flatten_to_base<F: Field>(&self) -> RowMajorMatrix<F>
        where
            T: ExtensionField<F>,
        {
            let width = self.width * T::DIMENSION;
            let values = self
                .values
                .borrow()
                .iter()
                .flat_map(|x| x.as_basis_coefficients_slice().iter().copied())
                .collect();
            RowMajorMatrix::new(values, width)
        }
    *)
    Definition flatten_to_base
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [ F ], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.mul,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_matrix::dense::DenseMatrix",
                        "width"
                      |)
                    |);
                    M.read (|
                      get_constant (|
                        "p3_field::field::BasedVectorSpace::DIMENSION",
                        Ty.path "usize"
                      |)
                    |)
                  ]
                |)
              |) in
            let~ values :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                      []
                      [
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ];
                        Ty.apply
                          (Ty.path "core::iter::adapters::copied::Copied")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ];
                        Ty.function
                          [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ] ] ]
                          (Ty.apply
                            (Ty.path "core::iter::adapters::copied::Copied")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::flatten::FlatMap")
                        []
                        [
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::copied::Copied")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ];
                          Ty.function
                            [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ] ] ]
                            (Ty.apply
                              (Ty.path "core::iter::adapters::copied::Copied")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ],
                        [],
                        [],
                        "flat_map",
                        [],
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::copied::Copied")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ];
                          Ty.function
                            [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ] ] ]
                            (Ty.apply
                              (Ty.path "core::iter::adapters::copied::Copied")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "iter",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                  M.get_trait_method (|
                                    "core::borrow::Borrow",
                                    S,
                                    [],
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                    "borrow",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::dense::DenseMatrix",
                                        "values"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ] ] ]
                                          (Ty.apply
                                            (Ty.path "core::iter::adapters::copied::Copied")
                                            []
                                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ]
                                            ])
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let x := M.copy (| γ |) in
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::copied::Copied")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ F ]
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                              [],
                                              [],
                                              "copied",
                                              [],
                                              [ F ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ F ],
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ F ],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                        M.get_trait_method (|
                                                          "p3_field::field::BasedVectorSpace",
                                                          T,
                                                          [],
                                                          [ F ],
                                                          "as_basis_coefficients_slice",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| x |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| values |); M.read (| width |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_flatten_to_base :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "flatten_to_base" (flatten_to_base T S).
    Admitted.
    Global Typeclasses Opaque flatten_to_base.
    
    (*
        pub fn row_slices(&self) -> impl Iterator<Item = &[T]> {
            self.values.borrow().chunks_exact(self.width)
        }
    *)
    Definition row_slices (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::slice::iter::ChunksExact") [] [ T ],
            M.get_associated_function (|
              Ty.apply (Ty.path "slice") [] [ T ],
              "chunks_exact",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    M.get_trait_method (|
                      "core::borrow::Borrow",
                      S,
                      [],
                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                      "borrow",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_matrix::dense::DenseMatrix",
                          "values"
                        |)
                      |)
                    ]
                  |)
                |)
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::dense::DenseMatrix",
                  "width"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_row_slices :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "row_slices" (row_slices T S).
    Admitted.
    Global Typeclasses Opaque row_slices.
    
    (*
        pub fn par_row_slices(&self) -> impl IndexedParallelIterator<Item = &[T]>
        where
            T: Sync,
        {
            self.values.borrow().par_chunks_exact(self.width)
        }
    *)
    Definition par_row_slices
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::slice::iter::ChunksExact") [] [ T ],
            M.get_trait_method (|
              "p3_maybe_rayon::serial::ParallelSlice",
              Ty.apply (Ty.path "slice") [] [ T ],
              [],
              [ T ],
              "par_chunks_exact",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    M.get_trait_method (|
                      "core::borrow::Borrow",
                      S,
                      [],
                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                      "borrow",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_matrix::dense::DenseMatrix",
                          "values"
                        |)
                      |)
                    ]
                  |)
                |)
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::dense::DenseMatrix",
                  "width"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_par_row_slices :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "par_row_slices" (par_row_slices T S).
    Admitted.
    Global Typeclasses Opaque par_row_slices.
    
    (*
        pub fn row_mut(&mut self, r: usize) -> &mut [T]
        where
            S: BorrowMut<[T]>,
        {
            &mut self.values.borrow_mut()[r * self.width..(r + 1) * self.width]
        }
    *)
    Definition row_mut (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                        M.get_trait_method (|
                          "core::ops::index::IndexMut",
                          Ty.apply (Ty.path "slice") [] [ T ],
                          [],
                          [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ],
                          "index_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                M.get_trait_method (|
                                  "core::borrow::BorrowMut",
                                  S,
                                  [],
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                  "borrow_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "p3_matrix::dense::DenseMatrix",
                                      "values"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |);
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start",
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.mul,
                                  [
                                    M.read (| r |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::dense::DenseMatrix",
                                        "width"
                                      |)
                                    |)
                                  ]
                                |));
                              ("end_",
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.mul,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [ M.read (| r |); Value.Integer IntegerKind.Usize 1 ]
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::dense::DenseMatrix",
                                        "width"
                                      |)
                                    |)
                                  ]
                                |))
                            ]
                        ]
                      |)
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_row_mut :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "row_mut" (row_mut T S).
    Admitted.
    Global Typeclasses Opaque row_mut.
    
    (*
        pub fn rows_mut(&mut self) -> impl Iterator<Item = &mut [T]>
        where
            S: BorrowMut<[T]>,
        {
            self.values.borrow_mut().chunks_exact_mut(self.width)
        }
    *)
    Definition rows_mut (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::slice::iter::ChunksExactMut") [] [ T ],
            M.get_associated_function (|
              Ty.apply (Ty.path "slice") [] [ T ],
              "chunks_exact_mut",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    M.get_trait_method (|
                      "core::borrow::BorrowMut",
                      S,
                      [],
                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                      "borrow_mut",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_matrix::dense::DenseMatrix",
                          "values"
                        |)
                      |)
                    ]
                  |)
                |)
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::dense::DenseMatrix",
                  "width"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_rows_mut :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "rows_mut" (rows_mut T S).
    Admitted.
    Global Typeclasses Opaque rows_mut.
    
    (*
        pub fn par_rows_mut<'a>(&'a mut self) -> impl IndexedParallelIterator<Item = &'a mut [T]>
        where
            T: 'a + Send,
            S: BorrowMut<[T]>,
        {
            self.values.borrow_mut().par_chunks_exact_mut(self.width)
        }
    *)
    Definition par_rows_mut
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::slice::iter::ChunksExactMut") [] [ T ],
            M.get_trait_method (|
              "p3_maybe_rayon::serial::ParallelSliceMut",
              Ty.apply (Ty.path "slice") [] [ T ],
              [],
              [ T ],
              "par_chunks_exact_mut",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    M.get_trait_method (|
                      "core::borrow::BorrowMut",
                      S,
                      [],
                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                      "borrow_mut",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_matrix::dense::DenseMatrix",
                          "values"
                        |)
                      |)
                    ]
                  |)
                |)
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::dense::DenseMatrix",
                  "width"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_par_rows_mut :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "par_rows_mut" (par_rows_mut T S).
    Admitted.
    Global Typeclasses Opaque par_rows_mut.
    
    (*
        pub fn horizontally_packed_row_mut<P>(&mut self, r: usize) -> (&mut [P], &mut [T])
        where
            P: PackedValue<Value = T>,
            S: BorrowMut<[T]>,
        {
            P::pack_slice_with_suffix_mut(self.row_mut(r))
        }
    *)
    Definition horizontally_packed_row_mut
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [ P ], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.call_closure (|
            Ty.tuple
              [
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ P ] ];
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
              ],
            M.get_trait_method (|
              "p3_field::packed::PackedValue",
              P,
              [],
              [],
              "pack_slice_with_suffix_mut",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ],
                      "row_mut",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      M.read (| r |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_horizontally_packed_row_mut :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C
        (Self T S)
        "horizontally_packed_row_mut"
        (horizontally_packed_row_mut T S).
    Admitted.
    Global Typeclasses Opaque horizontally_packed_row_mut.
    
    (*
        pub fn scale_row(&mut self, r: usize, scale: T)
        where
            T: Field,
            S: BorrowMut<[T]>,
        {
            scale_slice_in_place(scale, self.row_mut(r));
        }
    *)
    Definition scale_row (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; r; scale ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          let scale := M.alloc (| scale |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (| "p3_field::helpers::scale_slice_in_place", [], [ T ] |),
                  [
                    M.read (| scale |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ],
                            "row_mut",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                            M.read (| r |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_scale_row :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "scale_row" (scale_row T S).
    Admitted.
    Global Typeclasses Opaque scale_row.
    
    (*
        pub fn scale(&mut self, scale: T)
        where
            T: Field,
            S: BorrowMut<[T]>,
        {
            scale_slice_in_place(scale, self.values.borrow_mut());
        }
    *)
    Definition scale (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; scale ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let scale := M.alloc (| scale |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (| "p3_field::helpers::scale_slice_in_place", [], [ T ] |),
                  [
                    M.read (| scale |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          M.get_trait_method (|
                            "core::borrow::BorrowMut",
                            S,
                            [],
                            [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            "borrow_mut",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "p3_matrix::dense::DenseMatrix",
                                "values"
                              |)
                            |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_scale :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "scale" (scale T S).
    Admitted.
    Global Typeclasses Opaque scale.
    
    (*
        pub fn split_rows(&self, r: usize) -> (RowMajorMatrixView<T>, RowMajorMatrixView<T>) {
            let (lo, hi) = self.values.borrow().split_at(r * self.width);
            (
                DenseMatrix::new(lo, self.width),
                DenseMatrix::new(hi, self.width),
            )
        }
    *)
    Definition split_rows (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ];
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ]
                    ]
                ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                    ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ T ],
                    "split_at",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          M.get_trait_method (|
                            "core::borrow::Borrow",
                            S,
                            [],
                            [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            "borrow",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "p3_matrix::dense::DenseMatrix",
                                "values"
                              |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.mul,
                      [
                        M.read (| r |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::dense::DenseMatrix",
                            "width"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let lo := M.copy (| γ0_0 |) in
                    let hi := M.copy (| γ0_1 |) in
                    M.alloc (|
                      Value.Tuple
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  T;
                                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                ],
                              "new",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| lo |) |) |);
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "p3_matrix::dense::DenseMatrix",
                                  "width"
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  T;
                                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                ],
                              "new",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| hi |) |) |);
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "p3_matrix::dense::DenseMatrix",
                                  "width"
                                |)
                              |)
                            ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_rows :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "split_rows" (split_rows T S).
    Admitted.
    Global Typeclasses Opaque split_rows.
    
    (*
        pub fn split_rows_mut(
            &mut self,
            r: usize,
        ) -> (RowMajorMatrixViewMut<T>, RowMajorMatrixViewMut<T>)
        where
            S: BorrowMut<[T]>,
        {
            let (lo, hi) = self.values.borrow_mut().split_at_mut(r * self.width);
            (
                DenseMatrix::new(lo, self.width),
                DenseMatrix::new(hi, self.width),
            )
        }
    *)
    Definition split_rows_mut
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [ T; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ];
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [ T; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ]
                    ]
                ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                    ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ T ],
                    "split_at_mut",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          M.get_trait_method (|
                            "core::borrow::BorrowMut",
                            S,
                            [],
                            [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            "borrow_mut",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "p3_matrix::dense::DenseMatrix",
                                "values"
                              |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.mul,
                      [
                        M.read (| r |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::dense::DenseMatrix",
                            "width"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let lo := M.copy (| γ0_0 |) in
                    let hi := M.copy (| γ0_1 |) in
                    M.alloc (|
                      Value.Tuple
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                T;
                                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  T;
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                ],
                              "new",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| lo |) |) |);
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "p3_matrix::dense::DenseMatrix",
                                  "width"
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                T;
                                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  T;
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                ],
                              "new",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| hi |) |) |);
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "p3_matrix::dense::DenseMatrix",
                                  "width"
                                |)
                              |)
                            ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_rows_mut :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "split_rows_mut" (split_rows_mut T S).
    Admitted.
    Global Typeclasses Opaque split_rows_mut.
    
    (*
        pub fn par_row_chunks(
            &self,
            chunk_rows: usize,
        ) -> impl IndexedParallelIterator<Item = RowMajorMatrixView<T>>
        where
            T: Send,
        {
            self.values
                .borrow()
                .par_chunks(self.width * chunk_rows)
                .map(|slice| RowMajorMatrixView::new(slice, self.width))
        }
    *)
    Definition par_row_chunks
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; chunk_rows ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let chunk_rows := M.alloc (| chunk_rows |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::iter::adapters::map::Map")
              []
              [
                Ty.apply (Ty.path "core::slice::iter::Chunks") [] [ T ];
                Ty.function
                  [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ] ]
                  (Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ])
              ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply (Ty.path "core::slice::iter::Chunks") [] [ T ],
              [],
              [],
              "map",
              [],
              [
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ];
                Ty.function
                  [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ] ]
                  (Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ])
              ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::slice::iter::Chunks") [] [ T ],
                M.get_trait_method (|
                  "p3_maybe_rayon::serial::ParallelSlice",
                  Ty.apply (Ty.path "slice") [] [ T ],
                  [],
                  [ T ],
                  "par_chunks",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                        M.get_trait_method (|
                          "core::borrow::Borrow",
                          S,
                          [],
                          [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          "borrow",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_matrix::dense::DenseMatrix",
                              "values"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_matrix::dense::DenseMatrix",
                          "width"
                        |)
                      |);
                      M.read (| chunk_rows |)
                    ]
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    T;
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                  ])
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let slice := M.copy (| γ |) in
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      T;
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        T;
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                      ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| slice |) |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::dense::DenseMatrix",
                                        "width"
                                      |)
                                    |)
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_par_row_chunks :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "par_row_chunks" (par_row_chunks T S).
    Admitted.
    Global Typeclasses Opaque par_row_chunks.
    
    (*
        pub fn par_row_chunks_exact(
            &self,
            chunk_rows: usize,
        ) -> impl IndexedParallelIterator<Item = RowMajorMatrixView<T>>
        where
            T: Send,
        {
            self.values
                .borrow()
                .par_chunks_exact(self.width * chunk_rows)
                .map(|slice| RowMajorMatrixView::new(slice, self.width))
        }
    *)
    Definition par_row_chunks_exact
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; chunk_rows ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let chunk_rows := M.alloc (| chunk_rows |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::iter::adapters::map::Map")
              []
              [
                Ty.apply (Ty.path "core::slice::iter::ChunksExact") [] [ T ];
                Ty.function
                  [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ] ]
                  (Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ])
              ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply (Ty.path "core::slice::iter::ChunksExact") [] [ T ],
              [],
              [],
              "map",
              [],
              [
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ];
                Ty.function
                  [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ] ]
                  (Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ])
              ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::slice::iter::ChunksExact") [] [ T ],
                M.get_trait_method (|
                  "p3_maybe_rayon::serial::ParallelSlice",
                  Ty.apply (Ty.path "slice") [] [ T ],
                  [],
                  [ T ],
                  "par_chunks_exact",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                        M.get_trait_method (|
                          "core::borrow::Borrow",
                          S,
                          [],
                          [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          "borrow",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_matrix::dense::DenseMatrix",
                              "values"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_matrix::dense::DenseMatrix",
                          "width"
                        |)
                      |);
                      M.read (| chunk_rows |)
                    ]
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    T;
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                  ])
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let slice := M.copy (| γ |) in
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      T;
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        T;
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                      ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| slice |) |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::dense::DenseMatrix",
                                        "width"
                                      |)
                                    |)
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_par_row_chunks_exact :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "par_row_chunks_exact" (par_row_chunks_exact T S).
    Admitted.
    Global Typeclasses Opaque par_row_chunks_exact.
    
    (*
        pub fn par_row_chunks_mut(
            &mut self,
            chunk_rows: usize,
        ) -> impl IndexedParallelIterator<Item = RowMajorMatrixViewMut<T>>
        where
            T: Send,
            S: BorrowMut<[T]>,
        {
            self.values
                .borrow_mut()
                .par_chunks_mut(self.width * chunk_rows)
                .map(|slice| RowMajorMatrixViewMut::new(slice, self.width))
        }
    *)
    Definition par_row_chunks_mut
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; chunk_rows ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let chunk_rows := M.alloc (| chunk_rows |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::iter::adapters::map::Map")
              []
              [
                Ty.apply (Ty.path "core::slice::iter::ChunksMut") [] [ T ];
                Ty.function
                  [
                    Ty.tuple
                      [ Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ]
                  ]
                  (Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [ T; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ])
              ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply (Ty.path "core::slice::iter::ChunksMut") [] [ T ],
              [],
              [],
              "map",
              [],
              [
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ T; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ];
                Ty.function
                  [
                    Ty.tuple
                      [ Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ]
                  ]
                  (Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [ T; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ])
              ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::slice::iter::ChunksMut") [] [ T ],
                M.get_trait_method (|
                  "p3_maybe_rayon::serial::ParallelSliceMut",
                  Ty.apply (Ty.path "slice") [] [ T ],
                  [],
                  [ T ],
                  "par_chunks_mut",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                        M.get_trait_method (|
                          "core::borrow::BorrowMut",
                          S,
                          [],
                          [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          "borrow_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_matrix::dense::DenseMatrix",
                              "values"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_matrix::dense::DenseMatrix",
                          "width"
                        |)
                      |);
                      M.read (| chunk_rows |)
                    ]
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    T;
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                  ])
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let slice := M.copy (| γ |) in
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      T;
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        T;
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                      ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| slice |) |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::dense::DenseMatrix",
                                        "width"
                                      |)
                                    |)
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_par_row_chunks_mut :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "par_row_chunks_mut" (par_row_chunks_mut T S).
    Admitted.
    Global Typeclasses Opaque par_row_chunks_mut.
    
    (*
        pub fn row_chunks_exact_mut(
            &mut self,
            chunk_rows: usize,
        ) -> impl Iterator<Item = RowMajorMatrixViewMut<T>>
        where
            T: Send,
            S: BorrowMut<[T]>,
        {
            self.values
                .borrow_mut()
                .chunks_exact_mut(self.width * chunk_rows)
                .map(|slice| RowMajorMatrixViewMut::new(slice, self.width))
        }
    *)
    Definition row_chunks_exact_mut
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; chunk_rows ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let chunk_rows := M.alloc (| chunk_rows |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::iter::adapters::map::Map")
              []
              [
                Ty.apply (Ty.path "core::slice::iter::ChunksExactMut") [] [ T ];
                Ty.function
                  [
                    Ty.tuple
                      [ Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ]
                  ]
                  (Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [ T; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ])
              ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply (Ty.path "core::slice::iter::ChunksExactMut") [] [ T ],
              [],
              [],
              "map",
              [],
              [
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ T; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ];
                Ty.function
                  [
                    Ty.tuple
                      [ Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ]
                  ]
                  (Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [ T; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ])
              ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::slice::iter::ChunksExactMut") [] [ T ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "slice") [] [ T ],
                  "chunks_exact_mut",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                        M.get_trait_method (|
                          "core::borrow::BorrowMut",
                          S,
                          [],
                          [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          "borrow_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_matrix::dense::DenseMatrix",
                              "values"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_matrix::dense::DenseMatrix",
                          "width"
                        |)
                      |);
                      M.read (| chunk_rows |)
                    ]
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    T;
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                  ])
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let slice := M.copy (| γ |) in
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      T;
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        T;
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                      ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| slice |) |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::dense::DenseMatrix",
                                        "width"
                                      |)
                                    |)
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_row_chunks_exact_mut :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "row_chunks_exact_mut" (row_chunks_exact_mut T S).
    Admitted.
    Global Typeclasses Opaque row_chunks_exact_mut.
    
    (*
        pub fn par_row_chunks_exact_mut(
            &mut self,
            chunk_rows: usize,
        ) -> impl IndexedParallelIterator<Item = RowMajorMatrixViewMut<T>>
        where
            T: Send,
            S: BorrowMut<[T]>,
        {
            self.values
                .borrow_mut()
                .par_chunks_exact_mut(self.width * chunk_rows)
                .map(|slice| RowMajorMatrixViewMut::new(slice, self.width))
        }
    *)
    Definition par_row_chunks_exact_mut
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; chunk_rows ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let chunk_rows := M.alloc (| chunk_rows |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::iter::adapters::map::Map")
              []
              [
                Ty.apply (Ty.path "core::slice::iter::ChunksExactMut") [] [ T ];
                Ty.function
                  [
                    Ty.tuple
                      [ Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ]
                  ]
                  (Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [ T; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ])
              ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply (Ty.path "core::slice::iter::ChunksExactMut") [] [ T ],
              [],
              [],
              "map",
              [],
              [
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ T; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ];
                Ty.function
                  [
                    Ty.tuple
                      [ Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ]
                  ]
                  (Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [ T; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ])
              ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::slice::iter::ChunksExactMut") [] [ T ],
                M.get_trait_method (|
                  "p3_maybe_rayon::serial::ParallelSliceMut",
                  Ty.apply (Ty.path "slice") [] [ T ],
                  [],
                  [ T ],
                  "par_chunks_exact_mut",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                        M.get_trait_method (|
                          "core::borrow::BorrowMut",
                          S,
                          [],
                          [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          "borrow_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_matrix::dense::DenseMatrix",
                              "values"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_matrix::dense::DenseMatrix",
                          "width"
                        |)
                      |);
                      M.read (| chunk_rows |)
                    ]
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    T;
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                  ])
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let slice := M.copy (| γ |) in
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      T;
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        T;
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                      ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| slice |) |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::dense::DenseMatrix",
                                        "width"
                                      |)
                                    |)
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_par_row_chunks_exact_mut :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "par_row_chunks_exact_mut" (par_row_chunks_exact_mut T S).
    Admitted.
    Global Typeclasses Opaque par_row_chunks_exact_mut.
    
    (*
        pub fn row_pair_mut(&mut self, row_1: usize, row_2: usize) -> (&mut [T], &mut [T])
        where
            S: BorrowMut<[T]>,
        {
            debug_assert_ne!(row_1, row_2);
            let start_1 = row_1 * self.width;
            let start_2 = row_2 * self.width;
            let (lo, hi) = self.values.borrow_mut().split_at_mut(start_2);
            (&mut lo[start_1..][..self.width], &mut hi[..self.width])
        }
    *)
    Definition row_pair_mut
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; row_1; row_2 ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let row_1 := M.alloc (| row_1 |) in
          let row_2 := M.alloc (| row_2 |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (|
                            Value.Tuple
                              [
                                M.borrow (| Pointer.Kind.Ref, row_1 |);
                                M.borrow (| Pointer.Kind.Ref, row_2 |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val := M.copy (| γ0_0 |) in
                                let right_val := M.copy (| γ0_1 |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.eq,
                                                [
                                                  M.read (| M.deref (| M.read (| left_val |) |) |);
                                                  M.read (| M.deref (| M.read (| right_val |) |) |)
                                                ]
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let~ kind :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [ Ty.path "core::panicking::AssertKind" ] :=
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Ne"
                                                    []
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [],
                                                    [ Ty.path "usize"; Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| left_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ start_1 : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.mul,
                  [
                    M.read (| row_1 |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_matrix::dense::DenseMatrix",
                        "width"
                      |)
                    |)
                  ]
                |)
              |) in
            let~ start_2 : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.mul,
                  [
                    M.read (| row_2 |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_matrix::dense::DenseMatrix",
                        "width"
                      |)
                    |)
                  ]
                |)
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                    ]
                ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                    ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ T ],
                    "split_at_mut",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          M.get_trait_method (|
                            "core::borrow::BorrowMut",
                            S,
                            [],
                            [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            "borrow_mut",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "p3_matrix::dense::DenseMatrix",
                                "values"
                              |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.read (| start_2 |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let lo := M.copy (| γ0_0 |) in
                    let hi := M.copy (| γ0_1 |) in
                    M.alloc (|
                      Value.Tuple
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                    M.get_trait_method (|
                                      "core::ops::index::IndexMut",
                                      Ty.apply (Ty.path "slice") [] [ T ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::RangeTo")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                      "index_mut",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                            M.get_trait_method (|
                                              "core::ops::index::IndexMut",
                                              Ty.apply (Ty.path "slice") [] [ T ],
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::RangeFrom")
                                                  []
                                                  [ Ty.path "usize" ]
                                              ],
                                              "index_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| lo |) |)
                                              |);
                                              Value.StructRecord
                                                "core::ops::range::RangeFrom"
                                                [ ("start", M.read (| start_1 |)) ]
                                            ]
                                          |)
                                        |)
                                      |);
                                      Value.StructRecord
                                        "core::ops::range::RangeTo"
                                        [
                                          ("end_",
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "p3_matrix::dense::DenseMatrix",
                                                "width"
                                              |)
                                            |))
                                        ]
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                    M.get_trait_method (|
                                      "core::ops::index::IndexMut",
                                      Ty.apply (Ty.path "slice") [] [ T ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::RangeTo")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                      "index_mut",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| hi |) |)
                                      |);
                                      Value.StructRecord
                                        "core::ops::range::RangeTo"
                                        [
                                          ("end_",
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "p3_matrix::dense::DenseMatrix",
                                                "width"
                                              |)
                                            |))
                                        ]
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_row_pair_mut :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "row_pair_mut" (row_pair_mut T S).
    Admitted.
    Global Typeclasses Opaque row_pair_mut.
    
    (*
        pub fn packed_row_pair_mut<P>(
            &mut self,
            row_1: usize,
            row_2: usize,
        ) -> ((&mut [P], &mut [T]), (&mut [P], &mut [T]))
        where
            S: BorrowMut<[T]>,
            P: PackedValue<Value = T>,
        {
            let (slice_1, slice_2) = self.row_pair_mut(row_1, row_2);
            (
                P::pack_slice_with_suffix_mut(slice_1),
                P::pack_slice_with_suffix_mut(slice_2),
            )
        }
    *)
    Definition packed_row_pair_mut
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [ P ], [ self; row_1; row_2 ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let row_1 := M.alloc (| row_1 |) in
          let row_2 := M.alloc (| row_2 |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.tuple
                    [
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ P ] ];
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ];
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ P ] ];
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ]
                    ]
                ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                    ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ],
                    "row_pair_mut",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.read (| row_1 |);
                    M.read (| row_2 |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let slice_1 := M.copy (| γ0_0 |) in
                    let slice_2 := M.copy (| γ0_1 |) in
                    M.alloc (|
                      Value.Tuple
                        [
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ P ] ];
                                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                              ],
                            M.get_trait_method (|
                              "p3_field::packed::PackedValue",
                              P,
                              [],
                              [],
                              "pack_slice_with_suffix_mut",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| slice_1 |) |) |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ P ] ];
                                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                              ],
                            M.get_trait_method (|
                              "p3_field::packed::PackedValue",
                              P,
                              [],
                              [],
                              "pack_slice_with_suffix_mut",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| slice_2 |) |) |)
                            ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_packed_row_pair_mut :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "packed_row_pair_mut" (packed_row_pair_mut T S).
    Admitted.
    Global Typeclasses Opaque packed_row_pair_mut.
    
    (*     #[instrument(level = "debug", skip_all)] *)
    Definition bit_reversed_zero_pad
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; added_bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let added_bits := M.alloc (| added_bits |) in
          M.catch_return
            (Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (| Value.Tuple [] |) in
                let __tracing_attr_span := M.copy (| Value.DeclaredButUndefined |) in
                let __tracing_attr_guard := M.copy (| Value.DeclaredButUndefined |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.or (|
                                  LogicalOp.and (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "DEBUG",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_constant (|
                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                            Ty.path "tracing_core::metadata::LevelFilter"
                                          |)
                                        |)
                                      ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialOrd",
                                          Ty.path "tracing_core::metadata::Level",
                                          [],
                                          [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                          "le",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            get_associated_constant (|
                                              Ty.path "tracing_core::metadata::Level",
                                              "DEBUG",
                                              Ty.path "tracing_core::metadata::Level"
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::metadata::LevelFilter",
                                                  "current",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                  |),
                                  ltac:(M.monadic (Value.Bool false))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                __tracing_attr_span,
                                M.read (|
                                  let~ interest :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [ Ty.path "tracing_core::subscriber::Interest" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        M.get_associated_function (|
                                          Ty.path "tracing_core::subscriber::Interest",
                                          "never",
                                          [],
                                          []
                                        |),
                                        []
                                      |)
                                    |) in
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.path "tracing::span::Span" ],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                LogicalOp.and (|
                                                  LogicalOp.and (|
                                                    LogicalOp.and (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "tracing_core::metadata::Level",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          ],
                                                          "le",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_associated_constant (|
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              "DEBUG",
                                                              Ty.path
                                                                "tracing_core::metadata::Level"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_constant (|
                                                              "tracing::level_filters::STATIC_MAX_LEVEL",
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            |)
                                                          |)
                                                        ]
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "tracing_core::metadata::Level",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            ],
                                                            "le",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_associated_constant (|
                                                                Ty.path
                                                                  "tracing_core::metadata::Level",
                                                                "DEBUG",
                                                                Ty.path
                                                                  "tracing_core::metadata::Level"
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter",
                                                                    "current",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)))
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.read (|
                                                        let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.alloc (|
                                                            M.write (|
                                                              interest,
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  "interest",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "p3_matrix::dense::bit_reversed_zero_pad::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |) in
                                                        M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                "is_never",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  interest
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)))
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_function (|
                                                        "tracing::__macro_support::__is_enabled",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "p3_matrix::dense::bit_reversed_zero_pad::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.read (| interest |)
                                                      ]
                                                    |)))
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          let~ meta :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "tracing_core::metadata::Metadata" ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ],
                                                M.get_trait_method (|
                                                  "tracing_core::callsite::Callsite",
                                                  Ty.path "tracing_core::callsite::DefaultCallsite",
                                                  [],
                                                  [],
                                                  "metadata",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_matrix::dense::bit_reversed_zero_pad::__CALLSITE",
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite"
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing::span::Span",
                                              M.get_associated_function (|
                                                Ty.path "tracing::span::Span",
                                                "new",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| meta |) |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "tracing_core::field::ValueSet",
                                                          M.get_associated_function (|
                                                            Ty.path "tracing_core::field::FieldSet",
                                                            "value_set",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 0
                                                                ]
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::Field"
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("tracing_core::field::Value::Trait",
                                                                                    [])
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::field::FieldSet"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata",
                                                                    "fields",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| meta |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (| Value.Array [] |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let~ span :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.path "tracing::span::Span" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "tracing::span::Span",
                                                M.get_function (|
                                                  "tracing::__macro_support::__disabled_span",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::Metadata"
                                                          ],
                                                        M.get_trait_method (|
                                                          "tracing_core::callsite::Callsite",
                                                          Ty.path
                                                            "tracing_core::callsite::DefaultCallsite",
                                                          [],
                                                          [],
                                                          "metadata",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_matrix::dense::bit_reversed_zero_pad::__CALLSITE",
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::callsite::DefaultCallsite"
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                            M.alloc (| Value.Tuple [] |) in
                                          span))
                                    ]
                                  |)
                                |)
                              |)
                            |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                __tracing_attr_guard,
                                M.call_closure (|
                                  Ty.path "tracing::span::Entered",
                                  M.get_associated_function (|
                                    Ty.path "tracing::span::Span",
                                    "enter",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Value.Bool false |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ __tracing_attr_fake_return :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            T;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ T; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ] :=
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.loop (|
                                          Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                          ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        |)
                                      |)
                                    |)
                                  |) in
                                M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [ M.read (| added_bits |); Value.Integer IntegerKind.Usize 0 ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        T;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ T; Ty.path "alloc::alloc::Global" ]
                                      ],
                                    M.get_trait_method (|
                                      "p3_matrix::Matrix",
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [ T; S ],
                                      [],
                                      [ T ],
                                      "to_row_major_matrix",
                                      [],
                                      []
                                    |),
                                    [ M.read (| self |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ w : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                  M.copy (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "p3_matrix::dense::DenseMatrix",
                      "width"
                    |)
                  |) in
                let~ padded :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            T;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ]
                          ]
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          T;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            T;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ]
                          ],
                        "new",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          M.get_trait_method (|
                            "p3_field::field::PrimeCharacteristicRing",
                            T,
                            [],
                            [],
                            "zero_vec",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.shl,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ T ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                          M.get_trait_method (|
                                            "core::borrow::Borrow",
                                            S,
                                            [],
                                            [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                            "borrow",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                self,
                                                "p3_matrix::dense::DenseMatrix",
                                                "values"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (| added_bits |)
                              ]
                            |)
                          ]
                        |);
                        M.read (| w |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [ Ty.associated_unknown; Ty.associated_unknown ],
                        [],
                        [],
                        "for_each",
                        [],
                        [
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          T;
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                        ];
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                    ]
                                ]
                            ]
                            (Ty.tuple [])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [ Ty.associated_unknown; Ty.associated_unknown ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.associated_unknown,
                            [],
                            [],
                            "zip",
                            [],
                            [ Ty.associated_unknown ]
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_unknown,
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    T;
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ T; Ty.path "alloc::alloc::Global" ]
                                  ],
                                "par_row_chunks_exact_mut",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, padded |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.shl,
                                  [ Value.Integer IntegerKind.Usize 1; M.read (| added_bits |) ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.associated_unknown,
                              M.get_associated_function (|
                                Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ],
                                "par_row_slices",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, self |) ]
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        T;
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.tuple [])
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let ch := M.copy (| γ0_0 |) in
                                          let r := M.copy (| γ0_1 |) in
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [] [ T ],
                                              "copy_from_slice",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                                        []
                                                        [
                                                          T;
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                                        ],
                                                      "row_mut",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (| Pointer.Kind.MutRef, ch |);
                                                      Value.Integer IntegerKind.Usize 0
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| r |) |)
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  |) in
                padded
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_bit_reversed_zero_pad :
      forall (T S : Ty.t),
      M.IsAssociatedFunction.C (Self T S) "bit_reversed_zero_pad" (bit_reversed_zero_pad T S).
    Admitted.
    Global Typeclasses Opaque bit_reversed_zero_pad.
  End Impl_p3_matrix_dense_DenseMatrix_T_S.
  
  Module Impl_p3_matrix_Matrix_where_core_clone_Clone_T_where_core_marker_Send_T_where_core_marker_Sync_T_where_p3_matrix_dense_DenseStorage_S_T_T_for_p3_matrix_dense_DenseMatrix_T_S.
    Definition Self (T S : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ T; S ].
    
    (*
        fn width(&self) -> usize {
            self.width
        }
    *)
    Definition width (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| self |) |),
              "p3_matrix::dense::DenseMatrix",
              "width"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn height(&self) -> usize {
            if self.width == 0 {
                0
            } else {
                self.values.borrow().len() / self.width
            }
        }
    *)
    Definition height (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "p3_matrix::dense::DenseMatrix",
                                  "width"
                                |)
                              |);
                              Value.Integer IntegerKind.Usize 0
                            ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (| Value.Integer IntegerKind.Usize 0 |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.div,
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ T ],
                              "len",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                    M.get_trait_method (|
                                      "core::borrow::Borrow",
                                      S,
                                      [],
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                      "borrow",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "p3_matrix::dense::DenseMatrix",
                                          "values"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_matrix::dense::DenseMatrix",
                              "width"
                            |)
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn get(&self, r: usize, c: usize) -> T {
            self.values.borrow()[r * self.width + c].clone()
        }
    *)
    Definition get (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; r; c ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          let c := M.alloc (| c |) in
          M.call_closure (|
            T,
            M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_array_field (|
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        S,
                        [],
                        [ Ty.apply (Ty.path "slice") [] [ T ] ],
                        "borrow",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::dense::DenseMatrix",
                            "values"
                          |)
                        |)
                      ]
                    |)
                  |),
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.add,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.mul,
                        [
                          M.read (| r |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_matrix::dense::DenseMatrix",
                              "width"
                            |)
                          |)
                        ]
                      |);
                      M.read (| c |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        type Row<'a>
            = iter::Cloned<slice::Iter<'a, T>>
        where
            Self: 'a;
    *)
    Definition _Row (T S : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "core::iter::adapters::cloned::Cloned")
        []
        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ] ].
    
    (*
        fn row(&self, r: usize) -> Self::Row<'_> {
            self.values.borrow()[r * self.width..(r + 1) * self.width]
                .iter()
                .cloned()
        }
    *)
    Definition row (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::iter::adapters::cloned::Cloned")
              []
              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ] ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ],
              [],
              [],
              "cloned",
              [],
              [ T ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ],
                M.get_associated_function (| Ty.apply (Ty.path "slice") [] [ T ], "iter", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                        M.get_trait_method (|
                          "core::ops::index::Index",
                          Ty.apply (Ty.path "slice") [] [ T ],
                          [],
                          [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ],
                          "index",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                M.get_trait_method (|
                                  "core::borrow::Borrow",
                                  S,
                                  [],
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                  "borrow",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "p3_matrix::dense::DenseMatrix",
                                      "values"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |);
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start",
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.mul,
                                  [
                                    M.read (| r |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::dense::DenseMatrix",
                                        "width"
                                      |)
                                    |)
                                  ]
                                |));
                              ("end_",
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.mul,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [ M.read (| r |); Value.Integer IntegerKind.Usize 1 ]
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::dense::DenseMatrix",
                                        "width"
                                      |)
                                    |)
                                  ]
                                |))
                            ]
                        ]
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn row_slice(&self, r: usize) -> impl Deref<Target = [T]> {
            &self.values.borrow()[r * self.width..(r + 1) * self.width]
        }
    *)
    Definition row_slice (T S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                M.get_trait_method (|
                  "core::ops::index::Index",
                  Ty.apply (Ty.path "slice") [] [ T ],
                  [],
                  [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ],
                  "index",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                        M.get_trait_method (|
                          "core::borrow::Borrow",
                          S,
                          [],
                          [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          "borrow",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_matrix::dense::DenseMatrix",
                              "values"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  Value.StructRecord
                    "core::ops::range::Range"
                    [
                      ("start",
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.mul,
                          [
                            M.read (| r |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "p3_matrix::dense::DenseMatrix",
                                "width"
                              |)
                            |)
                          ]
                        |));
                      ("end_",
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.mul,
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.add,
                              [ M.read (| r |); Value.Integer IntegerKind.Usize 1 ]
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "p3_matrix::dense::DenseMatrix",
                                "width"
                              |)
                            |)
                          ]
                        |))
                    ]
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn to_row_major_matrix(self) -> RowMajorMatrix<T>
        where
            Self: Sized,
            T: Clone,
        {
            RowMajorMatrix::new(self.values.to_vec(), self.width)
        }
    *)
    Definition to_row_major_matrix
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                ],
              "new",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "p3_matrix::dense::DenseStorage",
                  S,
                  [],
                  [ T ],
                  "to_vec",
                  [],
                  []
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "p3_matrix::dense::DenseMatrix",
                      "values"
                    |)
                  |)
                ]
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  self,
                  "p3_matrix::dense::DenseMatrix",
                  "width"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn horizontally_packed_row<'a, P>(
            &'a self,
            r: usize,
        ) -> (
            impl Iterator<Item = P> + Send + Sync,
            impl Iterator<Item = T> + Send + Sync,
        )
        where
            P: PackedValue<Value = T>,
            T: Clone + 'a,
        {
            let buf = &self.values.borrow()[r * self.width..(r + 1) * self.width];
            let (packed, sfx) = P::pack_slice_with_suffix(buf);
            (packed.iter().copied(), sfx.iter().cloned())
        }
    *)
    Definition horizontally_packed_row
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [ P ], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.read (|
            let~ buf :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ] :=
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                      M.get_trait_method (|
                        "core::ops::index::Index",
                        Ty.apply (Ty.path "slice") [] [ T ],
                        [],
                        [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ],
                        "index",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                              M.get_trait_method (|
                                "core::borrow::Borrow",
                                S,
                                [],
                                [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                "borrow",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "p3_matrix::dense::DenseMatrix",
                                    "values"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start",
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.mul,
                                [
                                  M.read (| r |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "p3_matrix::dense::DenseMatrix",
                                      "width"
                                    |)
                                  |)
                                ]
                              |));
                            ("end_",
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.mul,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [ M.read (| r |); Value.Integer IntegerKind.Usize 1 ]
                                  |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "p3_matrix::dense::DenseMatrix",
                                      "width"
                                    |)
                                  |)
                                ]
                              |))
                          ]
                      ]
                    |)
                  |)
                |)
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::copied::Copied")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ];
                      Ty.apply
                        (Ty.path "core::iter::adapters::cloned::Cloned")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ] ]
                    ]
                ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ P ] ];
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                    ],
                  M.get_trait_method (|
                    "p3_field::packed::PackedValue",
                    P,
                    [],
                    [],
                    "pack_slice_with_suffix",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| buf |) |) |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let packed := M.copy (| γ0_0 |) in
                    let sfx := M.copy (| γ0_1 |) in
                    M.alloc (|
                      Value.Tuple
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::copied::Copied")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ],
                              [],
                              [],
                              "copied",
                              [],
                              [ P ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ P ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| packed |) |) |)
                                ]
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::cloned::Cloned")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ] ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ],
                              [],
                              [],
                              "cloned",
                              [],
                              [ T ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ T ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| sfx |) |) |) ]
                              |)
                            ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn padded_horizontally_packed_row<'a, P>(
            &'a self,
            r: usize,
        ) -> impl Iterator<Item = P> + Send + Sync
        where
            P: PackedValue<Value = T>,
            T: Clone + Default + 'a,
        {
            let buf = &self.values.borrow()[r * self.width..(r + 1) * self.width];
            let (packed, sfx) = P::pack_slice_with_suffix(buf);
            packed.iter().copied().chain(iter::once(P::from_fn(|i| {
                sfx.get(i).cloned().unwrap_or_default()
            })))
        }
    *)
    Definition padded_horizontally_packed_row
        (T S : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T S in
      match ε, τ, α with
      | [], [ P ], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.read (|
            let~ buf :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ] :=
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                      M.get_trait_method (|
                        "core::ops::index::Index",
                        Ty.apply (Ty.path "slice") [] [ T ],
                        [],
                        [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ],
                        "index",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                              M.get_trait_method (|
                                "core::borrow::Borrow",
                                S,
                                [],
                                [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                "borrow",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "p3_matrix::dense::DenseMatrix",
                                    "values"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start",
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.mul,
                                [
                                  M.read (| r |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "p3_matrix::dense::DenseMatrix",
                                      "width"
                                    |)
                                  |)
                                ]
                              |));
                            ("end_",
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.mul,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [ M.read (| r |); Value.Integer IntegerKind.Usize 1 ]
                                  |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "p3_matrix::dense::DenseMatrix",
                                      "width"
                                    |)
                                  |)
                                ]
                              |))
                          ]
                      ]
                    |)
                  |)
                |)
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::iter::adapters::chain::Chain")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::copied::Copied")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ];
                      Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ P ]
                    ]
                ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ P ] ];
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                    ],
                  M.get_trait_method (|
                    "p3_field::packed::PackedValue",
                    P,
                    [],
                    [],
                    "pack_slice_with_suffix",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| buf |) |) |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let packed := M.copy (| γ0_0 |) in
                    let sfx := M.copy (| γ0_1 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::copied::Copied")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ];
                            Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ P ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::copied::Copied")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ],
                          [],
                          [],
                          "chain",
                          [],
                          [ Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ P ] ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::copied::Copied")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ],
                              [],
                              [],
                              "copied",
                              [],
                              [ P ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ P ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| packed |) |) |)
                                ]
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ P ],
                            M.get_function (| "core::iter::sources::once::once", [], [ P ] |),
                            [
                              M.call_closure (|
                                P,
                                M.get_trait_method (|
                                  "p3_field::packed::PackedValue",
                                  P,
                                  [],
                                  [],
                                  "from_fn",
                                  [],
                                  [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ]
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ],
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let i := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      T,
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ T ],
                                                        "unwrap_or_default",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ T ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [ Ty.apply (Ty.path "&") [] [ T ] ],
                                                            "cloned",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ Ty.apply (Ty.path "&") [] [ T ] ],
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "get",
                                                                [],
                                                                [ Ty.path "usize" ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| sfx |) |)
                                                                |);
                                                                M.read (| i |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end))
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T S : Ty.t),
      M.IsTraitInstance
        "p3_matrix::Matrix"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T S)
        (* Instance *)
        [
          ("width", InstanceField.Method (width T S));
          ("height", InstanceField.Method (height T S));
          ("get", InstanceField.Method (get T S));
          ("Row", InstanceField.Ty (_Row T S));
          ("row", InstanceField.Method (row T S));
          ("row_slice", InstanceField.Method (row_slice T S));
          ("to_row_major_matrix", InstanceField.Method (to_row_major_matrix T S));
          ("horizontally_packed_row", InstanceField.Method (horizontally_packed_row T S));
          ("padded_horizontally_packed_row",
            InstanceField.Method (padded_horizontally_packed_row T S))
        ].
  End Impl_p3_matrix_Matrix_where_core_clone_Clone_T_where_core_marker_Send_T_where_core_marker_Sync_T_where_p3_matrix_dense_DenseStorage_S_T_T_for_p3_matrix_dense_DenseMatrix_T_S.
  
  
  
  Module Impl_p3_matrix_dense_DenseMatrix_T_ref__slice_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_matrix::dense::DenseMatrix")
        []
        [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ].
    
    (*
        pub fn as_cow(self) -> RowMajorMatrixCow<'a, T> {
            RowMajorMatrixCow::new(Cow::Borrowed(self.values), self.width)
        }
    *)
    Definition as_cow (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [
                T;
                Ty.apply (Ty.path "alloc::borrow::Cow") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
              ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [
                  T;
                  Ty.apply (Ty.path "alloc::borrow::Cow") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                ],
              "new",
              [],
              []
            |),
            [
              Value.StructTuple
                "alloc::borrow::Cow::Borrowed"
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "p3_matrix::dense::DenseMatrix",
                          "values"
                        |)
                      |)
                    |)
                  |)
                ];
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  self,
                  "p3_matrix::dense::DenseMatrix",
                  "width"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_cow :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "as_cow" (as_cow T).
    Admitted.
    Global Typeclasses Opaque as_cow.
  End Impl_p3_matrix_dense_DenseMatrix_T_ref__slice_T.
End dense.
