(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module extension.
  (* StructTuple
    {
      name := "FlatMatrixView";
      const_params := [];
      ty_params := [ "F"; "EF"; "Inner" ];
      fields := [ Inner; Ty.apply (Ty.path "core::marker::PhantomData") [] [ Ty.tuple [ F; EF ] ] ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_EF_where_core_fmt_Debug_Inner_for_p3_matrix_extension_FlatMatrixView_F_EF_Inner.
    Definition Self (F EF Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::extension::FlatMatrixView") [] [ F; EF; Inner ].
    
    (* Debug *)
    Definition fmt (F EF Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F EF Inner in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_tuple_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "FlatMatrixView" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_tuple_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_matrix::extension::FlatMatrixView",
                        0
                      |)
                    |)
                  |)
                |));
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_tuple_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::extension::FlatMatrixView",
                            1
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F EF Inner : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F EF Inner)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt F EF Inner)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_EF_where_core_fmt_Debug_Inner_for_p3_matrix_extension_FlatMatrixView_F_EF_Inner.
  
  Module Impl_p3_matrix_extension_FlatMatrixView_F_EF_Inner.
    Definition Self (F EF Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::extension::FlatMatrixView") [] [ F; EF; Inner ].
    
    (*
        pub const fn new(inner: Inner) -> Self {
            Self(inner, PhantomData)
        }
    *)
    Definition new (F EF Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F EF Inner in
      match ε, τ, α with
      | [], [], [ inner ] =>
        ltac:(M.monadic
          (let inner := M.alloc (| inner |) in
          Value.StructTuple
            "p3_matrix::extension::FlatMatrixView"
            []
            [ F; EF; Inner ]
            [
              M.read (| inner |);
              Value.StructTuple "core::marker::PhantomData" [] [ Ty.tuple [ F; EF ] ] []
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (F EF Inner : Ty.t),
      M.IsAssociatedFunction.C (Self F EF Inner) "new" (new F EF Inner).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_p3_matrix_extension_FlatMatrixView_F_EF_Inner.
  
  Module Impl_core_ops_deref_Deref_for_p3_matrix_extension_FlatMatrixView_F_EF_Inner.
    Definition Self (F EF Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::extension::FlatMatrixView") [] [ F; EF; Inner ].
    
    (*     type Target = Inner; *)
    Definition _Target (F EF Inner : Ty.t) : Ty.t := Inner.
    
    (*
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    *)
    Definition deref
        (F EF Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F EF Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_tuple_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::extension::FlatMatrixView",
                  0
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F EF Inner : Ty.t),
      M.IsTraitInstance
        "core::ops::deref::Deref"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F EF Inner)
        (* Instance *)
        [
          ("Target", InstanceField.Ty (_Target F EF Inner));
          ("deref", InstanceField.Method (deref F EF Inner))
        ].
  End Impl_core_ops_deref_Deref_for_p3_matrix_extension_FlatMatrixView_F_EF_Inner.
  
  Module Impl_p3_matrix_Matrix_where_p3_field_field_Field_F_where_p3_field_field_ExtensionField_EF_F_where_p3_matrix_Matrix_Inner_EF_F_for_p3_matrix_extension_FlatMatrixView_F_EF_Inner.
    Definition Self (F EF Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::extension::FlatMatrixView") [] [ F; EF; Inner ].
    
    (*
        fn width(&self) -> usize {
            self.0.width() * EF::DIMENSION
        }
    *)
    Definition width
        (F EF Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F EF Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            BinOp.Wrap.mul,
            [
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (| "p3_matrix::Matrix", Inner, [], [ EF ], "width", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_matrix::extension::FlatMatrixView",
                      0
                    |)
                  |)
                ]
              |);
              M.read (|
                get_constant (| "p3_field::field::BasedVectorSpace::DIMENSION", Ty.path "usize" |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn height(&self) -> usize {
            self.0.height()
        }
    *)
    Definition height
        (F EF Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F EF Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_trait_method (| "p3_matrix::Matrix", Inner, [], [ EF ], "height", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_tuple_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::extension::FlatMatrixView",
                  0
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        type Row<'a>
            = FlatIter<F, Inner::Row<'a>>
        where
            Self: 'a;
    *)
    Definition _Row (F EF Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_matrix::extension::FlatIter")
        []
        [ F; Ty.associated_in_trait "p3_matrix::Matrix" [] [ EF ] Inner "Row" ].
    
    (*
        fn row(&self, r: usize) -> Self::Row<'_> {
            FlatIter {
                inner: self.0.row(r).peekable(),
                idx: 0,
                _phantom: PhantomData,
            }
        }
    *)
    Definition row (F EF Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F EF Inner in
      match ε, τ, α with
      | [], [], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          Value.StructRecord
            "p3_matrix::extension::FlatIter"
            []
            [ F; Ty.associated_in_trait "p3_matrix::Matrix" [] [ EF ] Inner "Row" ]
            [
              ("inner",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::peekable::Peekable")
                    []
                    [ Ty.associated_in_trait "p3_matrix::Matrix" [] [ EF ] Inner "Row" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.associated_in_trait "p3_matrix::Matrix" [] [ EF ] Inner "Row",
                    [],
                    [],
                    "peekable",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_matrix::Matrix" [] [ EF ] Inner "Row",
                      M.get_trait_method (|
                        "p3_matrix::Matrix",
                        Inner,
                        [],
                        [ EF ],
                        "row",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_tuple_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::extension::FlatMatrixView",
                            0
                          |)
                        |);
                        M.read (| r |)
                      ]
                    |)
                  ]
                |));
              ("idx", Value.Integer IntegerKind.Usize 0);
              ("_phantom", Value.StructTuple "core::marker::PhantomData" [] [ F ] [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn row_slice(&self, r: usize) -> impl Deref<Target = [F]> {
            self.0
                .row_slice(r)
                .iter()
                .flat_map(|val| val.as_basis_coefficients_slice())
                .copied()
                .collect::<Vec<_>>()
        }
    *)
    Definition row_slice
        (F EF Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F EF Inner in
      match ε, τ, α with
      | [], [], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.call_closure (|
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::iter::adapters::copied::Copied")
                []
                [
                  Ty.apply
                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                    []
                    [
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ];
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ];
                      Ty.function
                        [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ EF ] ] ]
                        (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ])
                    ]
                ],
              [],
              [],
              "collect",
              [],
              [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::copied::Copied")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                      []
                      [
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ];
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ];
                        Ty.function
                          [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ EF ] ] ]
                          (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ])
                      ]
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                    []
                    [
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ];
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ];
                      Ty.function
                        [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ EF ] ] ]
                        (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ])
                    ],
                  [],
                  [],
                  "copied",
                  [],
                  [ F ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                      []
                      [
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ];
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ];
                        Ty.function
                          [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ EF ] ] ]
                          (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ],
                      [],
                      [],
                      "flat_map",
                      [],
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ];
                        Ty.function
                          [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ EF ] ] ]
                          (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ EF ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ EF ] ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.associated_in_trait
                                    "p3_matrix::Matrix"
                                    []
                                    [ EF ]
                                    Inner
                                    "{{synthetic}}'2",
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_matrix::Matrix"
                                          []
                                          [ EF ]
                                          Inner
                                          "{{synthetic}}'2",
                                        M.get_trait_method (|
                                          "p3_matrix::Matrix",
                                          Inner,
                                          [],
                                          [ EF ],
                                          "row_slice",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_tuple_field (|
                                              M.deref (| M.read (| self |) |),
                                              "p3_matrix::extension::FlatMatrixView",
                                              0
                                            |)
                                          |);
                                          M.read (| r |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ EF ] ] ]
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ F ] ])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let val := M.copy (| γ |) in
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                          M.get_trait_method (|
                                            "p3_field::field::BasedVectorSpace",
                                            EF,
                                            [],
                                            [ F ],
                                            "as_basis_coefficients_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| val |) |)
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F EF Inner : Ty.t),
      M.IsTraitInstance
        "p3_matrix::Matrix"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F EF Inner)
        (* Instance *)
        [
          ("width", InstanceField.Method (width F EF Inner));
          ("height", InstanceField.Method (height F EF Inner));
          ("Row", InstanceField.Ty (_Row F EF Inner));
          ("row", InstanceField.Method (row F EF Inner));
          ("row_slice", InstanceField.Method (row_slice F EF Inner))
        ].
  End Impl_p3_matrix_Matrix_where_p3_field_field_Field_F_where_p3_field_field_ExtensionField_EF_F_where_p3_matrix_Matrix_Inner_EF_F_for_p3_matrix_extension_FlatMatrixView_F_EF_Inner.
  
  (* StructRecord
    {
      name := "FlatIter";
      const_params := [];
      ty_params := [ "F"; "I" ];
      fields :=
        [
          ("inner", Ty.apply (Ty.path "core::iter::adapters::peekable::Peekable") [] [ I ]);
          ("idx", Ty.path "usize");
          ("_phantom", Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ])
        ];
    } *)
  
  Module Impl_core_iter_traits_iterator_Iterator_where_p3_field_field_Field_F_where_p3_field_field_ExtensionField_EF_F_where_core_iter_traits_iterator_Iterator_I_for_p3_matrix_extension_FlatIter_F_I.
    Definition Self (F EF I : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::extension::FlatIter") [] [ F; I ].
    
    (*     type Item = F; *)
    Definition _Item (F EF I : Ty.t) : Ty.t := F.
    
    (*
        fn next(&mut self) -> Option<Self::Item> {
            if self.idx == EF::DIMENSION {
                self.idx = 0;
                self.inner.next();
            }
            let value = self.inner.peek()?.as_basis_coefficients_slice()[self.idx];
            self.idx += 1;
            Some(value)
        }
    *)
    Definition next (F EF I : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F EF I in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::option::Option")
              []
              [
                Ty.associated_in_trait
                  "core::iter::traits::iterator::Iterator"
                  []
                  []
                  (Ty.apply (Ty.path "p3_matrix::extension::FlatIter") [] [ F; I ])
                  "Item"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::extension::FlatIter",
                                        "idx"
                                      |)
                                    |);
                                    M.read (|
                                      get_constant (|
                                        "p3_field::field::BasedVectorSpace::DIMENSION",
                                        Ty.path "usize"
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "p3_matrix::extension::FlatIter",
                                  "idx"
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |) in
                          let~ _ :
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.apply (Ty.path "core::option::Option") [] [ EF ] ] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ EF ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::peekable::Peekable")
                                    []
                                    [ I ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "p3_matrix::extension::FlatIter",
                                      "inner"
                                    |)
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ value : Ty.apply (Ty.path "*") [] [ F ] :=
                  M.copy (|
                    M.SubPointer.get_array_field (|
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                          M.get_trait_method (|
                            "p3_field::field::BasedVectorSpace",
                            EF,
                            [],
                            [ F ],
                            "as_basis_coefficients_slice",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (|
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "&") [] [ EF ] ],
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::ops::control_flow::ControlFlow")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "core::convert::Infallible" ];
                                            Ty.apply (Ty.path "&") [] [ EF ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.apply (Ty.path "&") [] [ EF ] ],
                                          [],
                                          [],
                                          "branch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.apply (Ty.path "&") [] [ EF ] ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::peekable::Peekable")
                                                []
                                                [ I ],
                                              "peek",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "p3_matrix::extension::FlatIter",
                                                  "inner"
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ F ],
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ F ],
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.path "core::convert::Infallible" ]
                                                      ],
                                                      "from_residual",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      |),
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_matrix::extension::FlatIter",
                          "idx"
                        |)
                      |)
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (|
                    let β :=
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_matrix::extension::FlatIter",
                        "idx"
                      |) in
                    M.write (|
                      β,
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.add,
                        [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                      |)
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple "core::option::Option::Some" [] [ F ] [ M.read (| value |) ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F EF I : Ty.t),
      M.IsTraitInstance
        "core::iter::traits::iterator::Iterator"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F EF I)
        (* Instance *)
        [ ("Item", InstanceField.Ty (_Item F EF I)); ("next", InstanceField.Method (next F EF I)) ].
  End Impl_core_iter_traits_iterator_Iterator_where_p3_field_field_Field_F_where_p3_field_field_ExtensionField_EF_F_where_core_iter_traits_iterator_Iterator_I_for_p3_matrix_extension_FlatIter_F_I.
End extension.
