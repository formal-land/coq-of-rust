(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module horizontally_truncated.
  (* StructRecord
    {
      name := "HorizontallyTruncated";
      const_params := [];
      ty_params := [ "T"; "Inner" ];
      fields :=
        [
          ("inner", Inner);
          ("truncated_width", Ty.path "usize");
          ("_phantom", Ty.apply (Ty.path "core::marker::PhantomData") [] [ T ])
        ];
    } *)
  
  Module Impl_p3_matrix_horizontally_truncated_HorizontallyTruncated_T_Inner.
    Definition Self (T Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::horizontally_truncated::HorizontallyTruncated") [] [ T; Inner ].
    
    (*
        pub fn new(inner: Inner, truncated_width: usize) -> Self {
            assert!(truncated_width <= inner.width());
            Self {
                inner,
                truncated_width,
                _phantom: PhantomData,
            }
        }
    *)
    Definition new (T Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T Inner in
      match ε, τ, α with
      | [], [], [ inner; truncated_width ] =>
        ltac:(M.monadic
          (let inner := M.alloc (| inner |) in
          let truncated_width := M.alloc (| truncated_width |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.le,
                                [
                                  M.read (| truncated_width |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_trait_method (|
                                      "p3_matrix::Matrix",
                                      Inner,
                                      [],
                                      [ T ],
                                      "width",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, inner |) ]
                                  |)
                                ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: truncated_width <= inner.width()" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              Value.StructRecord
                "p3_matrix::horizontally_truncated::HorizontallyTruncated"
                []
                [ T; Inner ]
                [
                  ("inner", M.read (| inner |));
                  ("truncated_width", M.read (| truncated_width |));
                  ("_phantom", Value.StructTuple "core::marker::PhantomData" [] [ T ] [])
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (T Inner : Ty.t),
      M.IsAssociatedFunction.C (Self T Inner) "new" (new T Inner).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_p3_matrix_horizontally_truncated_HorizontallyTruncated_T_Inner.
  
  Module Impl_p3_matrix_Matrix_where_core_marker_Send_T_where_core_marker_Sync_T_where_p3_matrix_Matrix_Inner_T_T_for_p3_matrix_horizontally_truncated_HorizontallyTruncated_T_Inner.
    Definition Self (T Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::horizontally_truncated::HorizontallyTruncated") [] [ T; Inner ].
    
    (*
        fn width(&self) -> usize {
            self.truncated_width
        }
    *)
    Definition width (T Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| self |) |),
              "p3_matrix::horizontally_truncated::HorizontallyTruncated",
              "truncated_width"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn height(&self) -> usize {
            self.inner.height()
        }
    *)
    Definition height (T Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_trait_method (| "p3_matrix::Matrix", Inner, [], [ T ], "height", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::horizontally_truncated::HorizontallyTruncated",
                  "inner"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn get(&self, r: usize, c: usize) -> T {
            debug_assert!(c < self.truncated_width);
            self.inner.get(c, r)
        }
    *)
    Definition get (T Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T Inner in
      match ε, τ, α with
      | [], [], [ self; r; c ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          let c := M.alloc (| c |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.lt,
                                          [
                                            M.read (| c |);
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "p3_matrix::horizontally_truncated::HorizontallyTruncated",
                                                "truncated_width"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic", [], [] |),
                                      [ mk_str (| "assertion failed: c < self.truncated_width" |) ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.call_closure (|
                T,
                M.get_trait_method (| "p3_matrix::Matrix", Inner, [], [ T ], "get", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_matrix::horizontally_truncated::HorizontallyTruncated",
                      "inner"
                    |)
                  |);
                  M.read (| c |);
                  M.read (| r |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        type Row<'a>
            = Take<Inner::Row<'a>>
        where
            Self: 'a;
    *)
    Definition _Row (T Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "core::iter::adapters::take::Take")
        []
        [ Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Inner "Row" ].
    
    (*
        fn row(&self, r: usize) -> Self::Row<'_> {
            self.inner.row(r).take(self.truncated_width)
        }
    *)
    Definition row (T Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T Inner in
      match ε, τ, α with
      | [], [], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::iter::adapters::take::Take")
              []
              [ Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Inner "Row" ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Inner "Row",
              [],
              [],
              "take",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Inner "Row",
                M.get_trait_method (| "p3_matrix::Matrix", Inner, [], [ T ], "row", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_matrix::horizontally_truncated::HorizontallyTruncated",
                      "inner"
                    |)
                  |);
                  M.read (| r |)
                ]
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::horizontally_truncated::HorizontallyTruncated",
                  "truncated_width"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T Inner : Ty.t),
      M.IsTraitInstance
        "p3_matrix::Matrix"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T Inner)
        (* Instance *)
        [
          ("width", InstanceField.Method (width T Inner));
          ("height", InstanceField.Method (height T Inner));
          ("get", InstanceField.Method (get T Inner));
          ("Row", InstanceField.Ty (_Row T Inner));
          ("row", InstanceField.Method (row T Inner))
        ].
  End Impl_p3_matrix_Matrix_where_core_marker_Send_T_where_core_marker_Sync_T_where_p3_matrix_Matrix_Inner_T_T_for_p3_matrix_horizontally_truncated_HorizontallyTruncated_T_Inner.
End horizontally_truncated.
