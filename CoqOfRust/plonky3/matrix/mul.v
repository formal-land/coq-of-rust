(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module mul.
  (*
  pub fn mul_csr_dense<F, B>(a: &CsrMatrix<F>, b: &B) -> RowMajorMatrix<F>
  where
      F: Field,
      B: Matrix<F> + Sync,
  {
      assert_eq!(a.width(), b.height(), "A, B dimensions don't match");
      let c_width = b.width();
  
      let c_values = (0..a.height())
          .into_par_iter()
          .flat_map(|a_row_idx| {
              let mut c_row = F::zero_vec(c_width);
              for &(a_col_idx, a_val) in a.sparse_row(a_row_idx) {
                  add_scaled_slice_in_place(&mut c_row, b.row(a_col_idx), a_val);
              }
              c_row
          })
          .collect();
  
      RowMajorMatrix::new(c_values, c_width)
  }
  *)
  Definition mul_csr_dense (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; B ], [ a; b ] =>
      ltac:(M.monadic
        (let a := M.alloc (| a |) in
        let b := M.alloc (| b |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                Value.Tuple
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_trait_method (|
                            "p3_matrix::Matrix",
                            Ty.apply (Ty.path "p3_matrix::sparse::CsrMatrix") [] [ F ],
                            [],
                            [ F ],
                            "width",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| a |) |) |) ]
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_trait_method (|
                            "p3_matrix::Matrix",
                            B,
                            [],
                            [ F ],
                            "height",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| b |) |) |) ]
                        |)
                      |)
                    |)
                  ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let left_val := M.copy (| γ0_0 |) in
                    let right_val := M.copy (| γ0_1 |) in
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [
                                        M.read (| M.deref (| M.read (| left_val |) |) |);
                                        M.read (| M.deref (| M.read (| right_val |) |) |)
                                      ]
                                    |)
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  let~ kind :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [ Ty.path "core::panicking::AssertKind" ] :=
                                    M.alloc (|
                                      Value.StructTuple "core::panicking::AssertKind::Eq" []
                                    |) in
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (|
                                        "core::panicking::assert_failed",
                                        [],
                                        [ Ty.path "usize"; Ty.path "usize" ]
                                      |),
                                      [
                                        M.read (| kind |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| left_val |) |)
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| right_val |) |)
                                            |)
                                          |)
                                        |);
                                        Value.StructTuple
                                          "core::option::Option::Some"
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::Arguments",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_const",
                                                [ Value.Integer IntegerKind.Usize 1 ],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Value.Array
                                                          [
                                                            mk_str (|
                                                              "A, B dimensions don't match"
                                                            |)
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |)))
              ]
            |) in
          let~ c_width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (| "p3_matrix::Matrix", B, [], [ F ], "width", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| b |) |) |) ]
              |)
            |) in
          let~ c_values :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                    []
                    [
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ])
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "flat_map",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "p3_maybe_rayon::serial::IntoParallelIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "into_par_iter",
                          [],
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start", Value.Integer IntegerKind.Usize 0);
                              ("end_",
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_trait_method (|
                                    "p3_matrix::Matrix",
                                    Ty.apply (Ty.path "p3_matrix::sparse::CsrMatrix") [] [ F ],
                                    [],
                                    [ F ],
                                    "height",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| a |) |) |) ]
                                |))
                            ]
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ F; Ty.path "alloc::alloc::Global" ])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let a_row_idx := M.copy (| γ |) in
                                        M.read (|
                                          let~ c_row :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ F; Ty.path "alloc::alloc::Global" ],
                                                M.get_trait_method (|
                                                  "p3_field::field::PrimeCharacteristicRing",
                                                  F,
                                                  [],
                                                  [],
                                                  "zero_vec",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| c_width |) ]
                                              |)
                                            |) in
                                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                            M.use
                                              (M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ Ty.tuple [ Ty.path "usize"; F ] ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.tuple [ Ty.path "usize"; F ] ]
                                                        ],
                                                      [],
                                                      [],
                                                      "into_iter",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.tuple [ Ty.path "usize"; F ] ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "p3_matrix::sparse::CsrMatrix")
                                                            []
                                                            [ F ],
                                                          "sparse_row",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| a |) |)
                                                          |);
                                                          M.read (| a_row_idx |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let iter := M.copy (| γ |) in
                                                      M.loop (|
                                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                        ltac:(M.monadic
                                                          (let~ _ :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.tuple [] ] :=
                                                            M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.tuple [] ],
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.tuple
                                                                            [ Ty.path "usize"; F ]
                                                                        ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [ Ty.path "usize"; F ]
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "next",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          iter
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.is_struct_tuple (|
                                                                        γ,
                                                                        "core::option::Option::None"
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (| M.break (||) |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let γ0_0 := M.read (| γ0_0 |) in
                                                                    let γ2_0 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ0_0,
                                                                        0
                                                                      |) in
                                                                    let γ2_1 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ0_0,
                                                                        1
                                                                      |) in
                                                                    let a_col_idx :=
                                                                      M.copy (| γ2_0 |) in
                                                                    let a_val :=
                                                                      M.copy (| γ2_1 |) in
                                                                    let~ _ :
                                                                        Ty.apply
                                                                          (Ty.path "*")
                                                                          []
                                                                          [ Ty.tuple [] ] :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.tuple [],
                                                                          M.get_function (|
                                                                            "p3_field::helpers::add_scaled_slice_in_place",
                                                                            [],
                                                                            [
                                                                              F;
                                                                              Ty.associated_in_trait
                                                                                "p3_matrix::Matrix"
                                                                                []
                                                                                [ F ]
                                                                                B
                                                                                "Row"
                                                                            ]
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&mut")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        []
                                                                                        [ F ]
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::deref::DerefMut",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        F;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [],
                                                                                    [],
                                                                                    "deref_mut",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.MutRef,
                                                                                      M.deref (|
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          c_row
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.call_closure (|
                                                                              Ty.associated_in_trait
                                                                                "p3_matrix::Matrix"
                                                                                []
                                                                                [ F ]
                                                                                B
                                                                                "Row",
                                                                              M.get_trait_method (|
                                                                                "p3_matrix::Matrix",
                                                                                B,
                                                                                [],
                                                                                [ F ],
                                                                                "row",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (| b |)
                                                                                  |)
                                                                                |);
                                                                                M.read (|
                                                                                  a_col_idx
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.read (| a_val |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                      |)))
                                                ]
                                              |)) in
                                          c_row
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                  ],
                "new",
                [],
                []
              |),
              [ M.read (| c_values |); M.read (| c_width |) ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_mul_csr_dense :
    M.IsFunction.C "p3_matrix::mul::mul_csr_dense" mul_csr_dense.
  Admitted.
  Global Typeclasses Opaque mul_csr_dense.
End mul.
