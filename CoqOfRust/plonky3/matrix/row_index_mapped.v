(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module row_index_mapped.
  (* Trait *)
  Module RowIndexMap.
    Definition to_row_major_matrix
        (Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ T; Inner ], [ self; inner ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let inner := M.alloc (| inner |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                ],
              "new",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                    []
                    [
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                      Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Inner "Row";
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Inner "Row")
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Inner "Row";
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Inner "Row")
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "flat_map",
                      [],
                      [
                        Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Inner "Row";
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Inner "Row")
                      ]
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        []
                        [ Ty.path "usize" ]
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "p3_matrix::row_index_mapped::RowIndexMap",
                                Self,
                                [],
                                [],
                                "height",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |))
                        ];
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.associated_in_trait
                                          "p3_matrix::Matrix"
                                          []
                                          [ T ]
                                          Inner
                                          "Row")
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let r := M.copy (| γ |) in
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_matrix::Matrix"
                                            []
                                            [ T ]
                                            Inner
                                            "Row",
                                          M.get_trait_method (|
                                            "p3_matrix::Matrix",
                                            Inner,
                                            [],
                                            [ T ],
                                            "row",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (| Pointer.Kind.Ref, inner |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_trait_method (|
                                                "p3_matrix::row_index_mapped::RowIndexMap",
                                                Self,
                                                [],
                                                [],
                                                "map_row_index",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |);
                                                M.read (| r |)
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |);
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (| "p3_matrix::Matrix", Inner, [], [ T ], "width", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, inner |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_to_row_major_matrix :
      M.IsProvidedMethod
        "p3_matrix::row_index_mapped::RowIndexMap"
        "to_row_major_matrix"
        to_row_major_matrix.
  End RowIndexMap.
  
  (* StructRecord
    {
      name := "RowIndexMappedView";
      const_params := [];
      ty_params := [ "IndexMap"; "Inner" ];
      fields := [ ("index_map", IndexMap); ("inner", Inner) ];
    } *)
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_IndexMap_where_core_marker_Copy_Inner_for_p3_matrix_row_index_mapped_RowIndexMappedView_IndexMap_Inner.
    Definition Self (IndexMap Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView") [] [ IndexMap; Inner ].
    
    Axiom Implements :
      forall (IndexMap Inner : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self IndexMap Inner)
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_IndexMap_where_core_marker_Copy_Inner_for_p3_matrix_row_index_mapped_RowIndexMappedView_IndexMap_Inner.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_IndexMap_where_core_clone_Clone_Inner_for_p3_matrix_row_index_mapped_RowIndexMappedView_IndexMap_Inner.
    Definition Self (IndexMap Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView") [] [ IndexMap; Inner ].
    
    (* Clone *)
    Definition clone
        (IndexMap Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self IndexMap Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_matrix::row_index_mapped::RowIndexMappedView"
            []
            [ IndexMap; Inner ]
            [
              ("index_map",
                M.call_closure (|
                  IndexMap,
                  M.get_trait_method (| "core::clone::Clone", IndexMap, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::row_index_mapped::RowIndexMappedView",
                            "index_map"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("inner",
                M.call_closure (|
                  Inner,
                  M.get_trait_method (| "core::clone::Clone", Inner, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::row_index_mapped::RowIndexMappedView",
                            "inner"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (IndexMap Inner : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self IndexMap Inner)
        (* Instance *) [ ("clone", InstanceField.Method (clone IndexMap Inner)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_IndexMap_where_core_clone_Clone_Inner_for_p3_matrix_row_index_mapped_RowIndexMappedView_IndexMap_Inner.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_IndexMap_where_core_fmt_Debug_Inner_for_p3_matrix_row_index_mapped_RowIndexMappedView_IndexMap_Inner.
    Definition Self (IndexMap Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView") [] [ IndexMap; Inner ].
    
    (* Debug *)
    Definition fmt
        (IndexMap Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self IndexMap Inner in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "RowIndexMappedView" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "index_map" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_matrix::row_index_mapped::RowIndexMappedView",
                        "index_map"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::row_index_mapped::RowIndexMappedView",
                            "inner"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (IndexMap Inner : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self IndexMap Inner)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt IndexMap Inner)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_IndexMap_where_core_fmt_Debug_Inner_for_p3_matrix_row_index_mapped_RowIndexMappedView_IndexMap_Inner.
  
  Module Impl_p3_matrix_Matrix_where_core_marker_Send_T_where_core_marker_Sync_T_where_p3_matrix_row_index_mapped_RowIndexMap_IndexMap_where_p3_matrix_Matrix_Inner_T_T_for_p3_matrix_row_index_mapped_RowIndexMappedView_IndexMap_Inner.
    Definition Self (T IndexMap Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView") [] [ IndexMap; Inner ].
    
    (*
        fn width(&self) -> usize {
            self.inner.width()
        }
    *)
    Definition width
        (T IndexMap Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T IndexMap Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_trait_method (| "p3_matrix::Matrix", Inner, [], [ T ], "width", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::row_index_mapped::RowIndexMappedView",
                  "inner"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn height(&self) -> usize {
            self.index_map.height()
        }
    *)
    Definition height
        (T IndexMap Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T IndexMap Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_trait_method (|
              "p3_matrix::row_index_mapped::RowIndexMap",
              IndexMap,
              [],
              [],
              "height",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::row_index_mapped::RowIndexMappedView",
                  "index_map"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn get(&self, r: usize, c: usize) -> T {
            self.inner.get(self.index_map.map_row_index(r), c)
        }
    *)
    Definition get
        (T IndexMap Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T IndexMap Inner in
      match ε, τ, α with
      | [], [], [ self; r; c ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          let c := M.alloc (| c |) in
          M.call_closure (|
            T,
            M.get_trait_method (| "p3_matrix::Matrix", Inner, [], [ T ], "get", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::row_index_mapped::RowIndexMappedView",
                  "inner"
                |)
              |);
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "p3_matrix::row_index_mapped::RowIndexMap",
                  IndexMap,
                  [],
                  [],
                  "map_row_index",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_matrix::row_index_mapped::RowIndexMappedView",
                      "index_map"
                    |)
                  |);
                  M.read (| r |)
                ]
              |);
              M.read (| c |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        type Row<'a>
            = Inner::Row<'a>
        where
            Self: 'a;
    *)
    Definition _Row (T IndexMap Inner : Ty.t) : Ty.t :=
      Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Inner "Row".
    
    (*
        fn row(&self, r: usize) -> Self::Row<'_> {
            self.inner.row(self.index_map.map_row_index(r))
        }
    *)
    Definition row
        (T IndexMap Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T IndexMap Inner in
      match ε, τ, α with
      | [], [], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.call_closure (|
            Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Inner "Row",
            M.get_trait_method (| "p3_matrix::Matrix", Inner, [], [ T ], "row", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::row_index_mapped::RowIndexMappedView",
                  "inner"
                |)
              |);
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "p3_matrix::row_index_mapped::RowIndexMap",
                  IndexMap,
                  [],
                  [],
                  "map_row_index",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_matrix::row_index_mapped::RowIndexMappedView",
                      "index_map"
                    |)
                  |);
                  M.read (| r |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn row_slice(&self, r: usize) -> impl Deref<Target = [T]> {
            self.inner.row_slice(self.index_map.map_row_index(r))
        }
    *)
    Definition row_slice
        (T IndexMap Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T IndexMap Inner in
      match ε, τ, α with
      | [], [], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.call_closure (|
            Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Inner "{{synthetic}}'2",
            M.get_trait_method (| "p3_matrix::Matrix", Inner, [], [ T ], "row_slice", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::row_index_mapped::RowIndexMappedView",
                  "inner"
                |)
              |);
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "p3_matrix::row_index_mapped::RowIndexMap",
                  IndexMap,
                  [],
                  [],
                  "map_row_index",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_matrix::row_index_mapped::RowIndexMappedView",
                      "index_map"
                    |)
                  |);
                  M.read (| r |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn to_row_major_matrix(self) -> RowMajorMatrix<T>
        where
            Self: Sized,
            T: Clone,
        {
            // Use Perm's optimized permutation routine, if it has one.
            self.index_map.to_row_major_matrix(self.inner)
        }
    *)
    Definition to_row_major_matrix
        (T IndexMap Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T IndexMap Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ],
            M.get_trait_method (|
              "p3_matrix::row_index_mapped::RowIndexMap",
              IndexMap,
              [],
              [],
              "to_row_major_matrix",
              [],
              [ T; Inner ]
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  self,
                  "p3_matrix::row_index_mapped::RowIndexMappedView",
                  "index_map"
                |)
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  self,
                  "p3_matrix::row_index_mapped::RowIndexMappedView",
                  "inner"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn horizontally_packed_row<'a, P>(
            &'a self,
            r: usize,
        ) -> (
            impl Iterator<Item = P> + Send + Sync,
            impl Iterator<Item = T> + Send + Sync,
        )
        where
            P: PackedValue<Value = T>,
            T: Clone + 'a,
        {
            self.inner
                .horizontally_packed_row(self.index_map.map_row_index(r))
        }
    *)
    Definition horizontally_packed_row
        (T IndexMap Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T IndexMap Inner in
      match ε, τ, α with
      | [], [ P ], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.call_closure (|
            Ty.tuple
              [
                Ty.associated_in_trait "p3_matrix::Matrix" [] [ T; P ] Inner "{{synthetic}}'3";
                Ty.associated_in_trait "p3_matrix::Matrix" [] [ T; P ] Inner "{{synthetic}}'4"
              ],
            M.get_trait_method (|
              "p3_matrix::Matrix",
              Inner,
              [],
              [ T ],
              "horizontally_packed_row",
              [],
              [ P ]
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::row_index_mapped::RowIndexMappedView",
                  "inner"
                |)
              |);
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "p3_matrix::row_index_mapped::RowIndexMap",
                  IndexMap,
                  [],
                  [],
                  "map_row_index",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_matrix::row_index_mapped::RowIndexMappedView",
                      "index_map"
                    |)
                  |);
                  M.read (| r |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn padded_horizontally_packed_row<'a, P>(
            &'a self,
            r: usize,
        ) -> impl Iterator<Item = P> + Send + Sync
        where
            P: PackedValue<Value = T>,
            T: Clone + Default + 'a,
        {
            self.inner
                .padded_horizontally_packed_row(self.index_map.map_row_index(r))
        }
    *)
    Definition padded_horizontally_packed_row
        (T IndexMap Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T IndexMap Inner in
      match ε, τ, α with
      | [], [ P ], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.call_closure (|
            Ty.associated_in_trait "p3_matrix::Matrix" [] [ T; P ] Inner "{{synthetic}}'5",
            M.get_trait_method (|
              "p3_matrix::Matrix",
              Inner,
              [],
              [ T ],
              "padded_horizontally_packed_row",
              [],
              [ P ]
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::row_index_mapped::RowIndexMappedView",
                  "inner"
                |)
              |);
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "p3_matrix::row_index_mapped::RowIndexMap",
                  IndexMap,
                  [],
                  [],
                  "map_row_index",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_matrix::row_index_mapped::RowIndexMappedView",
                      "index_map"
                    |)
                  |);
                  M.read (| r |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T IndexMap Inner : Ty.t),
      M.IsTraitInstance
        "p3_matrix::Matrix"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T IndexMap Inner)
        (* Instance *)
        [
          ("width", InstanceField.Method (width T IndexMap Inner));
          ("height", InstanceField.Method (height T IndexMap Inner));
          ("get", InstanceField.Method (get T IndexMap Inner));
          ("Row", InstanceField.Ty (_Row T IndexMap Inner));
          ("row", InstanceField.Method (row T IndexMap Inner));
          ("row_slice", InstanceField.Method (row_slice T IndexMap Inner));
          ("to_row_major_matrix", InstanceField.Method (to_row_major_matrix T IndexMap Inner));
          ("horizontally_packed_row",
            InstanceField.Method (horizontally_packed_row T IndexMap Inner));
          ("padded_horizontally_packed_row",
            InstanceField.Method (padded_horizontally_packed_row T IndexMap Inner))
        ].
  End Impl_p3_matrix_Matrix_where_core_marker_Send_T_where_core_marker_Sync_T_where_p3_matrix_row_index_mapped_RowIndexMap_IndexMap_where_p3_matrix_Matrix_Inner_T_T_for_p3_matrix_row_index_mapped_RowIndexMappedView_IndexMap_Inner.
End row_index_mapped.
