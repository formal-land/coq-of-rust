(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Dimensions";
    const_params := [];
    ty_params := [];
    fields := [ ("width", Ty.path "usize"); ("height", Ty.path "usize") ];
  } *)

Module Impl_core_marker_Copy_for_p3_matrix_Dimensions.
  Definition Self : Ty.t := Ty.path "p3_matrix::Dimensions".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_Copy_for_p3_matrix_Dimensions.

Module Impl_core_clone_Clone_for_p3_matrix_Dimensions.
  Definition Self : Ty.t := Ty.path "p3_matrix::Dimensions".
  
  (* Clone *)
  Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.read (|
          M.match_operator (|
            Ty.apply (Ty.path "*") [] [ Ty.path "p3_matrix::Dimensions" ],
            Value.DeclaredButUndefined,
            [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_p3_matrix_Dimensions.

Module Impl_core_marker_StructuralPartialEq_for_p3_matrix_Dimensions.
  Definition Self : Ty.t := Ty.path "p3_matrix::Dimensions".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_p3_matrix_Dimensions.

Module Impl_core_cmp_PartialEq_p3_matrix_Dimensions_for_p3_matrix_Dimensions.
  Definition Self : Ty.t := Ty.path "p3_matrix::Dimensions".
  
  (* PartialEq *)
  Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; other ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let other := M.alloc (| other |) in
        LogicalOp.and (|
          M.call_closure (|
            Ty.path "bool",
            BinOp.eq,
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::Dimensions",
                  "width"
                |)
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| other |) |),
                  "p3_matrix::Dimensions",
                  "width"
                |)
              |)
            ]
          |),
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "bool",
              BinOp.eq,
              [
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "p3_matrix::Dimensions",
                    "height"
                  |)
                |);
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "p3_matrix::Dimensions",
                    "height"
                  |)
                |)
              ]
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) [ Ty.path "p3_matrix::Dimensions" ]
      Self
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_p3_matrix_Dimensions_for_p3_matrix_Dimensions.

Module Impl_core_cmp_Eq_for_p3_matrix_Dimensions.
  Definition Self : Ty.t := Ty.path "p3_matrix::Dimensions".
  
  (* Eq *)
  Definition assert_receiver_is_total_eq
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.read (|
          M.match_operator (|
            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
            Value.DeclaredButUndefined,
            [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *)
      [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
End Impl_core_cmp_Eq_for_p3_matrix_Dimensions.

Module Impl_core_fmt_Debug_for_p3_matrix_Dimensions.
  Definition Self : Ty.t := Ty.path "p3_matrix::Dimensions".
  
  (*
      fn fmt(&self, f: &mut Formatter<'_>) -> core::fmt::Result {
          write!(f, "{}x{}", self.width, self.height)
      }
  *)
  Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; Ty.path "core::fmt::Error" ],
          M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_fmt", [], [] |),
          [
            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
            M.call_closure (|
              Ty.path "core::fmt::Arguments",
              M.get_associated_function (|
                Ty.path "core::fmt::Arguments",
                "new_v1",
                [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 2 ],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (| Value.Array [ mk_str (| "" |); mk_str (| "x" |) ] |)
                    |)
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Value.Array
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::rt::Argument",
                              M.get_associated_function (|
                                Ty.path "core::fmt::rt::Argument",
                                "new_display",
                                [],
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::Dimensions",
                                        "width"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.path "core::fmt::rt::Argument",
                              M.get_associated_function (|
                                Ty.path "core::fmt::rt::Argument",
                                "new_display",
                                [],
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::Dimensions",
                                        "height"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                      |)
                    |)
                  |)
                |)
              ]
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_p3_matrix_Dimensions.

Module Impl_core_fmt_Display_for_p3_matrix_Dimensions.
  Definition Self : Ty.t := Ty.path "p3_matrix::Dimensions".
  
  (*
      fn fmt(&self, f: &mut Formatter<'_>) -> core::fmt::Result {
          write!(f, "{}x{}", self.width, self.height)
      }
  *)
  Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; Ty.path "core::fmt::Error" ],
          M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_fmt", [], [] |),
          [
            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
            M.call_closure (|
              Ty.path "core::fmt::Arguments",
              M.get_associated_function (|
                Ty.path "core::fmt::Arguments",
                "new_v1",
                [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 2 ],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (| Value.Array [ mk_str (| "" |); mk_str (| "x" |) ] |)
                    |)
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Value.Array
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::rt::Argument",
                              M.get_associated_function (|
                                Ty.path "core::fmt::rt::Argument",
                                "new_display",
                                [],
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::Dimensions",
                                        "width"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.path "core::fmt::rt::Argument",
                              M.get_associated_function (|
                                Ty.path "core::fmt::rt::Argument",
                                "new_display",
                                [],
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_matrix::Dimensions",
                                        "height"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                      |)
                    |)
                  |)
                |)
              ]
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Display"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Display_for_p3_matrix_Dimensions.

(* Trait *)
Module Matrix.
  Definition dimensions (T Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        Value.StructRecord
          "p3_matrix::Dimensions"
          [
            ("width",
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (| "p3_matrix::Matrix", Self, [], [ T ], "width", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |));
            ("height",
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (| "p3_matrix::Matrix", Self, [], [ T ], "height", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |))
          ]))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_dimensions :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_matrix::Matrix" "dimensions" (dimensions T).
  Definition get (T Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; r; c ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let r := M.alloc (| r |) in
        let c := M.alloc (| c |) in
        M.call_closure (|
          T,
          M.get_associated_function (|
            Ty.apply (Ty.path "core::option::Option") [] [ T ],
            "unwrap",
            [],
            []
          |),
          [
            M.call_closure (|
              Ty.apply (Ty.path "core::option::Option") [] [ T ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row",
                [],
                [],
                "nth",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.alloc (|
                    M.call_closure (|
                      Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row",
                      M.get_trait_method (| "p3_matrix::Matrix", Self, [], [ T ], "row", [], [] |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.read (| r |)
                      ]
                    |)
                  |)
                |);
                M.read (| c |)
              ]
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_get :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_matrix::Matrix" "get" (get T).
  Definition rows (T Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "core::iter::adapters::map::Map")
            []
            [
              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
              Ty.function
                [ Ty.tuple [ Ty.path "usize" ] ]
                (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row")
            ],
          M.get_trait_method (|
            "core::iter::traits::iterator::Iterator",
            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
            [],
            [],
            "map",
            [],
            [
              Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row";
              Ty.function
                [ Ty.tuple [ Ty.path "usize" ] ]
                (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row")
            ]
          |),
          [
            Value.StructRecord
              "core::ops::range::Range"
              [
                ("start", Value.Integer IntegerKind.Usize 0);
                ("end_",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (| "p3_matrix::Matrix", Self, [], [ T ], "height", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |))
              ];
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize" ] ]
                              (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row")
                          ],
                        M.alloc (| α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let r := M.copy (| γ |) in
                              M.call_closure (|
                                Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row",
                                M.get_trait_method (|
                                  "p3_matrix::Matrix",
                                  Self,
                                  [],
                                  [ T ],
                                  "row",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                                  M.read (| r |)
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_rows :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_matrix::Matrix" "rows" (rows T).
  Definition par_rows (T Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "core::iter::adapters::map::Map")
            []
            [
              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
              Ty.function
                [ Ty.tuple [ Ty.path "usize" ] ]
                (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row")
            ],
          M.get_trait_method (|
            "core::iter::traits::iterator::Iterator",
            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
            [],
            [],
            "map",
            [],
            [
              Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row";
              Ty.function
                [ Ty.tuple [ Ty.path "usize" ] ]
                (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row")
            ]
          |),
          [
            M.call_closure (|
              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
              M.get_trait_method (|
                "p3_maybe_rayon::serial::IntoParallelIterator",
                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                [],
                [],
                "into_par_iter",
                [],
                []
              |),
              [
                Value.StructRecord
                  "core::ops::range::Range"
                  [
                    ("start", Value.Integer IntegerKind.Usize 0);
                    ("end_",
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "p3_matrix::Matrix",
                          Self,
                          [],
                          [ T ],
                          "height",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |))
                  ]
              ]
            |);
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize" ] ]
                              (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row")
                          ],
                        M.alloc (| α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let r := M.copy (| γ |) in
                              M.call_closure (|
                                Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row",
                                M.get_trait_method (|
                                  "p3_matrix::Matrix",
                                  Self,
                                  [],
                                  [ T ],
                                  "row",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                                  M.read (| r |)
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_par_rows :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_matrix::Matrix" "par_rows" (par_rows T).
  Definition row_slice (T Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; r ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let r := M.alloc (| r |) in
        M.call_closure (|
          Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
          M.get_trait_method (|
            "itertools::Itertools",
            Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row",
            [],
            [],
            "collect_vec",
            [],
            []
          |),
          [
            M.call_closure (|
              Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row",
              M.get_trait_method (| "p3_matrix::Matrix", Self, [], [ T ], "row", [], [] |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |); M.read (| r |) ]
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_row_slice :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_matrix::Matrix" "row_slice" (row_slice T).
  Definition first_row (T Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row",
          M.get_trait_method (| "p3_matrix::Matrix", Self, [], [ T ], "row", [], [] |),
          [
            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
            Value.Integer IntegerKind.Usize 0
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_first_row :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_matrix::Matrix" "first_row" (first_row T).
  Definition last_row (T Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row",
          M.get_trait_method (| "p3_matrix::Matrix", Self, [], [ T ], "row", [], [] |),
          [
            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
            M.call_closure (|
              Ty.path "usize",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (| "p3_matrix::Matrix", Self, [], [ T ], "height", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |);
                Value.Integer IntegerKind.Usize 1
              ]
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_last_row :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_matrix::Matrix" "last_row" (last_row T).
  Definition to_row_major_matrix
      (T Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "p3_matrix::dense::DenseMatrix")
            []
            [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ],
          M.get_associated_function (|
            Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ],
            "new",
            [],
            []
          |),
          [
            M.call_closure (|
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                  []
                  [
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                    Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row";
                    Ty.function
                      [ Ty.tuple [ Ty.path "usize" ] ]
                      (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row")
                  ],
                [],
                [],
                "collect",
                [],
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                    []
                    [
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                      Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row";
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row")
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    [],
                    [],
                    "flat_map",
                    [],
                    [
                      Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row";
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row")
                    ]
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.Usize 0);
                        ("end_",
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_trait_method (|
                              "p3_matrix::Matrix",
                              Self,
                              [],
                              [ T ],
                              "height",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                          |))
                      ];
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.associated_in_trait
                                        "p3_matrix::Matrix"
                                        []
                                        [ T ]
                                        Self
                                        "Row")
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let r := M.copy (| γ |) in
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_matrix::Matrix"
                                          []
                                          [ T ]
                                          Self
                                          "Row",
                                        M.get_trait_method (|
                                          "p3_matrix::Matrix",
                                          Self,
                                          [],
                                          [ T ],
                                          "row",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |); M.read (| r |) ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |);
            M.call_closure (|
              Ty.path "usize",
              M.get_trait_method (| "p3_matrix::Matrix", Self, [], [ T ], "width", [], [] |),
              [ M.borrow (| Pointer.Kind.Ref, self |) ]
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_to_row_major_matrix :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_matrix::Matrix" "to_row_major_matrix" (to_row_major_matrix T).
  Definition horizontally_packed_row
      (T Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ P ], [ self; r ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let r := M.alloc (| r |) in
        M.read (|
          let~ num_packed : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.div,
                [
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (| "p3_matrix::Matrix", Self, [], [ T ], "width", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |);
                  M.read (|
                    get_constant (| "p3_field::packed::PackedValue::WIDTH", Ty.path "usize" |)
                  |)
                ]
              |)
            |) in
          let~ packed :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                      Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                    Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  [],
                  [],
                  "map",
                  [],
                  [ P; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P ]
                |),
                [
                  Value.StructRecord
                    "core::ops::range::Range"
                    [
                      ("start", Value.Integer IntegerKind.Usize 0);
                      ("end_", M.read (| num_packed |))
                    ];
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let c := M.copy (| γ |) in
                                    M.call_closure (|
                                      P,
                                      M.get_trait_method (|
                                        "p3_field::packed::PackedValue",
                                        P,
                                        [],
                                        [],
                                        "from_fn",
                                        [],
                                        [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ]
                                      |),
                                      [
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                                          T
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let i := M.copy (| γ |) in
                                                          M.call_closure (|
                                                            T,
                                                            M.get_trait_method (|
                                                              "p3_matrix::Matrix",
                                                              Self,
                                                              [],
                                                              [ T ],
                                                              "get",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| self |) |)
                                                              |);
                                                              M.read (| r |);
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.add,
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    BinOp.Wrap.mul,
                                                                    [
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "p3_field::packed::PackedValue::WIDTH",
                                                                          Ty.path "usize"
                                                                        |)
                                                                      |);
                                                                      M.read (| c |)
                                                                    ]
                                                                  |);
                                                                  M.read (| i |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          let~ sfx :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                      Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                    Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  [],
                  [],
                  "map",
                  [],
                  [ T; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ]
                |),
                [
                  Value.StructRecord
                    "core::ops::range::Range"
                    [
                      ("start",
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.mul,
                          [
                            M.read (| num_packed |);
                            M.read (|
                              get_constant (|
                                "p3_field::packed::PackedValue::WIDTH",
                                Ty.path "usize"
                              |)
                            |)
                          ]
                        |));
                      ("end_",
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_trait_method (|
                            "p3_matrix::Matrix",
                            Self,
                            [],
                            [ T ],
                            "width",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |))
                    ];
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let c := M.copy (| γ |) in
                                    M.call_closure (|
                                      T,
                                      M.get_trait_method (|
                                        "p3_matrix::Matrix",
                                        Self,
                                        [],
                                        [ T ],
                                        "get",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |);
                                        M.read (| r |);
                                        M.read (| c |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [ M.read (| packed |); M.read (| sfx |) ] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_horizontally_packed_row :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_matrix::Matrix" "horizontally_packed_row" (horizontally_packed_row T).
  Definition padded_horizontally_packed_row
      (T Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ P ], [ self; r ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let r := M.alloc (| r |) in
        M.read (|
          let~ row_iter :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "Row",
                M.get_trait_method (| "p3_matrix::Matrix", Self, [], [ T ], "row", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |); M.read (| r |) ]
              |)
            |) in
          let~ num_elems : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (| Ty.path "usize", "div_ceil", [], [] |),
                [
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (| "p3_matrix::Matrix", Self, [], [ T ], "width", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |);
                  M.read (|
                    get_constant (| "p3_field::packed::PackedValue::WIDTH", Ty.path "usize" |)
                  |)
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                  Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P
                ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                [],
                [],
                "map",
                [],
                [ P; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P ]
              |),
              [
                Value.StructRecord
                  "core::ops::range::Range"
                  [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", M.read (| num_elems |))
                  ];
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply
                              (Ty.path "*")
                              []
                              [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P ],
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    P,
                                    M.get_trait_method (|
                                      "p3_field::packed::PackedValue",
                                      P,
                                      [],
                                      [],
                                      "from_fn",
                                      [],
                                      [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ]
                                    |),
                                    [
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T
                                                    ],
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          T,
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [ T ],
                                                            "unwrap_or_default",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ T ],
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.associated_in_trait
                                                                  "p3_matrix::Matrix"
                                                                  []
                                                                  [ T ]
                                                                  Self
                                                                  "Row",
                                                                [],
                                                                [],
                                                                "next",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  row_iter
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)))
                                                  ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end))
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_padded_horizontally_packed_row :
    forall (T : Ty.t),
    M.IsProvidedMethod
      "p3_matrix::Matrix"
      "padded_horizontally_packed_row"
      (padded_horizontally_packed_row T).
  Definition par_horizontally_packed_rows
      (T Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ P ], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "core::iter::adapters::map::Map")
            []
            [
              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
              Ty.function
                [ Ty.tuple [ Ty.path "usize" ] ]
                (Ty.tuple
                  [
                    Ty.associated_in_trait "p3_matrix::Matrix" [] [ T; P ] Self "{{synthetic}}'3";
                    Ty.associated_in_trait "p3_matrix::Matrix" [] [ T; P ] Self "{{synthetic}}'4"
                  ])
            ],
          M.get_trait_method (|
            "core::iter::traits::iterator::Iterator",
            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
            [],
            [],
            "map",
            [],
            [
              Ty.tuple
                [
                  Ty.associated_in_trait "p3_matrix::Matrix" [] [ T; P ] Self "{{synthetic}}'3";
                  Ty.associated_in_trait "p3_matrix::Matrix" [] [ T; P ] Self "{{synthetic}}'4"
                ];
              Ty.function
                [ Ty.tuple [ Ty.path "usize" ] ]
                (Ty.tuple
                  [
                    Ty.associated_in_trait "p3_matrix::Matrix" [] [ T; P ] Self "{{synthetic}}'3";
                    Ty.associated_in_trait "p3_matrix::Matrix" [] [ T; P ] Self "{{synthetic}}'4"
                  ])
            ]
          |),
          [
            M.call_closure (|
              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
              M.get_trait_method (|
                "p3_maybe_rayon::serial::IntoParallelIterator",
                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                [],
                [],
                "into_par_iter",
                [],
                []
              |),
              [
                Value.StructRecord
                  "core::ops::range::Range"
                  [
                    ("start", Value.Integer IntegerKind.Usize 0);
                    ("end_",
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "p3_matrix::Matrix",
                          Self,
                          [],
                          [ T ],
                          "height",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |))
                  ]
              ]
            |);
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize" ] ]
                              (Ty.tuple
                                [
                                  Ty.associated_in_trait
                                    "p3_matrix::Matrix"
                                    []
                                    [ T; P ]
                                    Self
                                    "{{synthetic}}'3";
                                  Ty.associated_in_trait
                                    "p3_matrix::Matrix"
                                    []
                                    [ T; P ]
                                    Self
                                    "{{synthetic}}'4"
                                ])
                          ],
                        M.alloc (| α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let r := M.copy (| γ |) in
                              M.call_closure (|
                                Ty.tuple
                                  [
                                    Ty.associated_in_trait
                                      "p3_matrix::Matrix"
                                      []
                                      [ T; P ]
                                      Self
                                      "{{synthetic}}'3";
                                    Ty.associated_in_trait
                                      "p3_matrix::Matrix"
                                      []
                                      [ T; P ]
                                      Self
                                      "{{synthetic}}'4"
                                  ],
                                M.get_trait_method (|
                                  "p3_matrix::Matrix",
                                  Self,
                                  [],
                                  [ T ],
                                  "horizontally_packed_row",
                                  [],
                                  [ P ]
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                                  M.read (| r |)
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_par_horizontally_packed_rows :
    forall (T : Ty.t),
    M.IsProvidedMethod
      "p3_matrix::Matrix"
      "par_horizontally_packed_rows"
      (par_horizontally_packed_rows T).
  Definition par_padded_horizontally_packed_rows
      (T Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ P ], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "core::iter::adapters::map::Map")
            []
            [
              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
              Ty.function
                [ Ty.tuple [ Ty.path "usize" ] ]
                (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T; P ] Self "{{synthetic}}'5")
            ],
          M.get_trait_method (|
            "core::iter::traits::iterator::Iterator",
            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
            [],
            [],
            "map",
            [],
            [
              Ty.associated_in_trait "p3_matrix::Matrix" [] [ T; P ] Self "{{synthetic}}'5";
              Ty.function
                [ Ty.tuple [ Ty.path "usize" ] ]
                (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T; P ] Self "{{synthetic}}'5")
            ]
          |),
          [
            M.call_closure (|
              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
              M.get_trait_method (|
                "p3_maybe_rayon::serial::IntoParallelIterator",
                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                [],
                [],
                "into_par_iter",
                [],
                []
              |),
              [
                Value.StructRecord
                  "core::ops::range::Range"
                  [
                    ("start", Value.Integer IntegerKind.Usize 0);
                    ("end_",
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "p3_matrix::Matrix",
                          Self,
                          [],
                          [ T ],
                          "height",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |))
                  ]
              ]
            |);
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize" ] ]
                              (Ty.associated_in_trait
                                "p3_matrix::Matrix"
                                []
                                [ T; P ]
                                Self
                                "{{synthetic}}'5")
                          ],
                        M.alloc (| α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let r := M.copy (| γ |) in
                              M.call_closure (|
                                Ty.associated_in_trait
                                  "p3_matrix::Matrix"
                                  []
                                  [ T; P ]
                                  Self
                                  "{{synthetic}}'5",
                                M.get_trait_method (|
                                  "p3_matrix::Matrix",
                                  Self,
                                  [],
                                  [ T ],
                                  "padded_horizontally_packed_row",
                                  [],
                                  [ P ]
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                                  M.read (| r |)
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_par_padded_horizontally_packed_rows :
    forall (T : Ty.t),
    M.IsProvidedMethod
      "p3_matrix::Matrix"
      "par_padded_horizontally_packed_rows"
      (par_padded_horizontally_packed_rows T).
  Definition vertically_packed_row
      (T Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ P ], [ self; r ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let r := M.alloc (| r |) in
        M.read (|
          let~ rows :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "{{synthetic}}'2";
                      Ty.path "alloc::alloc::Global"
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "{{synthetic}}'2";
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "itertools::Itertools",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "{{synthetic}}'2")
                    ],
                  [],
                  [],
                  "collect_vec",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.associated_in_trait
                            "p3_matrix::Matrix"
                            []
                            [ T ]
                            Self
                            "{{synthetic}}'2")
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "{{synthetic}}'2";
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.associated_in_trait
                            "p3_matrix::Matrix"
                            []
                            [ T ]
                            Self
                            "{{synthetic}}'2")
                      ]
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_",
                            M.read (|
                              get_constant (|
                                "p3_field::packed::PackedValue::WIDTH",
                                Ty.path "usize"
                              |)
                            |))
                        ];
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.associated_in_trait
                                          "p3_matrix::Matrix"
                                          []
                                          [ T ]
                                          Self
                                          "{{synthetic}}'2")
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let c := M.copy (| γ |) in
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_matrix::Matrix"
                                            []
                                            [ T ]
                                            Self
                                            "{{synthetic}}'2",
                                          M.get_trait_method (|
                                            "p3_matrix::Matrix",
                                            Self,
                                            [],
                                            [ T ],
                                            "row_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.rem,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [ M.read (| r |); M.read (| c |) ]
                                                |);
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Self,
                                                    [],
                                                    [ T ],
                                                    "height",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                  Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P
                ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                [],
                [],
                "map",
                [],
                [ P; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P ]
              |),
              [
                Value.StructRecord
                  "core::ops::range::Range"
                  [
                    ("start", Value.Integer IntegerKind.Usize 0);
                    ("end_",
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "p3_matrix::Matrix",
                          Self,
                          [],
                          [ T ],
                          "width",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |))
                  ];
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply
                              (Ty.path "*")
                              []
                              [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P ],
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let c := M.copy (| γ |) in
                                  M.call_closure (|
                                    P,
                                    M.get_trait_method (|
                                      "p3_field::packed::PackedValue",
                                      P,
                                      [],
                                      [],
                                      "from_fn",
                                      [],
                                      [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ]
                                    |),
                                    [
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T
                                                    ],
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let i := M.copy (| γ |) in
                                                        M.read (|
                                                          M.SubPointer.get_array_field (|
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ T ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.associated_in_trait
                                                                    "p3_matrix::Matrix"
                                                                    []
                                                                    [ T ]
                                                                    Self
                                                                    "{{synthetic}}'2",
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_matrix::Matrix"
                                                                              []
                                                                              [ T ]
                                                                              Self
                                                                              "{{synthetic}}'2"
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::index::Index",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_matrix::Matrix"
                                                                                []
                                                                                [ T ]
                                                                                Self
                                                                                "{{synthetic}}'2";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          [ Ty.path "usize" ],
                                                                          "index",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            rows
                                                                          |);
                                                                          M.read (| i |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            M.read (| c |)
                                                          |)
                                                        |)))
                                                  ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end))
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_vertically_packed_row :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_matrix::Matrix" "vertically_packed_row" (vertically_packed_row T).
  Definition vertically_packed_row_pair
      (T Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ P ], [ self; r; step ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let r := M.alloc (| r |) in
        let step := M.alloc (| step |) in
        M.read (|
          let~ rows :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "{{synthetic}}'2";
                      Ty.path "alloc::alloc::Global"
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "{{synthetic}}'2";
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "itertools::Itertools",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "{{synthetic}}'2")
                    ],
                  [],
                  [],
                  "collect_vec",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.associated_in_trait
                            "p3_matrix::Matrix"
                            []
                            [ T ]
                            Self
                            "{{synthetic}}'2")
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "{{synthetic}}'2";
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.associated_in_trait
                            "p3_matrix::Matrix"
                            []
                            [ T ]
                            Self
                            "{{synthetic}}'2")
                      ]
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_",
                            M.read (|
                              get_constant (|
                                "p3_field::packed::PackedValue::WIDTH",
                                Ty.path "usize"
                              |)
                            |))
                        ];
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.associated_in_trait
                                          "p3_matrix::Matrix"
                                          []
                                          [ T ]
                                          Self
                                          "{{synthetic}}'2")
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let c := M.copy (| γ |) in
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_matrix::Matrix"
                                            []
                                            [ T ]
                                            Self
                                            "{{synthetic}}'2",
                                          M.get_trait_method (|
                                            "p3_matrix::Matrix",
                                            Self,
                                            [],
                                            [ T ],
                                            "row_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.rem,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [ M.read (| r |); M.read (| c |) ]
                                                |);
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Self,
                                                    [],
                                                    [ T ],
                                                    "height",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)
            |) in
          let~ next_rows :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "{{synthetic}}'2";
                      Ty.path "alloc::alloc::Global"
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "{{synthetic}}'2";
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "itertools::Itertools",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "{{synthetic}}'2")
                    ],
                  [],
                  [],
                  "collect_vec",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.associated_in_trait
                            "p3_matrix::Matrix"
                            []
                            [ T ]
                            Self
                            "{{synthetic}}'2")
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.associated_in_trait "p3_matrix::Matrix" [] [ T ] Self "{{synthetic}}'2";
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.associated_in_trait
                            "p3_matrix::Matrix"
                            []
                            [ T ]
                            Self
                            "{{synthetic}}'2")
                      ]
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_",
                            M.read (|
                              get_constant (|
                                "p3_field::packed::PackedValue::WIDTH",
                                Ty.path "usize"
                              |)
                            |))
                        ];
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.associated_in_trait
                                          "p3_matrix::Matrix"
                                          []
                                          [ T ]
                                          Self
                                          "{{synthetic}}'2")
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let c := M.copy (| γ |) in
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_matrix::Matrix"
                                            []
                                            [ T ]
                                            Self
                                            "{{synthetic}}'2",
                                          M.get_trait_method (|
                                            "p3_matrix::Matrix",
                                            Self,
                                            [],
                                            [ T ],
                                            "row_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.rem,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.add,
                                                      [ M.read (| r |); M.read (| c |) ]
                                                    |);
                                                    M.read (| step |)
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Self,
                                                    [],
                                                    [ T ],
                                                    "height",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ P; Ty.path "alloc::alloc::Global" ],
              M.get_trait_method (|
                "itertools::Itertools",
                Ty.apply
                  (Ty.path "core::iter::adapters::chain::Chain")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P
                      ];
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P
                      ]
                  ],
                [],
                [],
                "collect_vec",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::chain::Chain")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                          Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P
                        ];
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                          Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P
                        ]
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P
                      ],
                    [],
                    [],
                    "chain",
                    [],
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                          Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                          Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "map",
                        [],
                        [ P; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P ]
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_",
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_trait_method (|
                                  "p3_matrix::Matrix",
                                  Self,
                                  [],
                                  [ T ],
                                  "width",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                              |))
                          ];
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let c := M.copy (| γ |) in
                                          M.call_closure (|
                                            P,
                                            M.get_trait_method (|
                                              "p3_field::packed::PackedValue",
                                              P,
                                              [],
                                              [],
                                              "from_fn",
                                              [],
                                              [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ]
                                            |),
                                            [
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [ Ty.path "usize" ] ]
                                                                T
                                                            ],
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let i := M.copy (| γ |) in
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [ T ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.associated_in_trait
                                                                            "p3_matrix::Matrix"
                                                                            []
                                                                            [ T ]
                                                                            Self
                                                                            "{{synthetic}}'2",
                                                                          [],
                                                                          [],
                                                                          "deref",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "p3_matrix::Matrix"
                                                                                      []
                                                                                      [ T ]
                                                                                      Self
                                                                                      "{{synthetic}}'2"
                                                                                  ],
                                                                                M.get_trait_method (|
                                                                                  "core::ops::index::Index",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "p3_matrix::Matrix"
                                                                                        []
                                                                                        [ T ]
                                                                                        Self
                                                                                        "{{synthetic}}'2";
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [],
                                                                                  [ Ty.path "usize"
                                                                                  ],
                                                                                  "index",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    rows
                                                                                  |);
                                                                                  M.read (| i |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    M.read (| c |)
                                                                  |)
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                          Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "map",
                        [],
                        [ P; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P ]
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_",
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_trait_method (|
                                  "p3_matrix::Matrix",
                                  Self,
                                  [],
                                  [ T ],
                                  "width",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                              |))
                          ];
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let c := M.copy (| γ |) in
                                          M.call_closure (|
                                            P,
                                            M.get_trait_method (|
                                              "p3_field::packed::PackedValue",
                                              P,
                                              [],
                                              [],
                                              "from_fn",
                                              [],
                                              [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ]
                                            |),
                                            [
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [ Ty.path "usize" ] ]
                                                                T
                                                            ],
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let i := M.copy (| γ |) in
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [ T ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.associated_in_trait
                                                                            "p3_matrix::Matrix"
                                                                            []
                                                                            [ T ]
                                                                            Self
                                                                            "{{synthetic}}'2",
                                                                          [],
                                                                          [],
                                                                          "deref",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "p3_matrix::Matrix"
                                                                                      []
                                                                                      [ T ]
                                                                                      Self
                                                                                      "{{synthetic}}'2"
                                                                                  ],
                                                                                M.get_trait_method (|
                                                                                  "core::ops::index::Index",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "p3_matrix::Matrix"
                                                                                        []
                                                                                        [ T ]
                                                                                        Self
                                                                                        "{{synthetic}}'2";
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [],
                                                                                  [ Ty.path "usize"
                                                                                  ],
                                                                                  "index",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    next_rows
                                                                                  |);
                                                                                  M.read (| i |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    M.read (| c |)
                                                                  |)
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_vertically_packed_row_pair :
    forall (T : Ty.t),
    M.IsProvidedMethod
      "p3_matrix::Matrix"
      "vertically_packed_row_pair"
      (vertically_packed_row_pair T).
  Definition vertically_strided
      (T Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [], [ self; stride; offset ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let stride := M.alloc (| stride |) in
        let offset := M.alloc (| offset |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
            []
            [ Ty.path "p3_matrix::strided::VerticallyStridedRowIndexMap"; Self ],
          M.get_associated_function (|
            Ty.path "p3_matrix::strided::VerticallyStridedRowIndexMap",
            "new_view",
            [],
            [ T; Self ]
          |),
          [ M.read (| self |); M.read (| stride |); M.read (| offset |) ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_vertically_strided :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_matrix::Matrix" "vertically_strided" (vertically_strided T).
  Definition columnwise_dot_product
      (T Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ EF ], [ self; v ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let v := M.alloc (| v |) in
        M.catch_return
          (Ty.apply (Ty.path "alloc::vec::Vec") [] [ EF; Ty.path "alloc::alloc::Global" ]) (|
          ltac:(M.monadic
            (M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] := M.alloc (| Value.Tuple [] |) in
              let __tracing_attr_span := M.copy (| Value.DeclaredButUndefined |) in
              let __tracing_attr_guard := M.copy (| Value.DeclaredButUndefined |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.path "tracing_core::metadata::Level",
                                      [],
                                      [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                      "le",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_associated_constant (|
                                          Ty.path "tracing_core::metadata::Level",
                                          "DEBUG",
                                          Ty.path "tracing_core::metadata::Level"
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "tracing::level_filters::STATIC_MAX_LEVEL",
                                          Ty.path "tracing_core::metadata::LevelFilter"
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "DEBUG",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing_core::metadata::LevelFilter",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                "current",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic (Value.Bool false))
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_span,
                              M.read (|
                                let~ interest :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [ Ty.path "tracing_core::subscriber::Interest" ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "never",
                                        [],
                                        []
                                      |),
                                      []
                                    |)
                                  |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.path "tracing::span::Span" ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              LogicalOp.and (|
                                                LogicalOp.and (|
                                                  LogicalOp.and (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialOrd",
                                                        Ty.path "tracing_core::metadata::Level",
                                                        [],
                                                        [
                                                          Ty.path
                                                            "tracing_core::metadata::LevelFilter"
                                                        ],
                                                        "le",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_associated_constant (|
                                                            Ty.path "tracing_core::metadata::Level",
                                                            "DEBUG",
                                                            Ty.path "tracing_core::metadata::Level"
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_constant (|
                                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          |)
                                                        |)
                                                      ]
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "tracing_core::metadata::Level",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          ],
                                                          "le",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_associated_constant (|
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              "DEBUG",
                                                              Ty.path
                                                                "tracing_core::metadata::Level"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  "current",
                                                                  [],
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.alloc (|
                                                          M.write (|
                                                            interest,
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                "interest",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "p3_matrix::Matrix::columnwise_dot_product::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |) in
                                                      M.alloc (|
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              "is_never",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                interest
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)))
                                                |),
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_function (|
                                                      "tracing::__macro_support::__is_enabled",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "p3_matrix::Matrix::columnwise_dot_product::__CALLSITE",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (| interest |)
                                                    ]
                                                  |)))
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ meta :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ]
                                              ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "tracing_core::metadata::Metadata" ],
                                              M.get_trait_method (|
                                                "tracing_core::callsite::Callsite",
                                                Ty.path "tracing_core::callsite::DefaultCallsite",
                                                [],
                                                [],
                                                "metadata",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.read (|
                                                      get_constant (|
                                                        "p3_matrix::Matrix::columnwise_dot_product::__CALLSITE",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite"
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "tracing::span::Span",
                                            M.get_associated_function (|
                                              Ty.path "tracing::span::Span",
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| meta |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    let~ iter :
                                                        Ty.apply
                                                          (Ty.path "*")
                                                          []
                                                          [ Ty.path "tracing_core::field::Iter" ] :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "tracing_core::field::Iter",
                                                          M.get_associated_function (|
                                                            Ty.path "tracing_core::field::FieldSet",
                                                            "iter",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::field::FieldSet"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata",
                                                                    "fields",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| meta |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "tracing_core::field::ValueSet",
                                                        M.get_associated_function (|
                                                          Ty.path "tracing_core::field::FieldSet",
                                                          "value_set",
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 1 ]
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::Field"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("tracing_core::field::Value::Trait",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::FieldSet"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata",
                                                                  "fields",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| meta |) |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      Value.Tuple
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                Ty.path
                                                                                  "tracing_core::field::Field",
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "tracing_core::field::Field"
                                                                                    ],
                                                                                  "expect",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::field::Field"
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.path
                                                                                        "tracing_core::field::Iter",
                                                                                      [],
                                                                                      [],
                                                                                      "next",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            iter
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      mk_str (|
                                                                                        "FieldSet corrupted (this is a bug)"
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          Value.StructTuple
                                                                            "core::option::Option::Some"
                                                                            [
                                                                              M.read (|
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    (* Unsize *)
                                                                                    M.pointer_coercion
                                                                                      (M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.alloc (|
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "tracing_core::field::DisplayValue")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "p3_matrix::Dimensions"
                                                                                                      ]
                                                                                                  ],
                                                                                                M.get_function (|
                                                                                                  "tracing_core::field::display",
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "p3_matrix::Dimensions"
                                                                                                      ]
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.alloc (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.path
                                                                                                          "p3_matrix::Dimensions",
                                                                                                        M.get_trait_method (|
                                                                                                          "p3_matrix::Matrix",
                                                                                                          Self,
                                                                                                          [],
                                                                                                          [
                                                                                                            T
                                                                                                          ],
                                                                                                          "dimensions",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.deref (|
                                                                                                              M.read (|
                                                                                                                self
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      |))
                                                                                  |))
                                                                              |)
                                                                            ]
                                                                        ]
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let~ span :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "tracing::span::Span" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing::span::Span",
                                              M.get_function (|
                                                "tracing::__macro_support::__disabled_span",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::metadata::Metadata"
                                                        ],
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        [],
                                                        "metadata",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (|
                                                              get_constant (|
                                                                "p3_matrix::Matrix::columnwise_dot_product::__CALLSITE",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::callsite::DefaultCallsite"
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (| Value.Tuple [] |) in
                                        span))
                                  ]
                                |)
                              |)
                            |)
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_guard,
                              M.call_closure (|
                                Ty.path "tracing::span::Entered",
                                M.get_associated_function (|
                                  Ty.path "tracing::span::Span",
                                  "enter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool false |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              let~ __tracing_attr_fake_return :
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ EF; Ty.path "alloc::alloc::Global" ]
                                    ] :=
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.loop (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                        ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      |)
                                    |)
                                  |)
                                |) in
                              M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ packed_width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (| Ty.path "usize", "div_ceil", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "p3_matrix::Matrix",
                          Self,
                          [],
                          [ T ],
                          "width",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |);
                      M.read (|
                        get_constant (| "p3_field::packed::PackedValue::WIDTH", Ty.path "usize" |)
                      |)
                    ]
                  |)
                |) in
              let~ packed_result :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_field::field::ExtensionField"
                            []
                            [ T ]
                            EF
                            "ExtensionPacking";
                          Ty.path "alloc::alloc::Global"
                        ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_field::field::ExtensionField"
                          []
                          [ T ]
                          EF
                          "ExtensionPacking";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "p3_maybe_rayon::prelude::SharedExt",
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_matrix::Matrix"
                            []
                            [ T; Ty.associated_in_trait "p3_field::field::Field" [] [] T "Packing" ]
                            Self
                            "{{synthetic}}'9";
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ]
                        ],
                      [],
                      [],
                      "par_fold_reduce",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_field::field::ExtensionField"
                              []
                              [ T ]
                              EF
                              "ExtensionPacking";
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [ Ty.tuple [] ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_field::field::ExtensionField"
                                []
                                [ T ]
                                EF
                                "ExtensionPacking";
                              Ty.path "alloc::alloc::Global"
                            ]);
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::ExtensionField"
                                      []
                                      [ T ]
                                      EF
                                      "ExtensionPacking";
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.tuple
                                  [
                                    Ty.associated_in_trait
                                      "p3_matrix::Matrix"
                                      []
                                      [
                                        T;
                                        Ty.associated_in_trait
                                          "p3_field::field::Field"
                                          []
                                          []
                                          T
                                          "Packing"
                                      ]
                                      Self
                                      "{{synthetic}}'10";
                                    Ty.apply (Ty.path "&") [] [ EF ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_field::field::ExtensionField"
                                []
                                [ T ]
                                EF
                                "ExtensionPacking";
                              Ty.path "alloc::alloc::Global"
                            ]);
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::ExtensionField"
                                      []
                                      [ T ]
                                      EF
                                      "ExtensionPacking";
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::ExtensionField"
                                      []
                                      [ T ]
                                      EF
                                      "ExtensionPacking";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_field::field::ExtensionField"
                                []
                                [ T ]
                                EF
                                "ExtensionPacking";
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_matrix::Matrix"
                              []
                              [ T; Ty.associated_in_trait "p3_field::field::Field" [] [] T "Packing"
                              ]
                              Self
                              "{{synthetic}}'9";
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.associated_in_trait
                            "p3_matrix::Matrix"
                            []
                            [ T; Ty.associated_in_trait "p3_field::field::Field" [] [] T "Packing" ]
                            Self
                            "{{synthetic}}'9",
                          [],
                          [],
                          "zip",
                          [],
                          [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ EF ] ] ]
                        |),
                        [
                          M.call_closure (|
                            Ty.associated_in_trait
                              "p3_matrix::Matrix"
                              []
                              [ T; Ty.associated_in_trait "p3_field::field::Field" [] [] T "Packing"
                              ]
                              Self
                              "{{synthetic}}'9",
                            M.get_trait_method (|
                              "p3_matrix::Matrix",
                              Self,
                              [],
                              [ T ],
                              "par_padded_horizontally_packed_rows",
                              [],
                              [ Ty.associated_in_trait "p3_field::field::Field" [] [] T "Packing" ]
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |);
                          M.read (| v |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::field::ExtensionField"
                                              []
                                              [ T ]
                                              EF
                                              "ExtensionPacking";
                                            Ty.path "alloc::alloc::Global"
                                          ])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_field::field::ExtensionField"
                                                []
                                                [ T ]
                                                EF
                                                "ExtensionPacking";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          M.get_trait_method (|
                                            "p3_field::field::PrimeCharacteristicRing",
                                            Ty.associated_in_trait
                                              "p3_field::field::ExtensionField"
                                              []
                                              [ T ]
                                              EF
                                              "ExtensionPacking",
                                            [],
                                            [],
                                            "zero_vec",
                                            [],
                                            []
                                          |),
                                          [ M.read (| packed_width |) ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end));
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_field::field::ExtensionField"
                                                    []
                                                    [ T ]
                                                    EF
                                                    "ExtensionPacking";
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.tuple
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_matrix::Matrix"
                                                    []
                                                    [
                                                      T;
                                                      Ty.associated_in_trait
                                                        "p3_field::field::Field"
                                                        []
                                                        []
                                                        T
                                                        "Packing"
                                                    ]
                                                    Self
                                                    "{{synthetic}}'10";
                                                  Ty.apply (Ty.path "&") [] [ EF ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::field::ExtensionField"
                                              []
                                              [ T ]
                                              EF
                                              "ExtensionPacking";
                                            Ty.path "alloc::alloc::Global"
                                          ])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let acc := M.copy (| γ |) in
                                        M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::field::ExtensionField"
                                                            []
                                                            [ T ]
                                                            EF
                                                            "ExtensionPacking";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.tuple
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_matrix::Matrix"
                                                            []
                                                            [
                                                              T;
                                                              Ty.associated_in_trait
                                                                "p3_field::field::Field"
                                                                []
                                                                []
                                                                T
                                                                "Packing"
                                                            ]
                                                            Self
                                                            "{{synthetic}}'10";
                                                          Ty.apply (Ty.path "&") [] [ EF ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::field::ExtensionField"
                                                      []
                                                      [ T ]
                                                      EF
                                                      "ExtensionPacking";
                                                    Ty.path "alloc::alloc::Global"
                                                  ])
                                            ],
                                          M.alloc (| α1 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let row := M.copy (| γ0_0 |) in
                                                let γ0_1 := M.read (| γ0_1 |) in
                                                let scale := M.copy (| γ0_1 |) in
                                                M.read (|
                                                  let~ scale :
                                                      Ty.apply
                                                        (Ty.path "*")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::field::ExtensionField"
                                                            []
                                                            [ T ]
                                                            EF
                                                            "ExtensionPacking"
                                                        ] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_field::field::ExtensionField"
                                                          []
                                                          [ T ]
                                                          EF
                                                          "ExtensionPacking",
                                                        M.get_trait_method (|
                                                          "p3_field::field::BasedVectorSpace",
                                                          Ty.associated_in_trait
                                                            "p3_field::field::ExtensionField"
                                                            []
                                                            [ T ]
                                                            EF
                                                            "ExtensionPacking",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::field::Field"
                                                              []
                                                              []
                                                              T
                                                              "Packing"
                                                          ],
                                                          "from_basis_coefficients_fn",
                                                          [],
                                                          [
                                                            Ty.function
                                                              [ Ty.tuple [ Ty.path "usize" ] ]
                                                              (Ty.associated_in_trait
                                                                "p3_field::field::Field"
                                                                []
                                                                []
                                                                T
                                                                "Packing")
                                                          ]
                                                        |),
                                                        [
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [ Ty.path "usize" ]
                                                                            ]
                                                                            (Ty.associated_in_trait
                                                                              "p3_field::field::Field"
                                                                              []
                                                                              []
                                                                              T
                                                                              "Packing")
                                                                        ],
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let i :=
                                                                              M.copy (| γ |) in
                                                                            M.call_closure (|
                                                                              Ty.associated_in_trait
                                                                                "p3_field::field::Field"
                                                                                []
                                                                                []
                                                                                T
                                                                                "Packing",
                                                                              M.get_trait_method (|
                                                                                "core::convert::From",
                                                                                Ty.associated_in_trait
                                                                                  "p3_field::field::Field"
                                                                                  []
                                                                                  []
                                                                                  T
                                                                                  "Packing",
                                                                                [],
                                                                                [ T ],
                                                                                "from",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  M.SubPointer.get_array_field (|
                                                                                    M.deref (|
                                                                                      M.call_closure (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "slice")
                                                                                              []
                                                                                              [ T ]
                                                                                          ],
                                                                                        M.get_trait_method (|
                                                                                          "p3_field::field::BasedVectorSpace",
                                                                                          EF,
                                                                                          [],
                                                                                          [ T ],
                                                                                          "as_basis_coefficients_slice",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            scale
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |),
                                                                                    M.read (| i |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    |) in
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_field::field::ExtensionField"
                                                                    []
                                                                    [ T ]
                                                                    EF
                                                                    "ExtensionPacking"
                                                                ];
                                                              Ty.associated_in_trait
                                                                "p3_matrix::Matrix"
                                                                []
                                                                [
                                                                  T;
                                                                  Ty.associated_in_trait
                                                                    "p3_field::field::Field"
                                                                    []
                                                                    []
                                                                    T
                                                                    "Packing"
                                                                ]
                                                                Self
                                                                "{{synthetic}}'10"
                                                            ],
                                                          [],
                                                          [],
                                                          "for_each",
                                                          [],
                                                          [
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_field::field::ExtensionField"
                                                                              []
                                                                              [ T ]
                                                                              EF
                                                                              "ExtensionPacking"
                                                                          ];
                                                                        Ty.associated_in_trait
                                                                          "p3_field::field::Field"
                                                                          []
                                                                          []
                                                                          T
                                                                          "Packing"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.tuple [])
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::zip::Zip")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_field::field::ExtensionField"
                                                                      []
                                                                      [ T ]
                                                                      EF
                                                                      "ExtensionPacking"
                                                                  ];
                                                                Ty.associated_in_trait
                                                                  "p3_matrix::Matrix"
                                                                  []
                                                                  [
                                                                    T;
                                                                    Ty.associated_in_trait
                                                                      "p3_field::field::Field"
                                                                      []
                                                                      []
                                                                      T
                                                                      "Packing"
                                                                  ]
                                                                  Self
                                                                  "{{synthetic}}'10"
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_field::field::ExtensionField"
                                                                    []
                                                                    [ T ]
                                                                    EF
                                                                    "ExtensionPacking"
                                                                ],
                                                              [],
                                                              [],
                                                              "zip",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_matrix::Matrix"
                                                                  []
                                                                  [
                                                                    T;
                                                                    Ty.associated_in_trait
                                                                      "p3_field::field::Field"
                                                                      []
                                                                      []
                                                                      T
                                                                      "Packing"
                                                                  ]
                                                                  Self
                                                                  "{{synthetic}}'10"
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_field::field::ExtensionField"
                                                                      []
                                                                      [ T ]
                                                                      EF
                                                                      "ExtensionPacking"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::collect::IntoIterator",
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_field::field::ExtensionField"
                                                                            []
                                                                            [ T ]
                                                                            EF
                                                                            "ExtensionPacking";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "into_iter",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    acc
                                                                  |)
                                                                ]
                                                              |);
                                                              M.read (| row |)
                                                            ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&mut")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_field::field::ExtensionField"
                                                                                            []
                                                                                            [ T ]
                                                                                            EF
                                                                                            "ExtensionPacking"
                                                                                        ];
                                                                                      Ty.associated_in_trait
                                                                                        "p3_field::field::Field"
                                                                                        []
                                                                                        []
                                                                                        T
                                                                                        "Packing"
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.tuple [])
                                                                        ],
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                0
                                                                              |) in
                                                                            let γ0_1 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                1
                                                                              |) in
                                                                            let l :=
                                                                              M.copy (| γ0_0 |) in
                                                                            let r :=
                                                                              M.copy (| γ0_1 |) in
                                                                            M.call_closure (|
                                                                              Ty.tuple [],
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::AddAssign",
                                                                                Ty.associated_in_trait
                                                                                  "p3_field::field::ExtensionField"
                                                                                  []
                                                                                  [ T ]
                                                                                  EF
                                                                                  "ExtensionPacking",
                                                                                [],
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "p3_field::field::ExtensionField"
                                                                                    []
                                                                                    [ T ]
                                                                                    EF
                                                                                    "ExtensionPacking"
                                                                                ],
                                                                                "add_assign",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  M.deref (|
                                                                                    M.read (| l |)
                                                                                  |)
                                                                                |);
                                                                                M.call_closure (|
                                                                                  Ty.associated_in_trait
                                                                                    "p3_field::field::ExtensionField"
                                                                                    []
                                                                                    [ T ]
                                                                                    EF
                                                                                    "ExtensionPacking",
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    Ty.associated_in_trait
                                                                                      "p3_field::field::ExtensionField"
                                                                                      []
                                                                                      [ T ]
                                                                                      EF
                                                                                      "ExtensionPacking",
                                                                                    [],
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "p3_field::field::Field"
                                                                                        []
                                                                                        []
                                                                                        T
                                                                                        "Packing"
                                                                                    ],
                                                                                    "mul",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      scale
                                                                                    |);
                                                                                    M.read (| r |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    |) in
                                                  acc
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end));
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_field::field::ExtensionField"
                                                    []
                                                    [ T ]
                                                    EF
                                                    "ExtensionPacking";
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_field::field::ExtensionField"
                                                    []
                                                    [ T ]
                                                    EF
                                                    "ExtensionPacking";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::field::ExtensionField"
                                              []
                                              [ T ]
                                              EF
                                              "ExtensionPacking";
                                            Ty.path "alloc::alloc::Global"
                                          ])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let acc_l := M.copy (| γ |) in
                                        M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::field::ExtensionField"
                                                            []
                                                            [ T ]
                                                            EF
                                                            "ExtensionPacking";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::field::ExtensionField"
                                                            []
                                                            [ T ]
                                                            EF
                                                            "ExtensionPacking";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::field::ExtensionField"
                                                      []
                                                      [ T ]
                                                      EF
                                                      "ExtensionPacking";
                                                    Ty.path "alloc::alloc::Global"
                                                  ])
                                            ],
                                          M.alloc (| α1 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let acc_r := M.copy (| γ |) in
                                                M.read (|
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_field::field::ExtensionField"
                                                                    []
                                                                    [ T ]
                                                                    EF
                                                                    "ExtensionPacking"
                                                                ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::vec::into_iter::IntoIter")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_field::field::ExtensionField"
                                                                    []
                                                                    [ T ]
                                                                    EF
                                                                    "ExtensionPacking";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          [],
                                                          [],
                                                          "for_each",
                                                          [],
                                                          [
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_field::field::ExtensionField"
                                                                              []
                                                                              [ T ]
                                                                              EF
                                                                              "ExtensionPacking"
                                                                          ];
                                                                        Ty.associated_in_trait
                                                                          "p3_field::field::ExtensionField"
                                                                          []
                                                                          [ T ]
                                                                          EF
                                                                          "ExtensionPacking"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.tuple [])
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::zip::Zip")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_field::field::ExtensionField"
                                                                      []
                                                                      [ T ]
                                                                      EF
                                                                      "ExtensionPacking"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::vec::into_iter::IntoIter")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_field::field::ExtensionField"
                                                                      []
                                                                      [ T ]
                                                                      EF
                                                                      "ExtensionPacking";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_field::field::ExtensionField"
                                                                    []
                                                                    [ T ]
                                                                    EF
                                                                    "ExtensionPacking"
                                                                ],
                                                              [],
                                                              [],
                                                              "zip",
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_field::field::ExtensionField"
                                                                      []
                                                                      [ T ]
                                                                      EF
                                                                      "ExtensionPacking";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_field::field::ExtensionField"
                                                                      []
                                                                      [ T ]
                                                                      EF
                                                                      "ExtensionPacking"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::collect::IntoIterator",
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_field::field::ExtensionField"
                                                                            []
                                                                            [ T ]
                                                                            EF
                                                                            "ExtensionPacking";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "into_iter",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    acc_l
                                                                  |)
                                                                ]
                                                              |);
                                                              M.read (| acc_r |)
                                                            ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&mut")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_field::field::ExtensionField"
                                                                                            []
                                                                                            [ T ]
                                                                                            EF
                                                                                            "ExtensionPacking"
                                                                                        ];
                                                                                      Ty.associated_in_trait
                                                                                        "p3_field::field::ExtensionField"
                                                                                        []
                                                                                        [ T ]
                                                                                        EF
                                                                                        "ExtensionPacking"
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.tuple [])
                                                                        ],
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                0
                                                                              |) in
                                                                            let γ0_1 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                1
                                                                              |) in
                                                                            let l :=
                                                                              M.copy (| γ0_0 |) in
                                                                            let r :=
                                                                              M.copy (| γ0_1 |) in
                                                                            M.call_closure (|
                                                                              Ty.tuple [],
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::AddAssign",
                                                                                Ty.associated_in_trait
                                                                                  "p3_field::field::ExtensionField"
                                                                                  []
                                                                                  [ T ]
                                                                                  EF
                                                                                  "ExtensionPacking",
                                                                                [],
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "p3_field::field::ExtensionField"
                                                                                    []
                                                                                    [ T ]
                                                                                    EF
                                                                                    "ExtensionPacking"
                                                                                ],
                                                                                "add_assign",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  M.deref (|
                                                                                    M.read (| l |)
                                                                                  |)
                                                                                |);
                                                                                M.read (| r |)
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    |) in
                                                  acc_l
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ EF; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::take::Take")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_field::field::ExtensionField"
                                  []
                                  [ T ]
                                  EF
                                  "ExtensionPacking";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                                Ty.function [ Ty.tuple [ Ty.path "usize" ] ] EF
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::ExtensionField"
                                      []
                                      [ T ]
                                      EF
                                      "ExtensionPacking"
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ];
                                  Ty.function [ Ty.tuple [ Ty.path "usize" ] ] EF
                                ])
                          ]
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ EF; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::take::Take")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_field::field::ExtensionField"
                                    []
                                    [ T ]
                                    EF
                                    "ExtensionPacking";
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ];
                                  Ty.function [ Ty.tuple [ Ty.path "usize" ] ] EF
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.associated_in_trait
                                        "p3_field::field::ExtensionField"
                                        []
                                        [ T ]
                                        EF
                                        "ExtensionPacking"
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ];
                                    Ty.function [ Ty.tuple [ Ty.path "usize" ] ] EF
                                  ])
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_field::field::ExtensionField"
                                  []
                                  [ T ]
                                  EF
                                  "ExtensionPacking";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                                Ty.function [ Ty.tuple [ Ty.path "usize" ] ] EF
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::ExtensionField"
                                      []
                                      [ T ]
                                      EF
                                      "ExtensionPacking"
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ];
                                  Ty.function [ Ty.tuple [ Ty.path "usize" ] ] EF
                                ])
                          ],
                        [],
                        [],
                        "take",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_field::field::ExtensionField"
                                    []
                                    [ T ]
                                    EF
                                    "ExtensionPacking";
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ];
                                  Ty.function [ Ty.tuple [ Ty.path "usize" ] ] EF
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.associated_in_trait
                                        "p3_field::field::ExtensionField"
                                        []
                                        [ T ]
                                        EF
                                        "ExtensionPacking"
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ];
                                    Ty.function [ Ty.tuple [ Ty.path "usize" ] ] EF
                                  ])
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_field::field::ExtensionField"
                                  []
                                  [ T ]
                                  EF
                                  "ExtensionPacking";
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "flat_map",
                            [],
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ];
                                  Ty.function [ Ty.tuple [ Ty.path "usize" ] ] EF
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.associated_in_trait
                                        "p3_field::field::ExtensionField"
                                        []
                                        [ T ]
                                        EF
                                        "ExtensionPacking"
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ];
                                    Ty.function [ Ty.tuple [ Ty.path "usize" ] ] EF
                                  ])
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_field::field::ExtensionField"
                                    []
                                    [ T ]
                                    EF
                                    "ExtensionPacking";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::ExtensionField"
                                      []
                                      [ T ]
                                      EF
                                      "ExtensionPacking";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [ M.read (| packed_result |) ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::field::ExtensionField"
                                                      []
                                                      [ T ]
                                                      EF
                                                      "ExtensionPacking"
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::iter::adapters::map::Map")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ];
                                                  Ty.function [ Ty.tuple [ Ty.path "usize" ] ] EF
                                                ])
                                          ],
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let p := M.copy (| γ |) in
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::Range")
                                                      []
                                                      [ Ty.path "usize" ];
                                                    Ty.function [ Ty.tuple [ Ty.path "usize" ] ] EF
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  [],
                                                  [],
                                                  "map",
                                                  [],
                                                  [
                                                    EF;
                                                    Ty.function [ Ty.tuple [ Ty.path "usize" ] ] EF
                                                  ]
                                                |),
                                                [
                                                  Value.StructRecord
                                                    "core::ops::range::Range"
                                                    [
                                                      ("start", Value.Integer IntegerKind.Usize 0);
                                                      ("end_",
                                                        M.read (|
                                                          get_constant (|
                                                            "p3_field::packed::PackedValue::WIDTH",
                                                            Ty.path "usize"
                                                          |)
                                                        |))
                                                    ];
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.function
                                                                    [ Ty.tuple [ Ty.path "usize" ] ]
                                                                    EF
                                                                ],
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let i := M.copy (| γ |) in
                                                                    M.call_closure (|
                                                                      EF,
                                                                      M.get_trait_method (|
                                                                        "p3_field::field::BasedVectorSpace",
                                                                        EF,
                                                                        [],
                                                                        [ T ],
                                                                        "from_basis_coefficients_fn",
                                                                        [],
                                                                        [
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [ Ty.path "usize" ]
                                                                            ]
                                                                            T
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                ltac:(M.monadic
                                                                                  (M.match_operator (|
                                                                                    Ty.apply
                                                                                      (Ty.path "*")
                                                                                      []
                                                                                      [
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ]
                                                                                          ]
                                                                                          T
                                                                                      ],
                                                                                    M.alloc (|
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let j :=
                                                                                            M.copy (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.read (|
                                                                                            M.SubPointer.get_array_field (|
                                                                                              M.deref (|
                                                                                                M.call_closure (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "slice")
                                                                                                        []
                                                                                                        [
                                                                                                          T
                                                                                                        ]
                                                                                                    ],
                                                                                                  M.get_trait_method (|
                                                                                                    "p3_field::packed::PackedValue",
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_field::field::Field"
                                                                                                      []
                                                                                                      []
                                                                                                      T
                                                                                                      "Packing",
                                                                                                    [],
                                                                                                    [],
                                                                                                    "as_slice",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.SubPointer.get_array_field (|
                                                                                                        M.deref (|
                                                                                                          M.call_closure (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "slice")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.associated_in_trait
                                                                                                                      "p3_field::field::Field"
                                                                                                                      []
                                                                                                                      []
                                                                                                                      T
                                                                                                                      "Packing"
                                                                                                                  ]
                                                                                                              ],
                                                                                                            M.get_trait_method (|
                                                                                                              "p3_field::field::BasedVectorSpace",
                                                                                                              Ty.associated_in_trait
                                                                                                                "p3_field::field::ExtensionField"
                                                                                                                []
                                                                                                                [
                                                                                                                  T
                                                                                                                ]
                                                                                                                EF
                                                                                                                "ExtensionPacking",
                                                                                                              [],
                                                                                                              [
                                                                                                                Ty.associated_in_trait
                                                                                                                  "p3_field::field::Field"
                                                                                                                  []
                                                                                                                  []
                                                                                                                  T
                                                                                                                  "Packing"
                                                                                                              ],
                                                                                                              "as_basis_coefficients_slice",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                p
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        |),
                                                                                                        M.read (|
                                                                                                          j
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |),
                                                                                              M.read (|
                                                                                                i
                                                                                              |)
                                                                                            |)
                                                                                          |)))
                                                                                    ]
                                                                                  |)))
                                                                              | _ =>
                                                                                M.impossible
                                                                                  "wrong number of arguments"
                                                                              end))
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)))
                                                        | _ =>
                                                          M.impossible "wrong number of arguments"
                                                        end))
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_trait_method (|
                            "p3_matrix::Matrix",
                            Self,
                            [],
                            [ T ],
                            "width",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      ]
                    |)
                  ]
                |)
              |)
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_columnwise_dot_product :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_matrix::Matrix" "columnwise_dot_product" (columnwise_dot_product T).
  Definition rowwise_packed_dot_product
      (T Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ EF ], [ self; vec ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let vec := M.alloc (| vec |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          UnOp.not (|
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.ge,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_field::field::ExtensionField"
                                          []
                                          [ T ]
                                          EF
                                          "ExtensionPacking"
                                      ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| vec |) |) |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.path "usize",
                                    "div_ceil",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_trait_method (|
                                        "p3_matrix::Matrix",
                                        Self,
                                        [],
                                        [ T ],
                                        "width",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |);
                                    M.read (|
                                      get_constant (|
                                        "p3_field::packed::PackedValue::WIDTH",
                                        Ty.path "usize"
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic", [], [] |),
                          [
                            mk_str (|
                              "assertion failed: vec.len() >= self.width().div_ceil(T::Packing::WIDTH)"
                            |)
                          ]
                        |)
                      |)
                    |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.associated_in_trait
                    "p3_matrix::Matrix"
                    []
                    [ T; Ty.associated_in_trait "p3_field::field::Field" [] [] T "Packing" ]
                    Self
                    "{{synthetic}}'9";
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.associated_in_trait
                            "p3_matrix::Matrix"
                            []
                            [ T; Ty.associated_in_trait "p3_field::field::Field" [] [] T "Packing" ]
                            Self
                            "{{synthetic}}'10"
                        ]
                    ]
                    EF
                ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.associated_in_trait
                  "p3_matrix::Matrix"
                  []
                  [ T; Ty.associated_in_trait "p3_field::field::Field" [] [] T "Packing" ]
                  Self
                  "{{synthetic}}'9",
                [],
                [],
                "map",
                [],
                [
                  EF;
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.associated_in_trait
                            "p3_matrix::Matrix"
                            []
                            [ T; Ty.associated_in_trait "p3_field::field::Field" [] [] T "Packing" ]
                            Self
                            "{{synthetic}}'10"
                        ]
                    ]
                    EF
                ]
              |),
              [
                M.call_closure (|
                  Ty.associated_in_trait
                    "p3_matrix::Matrix"
                    []
                    [ T; Ty.associated_in_trait "p3_field::field::Field" [] [] T "Packing" ]
                    Self
                    "{{synthetic}}'9",
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Self,
                    [],
                    [ T ],
                    "par_padded_horizontally_packed_rows",
                    [],
                    [ Ty.associated_in_trait "p3_field::field::Field" [] [] T "Packing" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply
                              (Ty.path "*")
                              []
                              [
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.associated_in_trait
                                          "p3_matrix::Matrix"
                                          []
                                          [
                                            T;
                                            Ty.associated_in_trait
                                              "p3_field::field::Field"
                                              []
                                              []
                                              T
                                              "Packing"
                                          ]
                                          Self
                                          "{{synthetic}}'10"
                                      ]
                                  ]
                                  EF
                              ],
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let row_packed := M.copy (| γ |) in
                                  M.read (|
                                    let~ packed_sum_of_packed :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::field::ExtensionField"
                                              []
                                              [ T ]
                                              EF
                                              "ExtensionPacking"
                                          ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_field::field::ExtensionField"
                                            []
                                            [ T ]
                                            EF
                                            "ExtensionPacking",
                                          M.get_function (|
                                            "p3_field::helpers::dot_product",
                                            [],
                                            [
                                              Ty.associated_in_trait
                                                "p3_field::field::ExtensionField"
                                                []
                                                [ T ]
                                                EF
                                                "ExtensionPacking";
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::copied::Copied")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_field::field::ExtensionField"
                                                        []
                                                        [ T ]
                                                        EF
                                                        "ExtensionPacking"
                                                    ]
                                                ];
                                              Ty.associated_in_trait
                                                "p3_matrix::Matrix"
                                                []
                                                [
                                                  T;
                                                  Ty.associated_in_trait
                                                    "p3_field::field::Field"
                                                    []
                                                    []
                                                    T
                                                    "Packing"
                                                ]
                                                Self
                                                "{{synthetic}}'10"
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::copied::Copied")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_field::field::ExtensionField"
                                                        []
                                                        [ T ]
                                                        EF
                                                        "ExtensionPacking"
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::field::ExtensionField"
                                                      []
                                                      [ T ]
                                                      EF
                                                      "ExtensionPacking"
                                                  ],
                                                [],
                                                [],
                                                "copied",
                                                [],
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_field::field::ExtensionField"
                                                    []
                                                    [ T ]
                                                    EF
                                                    "ExtensionPacking"
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_field::field::ExtensionField"
                                                        []
                                                        [ T ]
                                                        EF
                                                        "ExtensionPacking"
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_field::field::ExtensionField"
                                                          []
                                                          [ T ]
                                                          EF
                                                          "ExtensionPacking"
                                                      ],
                                                    "iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| vec |) |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |);
                                            M.read (| row_packed |)
                                          ]
                                        |)
                                      |) in
                                    let~ sum_of_packed : Ty.apply (Ty.path "*") [] [ EF ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          EF,
                                          M.get_trait_method (|
                                            "p3_field::field::BasedVectorSpace",
                                            EF,
                                            [],
                                            [ T ],
                                            "from_basis_coefficients_fn",
                                            [],
                                            [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ]
                                          |),
                                          [
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    ltac:(M.monadic
                                                      (M.match_operator (|
                                                        Ty.apply
                                                          (Ty.path "*")
                                                          []
                                                          [
                                                            Ty.function
                                                              [ Ty.tuple [ Ty.path "usize" ] ]
                                                              T
                                                          ],
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let i := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                T,
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::copied::Copied")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ T ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "sum",
                                                                  [],
                                                                  [ T ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::copied::Copied")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [ T ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ T ],
                                                                      [],
                                                                      [],
                                                                      "copied",
                                                                      [],
                                                                      [ T ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [ T ],
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [ T ],
                                                                          "iter",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      []
                                                                                      [ T ]
                                                                                  ],
                                                                                M.get_trait_method (|
                                                                                  "p3_field::packed::PackedValue",
                                                                                  Ty.associated_in_trait
                                                                                    "p3_field::field::Field"
                                                                                    []
                                                                                    []
                                                                                    T
                                                                                    "Packing",
                                                                                  [],
                                                                                  [],
                                                                                  "as_slice",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.SubPointer.get_array_field (|
                                                                                      M.deref (|
                                                                                        M.call_closure (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "slice")
                                                                                                []
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_field::field::Field"
                                                                                                    []
                                                                                                    []
                                                                                                    T
                                                                                                    "Packing"
                                                                                                ]
                                                                                            ],
                                                                                          M.get_trait_method (|
                                                                                            "p3_field::field::BasedVectorSpace",
                                                                                            Ty.associated_in_trait
                                                                                              "p3_field::field::ExtensionField"
                                                                                              []
                                                                                              [ T ]
                                                                                              EF
                                                                                              "ExtensionPacking",
                                                                                            [],
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "p3_field::field::Field"
                                                                                                []
                                                                                                []
                                                                                                T
                                                                                                "Packing"
                                                                                            ],
                                                                                            "as_basis_coefficients_slice",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              packed_sum_of_packed
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |),
                                                                                      M.read (| i |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)))
                                                  | _ => M.impossible "wrong number of arguments"
                                                  end))
                                          ]
                                        |)
                                      |) in
                                    sum_of_packed
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_rowwise_packed_dot_product :
    forall (T : Ty.t),
    M.IsProvidedMethod
      "p3_matrix::Matrix"
      "rowwise_packed_dot_product"
      (rowwise_packed_dot_product T).
End Matrix.
