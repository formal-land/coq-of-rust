(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module util.
  (* #[instrument(level = "debug", skip_all)] *)
  Definition reverse_matrix_index_bits (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; _ as S ], [ mat ] =>
      ltac:(M.monadic
        (let mat := M.alloc (| mat |) in
        M.catch_return (Ty.tuple []) (|
          ltac:(M.monadic
            (M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] := M.alloc (| Value.Tuple [] |) in
              let __tracing_attr_span := M.copy (| Value.DeclaredButUndefined |) in
              let __tracing_attr_guard := M.copy (| Value.DeclaredButUndefined |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.path "tracing_core::metadata::Level",
                                      [],
                                      [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                      "le",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_associated_constant (|
                                          Ty.path "tracing_core::metadata::Level",
                                          "DEBUG",
                                          Ty.path "tracing_core::metadata::Level"
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "tracing::level_filters::STATIC_MAX_LEVEL",
                                          Ty.path "tracing_core::metadata::LevelFilter"
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "DEBUG",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing_core::metadata::LevelFilter",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                "current",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic (Value.Bool false))
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_span,
                              M.read (|
                                let~ interest :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [ Ty.path "tracing_core::subscriber::Interest" ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "never",
                                        [],
                                        []
                                      |),
                                      []
                                    |)
                                  |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.path "tracing::span::Span" ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              LogicalOp.and (|
                                                LogicalOp.and (|
                                                  LogicalOp.and (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialOrd",
                                                        Ty.path "tracing_core::metadata::Level",
                                                        [],
                                                        [
                                                          Ty.path
                                                            "tracing_core::metadata::LevelFilter"
                                                        ],
                                                        "le",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_associated_constant (|
                                                            Ty.path "tracing_core::metadata::Level",
                                                            "DEBUG",
                                                            Ty.path "tracing_core::metadata::Level"
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_constant (|
                                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          |)
                                                        |)
                                                      ]
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "tracing_core::metadata::Level",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          ],
                                                          "le",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_associated_constant (|
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              "DEBUG",
                                                              Ty.path
                                                                "tracing_core::metadata::Level"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  "current",
                                                                  [],
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.alloc (|
                                                          M.write (|
                                                            interest,
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                "interest",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "p3_matrix::util::reverse_matrix_index_bits::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |) in
                                                      M.alloc (|
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              "is_never",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                interest
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)))
                                                |),
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_function (|
                                                      "tracing::__macro_support::__is_enabled",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "p3_matrix::util::reverse_matrix_index_bits::__CALLSITE",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (| interest |)
                                                    ]
                                                  |)))
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ meta :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ]
                                              ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "tracing_core::metadata::Metadata" ],
                                              M.get_trait_method (|
                                                "tracing_core::callsite::Callsite",
                                                Ty.path "tracing_core::callsite::DefaultCallsite",
                                                [],
                                                [],
                                                "metadata",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.read (|
                                                      get_constant (|
                                                        "p3_matrix::util::reverse_matrix_index_bits::__CALLSITE",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite"
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "tracing::span::Span",
                                            M.get_associated_function (|
                                              Ty.path "tracing::span::Span",
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| meta |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "tracing_core::field::ValueSet",
                                                        M.get_associated_function (|
                                                          Ty.path "tracing_core::field::FieldSet",
                                                          "value_set",
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 0 ]
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::Field"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("tracing_core::field::Value::Trait",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::FieldSet"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata",
                                                                  "fields",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| meta |) |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (| Value.Array [] |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let~ span :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "tracing::span::Span" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing::span::Span",
                                              M.get_function (|
                                                "tracing::__macro_support::__disabled_span",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::metadata::Metadata"
                                                        ],
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        [],
                                                        "metadata",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (|
                                                              get_constant (|
                                                                "p3_matrix::util::reverse_matrix_index_bits::__CALLSITE",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::callsite::DefaultCallsite"
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (| Value.Tuple [] |) in
                                        span))
                                  ]
                                |)
                              |)
                            |)
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_guard,
                              M.call_closure (|
                                Ty.path "tracing::span::Entered",
                                M.get_associated_function (|
                                  Ty.path "tracing::span::Span",
                                  "enter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool false |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              let~ __tracing_attr_fake_return :
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.loop (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                        ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      |)
                                    |)
                                  |)
                                |) in
                              M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ w : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "p3_matrix::Matrix",
                      Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ F; S ],
                      [],
                      [ F ],
                      "width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| mat |) |) |) ]
                  |)
                |) in
              let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "p3_matrix::Matrix",
                      Ty.apply (Ty.path "p3_matrix::dense::DenseMatrix") [] [ F; S ],
                      [],
                      [ F ],
                      "height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| mat |) |) |) ]
                  |)
                |) in
              let~ log_h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                    [ M.read (| h |) ]
                  |)
                |) in
              let~ values : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.cast
                    (Ty.path "usize")
                    (M.call_closure (|
                      Ty.apply (Ty.path "*mut") [] [ F ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ F ],
                        "as_mut_ptr",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                              M.get_trait_method (|
                                "core::borrow::BorrowMut",
                                S,
                                [],
                                [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                "borrow_mut",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| mat |) |),
                                    "p3_matrix::dense::DenseMatrix",
                                    "values"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |))
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "for_each",
                      [],
                      [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.tuple []) ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "p3_maybe_rayon::serial::IntoParallelIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "into_par_iter",
                          [],
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", M.read (| h |))
                            ]
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.tuple []) ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let i := M.copy (| γ |) in
                                        M.read (|
                                          let~ values :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.apply (Ty.path "*mut") [] [ F ] ] :=
                                            M.alloc (|
                                              M.cast
                                                (Ty.apply (Ty.path "*mut") [] [ F ])
                                                (M.read (| values |))
                                            |) in
                                          let~ j : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_function (|
                                                  "p3_util::reverse_bits_len",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| i |); M.read (| log_h |) ]
                                              |)
                                            |) in
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.lt,
                                                          [ M.read (| i |); M.read (| j |) ]
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_function (|
                                                          "p3_matrix::util::swap_rows_raw",
                                                          [],
                                                          [ F ]
                                                        |),
                                                        [
                                                          M.read (| values |);
                                                          M.read (| w |);
                                                          M.read (| i |);
                                                          M.read (| j |)
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_reverse_matrix_index_bits :
    M.IsFunction.C "p3_matrix::util::reverse_matrix_index_bits" reverse_matrix_index_bits.
  Admitted.
  Global Typeclasses Opaque reverse_matrix_index_bits.
  
  (*
  pub fn swap_rows<F: Clone + Send + Sync>(mat: &mut RowMajorMatrix<F>, i: usize, j: usize) {
      let w = mat.width();
      let (upper, lower) = mat.values.split_at_mut(j * w);
      let row_i = &mut upper[i * w..(i + 1) * w];
      let row_j = &mut lower[..w];
      row_i.swap_with_slice(row_j);
  }
  *)
  Definition swap_rows (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ mat; i; j ] =>
      ltac:(M.monadic
        (let mat := M.alloc (| mat |) in
        let i := M.alloc (| i |) in
        let j := M.alloc (| j |) in
        M.read (|
          let~ w : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "p3_matrix::Matrix",
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  [],
                  [ F ],
                  "width",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| mat |) |) |) ]
              |)
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
            M.alloc (|
              M.call_closure (|
                Ty.tuple
                  [
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ];
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]
                  ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "slice") [] [ F ],
                  "split_at_mut",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                        M.get_trait_method (|
                          "core::ops::deref::DerefMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| mat |) |),
                              "p3_matrix::dense::DenseMatrix",
                              "values"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [ M.read (| j |); M.read (| w |) ]
                  |)
                ]
              |)
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                  let upper := M.copy (| γ0_0 |) in
                  let lower := M.copy (| γ0_1 |) in
                  let~ row_i :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [ Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ] :=
                    M.alloc (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.get_trait_method (|
                              "core::ops::index::IndexMut",
                              Ty.apply (Ty.path "slice") [] [ F ],
                              [],
                              [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ]
                              ],
                              "index_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| upper |) |) |);
                              Value.StructRecord
                                "core::ops::range::Range"
                                [
                                  ("start",
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.mul,
                                      [ M.read (| i |); M.read (| w |) ]
                                    |));
                                  ("end_",
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.mul,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [ M.read (| i |); Value.Integer IntegerKind.Usize 1 ]
                                        |);
                                        M.read (| w |)
                                      ]
                                    |))
                                ]
                            ]
                          |)
                        |)
                      |)
                    |) in
                  let~ row_j :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [ Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ] :=
                    M.alloc (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.get_trait_method (|
                              "core::ops::index::IndexMut",
                              Ty.apply (Ty.path "slice") [] [ F ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeTo")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                              "index_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| lower |) |) |);
                              Value.StructRecord
                                "core::ops::range::RangeTo"
                                [ ("end_", M.read (| w |)) ]
                            ]
                          |)
                        |)
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ F ],
                          "swap_with_slice",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_i |) |) |);
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_j |) |) |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_swap_rows :
    M.IsFunction.C "p3_matrix::util::swap_rows" swap_rows.
  Admitted.
  Global Typeclasses Opaque swap_rows.
  
  (*
  pub(crate) unsafe fn swap_rows_raw<F>(mat: *mut F, w: usize, i: usize, j: usize) {
      unsafe {
          let row_i = core::slice::from_raw_parts_mut(mat.add(i * w), w);
          let row_j = core::slice::from_raw_parts_mut(mat.add(j * w), w);
          row_i.swap_with_slice(row_j);
      }
  }
  *)
  Definition swap_rows_raw (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ mat; w; i; j ] =>
      ltac:(M.monadic
        (let mat := M.alloc (| mat |) in
        let w := M.alloc (| w |) in
        let i := M.alloc (| i |) in
        let j := M.alloc (| j |) in
        M.read (|
          let~ row_i :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                M.get_function (| "core::slice::raw::from_raw_parts_mut", [], [ F ] |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "*mut") [] [ F ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "*mut") [] [ F ],
                      "add",
                      [],
                      []
                    |),
                    [
                      M.read (| mat |);
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.mul,
                        [ M.read (| i |); M.read (| w |) ]
                      |)
                    ]
                  |);
                  M.read (| w |)
                ]
              |)
            |) in
          let~ row_j :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                M.get_function (| "core::slice::raw::from_raw_parts_mut", [], [ F ] |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "*mut") [] [ F ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "*mut") [] [ F ],
                      "add",
                      [],
                      []
                    |),
                    [
                      M.read (| mat |);
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.mul,
                        [ M.read (| j |); M.read (| w |) ]
                      |)
                    ]
                  |);
                  M.read (| w |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_associated_function (|
                  Ty.apply (Ty.path "slice") [] [ F ],
                  "swap_with_slice",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_i |) |) |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_j |) |) |)
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_swap_rows_raw :
    M.IsFunction.C "p3_matrix::util::swap_rows_raw" swap_rows_raw.
  Admitted.
  Global Typeclasses Opaque swap_rows_raw.
End util.
