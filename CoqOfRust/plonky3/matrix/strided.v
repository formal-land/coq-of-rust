(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module strided.
  (* StructRecord
    {
      name := "VerticallyStridedRowIndexMap";
      const_params := [];
      ty_params := [];
      fields :=
        [ ("height", Ty.path "usize"); ("stride", Ty.path "usize"); ("offset", Ty.path "usize") ];
    } *)
  
  Module Impl_core_fmt_Debug_for_p3_matrix_strided_VerticallyStridedRowIndexMap.
    Definition Self : Ty.t := Ty.path "p3_matrix::strided::VerticallyStridedRowIndexMap".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| mk_str (| "VerticallyStridedRowIndexMap" |) |)
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "height" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_matrix::strided::VerticallyStridedRowIndexMap",
                        "height"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "stride" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_matrix::strided::VerticallyStridedRowIndexMap",
                        "stride"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "offset" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_matrix::strided::VerticallyStridedRowIndexMap",
                            "offset"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_p3_matrix_strided_VerticallyStridedRowIndexMap.
  
  Axiom VerticallyStridedMatrixView :
    forall (Inner : Ty.t),
    (Ty.apply (Ty.path "p3_matrix::strided::VerticallyStridedMatrixView") [] [ Inner ]) =
      (Ty.apply
        (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
        []
        [ Ty.path "p3_matrix::strided::VerticallyStridedRowIndexMap"; Inner ]).
  
  Module Impl_p3_matrix_strided_VerticallyStridedRowIndexMap.
    Definition Self : Ty.t := Ty.path "p3_matrix::strided::VerticallyStridedRowIndexMap".
    
    (*
        pub fn new_view<T: Send + Sync, Inner: Matrix<T>>(
            inner: Inner,
            stride: usize,
            offset: usize,
        ) -> VerticallyStridedMatrixView<Inner> {
            let h = inner.height();
            let full_strides = h / stride;
            let remainder = h % stride;
            let final_stride = offset < remainder;
            let height = full_strides + final_stride as usize;
            RowIndexMappedView {
                index_map: Self {
                    height,
                    stride,
                    offset,
                },
                inner,
            }
        }
    *)
    Definition new_view (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T; Inner ], [ inner; stride; offset ] =>
        ltac:(M.monadic
          (let inner := M.alloc (| inner |) in
          let stride := M.alloc (| stride |) in
          let offset := M.alloc (| offset |) in
          M.read (|
            let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (| "p3_matrix::Matrix", Inner, [], [ T ], "height", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, inner |) ]
                |)
              |) in
            let~ full_strides : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.div,
                  [ M.read (| h |); M.read (| stride |) ]
                |)
              |) in
            let~ remainder : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.rem,
                  [ M.read (| h |); M.read (| stride |) ]
                |)
              |) in
            let~ final_stride : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "bool",
                  BinOp.lt,
                  [ M.read (| offset |); M.read (| remainder |) ]
                |)
              |) in
            let~ height : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.add,
                  [ M.read (| full_strides |); M.cast (Ty.path "usize") (M.read (| final_stride |))
                  ]
                |)
              |) in
            M.alloc (|
              Value.StructRecord
                "p3_matrix::row_index_mapped::RowIndexMappedView"
                []
                [ Ty.path "p3_matrix::strided::VerticallyStridedRowIndexMap"; Inner ]
                [
                  ("index_map",
                    Value.StructRecord
                      "p3_matrix::strided::VerticallyStridedRowIndexMap"
                      []
                      []
                      [
                        ("height", M.read (| height |));
                        ("stride", M.read (| stride |));
                        ("offset", M.read (| offset |))
                      ]);
                  ("inner", M.read (| inner |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_view : M.IsAssociatedFunction.C Self "new_view" new_view.
    Admitted.
    Global Typeclasses Opaque new_view.
  End Impl_p3_matrix_strided_VerticallyStridedRowIndexMap.
  
  Module Impl_p3_matrix_row_index_mapped_RowIndexMap_for_p3_matrix_strided_VerticallyStridedRowIndexMap.
    Definition Self : Ty.t := Ty.path "p3_matrix::strided::VerticallyStridedRowIndexMap".
    
    (*
        fn height(&self) -> usize {
            self.height
        }
    *)
    Definition height (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| self |) |),
              "p3_matrix::strided::VerticallyStridedRowIndexMap",
              "height"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn map_row_index(&self, r: usize) -> usize {
            r * self.stride + self.offset
        }
    *)
    Definition map_row_index (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.call_closure (|
            Ty.path "usize",
            BinOp.Wrap.add,
            [
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.mul,
                [
                  M.read (| r |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_matrix::strided::VerticallyStridedRowIndexMap",
                      "stride"
                    |)
                  |)
                ]
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_matrix::strided::VerticallyStridedRowIndexMap",
                  "offset"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_matrix::row_index_mapped::RowIndexMap"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [
          ("height", InstanceField.Method height);
          ("map_row_index", InstanceField.Method map_row_index)
        ].
  End Impl_p3_matrix_row_index_mapped_RowIndexMap_for_p3_matrix_strided_VerticallyStridedRowIndexMap.
End strided.
