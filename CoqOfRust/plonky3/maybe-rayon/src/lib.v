(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module prelude.
  (* Trait *)
  (* Empty module 'SharedExt' *)
  
  Module Impl_p3_maybe_rayon_prelude_SharedExt_where_core_iter_traits_iterator_Iterator_I_for_I.
    Definition Self (I : Ty.t) : Ty.t := I.
    
    (*
            fn par_fold_reduce<Acc, Id, F, R>(self, identity: Id, fold_op: F, _reduce_op: R) -> Acc
            where
                Acc: Send,
                Id: Fn() -> Acc + Sync + Send,
                F: Fn(Acc, Self::Item) -> Acc + Sync + Send,
                R: Fn(Acc, Acc) -> Acc + Sync + Send,
            {
                self.fold(identity(), fold_op)
            }
    *)
    Definition par_fold_reduce
        (I : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self I in
      match ε, τ, α with
      | [], [ Acc; Id; F; R ], [ self; identity; fold_op; _reduce_op ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let identity := M.alloc (| identity |) in
          let fold_op := M.alloc (| fold_op |) in
          let _reduce_op := M.alloc (| _reduce_op |) in
          M.call_closure (|
            Acc,
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              I,
              [],
              [],
              "fold",
              [],
              [ Acc; F ]
            |),
            [
              M.read (| self |);
              M.call_closure (|
                Acc,
                M.get_trait_method (|
                  "core::ops::function::Fn",
                  Id,
                  [],
                  [ Ty.tuple [] ],
                  "call",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, identity |); Value.Tuple [] ]
              |);
              M.read (| fold_op |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (I : Ty.t),
      M.IsTraitInstance
        "p3_maybe_rayon::prelude::SharedExt"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self I)
        (* Instance *) [ ("par_fold_reduce", InstanceField.Method (par_fold_reduce I)) ].
  End Impl_p3_maybe_rayon_prelude_SharedExt_where_core_iter_traits_iterator_Iterator_I_for_I.
End prelude.
