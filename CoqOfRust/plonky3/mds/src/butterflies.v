(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module butterflies.
  (*
  pub(crate) fn dit_butterfly<F: Field, A: Algebra<F>, const N: usize>(
      values: &mut [A; N],
      idx_1: usize,
      idx_2: usize,
      twiddle: F,
  ) {
      let val_1 = values[idx_1].clone();
      let val_2 = values[idx_2].clone() * twiddle;
      values[idx_1] = val_1.clone() + val_2.clone();
      values[idx_2] = val_1 - val_2;
  }
  *)
  Definition dit_butterfly (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ F; A ], [ values; idx_1; idx_2; twiddle ] =>
      ltac:(M.monadic
        (let values := M.alloc (| values |) in
        let idx_1 := M.alloc (| idx_1 |) in
        let idx_2 := M.alloc (| idx_2 |) in
        let twiddle := M.alloc (| twiddle |) in
        M.read (|
          let~ val_1 : Ty.apply (Ty.path "*") [] [ A ] :=
            M.alloc (|
              M.call_closure (|
                A,
                M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| values |) |),
                      M.read (| idx_1 |)
                    |)
                  |)
                ]
              |)
            |) in
          let~ val_2 : Ty.apply (Ty.path "*") [] [ A ] :=
            M.alloc (|
              M.call_closure (|
                A,
                M.get_trait_method (| "core::ops::arith::Mul", A, [], [ F ], "mul", [], [] |),
                [
                  M.call_closure (|
                    A,
                    M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| values |) |),
                          M.read (| idx_2 |)
                        |)
                      |)
                    ]
                  |);
                  M.read (| twiddle |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| values |) |),
                  M.read (| idx_1 |)
                |),
                M.call_closure (|
                  A,
                  M.get_trait_method (| "core::ops::arith::Add", A, [], [ A ], "add", [], [] |),
                  [
                    M.call_closure (|
                      A,
                      M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, val_1 |) ]
                    |);
                    M.call_closure (|
                      A,
                      M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, val_2 |) ]
                    |)
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| values |) |),
                  M.read (| idx_2 |)
                |),
                M.call_closure (|
                  A,
                  M.get_trait_method (| "core::ops::arith::Sub", A, [], [ A ], "sub", [], [] |),
                  [ M.read (| val_1 |); M.read (| val_2 |) ]
                |)
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_dit_butterfly :
    M.IsFunction.C "p3_mds::butterflies::dit_butterfly" dit_butterfly.
  Admitted.
  Global Typeclasses Opaque dit_butterfly.
  
  (*
  pub(crate) fn dif_butterfly<F: Field, A: Algebra<F>, const N: usize>(
      values: &mut [A; N],
      idx_1: usize,
      idx_2: usize,
      twiddle: F,
  ) {
      let val_1 = values[idx_1].clone();
      let val_2 = values[idx_2].clone();
      values[idx_1] = val_1.clone() + val_2.clone();
      values[idx_2] = (val_1 - val_2) * twiddle;
  }
  *)
  Definition dif_butterfly (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ F; A ], [ values; idx_1; idx_2; twiddle ] =>
      ltac:(M.monadic
        (let values := M.alloc (| values |) in
        let idx_1 := M.alloc (| idx_1 |) in
        let idx_2 := M.alloc (| idx_2 |) in
        let twiddle := M.alloc (| twiddle |) in
        M.read (|
          let~ val_1 : Ty.apply (Ty.path "*") [] [ A ] :=
            M.alloc (|
              M.call_closure (|
                A,
                M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| values |) |),
                      M.read (| idx_1 |)
                    |)
                  |)
                ]
              |)
            |) in
          let~ val_2 : Ty.apply (Ty.path "*") [] [ A ] :=
            M.alloc (|
              M.call_closure (|
                A,
                M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| values |) |),
                      M.read (| idx_2 |)
                    |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| values |) |),
                  M.read (| idx_1 |)
                |),
                M.call_closure (|
                  A,
                  M.get_trait_method (| "core::ops::arith::Add", A, [], [ A ], "add", [], [] |),
                  [
                    M.call_closure (|
                      A,
                      M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, val_1 |) ]
                    |);
                    M.call_closure (|
                      A,
                      M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, val_2 |) ]
                    |)
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| values |) |),
                  M.read (| idx_2 |)
                |),
                M.call_closure (|
                  A,
                  M.get_trait_method (| "core::ops::arith::Mul", A, [], [ F ], "mul", [], [] |),
                  [
                    M.call_closure (|
                      A,
                      M.get_trait_method (| "core::ops::arith::Sub", A, [], [ A ], "sub", [], [] |),
                      [ M.read (| val_1 |); M.read (| val_2 |) ]
                    |);
                    M.read (| twiddle |)
                  ]
                |)
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_dif_butterfly :
    M.IsFunction.C "p3_mds::butterflies::dif_butterfly" dif_butterfly.
  Admitted.
  Global Typeclasses Opaque dif_butterfly.
  
  (*
  pub(crate) fn twiddle_free_butterfly<F: Field, A: Algebra<F>, const N: usize>(
      values: &mut [A; N],
      idx_1: usize,
      idx_2: usize,
  ) {
      let val_1 = values[idx_1].clone();
      let val_2 = values[idx_2].clone();
      values[idx_1] = val_1.clone() + val_2.clone();
      values[idx_2] = val_1 - val_2;
  }
  *)
  Definition twiddle_free_butterfly (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ F; A ], [ values; idx_1; idx_2 ] =>
      ltac:(M.monadic
        (let values := M.alloc (| values |) in
        let idx_1 := M.alloc (| idx_1 |) in
        let idx_2 := M.alloc (| idx_2 |) in
        M.read (|
          let~ val_1 : Ty.apply (Ty.path "*") [] [ A ] :=
            M.alloc (|
              M.call_closure (|
                A,
                M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| values |) |),
                      M.read (| idx_1 |)
                    |)
                  |)
                ]
              |)
            |) in
          let~ val_2 : Ty.apply (Ty.path "*") [] [ A ] :=
            M.alloc (|
              M.call_closure (|
                A,
                M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| values |) |),
                      M.read (| idx_2 |)
                    |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| values |) |),
                  M.read (| idx_1 |)
                |),
                M.call_closure (|
                  A,
                  M.get_trait_method (| "core::ops::arith::Add", A, [], [ A ], "add", [], [] |),
                  [
                    M.call_closure (|
                      A,
                      M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, val_1 |) ]
                    |);
                    M.call_closure (|
                      A,
                      M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, val_2 |) ]
                    |)
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| values |) |),
                  M.read (| idx_2 |)
                |),
                M.call_closure (|
                  A,
                  M.get_trait_method (| "core::ops::arith::Sub", A, [], [ A ], "sub", [], [] |),
                  [ M.read (| val_1 |); M.read (| val_2 |) ]
                |)
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_twiddle_free_butterfly :
    M.IsFunction.C "p3_mds::butterflies::twiddle_free_butterfly" twiddle_free_butterfly.
  Admitted.
  Global Typeclasses Opaque twiddle_free_butterfly.
End butterflies.
