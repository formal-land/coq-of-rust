(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module util.
  (*
  pub fn dot_product<T, const N: usize>(u: [T; N], v: [T; N]) -> T
  where
      T: Copy + AddAssign + Mul<Output = T>,
  {
      debug_assert_ne!(N, 0);
      let mut dp = u[0] * v[0];
      for i in 1..N {
          dp += u[i] * v[i];
      }
      dp
  }
  *)
  Definition dot_product (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ T ], [ u; v ] =>
      ltac:(M.monadic
        (let u := M.alloc (| u |) in
        let v := M.alloc (| v |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.use (M.alloc (| Value.Bool true |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (|
                          Value.Tuple
                            [
                              M.borrow (| Pointer.Kind.Ref, M.alloc (| N |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (| Value.Integer IntegerKind.Usize 0 |)
                              |)
                            ]
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let left_val := M.copy (| γ0_0 |) in
                              let right_val := M.copy (| γ0_1 |) in
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.eq,
                                              [
                                                M.read (| M.deref (| M.read (| left_val |) |) |);
                                                M.read (| M.deref (| M.read (| right_val |) |) |)
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            let~ kind :
                                                Ty.apply
                                                  (Ty.path "*")
                                                  []
                                                  [ Ty.path "core::panicking::AssertKind" ] :=
                                              M.alloc (|
                                                Value.StructTuple
                                                  "core::panicking::AssertKind::Ne"
                                                  []
                                              |) in
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "never",
                                                M.get_function (|
                                                  "core::panicking::assert_failed",
                                                  [],
                                                  [ Ty.path "usize"; Ty.path "usize" ]
                                                |),
                                                [
                                                  M.read (| kind |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| left_val |) |)
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| right_val |) |)
                                                      |)
                                                    |)
                                                  |);
                                                  Value.StructTuple "core::option::Option::None" []
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |) in
          let~ dp : Ty.apply (Ty.path "*") [] [ T ] :=
            M.alloc (|
              M.call_closure (|
                T,
                M.get_trait_method (| "core::ops::arith::Mul", T, [], [ T ], "mul", [], [] |),
                [
                  M.read (|
                    M.SubPointer.get_array_field (| u, Value.Integer IntegerKind.Usize 0 |)
                  |);
                  M.read (|
                    M.SubPointer.get_array_field (| v, Value.Integer IntegerKind.Usize 0 |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [ ("start", Value.Integer IntegerKind.Usize 1); ("end_", N) ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let i := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "core::ops::arith::AddAssign",
                                            T,
                                            [],
                                            [ T ],
                                            "add_assign",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (| Pointer.Kind.MutRef, dp |);
                                            M.call_closure (|
                                              T,
                                              M.get_trait_method (|
                                                "core::ops::arith::Mul",
                                                T,
                                                [],
                                                [ T ],
                                                "mul",
                                                [],
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    u,
                                                    M.read (| i |)
                                                  |)
                                                |);
                                                M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    v,
                                                    M.read (| i |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          dp
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_dot_product :
    M.IsFunction.C "p3_mds::util::dot_product" dot_product.
  Admitted.
  Global Typeclasses Opaque dot_product.
  
  (*
  pub fn apply_circulant<R: PrimeCharacteristicRing, const N: usize>(
      circ_matrix: &[u64; N],
      input: [R; N],
  ) -> [R; N] {
      let mut matrix = circ_matrix.map(R::from_u64);
  
      let mut output = [R::ZERO; N];
      for out_i in output.iter_mut().take(N - 1) {
          *out_i = R::dot_product(&matrix, &input);
          matrix.rotate_right(1);
      }
      output[N - 1] = R::dot_product(&matrix, &input);
      output
  }
  *)
  Definition apply_circulant (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ R ], [ circ_matrix; input ] =>
      ltac:(M.monadic
        (let circ_matrix := M.alloc (| circ_matrix |) in
        let input := M.alloc (| input |) in
        M.read (|
          let~ matrix : Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "array") [ N ] [ R ] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "array") [ N ] [ R ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "array") [ N ] [ Ty.path "u64" ],
                  "map",
                  [],
                  [ Ty.function [ Ty.path "u64" ] R; R ]
                |),
                [
                  M.read (| M.deref (| M.read (| circ_matrix |) |) |);
                  M.get_trait_method (|
                    "p3_field::field::PrimeCharacteristicRing",
                    R,
                    [],
                    [],
                    "from_u64",
                    [],
                    []
                  |)
                ]
              |)
            |) in
          let~ output : Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "array") [ N ] [ R ] ] :=
            M.alloc (|
              repeat (|
                M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", R |) |),
                N
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::take::Take")
                      []
                      [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ R ] ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::take::Take")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ R ] ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::take::Take")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ R ] ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ R ],
                          [],
                          [],
                          "take",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ R ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ R ],
                              "iter_mut",
                              [],
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (M.borrow (| Pointer.Kind.MutRef, output |))
                            ]
                          |);
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.sub,
                            [ N; Value.Integer IntegerKind.Usize 1 ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.apply (Ty.path "&mut") [] [ R ] ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::take::Take")
                                      []
                                      [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ R ] ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let out_i := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.write (|
                                          M.deref (| M.read (| out_i |) |),
                                          M.call_closure (|
                                            R,
                                            M.get_trait_method (|
                                              "p3_field::field::PrimeCharacteristicRing",
                                              R,
                                              [],
                                              [],
                                              "dot_product",
                                              [ N ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.Ref, matrix |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, input |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ R ],
                                            "rotate_right",
                                            [],
                                            []
                                          |),
                                          [
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (| Pointer.Kind.MutRef, matrix |));
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  output,
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [ N; Value.Integer IntegerKind.Usize 1 ]
                  |)
                |),
                M.call_closure (|
                  R,
                  M.get_trait_method (|
                    "p3_field::field::PrimeCharacteristicRing",
                    R,
                    [],
                    [],
                    "dot_product",
                    [ N ],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, matrix |) |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, input |) |)
                    |)
                  ]
                |)
              |)
            |) in
          output
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_apply_circulant :
    M.IsFunction.C "p3_mds::util::apply_circulant" apply_circulant.
  Admitted.
  Global Typeclasses Opaque apply_circulant.
  
  (*
  pub const fn first_row_to_first_col<const N: usize, T: Copy>(v: &[T; N]) -> [T; N] {
      let mut output = *v;
      let mut i = 1;
      while i < N {
          // Reverse elements
          output[i] = v[N - i];
          i += 1;
      }
      output
  }
  *)
  Definition first_row_to_first_col (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ T ], [ v ] =>
      ltac:(M.monadic
        (let v := M.alloc (| v |) in
        M.read (|
          let~ output : Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "array") [ N ] [ T ] ] :=
            M.copy (| M.deref (| M.read (| v |) |) |) in
          let~ i : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (| Value.Integer IntegerKind.Usize 1 |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.loop (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              ltac:(M.monadic
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (| Ty.path "bool", BinOp.lt, [ M.read (| i |); N ] |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.SubPointer.get_array_field (| output, M.read (| i |) |),
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| v |) |),
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.sub,
                                    [ N; M.read (| i |) ]
                                  |)
                                |)
                              |)
                            |)
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            let β := i in
                            M.write (|
                              β,
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.add,
                                [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                              M.alloc (| Value.Tuple [] |)
                            |)
                          |)
                        |)))
                  ]
                |)))
            |) in
          output
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_first_row_to_first_col :
    M.IsFunction.C "p3_mds::util::first_row_to_first_col" first_row_to_first_col.
  Admitted.
  Global Typeclasses Opaque first_row_to_first_col.
  
  (*
  pub fn apply_circulant_fft<F: TwoAdicField, const N: usize, FFT: TwoAdicSubgroupDft<F>>(
      fft: FFT,
      column: [u64; N],
      input: &[F; N],
  ) -> [F; N] {
      let column = column.map(F::from_u64).to_vec();
      let matrix = fft.dft(column);
      let input = fft.dft(input.to_vec());
  
      // point-wise product
      let product = matrix.iter().zip(input).map(|(&x, y)| x * y).collect();
  
      let output = fft.idft(product);
      output.try_into().unwrap()
  }
  *)
  Definition apply_circulant_fft (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ F; FFT ], [ fft; column; input ] =>
      ltac:(M.monadic
        (let fft := M.alloc (| fft |) in
        let column := M.alloc (| column |) in
        let input := M.alloc (| input |) in
        M.read (|
          let~ column :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "slice") [] [ F ],
                  "to_vec",
                  [],
                  []
                |),
                [
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "array") [ N ] [ F ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "array") [ N ] [ Ty.path "u64" ],
                            "map",
                            [],
                            [ Ty.function [ Ty.path "u64" ] F; F ]
                          |),
                          [
                            M.read (| column |);
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              F,
                              [],
                              [],
                              "from_u64",
                              [],
                              []
                            |)
                          ]
                        |)
                      |)
                    |))
                ]
              |)
            |) in
          let~ matrix :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "p3_dft::traits::TwoAdicSubgroupDft",
                  FFT,
                  [],
                  [ F ],
                  "dft",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, fft |); M.read (| column |) ]
              |)
            |) in
          let~ input :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "p3_dft::traits::TwoAdicSubgroupDft",
                  FFT,
                  [],
                  [ F ],
                  "dft",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, fft |);
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ F ],
                      "to_vec",
                      [],
                      []
                    |),
                    [
                      (* Unsize *)
                      M.pointer_coercion
                        (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |))
                    ]
                  |)
                ]
              |)
            |) in
          let~ product :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        []
                        [
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ];
                      Ty.function [ Ty.tuple [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ F ]; F ] ] ] F
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ];
                        Ty.function
                          [ Ty.tuple [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ F ]; F ] ] ]
                          F
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        []
                        [
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        F;
                        Ty.function
                          [ Ty.tuple [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ F ]; F ] ] ]
                          F
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                          [],
                          [],
                          "zip",
                          [],
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ F ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, matrix |) ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.read (| input |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ F ]; F ] ]
                                        ]
                                        F
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let γ0_0 := M.read (| γ0_0 |) in
                                        let x := M.copy (| γ0_0 |) in
                                        let y := M.copy (| γ0_1 |) in
                                        M.call_closure (|
                                          F,
                                          M.get_trait_method (|
                                            "core::ops::arith::Mul",
                                            F,
                                            [],
                                            [ F ],
                                            "mul",
                                            [],
                                            []
                                          |),
                                          [ M.read (| x |); M.read (| y |) ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)
            |) in
          let~ output :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "p3_dft::traits::TwoAdicSubgroupDft",
                  FFT,
                  [],
                  [ F ],
                  "idft",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, fft |); M.read (| product |) ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply (Ty.path "array") [ N ] [ F ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply (Ty.path "array") [ N ] [ F ];
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                  ],
                "unwrap",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply (Ty.path "array") [ N ] [ F ];
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "core::convert::TryInto",
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    [],
                    [ Ty.apply (Ty.path "array") [ N ] [ F ] ],
                    "try_into",
                    [],
                    []
                  |),
                  [ M.read (| output |) ]
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_apply_circulant_fft :
    M.IsFunction.C "p3_mds::util::apply_circulant_fft" apply_circulant_fft.
  Admitted.
  Global Typeclasses Opaque apply_circulant_fft.
End util.
