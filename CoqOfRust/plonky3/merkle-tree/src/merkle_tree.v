(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module merkle_tree.
  (* StructRecord
    {
      name := "MerkleTree";
      const_params := [ "DIGEST_ELEMS" ];
      ty_params := [ "F"; "W"; "M_" ];
      fields :=
        [
          ("leaves",
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ M_; Ty.path "alloc::alloc::Global" ]);
          ("digest_layers",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                    Ty.path "alloc::alloc::Global"
                  ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("_phantom", Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_W_where_core_fmt_Debug_M__for_p3_merkle_tree_merkle_tree_MerkleTree_DIGEST_ELEMS_F_W_M_.
    Definition Self (DIGEST_ELEMS : Value.t) (F W M_ : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_merkle_tree::merkle_tree::MerkleTree") [ DIGEST_ELEMS ] [ F; W; M_ ].
    
    (* Debug *)
    Definition fmt
        (DIGEST_ELEMS : Value.t)
        (F W M_ : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS F W M_ in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MerkleTree" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "leaves" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_merkle_tree::merkle_tree::MerkleTree",
                        "leaves"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "digest_layers" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_merkle_tree::merkle_tree::MerkleTree",
                        "digest_layers"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_phantom" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_merkle_tree::merkle_tree::MerkleTree",
                            "_phantom"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (F W M_ : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self DIGEST_ELEMS F W M_)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt DIGEST_ELEMS F W M_)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_W_where_core_fmt_Debug_M__for_p3_merkle_tree_merkle_tree_MerkleTree_DIGEST_ELEMS_F_W_M_.
  
  Module underscore.
    Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_array_DIGEST_ELEMS_W_where_serde_ser_Serialize_M__for_p3_merkle_tree_merkle_tree_MerkleTree_DIGEST_ELEMS_F_W_M_.
      Definition Self (DIGEST_ELEMS : Value.t) (F W M_ : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "p3_merkle_tree::merkle_tree::MerkleTree") [ DIGEST_ELEMS ] [ F; W; M_ ].
      
      (* Serialize *)
      Definition serialize
          (DIGEST_ELEMS : Value.t)
          (F W M_ : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self DIGEST_ELEMS F W M_ in
        match ε, τ, α with
        | [], [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let __serializer := M.alloc (| __serializer |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ __serde_state :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct"
                        ] :=
                    M.copy (|
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct"
                          ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "MerkleTree" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.cast (Ty.path "usize") (Value.Bool false);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ M_; Ty.path "alloc::alloc::Global" ]
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "leaves" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_merkle_tree::merkle_tree::MerkleTree",
                                        "leaves"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "digest_layers" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_merkle_tree::merkle_tree::MerkleTree",
                                        "digest_layers"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ] ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "_phantom" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_merkle_tree::merkle_tree::MerkleTree",
                                        "_phantom"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.get_trait_method (|
                        "serde::ser::SerializeStruct",
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        [],
                        [],
                        "end",
                        [],
                        []
                      |),
                      [ M.read (| __serde_state |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (DIGEST_ELEMS : Value.t) (F W M_ : Ty.t),
        M.IsTraitInstance
          "serde::ser::Serialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self DIGEST_ELEMS F W M_)
          (* Instance *) [ ("serialize", InstanceField.Method (serialize DIGEST_ELEMS F W M_)) ].
    End Impl_serde_ser_Serialize_where_serde_ser_Serialize_array_DIGEST_ELEMS_W_where_serde_ser_Serialize_M__for_p3_merkle_tree_merkle_tree_MerkleTree_DIGEST_ELEMS_F_W_M_.
    Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_array_DIGEST_ELEMS_W_where_serde_de_Deserialize_M__for_p3_merkle_tree_merkle_tree_MerkleTree_DIGEST_ELEMS_F_W_M_.
      Definition Self (DIGEST_ELEMS : Value.t) (F W M_ : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "p3_merkle_tree::merkle_tree::MerkleTree") [ DIGEST_ELEMS ] [ F; W; M_ ].
      
      (* Deserialize *)
      Definition deserialize
          (DIGEST_ELEMS : Value.t)
          (F W M_ : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self DIGEST_ELEMS F W M_ in
        match ε, τ, α with
        | [], [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __deserializer |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "p3_merkle_tree::merkle_tree::MerkleTree")
                    [ DIGEST_ELEMS ]
                    [ F; W; M_ ];
                  Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                ],
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                [],
                "deserialize_struct",
                [],
                [
                  Ty.apply
                    (Ty.path "p3_merkle_tree::merkle_tree::_'1::deserialize::__Visitor")
                    [ DIGEST_ELEMS ]
                    [ F; W; M_ ]
                ]
              |),
              [
                M.read (| __deserializer |);
                mk_str (| "MerkleTree" |);
                M.read (|
                  get_constant (|
                    "p3_merkle_tree::merkle_tree::_'1::deserialize::FIELDS",
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ]
                  |)
                |);
                Value.StructRecord
                  "p3_merkle_tree::merkle_tree::_'1::deserialize::__Visitor"
                  [
                    ("marker", Value.StructTuple "core::marker::PhantomData" []);
                    ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (DIGEST_ELEMS : Value.t) (F W M_ : Ty.t),
        M.IsTraitInstance
          "serde::de::Deserialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self DIGEST_ELEMS F W M_)
          (* Instance *)
          [ ("deserialize", InstanceField.Method (deserialize DIGEST_ELEMS F W M_)) ].
    End Impl_serde_de_Deserialize_where_serde_de_Deserialize_array_DIGEST_ELEMS_W_where_serde_de_Deserialize_M__for_p3_merkle_tree_merkle_tree_MerkleTree_DIGEST_ELEMS_F_W_M_.
  End underscore.
  
  
  Module Impl_p3_merkle_tree_merkle_tree_MerkleTree_DIGEST_ELEMS_F_W_M_.
    Definition Self (DIGEST_ELEMS : Value.t) (F W M_ : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_merkle_tree::merkle_tree::MerkleTree") [ DIGEST_ELEMS ] [ F; W; M_ ].
    
    (*
        #[instrument(name = "build merkle tree", level = "debug", skip_all,
                     fields(dimensions = alloc::format!("{:?}", leaves.iter().map(|l| l.dimensions()).collect::<Vec<_>>())))]
    *)
    Definition new
        (DIGEST_ELEMS : Value.t)
        (F W M_ : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS F W M_ in
      match ε, τ, α with
      | [], [ P; PW; H; C ], [ h; c; leaves ] =>
        ltac:(M.monadic
          (let h := M.alloc (| h |) in
          let c := M.alloc (| c |) in
          let leaves := M.alloc (| leaves |) in
          M.catch_return
            (Ty.apply
              (Ty.path "p3_merkle_tree::merkle_tree::MerkleTree")
              [ DIGEST_ELEMS ]
              [ F; W; M_ ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (| Value.Tuple [] |) in
                let __tracing_attr_span := M.copy (| Value.DeclaredButUndefined |) in
                let __tracing_attr_guard := M.copy (| Value.DeclaredButUndefined |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.or (|
                                  LogicalOp.and (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "DEBUG",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_constant (|
                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                            Ty.path "tracing_core::metadata::LevelFilter"
                                          |)
                                        |)
                                      ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialOrd",
                                          Ty.path "tracing_core::metadata::Level",
                                          [],
                                          [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                          "le",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            get_associated_constant (|
                                              Ty.path "tracing_core::metadata::Level",
                                              "DEBUG",
                                              Ty.path "tracing_core::metadata::Level"
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::metadata::LevelFilter",
                                                  "current",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                  |),
                                  ltac:(M.monadic (Value.Bool false))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                __tracing_attr_span,
                                M.read (|
                                  let~ interest :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [ Ty.path "tracing_core::subscriber::Interest" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        M.get_associated_function (|
                                          Ty.path "tracing_core::subscriber::Interest",
                                          "never",
                                          [],
                                          []
                                        |),
                                        []
                                      |)
                                    |) in
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.path "tracing::span::Span" ],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                LogicalOp.and (|
                                                  LogicalOp.and (|
                                                    LogicalOp.and (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "tracing_core::metadata::Level",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          ],
                                                          "le",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_associated_constant (|
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              "DEBUG",
                                                              Ty.path
                                                                "tracing_core::metadata::Level"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_constant (|
                                                              "tracing::level_filters::STATIC_MAX_LEVEL",
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            |)
                                                          |)
                                                        ]
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "tracing_core::metadata::Level",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            ],
                                                            "le",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_associated_constant (|
                                                                Ty.path
                                                                  "tracing_core::metadata::Level",
                                                                "DEBUG",
                                                                Ty.path
                                                                  "tracing_core::metadata::Level"
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter",
                                                                    "current",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)))
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.read (|
                                                        let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.alloc (|
                                                            M.write (|
                                                              interest,
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  "interest",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "p3_merkle_tree::merkle_tree::new::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |) in
                                                        M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                "is_never",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  interest
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)))
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_function (|
                                                        "tracing::__macro_support::__is_enabled",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "p3_merkle_tree::merkle_tree::new::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.read (| interest |)
                                                      ]
                                                    |)))
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          let~ meta :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "tracing_core::metadata::Metadata" ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ],
                                                M.get_trait_method (|
                                                  "tracing_core::callsite::Callsite",
                                                  Ty.path "tracing_core::callsite::DefaultCallsite",
                                                  [],
                                                  [],
                                                  "metadata",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_merkle_tree::merkle_tree::new::__CALLSITE",
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite"
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing::span::Span",
                                              M.get_associated_function (|
                                                Ty.path "tracing::span::Span",
                                                "new",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| meta |) |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      let~ iter :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.path "tracing_core::field::Iter"
                                                            ] :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.path "tracing_core::field::Iter",
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "tracing_core::field::FieldSet",
                                                              "iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::FieldSet"
                                                                      ],
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "tracing_core::metadata::Metadata",
                                                                      "fields",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| meta |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "tracing_core::field::ValueSet",
                                                          M.get_associated_function (|
                                                            Ty.path "tracing_core::field::FieldSet",
                                                            "value_set",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 1
                                                                ]
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::Field"
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("tracing_core::field::Value::Trait",
                                                                                    [])
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::field::FieldSet"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata",
                                                                    "fields",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| meta |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        Value.Tuple
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  Ty.path
                                                                                    "tracing_core::field::Field",
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::field::Field"
                                                                                      ],
                                                                                    "expect",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "tracing_core::field::Field"
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                        Ty.path
                                                                                          "tracing_core::field::Iter",
                                                                                        [],
                                                                                        [],
                                                                                        "next",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              iter
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        mk_str (|
                                                                                          "FieldSet corrupted (this is a bug)"
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            Value.StructTuple
                                                                              "core::option::Option::Some"
                                                                              [
                                                                                M.read (|
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      (* Unsize *)
                                                                                      M.pointer_coercion
                                                                                        (M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "alloc::string::String",
                                                                                                  M.get_function (|
                                                                                                    "core::hint::must_use",
                                                                                                    [],
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "alloc::string::String"
                                                                                                    ]
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      let~
                                                                                                            res :
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "*")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "alloc::string::String"
                                                                                                            ] :=
                                                                                                        M.alloc (|
                                                                                                          M.call_closure (|
                                                                                                            Ty.path
                                                                                                              "alloc::string::String",
                                                                                                            M.get_function (|
                                                                                                              "alloc::fmt::format",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.call_closure (|
                                                                                                                Ty.path
                                                                                                                  "core::fmt::Arguments",
                                                                                                                M.get_associated_function (|
                                                                                                                  Ty.path
                                                                                                                    "core::fmt::Arguments",
                                                                                                                  "new_v1",
                                                                                                                  [
                                                                                                                    Value.Integer
                                                                                                                      IntegerKind.Usize
                                                                                                                      1;
                                                                                                                    Value.Integer
                                                                                                                      IntegerKind.Usize
                                                                                                                      1
                                                                                                                  ],
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.deref (|
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.Ref,
                                                                                                                        M.alloc (|
                                                                                                                          Value.Array
                                                                                                                            [
                                                                                                                              mk_str (|
                                                                                                                                ""
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |);
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.deref (|
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.Ref,
                                                                                                                        M.alloc (|
                                                                                                                          Value.Array
                                                                                                                            [
                                                                                                                              M.call_closure (|
                                                                                                                                Ty.path
                                                                                                                                  "core::fmt::rt::Argument",
                                                                                                                                M.get_associated_function (|
                                                                                                                                  Ty.path
                                                                                                                                    "core::fmt::rt::Argument",
                                                                                                                                  "new_debug",
                                                                                                                                  [],
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "alloc::vec::Vec")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.path
                                                                                                                                          "p3_matrix::Dimensions";
                                                                                                                                        Ty.path
                                                                                                                                          "alloc::alloc::Global"
                                                                                                                                      ]
                                                                                                                                  ]
                                                                                                                                |),
                                                                                                                                [
                                                                                                                                  M.borrow (|
                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                    M.deref (|
                                                                                                                                      M.borrow (|
                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                        M.alloc (|
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "alloc::vec::Vec")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.path
                                                                                                                                                  "p3_matrix::Dimensions";
                                                                                                                                                Ty.path
                                                                                                                                                  "alloc::alloc::Global"
                                                                                                                                              ],
                                                                                                                                            M.get_trait_method (|
                                                                                                                                              "core::iter::traits::iterator::Iterator",
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "core::iter::adapters::map::Map")
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Ty.apply
                                                                                                                                                    (Ty.path
                                                                                                                                                      "core::slice::iter::Iter")
                                                                                                                                                    []
                                                                                                                                                    [
                                                                                                                                                      M_
                                                                                                                                                    ];
                                                                                                                                                  Ty.function
                                                                                                                                                    [
                                                                                                                                                      Ty.tuple
                                                                                                                                                        [
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "&")
                                                                                                                                                            []
                                                                                                                                                            [
                                                                                                                                                              M_
                                                                                                                                                            ]
                                                                                                                                                        ]
                                                                                                                                                    ]
                                                                                                                                                    (Ty.path
                                                                                                                                                      "p3_matrix::Dimensions")
                                                                                                                                                ],
                                                                                                                                              [],
                                                                                                                                              [],
                                                                                                                                              "collect",
                                                                                                                                              [],
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    Ty.path
                                                                                                                                                      "p3_matrix::Dimensions";
                                                                                                                                                    Ty.path
                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                  ]
                                                                                                                                              ]
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.call_closure (|
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "core::iter::adapters::map::Map")
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "core::slice::iter::Iter")
                                                                                                                                                      []
                                                                                                                                                      [
                                                                                                                                                        M_
                                                                                                                                                      ];
                                                                                                                                                    Ty.function
                                                                                                                                                      [
                                                                                                                                                        Ty.tuple
                                                                                                                                                          [
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "&")
                                                                                                                                                              []
                                                                                                                                                              [
                                                                                                                                                                M_
                                                                                                                                                              ]
                                                                                                                                                          ]
                                                                                                                                                      ]
                                                                                                                                                      (Ty.path
                                                                                                                                                        "p3_matrix::Dimensions")
                                                                                                                                                  ],
                                                                                                                                                M.get_trait_method (|
                                                                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                                                                  Ty.apply
                                                                                                                                                    (Ty.path
                                                                                                                                                      "core::slice::iter::Iter")
                                                                                                                                                    []
                                                                                                                                                    [
                                                                                                                                                      M_
                                                                                                                                                    ],
                                                                                                                                                  [],
                                                                                                                                                  [],
                                                                                                                                                  "map",
                                                                                                                                                  [],
                                                                                                                                                  [
                                                                                                                                                    Ty.path
                                                                                                                                                      "p3_matrix::Dimensions";
                                                                                                                                                    Ty.function
                                                                                                                                                      [
                                                                                                                                                        Ty.tuple
                                                                                                                                                          [
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "&")
                                                                                                                                                              []
                                                                                                                                                              [
                                                                                                                                                                M_
                                                                                                                                                              ]
                                                                                                                                                          ]
                                                                                                                                                      ]
                                                                                                                                                      (Ty.path
                                                                                                                                                        "p3_matrix::Dimensions")
                                                                                                                                                  ]
                                                                                                                                                |),
                                                                                                                                                [
                                                                                                                                                  M.call_closure (|
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "core::slice::iter::Iter")
                                                                                                                                                      []
                                                                                                                                                      [
                                                                                                                                                        M_
                                                                                                                                                      ],
                                                                                                                                                    M.get_associated_function (|
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "slice")
                                                                                                                                                        []
                                                                                                                                                        [
                                                                                                                                                          M_
                                                                                                                                                        ],
                                                                                                                                                      "iter",
                                                                                                                                                      [],
                                                                                                                                                      []
                                                                                                                                                    |),
                                                                                                                                                    [
                                                                                                                                                      M.borrow (|
                                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                                        M.deref (|
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "&")
                                                                                                                                                              []
                                                                                                                                                              [
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "slice")
                                                                                                                                                                  []
                                                                                                                                                                  [
                                                                                                                                                                    M_
                                                                                                                                                                  ]
                                                                                                                                                              ],
                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                              "core::ops::deref::Deref",
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                                                []
                                                                                                                                                                [
                                                                                                                                                                  M_;
                                                                                                                                                                  Ty.path
                                                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                                                ],
                                                                                                                                                              [],
                                                                                                                                                              [],
                                                                                                                                                              "deref",
                                                                                                                                                              [],
                                                                                                                                                              []
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.borrow (|
                                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                                leaves
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |)
                                                                                                                                                        |)
                                                                                                                                                      |)
                                                                                                                                                    ]
                                                                                                                                                  |);
                                                                                                                                                  M.closure
                                                                                                                                                    (fun
                                                                                                                                                        γ =>
                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                        match
                                                                                                                                                          γ
                                                                                                                                                        with
                                                                                                                                                        | [
                                                                                                                                                              α0
                                                                                                                                                            ] =>
                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                            (M.match_operator (|
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "*")
                                                                                                                                                                []
                                                                                                                                                                [
                                                                                                                                                                  Ty.function
                                                                                                                                                                    [
                                                                                                                                                                      Ty.tuple
                                                                                                                                                                        [
                                                                                                                                                                          Ty.apply
                                                                                                                                                                            (Ty.path
                                                                                                                                                                              "&")
                                                                                                                                                                            []
                                                                                                                                                                            [
                                                                                                                                                                              M_
                                                                                                                                                                            ]
                                                                                                                                                                        ]
                                                                                                                                                                    ]
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "p3_matrix::Dimensions")
                                                                                                                                                                ],
                                                                                                                                                              M.alloc (|
                                                                                                                                                                α0
                                                                                                                                                              |),
                                                                                                                                                              [
                                                                                                                                                                fun
                                                                                                                                                                    γ =>
                                                                                                                                                                  ltac:(M.monadic
                                                                                                                                                                    (let
                                                                                                                                                                          l :=
                                                                                                                                                                      M.copy (|
                                                                                                                                                                        γ
                                                                                                                                                                      |) in
                                                                                                                                                                    M.call_closure (|
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "p3_matrix::Dimensions",
                                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                                        "p3_matrix::Matrix",
                                                                                                                                                                        M_,
                                                                                                                                                                        [],
                                                                                                                                                                        [
                                                                                                                                                                          F
                                                                                                                                                                        ],
                                                                                                                                                                        "dimensions",
                                                                                                                                                                        [],
                                                                                                                                                                        []
                                                                                                                                                                      |),
                                                                                                                                                                      [
                                                                                                                                                                        M.borrow (|
                                                                                                                                                                          Pointer.Kind.Ref,
                                                                                                                                                                          M.deref (|
                                                                                                                                                                            M.read (|
                                                                                                                                                                              l
                                                                                                                                                                            |)
                                                                                                                                                                          |)
                                                                                                                                                                        |)
                                                                                                                                                                      ]
                                                                                                                                                                    |)))
                                                                                                                                                              ]
                                                                                                                                                            |)))
                                                                                                                                                        | _ =>
                                                                                                                                                          M.impossible
                                                                                                                                                            "wrong number of arguments"
                                                                                                                                                        end))
                                                                                                                                                ]
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |)
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  |)
                                                                                                                                ]
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        |) in
                                                                                                      res
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |))
                                                                                    |))
                                                                                |)
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let~ span :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.path "tracing::span::Span" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "tracing::span::Span",
                                                M.get_function (|
                                                  "tracing::__macro_support::__disabled_span",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::Metadata"
                                                          ],
                                                        M.get_trait_method (|
                                                          "tracing_core::callsite::Callsite",
                                                          Ty.path
                                                            "tracing_core::callsite::DefaultCallsite",
                                                          [],
                                                          [],
                                                          "metadata",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_merkle_tree::merkle_tree::new::__CALLSITE",
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::callsite::DefaultCallsite"
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                            M.alloc (| Value.Tuple [] |) in
                                          span))
                                    ]
                                  |)
                                |)
                              |)
                            |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                __tracing_attr_guard,
                                M.call_closure (|
                                  Ty.path "tracing::span::Entered",
                                  M.get_associated_function (|
                                    Ty.path "tracing::span::Span",
                                    "enter",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Value.Bool false |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ __tracing_attr_fake_return :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_merkle_tree::merkle_tree::MerkleTree")
                                          [ DIGEST_ELEMS ]
                                          [ F; W; M_ ]
                                      ] :=
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.loop (|
                                          Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                          ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        |)
                                      |)
                                    |)
                                  |) in
                                M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ M_; Ty.path "alloc::alloc::Global" ],
                                        "is_empty",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, leaves |) ]
                                    |)
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                [
                                  M.call_closure (|
                                    Ty.path "core::fmt::Arguments",
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_const",
                                      [ Value.Integer IntegerKind.Usize 1 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.Array [ mk_str (| "No matrices given?" |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (|
                      Value.Tuple
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            get_constant (|
                              "p3_field::packed::PackedValue::WIDTH",
                              Ty.path "usize"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            get_constant (|
                              "p3_field::packed::PackedValue::WIDTH",
                              Ty.path "usize"
                            |)
                          |)
                        ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let left_val := M.copy (| γ0_0 |) in
                          let right_val := M.copy (| γ0_1 |) in
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.eq,
                                            [
                                              M.read (| M.deref (| M.read (| left_val |) |) |);
                                              M.read (| M.deref (| M.read (| right_val |) |) |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ kind :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "core::panicking::AssertKind" ] :=
                                          M.alloc (|
                                            Value.StructTuple "core::panicking::AssertKind::Eq" []
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "never",
                                            M.get_function (|
                                              "core::panicking::assert_failed",
                                              [],
                                              [ Ty.path "usize"; Ty.path "usize" ]
                                            |),
                                            [
                                              M.read (| kind |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| left_val |) |)
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| right_val |) |)
                                                  |)
                                                |)
                                              |);
                                              Value.StructTuple
                                                "core::option::Option::Some"
                                                [
                                                  M.call_closure (|
                                                    Ty.path "core::fmt::Arguments",
                                                    M.get_associated_function (|
                                                      Ty.path "core::fmt::Arguments",
                                                      "new_const",
                                                      [ Value.Integer IntegerKind.Usize 1 ],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  mk_str (|
                                                                    "Packing widths must match"
                                                                  |)
                                                                ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |)))
                    ]
                  |) in
                let~ leaves_largest_first :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::peekable::Peekable")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global" ]
                          ]
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::peekable::Peekable")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global" ],
                        [],
                        [],
                        "peekable",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global" ],
                          M.get_trait_method (|
                            "itertools::Itertools",
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ M_ ],
                            [],
                            [],
                            "sorted_by_key",
                            [],
                            [
                              Ty.apply (Ty.path "core::cmp::Reverse") [] [ Ty.path "usize" ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                    ]
                                ]
                                (Ty.apply (Ty.path "core::cmp::Reverse") [] [ Ty.path "usize" ])
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ M_ ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ M_ ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ M_ ] ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ M_; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, leaves |) ]
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::cmp::Reverse")
                                                []
                                                [ Ty.path "usize" ])
                                          ],
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let l := M.copy (| γ |) in
                                              Value.StructTuple
                                                "core::cmp::Reverse"
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_trait_method (|
                                                      "p3_matrix::Matrix",
                                                      M_,
                                                      [],
                                                      [ F ],
                                                      "height",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.read (| M.deref (| M.read (| l |) |) |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "itertools::tuple_impl::TupleWindows")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::peekable::Peekable")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ M_ ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.function
                                                [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ M_ ] ] ]
                                                (Ty.path "usize")
                                            ];
                                          Ty.tuple [ Ty.path "usize"; Ty.path "usize" ]
                                        ],
                                      [],
                                      [],
                                      "all",
                                      [],
                                      [
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ]
                                          ]
                                          (Ty.path "bool")
                                      ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "itertools::tuple_impl::TupleWindows")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::peekable::Peekable")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::vec::into_iter::IntoIter")
                                                          []
                                                          [
                                                            Ty.apply (Ty.path "&") [] [ M_ ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                                      ]
                                                      (Ty.path "usize")
                                                  ];
                                                Ty.tuple [ Ty.path "usize"; Ty.path "usize" ]
                                              ],
                                            M.get_trait_method (|
                                              "itertools::Itertools",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::map::Map")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::peekable::Peekable")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                                        []
                                                        [
                                                          Ty.apply (Ty.path "&") [] [ M_ ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ];
                                                  Ty.function
                                                    [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                                    ]
                                                    (Ty.path "usize")
                                                ],
                                              [],
                                              [],
                                              "tuple_windows",
                                              [],
                                              [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::peekable::Peekable")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::vec::into_iter::IntoIter")
                                                          []
                                                          [
                                                            Ty.apply (Ty.path "&") [] [ M_ ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                                      ]
                                                      (Ty.path "usize")
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::peekable::Peekable")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                                        []
                                                        [
                                                          Ty.apply (Ty.path "&") [] [ M_ ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  [],
                                                  [],
                                                  "map",
                                                  [],
                                                  [
                                                    Ty.path "usize";
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                                      ]
                                                      (Ty.path "usize")
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::peekable::Peekable")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::vec::into_iter::IntoIter")
                                                          []
                                                          [
                                                            Ty.apply (Ty.path "&") [] [ M_ ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::peekable::Peekable")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::vec::into_iter::IntoIter")
                                                            []
                                                            [
                                                              Ty.apply (Ty.path "&") [] [ M_ ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ],
                                                      [],
                                                      [],
                                                      "clone",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        leaves_largest_first
                                                      |)
                                                    ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ M_ ]
                                                                        ]
                                                                    ]
                                                                    (Ty.path "usize")
                                                                ],
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let m := M.copy (| γ |) in
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      M.get_trait_method (|
                                                                        "p3_matrix::Matrix",
                                                                        M_,
                                                                        [],
                                                                        [ F ],
                                                                        "height",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| m |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)))
                                                        | _ =>
                                                          M.impossible "wrong number of arguments"
                                                        end))
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [ Ty.path "usize"; Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.path "bool")
                                                    ],
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                        let curr := M.copy (| γ0_0 |) in
                                                        let next := M.copy (| γ0_1 |) in
                                                        LogicalOp.or (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            BinOp.eq,
                                                            [ M.read (| curr |); M.read (| next |) ]
                                                          |),
                                                          ltac:(M.monadic
                                                            (M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.ne,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_associated_function (|
                                                                    Ty.path "usize",
                                                                    "next_power_of_two",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ M.read (| curr |) ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_associated_function (|
                                                                    Ty.path "usize",
                                                                    "next_power_of_two",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ M.read (| next |) ]
                                                                |)
                                                              ]
                                                            |)))
                                                        |)))
                                                  ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end))
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                [
                                  M.call_closure (|
                                    Ty.path "core::fmt::Arguments",
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_const",
                                      [ Value.Integer IntegerKind.Usize 1 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.Array
                                                [
                                                  mk_str (|
                                                    "matrix heights that round up to the same power of two must be equal"
                                                  |)
                                                ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ max_height : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (| "p3_matrix::Matrix", M_, [], [ F ], "height", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.read (|
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                      ],
                                    "unwrap",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::peekable::Peekable")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [
                                                Ty.apply (Ty.path "&") [] [ M_ ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        "peek",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.MutRef, leaves_largest_first |) ]
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ tallest_matrices :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global" ]
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "itertools::Itertools",
                        Ty.apply
                          (Ty.path "itertools::peeking_take_while::PeekingTakeWhile")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::peekable::Peekable")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global"
                                  ]
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ M_ ] ] ]
                              ]
                              (Ty.path "bool")
                          ],
                        [],
                        [],
                        "collect_vec",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "itertools::peeking_take_while::PeekingTakeWhile")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::peekable::Peekable")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ M_ ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                    ]
                                ]
                                (Ty.path "bool")
                            ],
                          M.get_trait_method (|
                            "itertools::Itertools",
                            Ty.apply
                              (Ty.path "core::iter::adapters::peekable::Peekable")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            [],
                            "peeking_take_while",
                            [],
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                    ]
                                ]
                                (Ty.path "bool")
                            ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, leaves_largest_first |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                                  ]
                                              ]
                                              (Ty.path "bool")
                                          ],
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let m := M.copy (| γ |) in
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.eq,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_trait_method (|
                                                      "p3_matrix::Matrix",
                                                      M_,
                                                      [],
                                                      [ F ],
                                                      "height",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.read (| M.deref (| M.read (| m |) |) |)
                                                        |)
                                                      |)
                                                    ]
                                                  |);
                                                  M.read (| max_height |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ digest_layers :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        "into_vec",
                        [],
                        [ Ty.path "alloc::alloc::Global" ]
                      |),
                      [
                        (* Unsize *)
                        M.pointer_coercion
                          (M.read (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        M.get_function (|
                                          "p3_merkle_tree::merkle_tree::first_digest_layer",
                                          [ DIGEST_ELEMS ],
                                          [ P; PW; H; M_ ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| h |) |)
                                          |);
                                          M.read (| tallest_matrices |)
                                        ]
                                      |)
                                    ]
                                |)
                              ]
                            |)
                          |))
                      ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.loop (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    ltac:(M.monadic
                      (let~ prev_layer :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ] ]
                                ]
                            ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ] ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "as_slice",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ],
                                      "unwrap",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ DIGEST_ELEMS ]
                                                      [ W ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          "last",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ DIGEST_ELEMS ]
                                                              [ W ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ DIGEST_ELEMS ]
                                                            [ W ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [],
                                                  "deref",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, digest_layers |) ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ]
                                                ],
                                              "len",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| prev_layer |) |)
                                              |)
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ next_layer_len : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.path "usize",
                              "next_power_of_two",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.div,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ] ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| prev_layer |) |)
                                      |)
                                    ]
                                  |);
                                  Value.Integer IntegerKind.Usize 2
                                ]
                              |)
                            ]
                          |)
                        |) in
                      let~ matrices_to_inject :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global" ]
                            ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global" ],
                            M.get_trait_method (|
                              "itertools::Itertools",
                              Ty.apply
                                (Ty.path "itertools::peeking_take_while::PeekingTakeWhile")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::peekable::Peekable")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.apply (Ty.path "&") [] [ M_ ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                        ]
                                    ]
                                    (Ty.path "bool")
                                ],
                              [],
                              [],
                              "collect_vec",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "itertools::peeking_take_while::PeekingTakeWhile")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::peekable::Peekable")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [
                                            Ty.apply (Ty.path "&") [] [ M_ ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                          ]
                                      ]
                                      (Ty.path "bool")
                                  ],
                                M.get_trait_method (|
                                  "itertools::Itertools",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::peekable::Peekable")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.apply (Ty.path "&") [] [ M_ ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  [],
                                  [],
                                  "peeking_take_while",
                                  [],
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                          ]
                                      ]
                                      (Ty.path "bool")
                                  ]
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, leaves_largest_first |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                                        ]
                                                    ]
                                                    (Ty.path "bool")
                                                ],
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let m := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.eq,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.path "usize",
                                                            "next_power_of_two",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              M.get_trait_method (|
                                                                "p3_matrix::Matrix",
                                                                M_,
                                                                [],
                                                                [ F ],
                                                                "height",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      M.deref (| M.read (| m |) |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (| next_layer_len |)
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end))
                                ]
                              |)
                            ]
                          |)
                        |) in
                      let~ next_digests :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_function (|
                              "p3_merkle_tree::merkle_tree::compress_and_inject",
                              [ DIGEST_ELEMS ],
                              [ P; PW; H; C; M_ ]
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.read (| prev_layer |) |)
                              |);
                              M.read (| matrices_to_inject |);
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| h |) |) |);
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| c |) |) |)
                            ]
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "push",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, digest_layers |);
                              M.read (| next_digests |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)))
                  |) in
                M.alloc (|
                  Value.StructRecord
                    "p3_merkle_tree::merkle_tree::MerkleTree"
                    [
                      ("leaves", M.read (| leaves |));
                      ("digest_layers", M.read (| digest_layers |));
                      ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (DIGEST_ELEMS : Value.t) (F W M_ : Ty.t),
      M.IsAssociatedFunction.C (Self DIGEST_ELEMS F W M_) "new" (new DIGEST_ELEMS F W M_).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn root(&self) -> Hash<F, W, DIGEST_ELEMS>
        where
            W: Copy,
        {
            self.digest_layers.last().unwrap()[0].into()
        }
    *)
    Definition root
        (DIGEST_ELEMS : Value.t)
        (F W M_ : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS F W M_ in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ],
            M.get_trait_method (|
              "core::convert::Into",
              Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ],
              [],
              [ Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ] ],
              "into",
              [],
              []
            |),
            [
              M.read (|
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ] ],
                    M.get_trait_method (|
                      "core::ops::index::Index",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [ Ty.path "usize" ],
                      "index",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ],
                              "unwrap",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  "last",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ DIGEST_ELEMS ]
                                                      [ W ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "p3_merkle_tree::merkle_tree::MerkleTree",
                                              "digest_layers"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |)
                      |);
                      Value.Integer IntegerKind.Usize 0
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_root :
      forall (DIGEST_ELEMS : Value.t) (F W M_ : Ty.t),
      M.IsAssociatedFunction.C (Self DIGEST_ELEMS F W M_) "root" (root DIGEST_ELEMS F W M_).
    Admitted.
    Global Typeclasses Opaque root.
  End Impl_p3_merkle_tree_merkle_tree_MerkleTree_DIGEST_ELEMS_F_W_M_.
  
  (* #[instrument(name = "first digest layer", level = "debug", skip_all)] *)
  Definition first_digest_layer (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ DIGEST_ELEMS ], [ P; PW; H; M_ ], [ h; tallest_matrices ] =>
      ltac:(M.monadic
        (let h := M.alloc (| h |) in
        let tallest_matrices := M.alloc (| tallest_matrices |) in
        M.catch_return
          (Ty.apply
            (Ty.path "alloc::vec::Vec")
            []
            [
              Ty.apply
                (Ty.path "array")
                [ DIGEST_ELEMS ]
                [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value" ];
              Ty.path "alloc::alloc::Global"
            ]) (|
          ltac:(M.monadic
            (M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] := M.alloc (| Value.Tuple [] |) in
              let __tracing_attr_span := M.copy (| Value.DeclaredButUndefined |) in
              let __tracing_attr_guard := M.copy (| Value.DeclaredButUndefined |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.path "tracing_core::metadata::Level",
                                      [],
                                      [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                      "le",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_associated_constant (|
                                          Ty.path "tracing_core::metadata::Level",
                                          "DEBUG",
                                          Ty.path "tracing_core::metadata::Level"
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "tracing::level_filters::STATIC_MAX_LEVEL",
                                          Ty.path "tracing_core::metadata::LevelFilter"
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "DEBUG",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing_core::metadata::LevelFilter",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                "current",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic (Value.Bool false))
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_span,
                              M.read (|
                                let~ interest :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [ Ty.path "tracing_core::subscriber::Interest" ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "never",
                                        [],
                                        []
                                      |),
                                      []
                                    |)
                                  |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.path "tracing::span::Span" ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              LogicalOp.and (|
                                                LogicalOp.and (|
                                                  LogicalOp.and (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialOrd",
                                                        Ty.path "tracing_core::metadata::Level",
                                                        [],
                                                        [
                                                          Ty.path
                                                            "tracing_core::metadata::LevelFilter"
                                                        ],
                                                        "le",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_associated_constant (|
                                                            Ty.path "tracing_core::metadata::Level",
                                                            "DEBUG",
                                                            Ty.path "tracing_core::metadata::Level"
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_constant (|
                                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          |)
                                                        |)
                                                      ]
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "tracing_core::metadata::Level",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          ],
                                                          "le",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_associated_constant (|
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              "DEBUG",
                                                              Ty.path
                                                                "tracing_core::metadata::Level"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  "current",
                                                                  [],
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.alloc (|
                                                          M.write (|
                                                            interest,
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                "interest",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "p3_merkle_tree::merkle_tree::first_digest_layer::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |) in
                                                      M.alloc (|
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              "is_never",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                interest
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)))
                                                |),
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_function (|
                                                      "tracing::__macro_support::__is_enabled",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "p3_merkle_tree::merkle_tree::first_digest_layer::__CALLSITE",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (| interest |)
                                                    ]
                                                  |)))
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ meta :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ]
                                              ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "tracing_core::metadata::Metadata" ],
                                              M.get_trait_method (|
                                                "tracing_core::callsite::Callsite",
                                                Ty.path "tracing_core::callsite::DefaultCallsite",
                                                [],
                                                [],
                                                "metadata",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.read (|
                                                      get_constant (|
                                                        "p3_merkle_tree::merkle_tree::first_digest_layer::__CALLSITE",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite"
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "tracing::span::Span",
                                            M.get_associated_function (|
                                              Ty.path "tracing::span::Span",
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| meta |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "tracing_core::field::ValueSet",
                                                        M.get_associated_function (|
                                                          Ty.path "tracing_core::field::FieldSet",
                                                          "value_set",
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 0 ]
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::Field"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("tracing_core::field::Value::Trait",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::FieldSet"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata",
                                                                  "fields",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| meta |) |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (| Value.Array [] |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let~ span :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "tracing::span::Span" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing::span::Span",
                                              M.get_function (|
                                                "tracing::__macro_support::__disabled_span",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::metadata::Metadata"
                                                        ],
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        [],
                                                        "metadata",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (|
                                                              get_constant (|
                                                                "p3_merkle_tree::merkle_tree::first_digest_layer::__CALLSITE",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::callsite::DefaultCallsite"
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (| Value.Tuple [] |) in
                                        span))
                                  ]
                                |)
                              |)
                            |)
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_guard,
                              M.call_closure (|
                                Ty.path "tracing::span::Entered",
                                M.get_associated_function (|
                                  Ty.path "tracing::span::Span",
                                  "enter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool false |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              let~ __tracing_attr_fake_return :
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ DIGEST_ELEMS ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_field::packed::PackedValue"
                                                []
                                                []
                                                PW
                                                "Value"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ] :=
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.loop (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                        ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      |)
                                    |)
                                  |)
                                |) in
                              M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.copy (|
                  get_constant (| "p3_field::packed::PackedValue::WIDTH", Ty.path "usize" |)
                |) in
              let~ max_height : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "p3_matrix::Matrix",
                      M_,
                      [],
                      [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value" ],
                      "height",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.read (|
                            M.deref (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                M.get_trait_method (|
                                  "core::ops::index::Index",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ M_ ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [ Ty.path "usize" ],
                                  "index",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, tallest_matrices |);
                                  Value.Integer IntegerKind.Usize 0
                                ]
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ max_height_padded : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.copy (|
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [ M.read (| max_height |); Value.Integer IntegerKind.Usize 1 ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (| Value.Integer IntegerKind.Usize 1 |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.add,
                              [
                                M.read (| max_height |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.rem,
                                  [ M.read (| max_height |); Value.Integer IntegerKind.Usize 2 ]
                                |)
                              ]
                            |)
                          |)))
                    ]
                  |)
                |) in
              let~ default_digest :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ DIGEST_ELEMS ]
                        [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value" ]
                    ] :=
                M.alloc (|
                  repeat (|
                    M.call_closure (|
                      Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |),
                    DIGEST_ELEMS
                  |)
                |) in
              let~ digests :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ DIGEST_ELEMS ]
                            [
                              Ty.associated_in_trait
                                "p3_field::packed::PackedValue"
                                []
                                []
                                PW
                                "Value"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ DIGEST_ELEMS ]
                          [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_function (|
                      "alloc::vec::from_elem",
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ DIGEST_ELEMS ]
                          [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value"
                          ]
                      ]
                    |),
                    [ M.read (| default_digest |); M.read (| max_height_padded |) ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::ChunksExactMut")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ DIGEST_ELEMS ]
                                [
                                  Ty.associated_in_trait
                                    "p3_field::packed::PackedValue"
                                    []
                                    []
                                    PW
                                    "Value"
                                ]
                            ]
                        ],
                      [],
                      [],
                      "for_each",
                      [],
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.path "usize";
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ DIGEST_ELEMS ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::packed::PackedValue"
                                                  []
                                                  []
                                                  PW
                                                  "Value"
                                              ]
                                          ]
                                      ]
                                  ]
                              ]
                          ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::ChunksExactMut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ DIGEST_ELEMS ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::packed::PackedValue"
                                      []
                                      []
                                      PW
                                      "Value"
                                  ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::ChunksExactMut")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ DIGEST_ELEMS ]
                                [
                                  Ty.associated_in_trait
                                    "p3_field::packed::PackedValue"
                                    []
                                    []
                                    PW
                                    "Value"
                                ]
                            ],
                          [],
                          [],
                          "enumerate",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::ChunksExactMut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ DIGEST_ELEMS ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::packed::PackedValue"
                                      []
                                      []
                                      PW
                                      "Value"
                                  ]
                              ],
                            M.get_trait_method (|
                              "p3_maybe_rayon::serial::ParallelSliceMut",
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ DIGEST_ELEMS ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_field::packed::PackedValue"
                                        []
                                        []
                                        PW
                                        "Value"
                                    ]
                                ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ DIGEST_ELEMS ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::packed::PackedValue"
                                      []
                                      []
                                      PW
                                      "Value"
                                  ]
                              ],
                              "par_chunks_exact_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ DIGEST_ELEMS ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::packed::PackedValue"
                                                  []
                                                  []
                                                  PW
                                                  "Value"
                                              ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::index::IndexMut",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ DIGEST_ELEMS ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_field::packed::PackedValue"
                                                []
                                                []
                                                PW
                                                "Value"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                      "index_mut",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.MutRef, digests |);
                                      Value.StructRecord
                                        "core::ops::range::Range"
                                        [
                                          ("start", Value.Integer IntegerKind.Usize 0);
                                          ("end_", M.read (| max_height |))
                                        ]
                                    ]
                                  |)
                                |)
                              |);
                              M.read (| width |)
                            ]
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ DIGEST_ELEMS ]
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                PW
                                                                "Value"
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                        (Ty.tuple [])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let i := M.copy (| γ0_0 |) in
                                        let digests_chunk := M.copy (| γ0_1 |) in
                                        M.read (|
                                          let~ first_row :
                                              Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.mul,
                                                [ M.read (| i |); M.read (| width |) ]
                                              |)
                                            |) in
                                          let~ packed_digest :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ PW ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ PW ],
                                                M.get_trait_method (|
                                                  "p3_symmetric::hasher::CryptographicHasher",
                                                  H,
                                                  [],
                                                  [
                                                    P;
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ DIGEST_ELEMS ]
                                                      [ PW ]
                                                  ],
                                                  "hash_iter",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.apply (Ty.path "&") [] [ M_ ] ];
                                                        Ty.associated_in_trait
                                                          "p3_matrix::Matrix"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              P
                                                              "Value";
                                                            P
                                                          ]
                                                          M_
                                                          "{{synthetic}}'11";
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.apply (Ty.path "&") [] [ M_ ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "p3_matrix::Matrix"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                P
                                                                "Value";
                                                              P
                                                            ]
                                                            M_
                                                            "{{synthetic}}'11")
                                                      ]
                                                  ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| h |) |)
                                                  |);
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.apply (Ty.path "&") [] [ M_ ] ];
                                                        Ty.associated_in_trait
                                                          "p3_matrix::Matrix"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              P
                                                              "Value";
                                                            P
                                                          ]
                                                          M_
                                                          "{{synthetic}}'11";
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.apply (Ty.path "&") [] [ M_ ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "p3_matrix::Matrix"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                P
                                                                "Value";
                                                              P
                                                            ]
                                                            M_
                                                            "{{synthetic}}'11")
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                                      [],
                                                      [],
                                                      "flat_map",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_matrix::Matrix"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              P
                                                              "Value";
                                                            P
                                                          ]
                                                          M_
                                                          "{{synthetic}}'11";
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.apply (Ty.path "&") [] [ M_ ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "p3_matrix::Matrix"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                P
                                                                "Value";
                                                              P
                                                            ]
                                                            M_
                                                            "{{synthetic}}'11")
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                                          "iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ M_ ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ M_ ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    tallest_matrices
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.closure
                                                        (fun γ =>
                                                          ltac:(M.monadic
                                                            match γ with
                                                            | [ α0 ] =>
                                                              ltac:(M.monadic
                                                                (M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [ M_ ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "p3_matrix::Matrix"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_field::packed::PackedValue"
                                                                              []
                                                                              []
                                                                              P
                                                                              "Value";
                                                                            P
                                                                          ]
                                                                          M_
                                                                          "{{synthetic}}'11")
                                                                    ],
                                                                  M.alloc (| α0 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let m := M.copy (| γ |) in
                                                                        M.call_closure (|
                                                                          Ty.associated_in_trait
                                                                            "p3_matrix::Matrix"
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_field::packed::PackedValue"
                                                                                []
                                                                                []
                                                                                P
                                                                                "Value";
                                                                              P
                                                                            ]
                                                                            M_
                                                                            "{{synthetic}}'11",
                                                                          M.get_trait_method (|
                                                                            "p3_matrix::Matrix",
                                                                            M_,
                                                                            [],
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_field::packed::PackedValue"
                                                                                []
                                                                                []
                                                                                P
                                                                                "Value"
                                                                            ],
                                                                            "vertically_packed_row",
                                                                            [],
                                                                            [ P ]
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  M.deref (|
                                                                                    M.read (| m |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.read (| first_row |)
                                                                          ]
                                                                        |)))
                                                                  ]
                                                                |)))
                                                            | _ =>
                                                              M.impossible
                                                                "wrong number of arguments"
                                                            end))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.use
                                            (M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::zip::Zip")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::IterMut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ DIGEST_ELEMS ]
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                PW
                                                                "Value"
                                                            ]
                                                        ];
                                                      Ty.associated_unknown
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::IterMut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ DIGEST_ELEMS ]
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_field::packed::PackedValue"
                                                                  []
                                                                  []
                                                                  PW
                                                                  "Value"
                                                              ]
                                                          ];
                                                        Ty.associated_unknown
                                                      ],
                                                    [],
                                                    [],
                                                    "into_iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ DIGEST_ELEMS ]
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_field::packed::PackedValue"
                                                                    []
                                                                    []
                                                                    PW
                                                                    "Value"
                                                                ]
                                                            ];
                                                          Ty.associated_unknown
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::IterMut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ DIGEST_ELEMS ]
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_field::packed::PackedValue"
                                                                  []
                                                                  []
                                                                  PW
                                                                  "Value"
                                                              ]
                                                          ],
                                                        [],
                                                        [],
                                                        "zip",
                                                        [],
                                                        [ Ty.associated_unknown ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ DIGEST_ELEMS ]
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_field::packed::PackedValue"
                                                                    []
                                                                    []
                                                                    PW
                                                                    "Value"
                                                                ]
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [ DIGEST_ELEMS ]
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_field::packed::PackedValue"
                                                                      []
                                                                      []
                                                                      PW
                                                                      "Value"
                                                                  ]
                                                              ],
                                                            "iter_mut",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.read (| digests_chunk |)
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.associated_unknown,
                                                          M.get_function (|
                                                            "p3_merkle_tree::merkle_tree::unpack_array",
                                                            [ DIGEST_ELEMS ],
                                                            [ PW ]
                                                          |),
                                                          [ M.read (| packed_digest |) ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let iter := M.copy (| γ |) in
                                                    M.loop (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      ltac:(M.monadic
                                                        (let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.match_operator (|
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ],
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [ DIGEST_ELEMS ]
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_field::packed::PackedValue"
                                                                                  []
                                                                                  []
                                                                                  PW
                                                                                  "Value"
                                                                              ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [ DIGEST_ELEMS ]
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_field::packed::PackedValue"
                                                                              []
                                                                              []
                                                                              PW
                                                                              "Value"
                                                                          ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::zip::Zip")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [ DIGEST_ELEMS ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_field::packed::PackedValue"
                                                                                []
                                                                                []
                                                                                PW
                                                                                "Value"
                                                                            ]
                                                                        ];
                                                                      Ty.associated_unknown
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let γ1_0 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ0_0,
                                                                      0
                                                                    |) in
                                                                  let γ1_1 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ0_0,
                                                                      1
                                                                    |) in
                                                                  let dst := M.copy (| γ1_0 |) in
                                                                  let src := M.copy (| γ1_1 |) in
                                                                  let~ _ :
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [ Ty.tuple [] ] :=
                                                                    M.alloc (|
                                                                      M.write (|
                                                                        M.deref (|
                                                                          M.read (| dst |)
                                                                        |),
                                                                        M.read (| src |)
                                                                      |)
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                    |)))
                                              ]
                                            |))
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.use
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start",
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.mul,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.div,
                                      [ M.read (| max_height |); M.read (| width |) ]
                                    |);
                                    M.read (| width |)
                                  ]
                                |));
                              ("end_", M.read (| max_height |))
                            ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            ltac:(M.monadic
                              (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "usize" ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let i := M.copy (| γ0_0 |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.write (|
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ DIGEST_ELEMS ]
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::packed::PackedValue"
                                                            []
                                                            []
                                                            PW
                                                            "Value"
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::index::IndexMut",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ DIGEST_ELEMS ]
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              PW
                                                              "Value"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    [ Ty.path "usize" ],
                                                    "index_mut",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (| Pointer.Kind.MutRef, digests |);
                                                    M.read (| i |)
                                                  ]
                                                |)
                                              |),
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ DIGEST_ELEMS ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      PW
                                                      "Value"
                                                  ],
                                                M.get_trait_method (|
                                                  "p3_symmetric::hasher::CryptographicHasher",
                                                  H,
                                                  [],
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      P
                                                      "Value";
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ DIGEST_ELEMS ]
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_field::packed::PackedValue"
                                                          []
                                                          []
                                                          PW
                                                          "Value"
                                                      ]
                                                  ],
                                                  "hash_iter",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.apply (Ty.path "&") [] [ M_ ] ];
                                                        Ty.associated_in_trait
                                                          "p3_matrix::Matrix"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              P
                                                              "Value"
                                                          ]
                                                          M_
                                                          "Row";
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.apply (Ty.path "&") [] [ M_ ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "p3_matrix::Matrix"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                P
                                                                "Value"
                                                            ]
                                                            M_
                                                            "Row")
                                                      ]
                                                  ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| h |) |)
                                                  |);
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.apply (Ty.path "&") [] [ M_ ] ];
                                                        Ty.associated_in_trait
                                                          "p3_matrix::Matrix"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              P
                                                              "Value"
                                                          ]
                                                          M_
                                                          "Row";
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.apply (Ty.path "&") [] [ M_ ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "p3_matrix::Matrix"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                P
                                                                "Value"
                                                            ]
                                                            M_
                                                            "Row")
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                                      [],
                                                      [],
                                                      "flat_map",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_matrix::Matrix"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              P
                                                              "Value"
                                                          ]
                                                          M_
                                                          "Row";
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.apply (Ty.path "&") [] [ M_ ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "p3_matrix::Matrix"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                P
                                                                "Value"
                                                            ]
                                                            M_
                                                            "Row")
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                                          "iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ M_ ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ M_ ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    tallest_matrices
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.closure
                                                        (fun γ =>
                                                          ltac:(M.monadic
                                                            match γ with
                                                            | [ α0 ] =>
                                                              ltac:(M.monadic
                                                                (M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [ M_ ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "p3_matrix::Matrix"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_field::packed::PackedValue"
                                                                              []
                                                                              []
                                                                              P
                                                                              "Value"
                                                                          ]
                                                                          M_
                                                                          "Row")
                                                                    ],
                                                                  M.alloc (| α0 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let m := M.copy (| γ |) in
                                                                        M.call_closure (|
                                                                          Ty.associated_in_trait
                                                                            "p3_matrix::Matrix"
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_field::packed::PackedValue"
                                                                                []
                                                                                []
                                                                                P
                                                                                "Value"
                                                                            ]
                                                                            M_
                                                                            "Row",
                                                                          M.get_trait_method (|
                                                                            "p3_matrix::Matrix",
                                                                            M_,
                                                                            [],
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_field::packed::PackedValue"
                                                                                []
                                                                                []
                                                                                P
                                                                                "Value"
                                                                            ],
                                                                            "row",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  M.deref (|
                                                                                    M.read (| m |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.read (| i |)
                                                                          ]
                                                                        |)))
                                                                  ]
                                                                |)))
                                                            | _ =>
                                                              M.impossible
                                                                "wrong number of arguments"
                                                            end))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              digests
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_first_digest_layer :
    M.IsFunction.C "p3_merkle_tree::merkle_tree::first_digest_layer" first_digest_layer.
  Admitted.
  Global Typeclasses Opaque first_digest_layer.
  
  (*
  fn compress_and_inject<P, PW, H, C, M, const DIGEST_ELEMS: usize>(
      prev_layer: &[[PW::Value; DIGEST_ELEMS]],
      matrices_to_inject: Vec<&M>,
      h: &H,
      c: &C,
  ) -> Vec<[PW::Value; DIGEST_ELEMS]>
  where
      P: PackedValue,
      PW: PackedValue,
      H: CryptographicHasher<P::Value, [PW::Value; DIGEST_ELEMS]>
          + CryptographicHasher<P, [PW; DIGEST_ELEMS]>
          + Sync,
      C: PseudoCompressionFunction<[PW::Value; DIGEST_ELEMS], 2>
          + PseudoCompressionFunction<[PW; DIGEST_ELEMS], 2>
          + Sync,
      M: Matrix<P::Value>,
  {
      if matrices_to_inject.is_empty() {
          return compress::<PW, _, DIGEST_ELEMS>(prev_layer, c);
      }
  
      let width = PW::WIDTH;
      let next_len = matrices_to_inject[0].height();
      // We always want to return an even number of digests, except when it's the root.
      let next_len_padded = if prev_layer.len() == 2 {
          1
      } else {
          // Round prev_layer.len() / 2 up to the next even integer.
          (prev_layer.len() / 2 + 1) & !1
      };
  
      let default_digest = [PW::Value::default(); DIGEST_ELEMS];
      let mut next_digests = vec![default_digest; next_len_padded];
      next_digests[0..next_len]
          .par_chunks_exact_mut(width)
          .enumerate()
          .for_each(|(i, digests_chunk)| {
              let first_row = i * width;
              let left = array::from_fn(|j| PW::from_fn(|k| prev_layer[2 * (first_row + k)][j]));
              let right = array::from_fn(|j| PW::from_fn(|k| prev_layer[2 * (first_row + k) + 1][j]));
              let mut packed_digest = c.compress([left, right]);
              let tallest_digest = h.hash_iter(
                  matrices_to_inject
                      .iter()
                      .flat_map(|m| m.vertically_packed_row(first_row)),
              );
              packed_digest = c.compress([packed_digest, tallest_digest]);
              for (dst, src) in digests_chunk.iter_mut().zip(unpack_array(packed_digest)) {
                  *dst = src;
              }
          });
  
      // If our packing width did not divide next_len, fall back to single-threaded scalar code
      // for the last bit.
      for i in (next_len / width * width)..next_len {
          let left = prev_layer[2 * i];
          let right = prev_layer[2 * i + 1];
          let digest = c.compress([left, right]);
          let rows_digest = h.hash_iter(matrices_to_inject.iter().flat_map(|m| m.row(i)));
          next_digests[i] = c.compress([digest, rows_digest]);
      }
  
      // At this point, we've exceeded the height of the matrices to inject, so we continue the
      // process above except with default_digest in place of an input digest.
      // We only need go as far as half the length of the previous layer.
      for i in next_len..(prev_layer.len() / 2) {
          let left = prev_layer[2 * i];
          let right = prev_layer[2 * i + 1];
          let digest = c.compress([left, right]);
          next_digests[i] = c.compress([digest, default_digest]);
      }
  
      next_digests
  }
  *)
  Definition compress_and_inject (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ DIGEST_ELEMS ], [ P; PW; H; C; M_ ], [ prev_layer; matrices_to_inject; h; c ] =>
      ltac:(M.monadic
        (let prev_layer := M.alloc (| prev_layer |) in
        let matrices_to_inject := M.alloc (| matrices_to_inject |) in
        let h := M.alloc (| h |) in
        let c := M.alloc (| c |) in
        M.catch_return
          (Ty.apply
            (Ty.path "alloc::vec::Vec")
            []
            [
              Ty.apply
                (Ty.path "array")
                [ DIGEST_ELEMS ]
                [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value" ];
              Ty.path "alloc::alloc::Global"
            ]) (|
          ltac:(M.monadic
            (M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ M_ ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "is_empty",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, matrices_to_inject |) ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ DIGEST_ELEMS ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_field::packed::PackedValue"
                                            []
                                            []
                                            PW
                                            "Value"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_function (|
                                    "p3_merkle_tree::merkle_tree::compress",
                                    [ DIGEST_ELEMS ],
                                    [ PW; C ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| prev_layer |) |)
                                    |);
                                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| c |) |) |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.copy (|
                  get_constant (| "p3_field::packed::PackedValue::WIDTH", Ty.path "usize" |)
                |) in
              let~ next_len : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "p3_matrix::Matrix",
                      M_,
                      [],
                      [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value" ],
                      "height",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.read (|
                            M.deref (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                M.get_trait_method (|
                                  "core::ops::index::Index",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ M_ ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [ Ty.path "usize" ],
                                  "index",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, matrices_to_inject |);
                                  Value.Integer IntegerKind.Usize 0
                                ]
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ next_len_padded : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.copy (|
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ DIGEST_ELEMS ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::packed::PackedValue"
                                                  []
                                                  []
                                                  PW
                                                  "Value"
                                              ]
                                          ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| prev_layer |) |)
                                        |)
                                      ]
                                    |);
                                    Value.Integer IntegerKind.Usize 2
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (| Value.Integer IntegerKind.Usize 1 |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.bit_and,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.div,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ DIGEST_ELEMS ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      PW
                                                      "Value"
                                                  ]
                                              ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| prev_layer |) |)
                                            |)
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 2
                                      ]
                                    |);
                                    Value.Integer IntegerKind.Usize 1
                                  ]
                                |);
                                UnOp.not (| Value.Integer IntegerKind.Usize 1 |)
                              ]
                            |)
                          |)))
                    ]
                  |)
                |) in
              let~ default_digest :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ DIGEST_ELEMS ]
                        [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value" ]
                    ] :=
                M.alloc (|
                  repeat (|
                    M.call_closure (|
                      Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |),
                    DIGEST_ELEMS
                  |)
                |) in
              let~ next_digests :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ DIGEST_ELEMS ]
                            [
                              Ty.associated_in_trait
                                "p3_field::packed::PackedValue"
                                []
                                []
                                PW
                                "Value"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ DIGEST_ELEMS ]
                          [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_function (|
                      "alloc::vec::from_elem",
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ DIGEST_ELEMS ]
                          [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value"
                          ]
                      ]
                    |),
                    [ M.read (| default_digest |); M.read (| next_len_padded |) ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::ChunksExactMut")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ DIGEST_ELEMS ]
                                [
                                  Ty.associated_in_trait
                                    "p3_field::packed::PackedValue"
                                    []
                                    []
                                    PW
                                    "Value"
                                ]
                            ]
                        ],
                      [],
                      [],
                      "for_each",
                      [],
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.path "usize";
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ DIGEST_ELEMS ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::packed::PackedValue"
                                                  []
                                                  []
                                                  PW
                                                  "Value"
                                              ]
                                          ]
                                      ]
                                  ]
                              ]
                          ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::ChunksExactMut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ DIGEST_ELEMS ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::packed::PackedValue"
                                      []
                                      []
                                      PW
                                      "Value"
                                  ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::ChunksExactMut")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ DIGEST_ELEMS ]
                                [
                                  Ty.associated_in_trait
                                    "p3_field::packed::PackedValue"
                                    []
                                    []
                                    PW
                                    "Value"
                                ]
                            ],
                          [],
                          [],
                          "enumerate",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::ChunksExactMut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ DIGEST_ELEMS ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::packed::PackedValue"
                                      []
                                      []
                                      PW
                                      "Value"
                                  ]
                              ],
                            M.get_trait_method (|
                              "p3_maybe_rayon::serial::ParallelSliceMut",
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ DIGEST_ELEMS ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_field::packed::PackedValue"
                                        []
                                        []
                                        PW
                                        "Value"
                                    ]
                                ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ DIGEST_ELEMS ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::packed::PackedValue"
                                      []
                                      []
                                      PW
                                      "Value"
                                  ]
                              ],
                              "par_chunks_exact_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ DIGEST_ELEMS ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::packed::PackedValue"
                                                  []
                                                  []
                                                  PW
                                                  "Value"
                                              ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::index::IndexMut",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ DIGEST_ELEMS ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_field::packed::PackedValue"
                                                []
                                                []
                                                PW
                                                "Value"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                      "index_mut",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.MutRef, next_digests |);
                                      Value.StructRecord
                                        "core::ops::range::Range"
                                        [
                                          ("start", Value.Integer IntegerKind.Usize 0);
                                          ("end_", M.read (| next_len |))
                                        ]
                                    ]
                                  |)
                                |)
                              |);
                              M.read (| width |)
                            ]
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ DIGEST_ELEMS ]
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                PW
                                                                "Value"
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                        (Ty.tuple [])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let i := M.copy (| γ0_0 |) in
                                        let digests_chunk := M.copy (| γ0_1 |) in
                                        M.read (|
                                          let~ first_row :
                                              Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.mul,
                                                [ M.read (| i |); M.read (| width |) ]
                                              |)
                                            |) in
                                          let~ left :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ PW ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ PW ],
                                                M.get_function (|
                                                  "core::array::from_fn",
                                                  [ DIGEST_ELEMS ],
                                                  [
                                                    PW;
                                                    Ty.function [ Ty.tuple [ Ty.path "usize" ] ] PW
                                                  ]
                                                |),
                                                [
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.function
                                                                    [ Ty.tuple [ Ty.path "usize" ] ]
                                                                    PW
                                                                ],
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let j := M.copy (| γ |) in
                                                                    M.call_closure (|
                                                                      PW,
                                                                      M.get_trait_method (|
                                                                        "p3_field::packed::PackedValue",
                                                                        PW,
                                                                        [],
                                                                        [],
                                                                        "from_fn",
                                                                        [],
                                                                        [
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [ Ty.path "usize" ]
                                                                            ]
                                                                            (Ty.associated_in_trait
                                                                              "p3_field::packed::PackedValue"
                                                                              []
                                                                              []
                                                                              PW
                                                                              "Value")
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                ltac:(M.monadic
                                                                                  (M.match_operator (|
                                                                                    Ty.apply
                                                                                      (Ty.path "*")
                                                                                      []
                                                                                      [
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ]
                                                                                          ]
                                                                                          (Ty.associated_in_trait
                                                                                            "p3_field::packed::PackedValue"
                                                                                            []
                                                                                            []
                                                                                            PW
                                                                                            "Value")
                                                                                      ],
                                                                                    M.alloc (|
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let k :=
                                                                                            M.copy (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.read (|
                                                                                            M.SubPointer.get_array_field (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    prev_layer
                                                                                                  |)
                                                                                                |),
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "usize",
                                                                                                  BinOp.Wrap.mul,
                                                                                                  [
                                                                                                    Value.Integer
                                                                                                      IntegerKind.Usize
                                                                                                      2;
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "usize",
                                                                                                      BinOp.Wrap.add,
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          first_row
                                                                                                        |);
                                                                                                        M.read (|
                                                                                                          k
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |),
                                                                                              M.read (|
                                                                                                j
                                                                                              |)
                                                                                            |)
                                                                                          |)))
                                                                                    ]
                                                                                  |)))
                                                                              | _ =>
                                                                                M.impossible
                                                                                  "wrong number of arguments"
                                                                              end))
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)))
                                                        | _ =>
                                                          M.impossible "wrong number of arguments"
                                                        end))
                                                ]
                                              |)
                                            |) in
                                          let~ right :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ PW ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ PW ],
                                                M.get_function (|
                                                  "core::array::from_fn",
                                                  [ DIGEST_ELEMS ],
                                                  [
                                                    PW;
                                                    Ty.function [ Ty.tuple [ Ty.path "usize" ] ] PW
                                                  ]
                                                |),
                                                [
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.function
                                                                    [ Ty.tuple [ Ty.path "usize" ] ]
                                                                    PW
                                                                ],
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let j := M.copy (| γ |) in
                                                                    M.call_closure (|
                                                                      PW,
                                                                      M.get_trait_method (|
                                                                        "p3_field::packed::PackedValue",
                                                                        PW,
                                                                        [],
                                                                        [],
                                                                        "from_fn",
                                                                        [],
                                                                        [
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [ Ty.path "usize" ]
                                                                            ]
                                                                            (Ty.associated_in_trait
                                                                              "p3_field::packed::PackedValue"
                                                                              []
                                                                              []
                                                                              PW
                                                                              "Value")
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                ltac:(M.monadic
                                                                                  (M.match_operator (|
                                                                                    Ty.apply
                                                                                      (Ty.path "*")
                                                                                      []
                                                                                      [
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ]
                                                                                          ]
                                                                                          (Ty.associated_in_trait
                                                                                            "p3_field::packed::PackedValue"
                                                                                            []
                                                                                            []
                                                                                            PW
                                                                                            "Value")
                                                                                      ],
                                                                                    M.alloc (|
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let k :=
                                                                                            M.copy (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.read (|
                                                                                            M.SubPointer.get_array_field (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    prev_layer
                                                                                                  |)
                                                                                                |),
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "usize",
                                                                                                  BinOp.Wrap.add,
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "usize",
                                                                                                      BinOp.Wrap.mul,
                                                                                                      [
                                                                                                        Value.Integer
                                                                                                          IntegerKind.Usize
                                                                                                          2;
                                                                                                        M.call_closure (|
                                                                                                          Ty.path
                                                                                                            "usize",
                                                                                                          BinOp.Wrap.add,
                                                                                                          [
                                                                                                            M.read (|
                                                                                                              first_row
                                                                                                            |);
                                                                                                            M.read (|
                                                                                                              k
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      ]
                                                                                                    |);
                                                                                                    Value.Integer
                                                                                                      IntegerKind.Usize
                                                                                                      1
                                                                                                  ]
                                                                                                |)
                                                                                              |),
                                                                                              M.read (|
                                                                                                j
                                                                                              |)
                                                                                            |)
                                                                                          |)))
                                                                                    ]
                                                                                  |)))
                                                                              | _ =>
                                                                                M.impossible
                                                                                  "wrong number of arguments"
                                                                              end))
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)))
                                                        | _ =>
                                                          M.impossible "wrong number of arguments"
                                                        end))
                                                ]
                                              |)
                                            |) in
                                          let~ packed_digest :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ PW ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ PW ],
                                                M.get_trait_method (|
                                                  "p3_symmetric::compression::PseudoCompressionFunction",
                                                  C,
                                                  [ Value.Integer IntegerKind.Usize 2 ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ DIGEST_ELEMS ]
                                                      [ PW ]
                                                  ],
                                                  "compress",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| c |) |)
                                                  |);
                                                  Value.Array
                                                    [ M.read (| left |); M.read (| right |) ]
                                                ]
                                              |)
                                            |) in
                                          let~ tallest_digest :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ PW ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ PW ],
                                                M.get_trait_method (|
                                                  "p3_symmetric::hasher::CryptographicHasher",
                                                  H,
                                                  [],
                                                  [
                                                    P;
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ DIGEST_ELEMS ]
                                                      [ PW ]
                                                  ],
                                                  "hash_iter",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.apply (Ty.path "&") [] [ M_ ] ];
                                                        Ty.associated_in_trait
                                                          "p3_matrix::Matrix"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              P
                                                              "Value";
                                                            P
                                                          ]
                                                          M_
                                                          "{{synthetic}}'11";
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.apply (Ty.path "&") [] [ M_ ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "p3_matrix::Matrix"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                P
                                                                "Value";
                                                              P
                                                            ]
                                                            M_
                                                            "{{synthetic}}'11")
                                                      ]
                                                  ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| h |) |)
                                                  |);
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.apply (Ty.path "&") [] [ M_ ] ];
                                                        Ty.associated_in_trait
                                                          "p3_matrix::Matrix"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              P
                                                              "Value";
                                                            P
                                                          ]
                                                          M_
                                                          "{{synthetic}}'11";
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.apply (Ty.path "&") [] [ M_ ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "p3_matrix::Matrix"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                P
                                                                "Value";
                                                              P
                                                            ]
                                                            M_
                                                            "{{synthetic}}'11")
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                                      [],
                                                      [],
                                                      "flat_map",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_matrix::Matrix"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              P
                                                              "Value";
                                                            P
                                                          ]
                                                          M_
                                                          "{{synthetic}}'11";
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.apply (Ty.path "&") [] [ M_ ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "p3_matrix::Matrix"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                P
                                                                "Value";
                                                              P
                                                            ]
                                                            M_
                                                            "{{synthetic}}'11")
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                                          "iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ M_ ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ M_ ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    matrices_to_inject
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.closure
                                                        (fun γ =>
                                                          ltac:(M.monadic
                                                            match γ with
                                                            | [ α0 ] =>
                                                              ltac:(M.monadic
                                                                (M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [ M_ ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "p3_matrix::Matrix"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_field::packed::PackedValue"
                                                                              []
                                                                              []
                                                                              P
                                                                              "Value";
                                                                            P
                                                                          ]
                                                                          M_
                                                                          "{{synthetic}}'11")
                                                                    ],
                                                                  M.alloc (| α0 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let m := M.copy (| γ |) in
                                                                        M.call_closure (|
                                                                          Ty.associated_in_trait
                                                                            "p3_matrix::Matrix"
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_field::packed::PackedValue"
                                                                                []
                                                                                []
                                                                                P
                                                                                "Value";
                                                                              P
                                                                            ]
                                                                            M_
                                                                            "{{synthetic}}'11",
                                                                          M.get_trait_method (|
                                                                            "p3_matrix::Matrix",
                                                                            M_,
                                                                            [],
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_field::packed::PackedValue"
                                                                                []
                                                                                []
                                                                                P
                                                                                "Value"
                                                                            ],
                                                                            "vertically_packed_row",
                                                                            [],
                                                                            [ P ]
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  M.deref (|
                                                                                    M.read (| m |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.read (| first_row |)
                                                                          ]
                                                                        |)))
                                                                  ]
                                                                |)))
                                                            | _ =>
                                                              M.impossible
                                                                "wrong number of arguments"
                                                            end))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                            M.alloc (|
                                              M.write (|
                                                packed_digest,
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ DIGEST_ELEMS ]
                                                    [ PW ],
                                                  M.get_trait_method (|
                                                    "p3_symmetric::compression::PseudoCompressionFunction",
                                                    C,
                                                    [ Value.Integer IntegerKind.Usize 2 ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ DIGEST_ELEMS ]
                                                        [ PW ]
                                                    ],
                                                    "compress",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| c |) |)
                                                    |);
                                                    Value.Array
                                                      [
                                                        M.read (| packed_digest |);
                                                        M.read (| tallest_digest |)
                                                      ]
                                                  ]
                                                |)
                                              |)
                                            |) in
                                          M.use
                                            (M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::zip::Zip")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::IterMut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ DIGEST_ELEMS ]
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                PW
                                                                "Value"
                                                            ]
                                                        ];
                                                      Ty.associated_unknown
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::IterMut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ DIGEST_ELEMS ]
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_field::packed::PackedValue"
                                                                  []
                                                                  []
                                                                  PW
                                                                  "Value"
                                                              ]
                                                          ];
                                                        Ty.associated_unknown
                                                      ],
                                                    [],
                                                    [],
                                                    "into_iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ DIGEST_ELEMS ]
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_field::packed::PackedValue"
                                                                    []
                                                                    []
                                                                    PW
                                                                    "Value"
                                                                ]
                                                            ];
                                                          Ty.associated_unknown
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::IterMut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ DIGEST_ELEMS ]
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_field::packed::PackedValue"
                                                                  []
                                                                  []
                                                                  PW
                                                                  "Value"
                                                              ]
                                                          ],
                                                        [],
                                                        [],
                                                        "zip",
                                                        [],
                                                        [ Ty.associated_unknown ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ DIGEST_ELEMS ]
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_field::packed::PackedValue"
                                                                    []
                                                                    []
                                                                    PW
                                                                    "Value"
                                                                ]
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [ DIGEST_ELEMS ]
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_field::packed::PackedValue"
                                                                      []
                                                                      []
                                                                      PW
                                                                      "Value"
                                                                  ]
                                                              ],
                                                            "iter_mut",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.read (| digests_chunk |)
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.associated_unknown,
                                                          M.get_function (|
                                                            "p3_merkle_tree::merkle_tree::unpack_array",
                                                            [ DIGEST_ELEMS ],
                                                            [ PW ]
                                                          |),
                                                          [ M.read (| packed_digest |) ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let iter := M.copy (| γ |) in
                                                    M.loop (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      ltac:(M.monadic
                                                        (let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.match_operator (|
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ],
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [ DIGEST_ELEMS ]
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_field::packed::PackedValue"
                                                                                  []
                                                                                  []
                                                                                  PW
                                                                                  "Value"
                                                                              ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [ DIGEST_ELEMS ]
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_field::packed::PackedValue"
                                                                              []
                                                                              []
                                                                              PW
                                                                              "Value"
                                                                          ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::zip::Zip")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [ DIGEST_ELEMS ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_field::packed::PackedValue"
                                                                                []
                                                                                []
                                                                                PW
                                                                                "Value"
                                                                            ]
                                                                        ];
                                                                      Ty.associated_unknown
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let γ1_0 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ0_0,
                                                                      0
                                                                    |) in
                                                                  let γ1_1 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ0_0,
                                                                      1
                                                                    |) in
                                                                  let dst := M.copy (| γ1_0 |) in
                                                                  let src := M.copy (| γ1_1 |) in
                                                                  let~ _ :
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [ Ty.tuple [] ] :=
                                                                    M.alloc (|
                                                                      M.write (|
                                                                        M.deref (|
                                                                          M.read (| dst |)
                                                                        |),
                                                                        M.read (| src |)
                                                                      |)
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                    |)))
                                              ]
                                            |))
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.use
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start",
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.mul,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.div,
                                      [ M.read (| next_len |); M.read (| width |) ]
                                    |);
                                    M.read (| width |)
                                  ]
                                |));
                              ("end_", M.read (| next_len |))
                            ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            ltac:(M.monadic
                              (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "usize" ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let i := M.copy (| γ0_0 |) in
                                        let~ left :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ DIGEST_ELEMS ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      PW
                                                      "Value"
                                                  ]
                                              ] :=
                                          M.copy (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| prev_layer |) |),
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.mul,
                                                [ Value.Integer IntegerKind.Usize 2; M.read (| i |)
                                                ]
                                              |)
                                            |)
                                          |) in
                                        let~ right :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ DIGEST_ELEMS ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      PW
                                                      "Value"
                                                  ]
                                              ] :=
                                          M.copy (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| prev_layer |) |),
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.mul,
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      M.read (| i |)
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |)
                                            |)
                                          |) in
                                        let~ digest :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ DIGEST_ELEMS ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      PW
                                                      "Value"
                                                  ]
                                              ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ DIGEST_ELEMS ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_field::packed::PackedValue"
                                                    []
                                                    []
                                                    PW
                                                    "Value"
                                                ],
                                              M.get_trait_method (|
                                                "p3_symmetric::compression::PseudoCompressionFunction",
                                                C,
                                                [ Value.Integer IntegerKind.Usize 2 ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ DIGEST_ELEMS ]
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_field::packed::PackedValue"
                                                        []
                                                        []
                                                        PW
                                                        "Value"
                                                    ]
                                                ],
                                                "compress",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| c |) |)
                                                |);
                                                Value.Array
                                                  [ M.read (| left |); M.read (| right |) ]
                                              ]
                                            |)
                                          |) in
                                        let~ rows_digest :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ DIGEST_ELEMS ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      PW
                                                      "Value"
                                                  ]
                                              ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ DIGEST_ELEMS ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_field::packed::PackedValue"
                                                    []
                                                    []
                                                    PW
                                                    "Value"
                                                ],
                                              M.get_trait_method (|
                                                "p3_symmetric::hasher::CryptographicHasher",
                                                H,
                                                [],
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_field::packed::PackedValue"
                                                    []
                                                    []
                                                    P
                                                    "Value";
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ DIGEST_ELEMS ]
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_field::packed::PackedValue"
                                                        []
                                                        []
                                                        PW
                                                        "Value"
                                                    ]
                                                ],
                                                "hash_iter",
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.apply (Ty.path "&") [] [ M_ ] ];
                                                      Ty.associated_in_trait
                                                        "p3_matrix::Matrix"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::packed::PackedValue"
                                                            []
                                                            []
                                                            P
                                                            "Value"
                                                        ]
                                                        M_
                                                        "Row";
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                                            ]
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "p3_matrix::Matrix"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              P
                                                              "Value"
                                                          ]
                                                          M_
                                                          "Row")
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| h |) |)
                                                |);
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.apply (Ty.path "&") [] [ M_ ] ];
                                                      Ty.associated_in_trait
                                                        "p3_matrix::Matrix"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::packed::PackedValue"
                                                            []
                                                            []
                                                            P
                                                            "Value"
                                                        ]
                                                        M_
                                                        "Row";
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                                            ]
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "p3_matrix::Matrix"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              P
                                                              "Value"
                                                          ]
                                                          M_
                                                          "Row")
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                                    [],
                                                    [],
                                                    "flat_map",
                                                    [],
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_matrix::Matrix"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::packed::PackedValue"
                                                            []
                                                            []
                                                            P
                                                            "Value"
                                                        ]
                                                        M_
                                                        "Row";
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                                            ]
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "p3_matrix::Matrix"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              P
                                                              "Value"
                                                          ]
                                                          M_
                                                          "Row")
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                                                        "iter",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ M_ ]
                                                                    ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ M_ ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                [],
                                                                "deref",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  matrices_to_inject
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            ltac:(M.monadic
                                                              (M.match_operator (|
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ M_ ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "p3_matrix::Matrix"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_field::packed::PackedValue"
                                                                            []
                                                                            []
                                                                            P
                                                                            "Value"
                                                                        ]
                                                                        M_
                                                                        "Row")
                                                                  ],
                                                                M.alloc (| α0 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let m := M.copy (| γ |) in
                                                                      M.call_closure (|
                                                                        Ty.associated_in_trait
                                                                          "p3_matrix::Matrix"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_field::packed::PackedValue"
                                                                              []
                                                                              []
                                                                              P
                                                                              "Value"
                                                                          ]
                                                                          M_
                                                                          "Row",
                                                                        M.get_trait_method (|
                                                                          "p3_matrix::Matrix",
                                                                          M_,
                                                                          [],
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_field::packed::PackedValue"
                                                                              []
                                                                              []
                                                                              P
                                                                              "Value"
                                                                          ],
                                                                          "row",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (|
                                                                                M.deref (|
                                                                                  M.read (| m |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          M.read (| i |)
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |)))
                                                          | _ =>
                                                            M.impossible "wrong number of arguments"
                                                          end))
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.write (|
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ DIGEST_ELEMS ]
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::packed::PackedValue"
                                                            []
                                                            []
                                                            PW
                                                            "Value"
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::index::IndexMut",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ DIGEST_ELEMS ]
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              PW
                                                              "Value"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    [ Ty.path "usize" ],
                                                    "index_mut",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      next_digests
                                                    |);
                                                    M.read (| i |)
                                                  ]
                                                |)
                                              |),
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ DIGEST_ELEMS ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      PW
                                                      "Value"
                                                  ],
                                                M.get_trait_method (|
                                                  "p3_symmetric::compression::PseudoCompressionFunction",
                                                  C,
                                                  [ Value.Integer IntegerKind.Usize 2 ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ DIGEST_ELEMS ]
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_field::packed::PackedValue"
                                                          []
                                                          []
                                                          PW
                                                          "Value"
                                                      ]
                                                  ],
                                                  "compress",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| c |) |)
                                                  |);
                                                  Value.Array
                                                    [ M.read (| digest |); M.read (| rows_digest |)
                                                    ]
                                                ]
                                              |)
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.use
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start", M.read (| next_len |));
                              ("end_",
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.div,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ DIGEST_ELEMS ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::packed::PackedValue"
                                                  []
                                                  []
                                                  PW
                                                  "Value"
                                              ]
                                          ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| prev_layer |) |)
                                        |)
                                      ]
                                    |);
                                    Value.Integer IntegerKind.Usize 2
                                  ]
                                |))
                            ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            ltac:(M.monadic
                              (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "usize" ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let i := M.copy (| γ0_0 |) in
                                        let~ left :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ DIGEST_ELEMS ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      PW
                                                      "Value"
                                                  ]
                                              ] :=
                                          M.copy (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| prev_layer |) |),
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.mul,
                                                [ Value.Integer IntegerKind.Usize 2; M.read (| i |)
                                                ]
                                              |)
                                            |)
                                          |) in
                                        let~ right :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ DIGEST_ELEMS ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      PW
                                                      "Value"
                                                  ]
                                              ] :=
                                          M.copy (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| prev_layer |) |),
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.mul,
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      M.read (| i |)
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |)
                                            |)
                                          |) in
                                        let~ digest :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ DIGEST_ELEMS ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      PW
                                                      "Value"
                                                  ]
                                              ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ DIGEST_ELEMS ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_field::packed::PackedValue"
                                                    []
                                                    []
                                                    PW
                                                    "Value"
                                                ],
                                              M.get_trait_method (|
                                                "p3_symmetric::compression::PseudoCompressionFunction",
                                                C,
                                                [ Value.Integer IntegerKind.Usize 2 ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ DIGEST_ELEMS ]
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_field::packed::PackedValue"
                                                        []
                                                        []
                                                        PW
                                                        "Value"
                                                    ]
                                                ],
                                                "compress",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| c |) |)
                                                |);
                                                Value.Array
                                                  [ M.read (| left |); M.read (| right |) ]
                                              ]
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.write (|
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ DIGEST_ELEMS ]
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::packed::PackedValue"
                                                            []
                                                            []
                                                            PW
                                                            "Value"
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::index::IndexMut",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ DIGEST_ELEMS ]
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              PW
                                                              "Value"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    [ Ty.path "usize" ],
                                                    "index_mut",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      next_digests
                                                    |);
                                                    M.read (| i |)
                                                  ]
                                                |)
                                              |),
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ DIGEST_ELEMS ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      PW
                                                      "Value"
                                                  ],
                                                M.get_trait_method (|
                                                  "p3_symmetric::compression::PseudoCompressionFunction",
                                                  C,
                                                  [ Value.Integer IntegerKind.Usize 2 ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ DIGEST_ELEMS ]
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_field::packed::PackedValue"
                                                          []
                                                          []
                                                          PW
                                                          "Value"
                                                      ]
                                                  ],
                                                  "compress",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| c |) |)
                                                  |);
                                                  Value.Array
                                                    [
                                                      M.read (| digest |);
                                                      M.read (| default_digest |)
                                                    ]
                                                ]
                                              |)
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              next_digests
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_compress_and_inject :
    M.IsFunction.C "p3_merkle_tree::merkle_tree::compress_and_inject" compress_and_inject.
  Admitted.
  Global Typeclasses Opaque compress_and_inject.
  
  (*
  fn compress<P, C, const DIGEST_ELEMS: usize>(
      prev_layer: &[[P::Value; DIGEST_ELEMS]],
      c: &C,
  ) -> Vec<[P::Value; DIGEST_ELEMS]>
  where
      P: PackedValue,
      C: PseudoCompressionFunction<[P::Value; DIGEST_ELEMS], 2>
          + PseudoCompressionFunction<[P; DIGEST_ELEMS], 2>
          + Sync,
  {
      let width = P::WIDTH;
      // Always return an even number of digests, except when it's the root.
      let next_len_padded = if prev_layer.len() == 2 {
          1
      } else {
          // Round prev_layer.len() / 2 up to the next even integer.
          (prev_layer.len() / 2 + 1) & !1
      };
      let next_len = prev_layer.len() / 2;
  
      let default_digest = [P::Value::default(); DIGEST_ELEMS];
      let mut next_digests = vec![default_digest; next_len_padded];
  
      next_digests[0..next_len]
          .par_chunks_exact_mut(width)
          .enumerate()
          .for_each(|(i, digests_chunk)| {
              let first_row = i * width;
              let left = array::from_fn(|j| P::from_fn(|k| prev_layer[2 * (first_row + k)][j]));
              let right = array::from_fn(|j| P::from_fn(|k| prev_layer[2 * (first_row + k) + 1][j]));
              let packed_digest = c.compress([left, right]);
              for (dst, src) in digests_chunk.iter_mut().zip(unpack_array(packed_digest)) {
                  *dst = src;
              }
          });
  
      // If our packing width did not divide next_len, fall back to single-threaded scalar code
      // for the last bit.
      for i in (next_len / width * width)..next_len {
          let left = prev_layer[2 * i];
          let right = prev_layer[2 * i + 1];
          next_digests[i] = c.compress([left, right]);
      }
  
      // Everything has been initialized so we can safely cast.
      next_digests
  }
  *)
  Definition compress (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ DIGEST_ELEMS ], [ P; C ], [ prev_layer; c ] =>
      ltac:(M.monadic
        (let prev_layer := M.alloc (| prev_layer |) in
        let c := M.alloc (| c |) in
        M.read (|
          let~ width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.copy (|
              get_constant (| "p3_field::packed::PackedValue::WIDTH", Ty.path "usize" |)
            |) in
          let~ next_len_padded : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.copy (|
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.eq,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ DIGEST_ELEMS ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::packed::PackedValue"
                                              []
                                              []
                                              P
                                              "Value"
                                          ]
                                      ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| prev_layer |) |)
                                    |)
                                  ]
                                |);
                                Value.Integer IntegerKind.Usize 2
                              ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (| Value.Integer IntegerKind.Usize 1 |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.bit_and,
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.add,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.div,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ DIGEST_ELEMS ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::packed::PackedValue"
                                                  []
                                                  []
                                                  P
                                                  "Value"
                                              ]
                                          ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| prev_layer |) |)
                                        |)
                                      ]
                                    |);
                                    Value.Integer IntegerKind.Usize 2
                                  ]
                                |);
                                Value.Integer IntegerKind.Usize 1
                              ]
                            |);
                            UnOp.not (| Value.Integer IntegerKind.Usize 1 |)
                          ]
                        |)
                      |)))
                ]
              |)
            |) in
          let~ next_len : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.div,
                [
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ DIGEST_ELEMS ]
                            [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value"
                            ]
                        ],
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| prev_layer |) |) |) ]
                  |);
                  Value.Integer IntegerKind.Usize 2
                ]
              |)
            |) in
          let~ default_digest :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "array")
                    [ DIGEST_ELEMS ]
                    [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value" ]
                ] :=
            M.alloc (|
              repeat (|
                M.call_closure (|
                  Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |),
                DIGEST_ELEMS
              |)
            |) in
          let~ next_digests :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ DIGEST_ELEMS ]
                        [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value" ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ DIGEST_ELEMS ]
                      [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value" ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_function (|
                  "alloc::vec::from_elem",
                  [],
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ DIGEST_ELEMS ]
                      [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value" ]
                  ]
                |),
                [ M.read (| default_digest |); M.read (| next_len_padded |) ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::ChunksExactMut")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ DIGEST_ELEMS ]
                            [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value"
                            ]
                        ]
                    ],
                  [],
                  [],
                  "for_each",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.tuple
                              [
                                Ty.path "usize";
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ DIGEST_ELEMS ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::packed::PackedValue"
                                              []
                                              []
                                              P
                                              "Value"
                                          ]
                                      ]
                                  ]
                              ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::ChunksExactMut")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ DIGEST_ELEMS ]
                              [
                                Ty.associated_in_trait
                                  "p3_field::packed::PackedValue"
                                  []
                                  []
                                  P
                                  "Value"
                              ]
                          ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::ChunksExactMut")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ DIGEST_ELEMS ]
                            [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value"
                            ]
                        ],
                      [],
                      [],
                      "enumerate",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::ChunksExactMut")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ DIGEST_ELEMS ]
                              [
                                Ty.associated_in_trait
                                  "p3_field::packed::PackedValue"
                                  []
                                  []
                                  P
                                  "Value"
                              ]
                          ],
                        M.get_trait_method (|
                          "p3_maybe_rayon::serial::ParallelSliceMut",
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ DIGEST_ELEMS ]
                                [
                                  Ty.associated_in_trait
                                    "p3_field::packed::PackedValue"
                                    []
                                    []
                                    P
                                    "Value"
                                ]
                            ],
                          [],
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ DIGEST_ELEMS ]
                              [
                                Ty.associated_in_trait
                                  "p3_field::packed::PackedValue"
                                  []
                                  []
                                  P
                                  "Value"
                              ]
                          ],
                          "par_chunks_exact_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ DIGEST_ELEMS ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::packed::PackedValue"
                                              []
                                              []
                                              P
                                              "Value"
                                          ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::index::IndexMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ DIGEST_ELEMS ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_field::packed::PackedValue"
                                            []
                                            []
                                            P
                                            "Value"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                  "index_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, next_digests |);
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", Value.Integer IntegerKind.Usize 0);
                                      ("end_", M.read (| next_len |))
                                    ]
                                ]
                              |)
                            |)
                          |);
                          M.read (| width |)
                        ]
                      |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ DIGEST_ELEMS ]
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::packed::PackedValue"
                                                            []
                                                            []
                                                            P
                                                            "Value"
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let i := M.copy (| γ0_0 |) in
                                    let digests_chunk := M.copy (| γ0_1 |) in
                                    M.read (|
                                      let~ first_row :
                                          Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.mul,
                                            [ M.read (| i |); M.read (| width |) ]
                                          |)
                                        |) in
                                      let~ left :
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ P ] ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ P ],
                                            M.get_function (|
                                              "core::array::from_fn",
                                              [ DIGEST_ELEMS ],
                                              [ P; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P ]
                                            |),
                                            [
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [ Ty.path "usize" ] ]
                                                                P
                                                            ],
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let j := M.copy (| γ |) in
                                                                M.call_closure (|
                                                                  P,
                                                                  M.get_trait_method (|
                                                                    "p3_field::packed::PackedValue",
                                                                    P,
                                                                    [],
                                                                    [],
                                                                    "from_fn",
                                                                    [],
                                                                    [
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [ Ty.path "usize" ]
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "p3_field::packed::PackedValue"
                                                                          []
                                                                          []
                                                                          P
                                                                          "Value")
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            ltac:(M.monadic
                                                                              (M.match_operator (|
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [
                                                                                    Ty.function
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ]
                                                                                      ]
                                                                                      (Ty.associated_in_trait
                                                                                        "p3_field::packed::PackedValue"
                                                                                        []
                                                                                        []
                                                                                        P
                                                                                        "Value")
                                                                                  ],
                                                                                M.alloc (| α0 |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let k :=
                                                                                        M.copy (|
                                                                                          γ
                                                                                        |) in
                                                                                      M.read (|
                                                                                        M.SubPointer.get_array_field (|
                                                                                          M.SubPointer.get_array_field (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                prev_layer
                                                                                              |)
                                                                                            |),
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "usize",
                                                                                              BinOp.Wrap.mul,
                                                                                              [
                                                                                                Value.Integer
                                                                                                  IntegerKind.Usize
                                                                                                  2;
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "usize",
                                                                                                  BinOp.Wrap.add,
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      first_row
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      k
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |),
                                                                                          M.read (|
                                                                                            j
                                                                                          |)
                                                                                        |)
                                                                                      |)))
                                                                                ]
                                                                              |)))
                                                                          | _ =>
                                                                            M.impossible
                                                                              "wrong number of arguments"
                                                                          end))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        |) in
                                      let~ right :
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ P ] ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ P ],
                                            M.get_function (|
                                              "core::array::from_fn",
                                              [ DIGEST_ELEMS ],
                                              [ P; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] P ]
                                            |),
                                            [
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [ Ty.path "usize" ] ]
                                                                P
                                                            ],
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let j := M.copy (| γ |) in
                                                                M.call_closure (|
                                                                  P,
                                                                  M.get_trait_method (|
                                                                    "p3_field::packed::PackedValue",
                                                                    P,
                                                                    [],
                                                                    [],
                                                                    "from_fn",
                                                                    [],
                                                                    [
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [ Ty.path "usize" ]
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "p3_field::packed::PackedValue"
                                                                          []
                                                                          []
                                                                          P
                                                                          "Value")
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            ltac:(M.monadic
                                                                              (M.match_operator (|
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [
                                                                                    Ty.function
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ]
                                                                                      ]
                                                                                      (Ty.associated_in_trait
                                                                                        "p3_field::packed::PackedValue"
                                                                                        []
                                                                                        []
                                                                                        P
                                                                                        "Value")
                                                                                  ],
                                                                                M.alloc (| α0 |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let k :=
                                                                                        M.copy (|
                                                                                          γ
                                                                                        |) in
                                                                                      M.read (|
                                                                                        M.SubPointer.get_array_field (|
                                                                                          M.SubPointer.get_array_field (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                prev_layer
                                                                                              |)
                                                                                            |),
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "usize",
                                                                                              BinOp.Wrap.add,
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "usize",
                                                                                                  BinOp.Wrap.mul,
                                                                                                  [
                                                                                                    Value.Integer
                                                                                                      IntegerKind.Usize
                                                                                                      2;
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "usize",
                                                                                                      BinOp.Wrap.add,
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          first_row
                                                                                                        |);
                                                                                                        M.read (|
                                                                                                          k
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                Value.Integer
                                                                                                  IntegerKind.Usize
                                                                                                  1
                                                                                              ]
                                                                                            |)
                                                                                          |),
                                                                                          M.read (|
                                                                                            j
                                                                                          |)
                                                                                        |)
                                                                                      |)))
                                                                                ]
                                                                              |)))
                                                                          | _ =>
                                                                            M.impossible
                                                                              "wrong number of arguments"
                                                                          end))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        |) in
                                      let~ packed_digest :
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ P ] ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ P ],
                                            M.get_trait_method (|
                                              "p3_symmetric::compression::PseudoCompressionFunction",
                                              C,
                                              [ Value.Integer IntegerKind.Usize 2 ],
                                              [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ P ] ],
                                              "compress",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| c |) |)
                                              |);
                                              Value.Array [ M.read (| left |); M.read (| right |) ]
                                            ]
                                          |)
                                        |) in
                                      M.use
                                        (M.match_operator (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::IterMut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ DIGEST_ELEMS ]
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::packed::PackedValue"
                                                            []
                                                            []
                                                            P
                                                            "Value"
                                                        ]
                                                    ];
                                                  Ty.associated_unknown
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::collect::IntoIterator",
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ DIGEST_ELEMS ]
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              P
                                                              "Value"
                                                          ]
                                                      ];
                                                    Ty.associated_unknown
                                                  ],
                                                [],
                                                [],
                                                "into_iter",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::zip::Zip")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::IterMut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ DIGEST_ELEMS ]
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                P
                                                                "Value"
                                                            ]
                                                        ];
                                                      Ty.associated_unknown
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ DIGEST_ELEMS ]
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              P
                                                              "Value"
                                                          ]
                                                      ],
                                                    [],
                                                    [],
                                                    "zip",
                                                    [],
                                                    [ Ty.associated_unknown ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::IterMut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ DIGEST_ELEMS ]
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                P
                                                                "Value"
                                                            ]
                                                        ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ DIGEST_ELEMS ]
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_field::packed::PackedValue"
                                                                  []
                                                                  []
                                                                  P
                                                                  "Value"
                                                              ]
                                                          ],
                                                        "iter_mut",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.deref (| M.read (| digests_chunk |) |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.associated_unknown,
                                                      M.get_function (|
                                                        "p3_merkle_tree::merkle_tree::unpack_array",
                                                        [ DIGEST_ELEMS ],
                                                        [ P ]
                                                      |),
                                                      [ M.read (| packed_digest |) ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let iter := M.copy (| γ |) in
                                                M.loop (|
                                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                  ltac:(M.monadic
                                                    (let~ _ :
                                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                      M.match_operator (|
                                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [ DIGEST_ELEMS ]
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_field::packed::PackedValue"
                                                                              []
                                                                              []
                                                                              P
                                                                              "Value"
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [ DIGEST_ELEMS ]
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_field::packed::PackedValue"
                                                                          []
                                                                          []
                                                                          P
                                                                          "Value"
                                                                      ]
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::zip::Zip")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [ DIGEST_ELEMS ]
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_field::packed::PackedValue"
                                                                            []
                                                                            []
                                                                            P
                                                                            "Value"
                                                                        ]
                                                                    ];
                                                                  Ty.associated_unknown
                                                                ],
                                                              [],
                                                              [],
                                                              "next",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    iter
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.is_struct_tuple (|
                                                                  γ,
                                                                  "core::option::Option::None"
                                                                |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (| M.break (||) |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::option::Option::Some",
                                                                  0
                                                                |) in
                                                              let γ1_0 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ0_0,
                                                                  0
                                                                |) in
                                                              let γ1_1 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ0_0,
                                                                  1
                                                                |) in
                                                              let dst := M.copy (| γ1_0 |) in
                                                              let src := M.copy (| γ1_1 |) in
                                                              let~ _ :
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [ Ty.tuple [] ] :=
                                                                M.alloc (|
                                                                  M.write (|
                                                                    M.deref (| M.read (| dst |) |),
                                                                    M.read (| src |)
                                                                  |)
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                                |)))
                                          ]
                                        |))
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start",
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.mul,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.div,
                                  [ M.read (| next_len |); M.read (| width |) ]
                                |);
                                M.read (| width |)
                              ]
                            |));
                          ("end_", M.read (| next_len |))
                        ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let i := M.copy (| γ0_0 |) in
                                    let~ left :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ DIGEST_ELEMS ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::packed::PackedValue"
                                                  []
                                                  []
                                                  P
                                                  "Value"
                                              ]
                                          ] :=
                                      M.copy (|
                                        M.SubPointer.get_array_field (|
                                          M.deref (| M.read (| prev_layer |) |),
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.mul,
                                            [ Value.Integer IntegerKind.Usize 2; M.read (| i |) ]
                                          |)
                                        |)
                                      |) in
                                    let~ right :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ DIGEST_ELEMS ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::packed::PackedValue"
                                                  []
                                                  []
                                                  P
                                                  "Value"
                                              ]
                                          ] :=
                                      M.copy (|
                                        M.SubPointer.get_array_field (|
                                          M.deref (| M.read (| prev_layer |) |),
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.mul,
                                                [ Value.Integer IntegerKind.Usize 2; M.read (| i |)
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |)
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.write (|
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ DIGEST_ELEMS ]
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_field::packed::PackedValue"
                                                        []
                                                        []
                                                        P
                                                        "Value"
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::index::IndexMut",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ DIGEST_ELEMS ]
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_field::packed::PackedValue"
                                                          []
                                                          []
                                                          P
                                                          "Value"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [ Ty.path "usize" ],
                                                "index_mut",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (| Pointer.Kind.MutRef, next_digests |);
                                                M.read (| i |)
                                              ]
                                            |)
                                          |),
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ DIGEST_ELEMS ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::packed::PackedValue"
                                                  []
                                                  []
                                                  P
                                                  "Value"
                                              ],
                                            M.get_trait_method (|
                                              "p3_symmetric::compression::PseudoCompressionFunction",
                                              C,
                                              [ Value.Integer IntegerKind.Usize 2 ],
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ DIGEST_ELEMS ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      P
                                                      "Value"
                                                  ]
                                              ],
                                              "compress",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| c |) |)
                                              |);
                                              Value.Array [ M.read (| left |); M.read (| right |) ]
                                            ]
                                          |)
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          next_digests
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_compress :
    M.IsFunction.C "p3_merkle_tree::merkle_tree::compress" compress.
  Admitted.
  Global Typeclasses Opaque compress.
  
  (*
  fn unpack_array<P: PackedValue, const N: usize>(
      packed_digest: [P; N],
  ) -> impl Iterator<Item = [P::Value; N]> {
      (0..P::WIDTH).map(move |j| packed_digest.map(|p| p.as_slice()[j]))
  }
  *)
  Definition unpack_array (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ P ], [ packed_digest ] =>
      ltac:(M.monadic
        (let packed_digest := M.alloc (| packed_digest |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "core::iter::adapters::map::Map")
            []
            [
              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
              Ty.function
                [ Ty.tuple [ Ty.path "usize" ] ]
                (Ty.apply
                  (Ty.path "array")
                  [ N ]
                  [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value" ])
            ],
          M.get_trait_method (|
            "core::iter::traits::iterator::Iterator",
            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
            [],
            [],
            "map",
            [],
            [
              Ty.apply
                (Ty.path "array")
                [ N ]
                [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value" ];
              Ty.function
                [ Ty.tuple [ Ty.path "usize" ] ]
                (Ty.apply
                  (Ty.path "array")
                  [ N ]
                  [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value" ])
            ]
          |),
          [
            Value.StructRecord
              "core::ops::range::Range"
              [
                ("start", Value.Integer IntegerKind.Usize 0);
                ("end_",
                  M.read (|
                    get_constant (| "p3_field::packed::PackedValue::WIDTH", Ty.path "usize" |)
                  |))
              ];
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize" ] ]
                              (Ty.apply
                                (Ty.path "array")
                                [ N ]
                                [
                                  Ty.associated_in_trait
                                    "p3_field::packed::PackedValue"
                                    []
                                    []
                                    P
                                    "Value"
                                ])
                          ],
                        M.alloc (| α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let j := M.copy (| γ |) in
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ N ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::packed::PackedValue"
                                      []
                                      []
                                      P
                                      "Value"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "array") [ N ] [ P ],
                                  "map",
                                  [],
                                  [
                                    Ty.function
                                      [ Ty.tuple [ P ] ]
                                      (Ty.associated_in_trait
                                        "p3_field::packed::PackedValue"
                                        []
                                        []
                                        P
                                        "Value");
                                    Ty.associated_in_trait
                                      "p3_field::packed::PackedValue"
                                      []
                                      []
                                      P
                                      "Value"
                                  ]
                                |),
                                [
                                  M.read (| packed_digest |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.function
                                                    [ Ty.tuple [ P ] ]
                                                    (Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      P
                                                      "Value")
                                                ],
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let p := M.copy (| γ |) in
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_field::packed::PackedValue"
                                                                      []
                                                                      []
                                                                      P
                                                                      "Value"
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "p3_field::packed::PackedValue",
                                                              P,
                                                              [],
                                                              [],
                                                              "as_slice",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.borrow (| Pointer.Kind.Ref, p |) ]
                                                          |)
                                                        |),
                                                        M.read (| j |)
                                                      |)
                                                    |)))
                                              ]
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end))
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_unpack_array :
    M.IsFunction.C "p3_merkle_tree::merkle_tree::unpack_array" unpack_array.
  Admitted.
  Global Typeclasses Opaque unpack_array.
End merkle_tree.
