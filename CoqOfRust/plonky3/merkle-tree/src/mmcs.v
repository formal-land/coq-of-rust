(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module mmcs.
  (* StructRecord
    {
      name := "MerkleTreeMmcs";
      const_params := [ "DIGEST_ELEMS" ];
      ty_params := [ "P"; "PW"; "H"; "C" ];
      fields :=
        [
          ("hash", H);
          ("compress", C);
          ("_phantom", Ty.apply (Ty.path "core::marker::PhantomData") [] [ Ty.tuple [ P; PW ] ])
        ];
    } *)
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_P_where_core_marker_Copy_PW_where_core_marker_Copy_H_where_core_marker_Copy_C_for_p3_merkle_tree_mmcs_MerkleTreeMmcs_DIGEST_ELEMS_P_PW_H_C.
    Definition Self (DIGEST_ELEMS : Value.t) (P PW H C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs") [ DIGEST_ELEMS ] [ P; PW; H; C ].
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (P PW H C : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self DIGEST_ELEMS P PW H C)
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_P_where_core_marker_Copy_PW_where_core_marker_Copy_H_where_core_marker_Copy_C_for_p3_merkle_tree_mmcs_MerkleTreeMmcs_DIGEST_ELEMS_P_PW_H_C.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_P_where_core_clone_Clone_PW_where_core_clone_Clone_H_where_core_clone_Clone_C_for_p3_merkle_tree_mmcs_MerkleTreeMmcs_DIGEST_ELEMS_P_PW_H_C.
    Definition Self (DIGEST_ELEMS : Value.t) (P PW H C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs") [ DIGEST_ELEMS ] [ P; PW; H; C ].
    
    (* Clone *)
    Definition clone
        (DIGEST_ELEMS : Value.t)
        (P PW H C : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS P PW H C in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_merkle_tree::mmcs::MerkleTreeMmcs"
            [
              ("hash",
                M.call_closure (|
                  H,
                  M.get_trait_method (| "core::clone::Clone", H, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_merkle_tree::mmcs::MerkleTreeMmcs",
                            "hash"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("compress",
                M.call_closure (|
                  C,
                  M.get_trait_method (| "core::clone::Clone", C, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_merkle_tree::mmcs::MerkleTreeMmcs",
                            "compress"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("_phantom",
                M.call_closure (|
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ Ty.tuple [ P; PW ] ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "core::marker::PhantomData") [] [ Ty.tuple [ P; PW ] ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_merkle_tree::mmcs::MerkleTreeMmcs",
                            "_phantom"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (P PW H C : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self DIGEST_ELEMS P PW H C)
        (* Instance *) [ ("clone", InstanceField.Method (clone DIGEST_ELEMS P PW H C)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_P_where_core_clone_Clone_PW_where_core_clone_Clone_H_where_core_clone_Clone_C_for_p3_merkle_tree_mmcs_MerkleTreeMmcs_DIGEST_ELEMS_P_PW_H_C.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_P_where_core_fmt_Debug_PW_where_core_fmt_Debug_H_where_core_fmt_Debug_C_for_p3_merkle_tree_mmcs_MerkleTreeMmcs_DIGEST_ELEMS_P_PW_H_C.
    Definition Self (DIGEST_ELEMS : Value.t) (P PW H C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs") [ DIGEST_ELEMS ] [ P; PW; H; C ].
    
    (* Debug *)
    Definition fmt
        (DIGEST_ELEMS : Value.t)
        (P PW H C : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS P PW H C in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MerkleTreeMmcs" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "hash" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_merkle_tree::mmcs::MerkleTreeMmcs",
                        "hash"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "compress" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_merkle_tree::mmcs::MerkleTreeMmcs",
                        "compress"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_phantom" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_merkle_tree::mmcs::MerkleTreeMmcs",
                            "_phantom"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (P PW H C : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self DIGEST_ELEMS P PW H C)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt DIGEST_ELEMS P PW H C)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_P_where_core_fmt_Debug_PW_where_core_fmt_Debug_H_where_core_fmt_Debug_C_for_p3_merkle_tree_mmcs_MerkleTreeMmcs_DIGEST_ELEMS_P_PW_H_C.
  
  (*
  Enum MerkleTreeError
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "WrongBatchSize";
          item := StructTuple [];
        };
        {
          name := "WrongWidth";
          item := StructTuple [];
        };
        {
          name := "WrongHeight";
          item :=
            StructRecord [ ("log_max_height", Ty.path "usize"); ("num_siblings", Ty.path "usize") ];
        };
        {
          name := "IncompatibleHeights";
          item := StructTuple [];
        };
        {
          name := "RootMismatch";
          item := StructTuple [];
        };
        {
          name := "EmptyBatch";
          item := StructTuple [];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_MerkleTreeError_WrongBatchSize :
    M.IsDiscriminant "p3_merkle_tree::mmcs::MerkleTreeError::WrongBatchSize" 0.
  Axiom IsDiscriminant_MerkleTreeError_WrongWidth :
    M.IsDiscriminant "p3_merkle_tree::mmcs::MerkleTreeError::WrongWidth" 1.
  Axiom IsDiscriminant_MerkleTreeError_WrongHeight :
    M.IsDiscriminant "p3_merkle_tree::mmcs::MerkleTreeError::WrongHeight" 2.
  Axiom IsDiscriminant_MerkleTreeError_IncompatibleHeights :
    M.IsDiscriminant "p3_merkle_tree::mmcs::MerkleTreeError::IncompatibleHeights" 3.
  Axiom IsDiscriminant_MerkleTreeError_RootMismatch :
    M.IsDiscriminant "p3_merkle_tree::mmcs::MerkleTreeError::RootMismatch" 4.
  Axiom IsDiscriminant_MerkleTreeError_EmptyBatch :
    M.IsDiscriminant "p3_merkle_tree::mmcs::MerkleTreeError::EmptyBatch" 5.
  
  Module Impl_core_fmt_Debug_for_p3_merkle_tree_mmcs_MerkleTreeError.
    Definition Self : Ty.t := Ty.path "p3_merkle_tree::mmcs::MerkleTreeError".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ]
                ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "p3_merkle_tree::mmcs::MerkleTreeError::WrongBatchSize"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "WrongBatchSize" |) |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "p3_merkle_tree::mmcs::MerkleTreeError::WrongWidth"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "WrongWidth" |) |) |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_merkle_tree::mmcs::MerkleTreeError::WrongHeight",
                        "log_max_height"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_merkle_tree::mmcs::MerkleTreeError::WrongHeight",
                        "num_siblings"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field2_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "WrongHeight" |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "log_max_height" |) |)
                          |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |));
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "num_siblings" |) |)
                          |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_1 |) |)
                            |))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "p3_merkle_tree::mmcs::MerkleTreeError::IncompatibleHeights"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "IncompatibleHeights" |) |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "p3_merkle_tree::mmcs::MerkleTreeError::RootMismatch"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "RootMismatch" |) |) |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "p3_merkle_tree::mmcs::MerkleTreeError::EmptyBatch"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "EmptyBatch" |) |) |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_p3_merkle_tree_mmcs_MerkleTreeError.
  
  Module Impl_p3_merkle_tree_mmcs_MerkleTreeMmcs_DIGEST_ELEMS_P_PW_H_C.
    Definition Self (DIGEST_ELEMS : Value.t) (P PW H C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs") [ DIGEST_ELEMS ] [ P; PW; H; C ].
    
    (*
        pub const fn new(hash: H, compress: C) -> Self {
            Self {
                hash,
                compress,
                _phantom: PhantomData,
            }
        }
    *)
    Definition new
        (DIGEST_ELEMS : Value.t)
        (P PW H C : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS P PW H C in
      match ε, τ, α with
      | [], [], [ hash; compress ] =>
        ltac:(M.monadic
          (let hash := M.alloc (| hash |) in
          let compress := M.alloc (| compress |) in
          Value.StructRecord
            "p3_merkle_tree::mmcs::MerkleTreeMmcs"
            [
              ("hash", M.read (| hash |));
              ("compress", M.read (| compress |));
              ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (DIGEST_ELEMS : Value.t) (P PW H C : Ty.t),
      M.IsAssociatedFunction.C (Self DIGEST_ELEMS P PW H C) "new" (new DIGEST_ELEMS P PW H C).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_p3_merkle_tree_mmcs_MerkleTreeMmcs_DIGEST_ELEMS_P_PW_H_C.
  
  Module Impl_p3_commit_mmcs_Mmcs_where_p3_field_packed_PackedValue_P_where_p3_field_packed_PackedValue_PW_where_p3_symmetric_hasher_CryptographicHasher_H_associated_in_trait_p3_field_packed_PackedValue___P_Value_array_DIGEST_ELEMS_associated_in_trait_p3_field_packed_PackedValue___PW_Value_where_p3_symmetric_hasher_CryptographicHasher_H_P_array_DIGEST_ELEMS_PW_where_core_marker_Sync_H_where_p3_symmetric_compression_PseudoCompressionFunction_C_array_DIGEST_ELEMS_associated_in_trait_p3_field_packed_PackedValue___PW_Value_where_p3_symmetric_compression_PseudoCompressionFunction_C_array_DIGEST_ELEMS_PW_where_core_marker_Sync_C_where_core_cmp_Eq_associated_in_trait_p3_field_packed_PackedValue___PW_Value_where_serde_ser_Serialize_array_DIGEST_ELEMS_associated_in_trait_p3_field_packed_PackedValue___PW_Value_where_serde_de_Deserialize_array_DIGEST_ELEMS_associated_in_trait_p3_field_packed_PackedValue___PW_Value_associated_in_trait_p3_field_packed_PackedValue___P_Value_for_p3_merkle_tree_mmcs_MerkleTreeMmcs_DIGEST_ELEMS_P_PW_H_C.
    Definition Self (DIGEST_ELEMS : Value.t) (P PW H C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs") [ DIGEST_ELEMS ] [ P; PW; H; C ].
    
    (*     type ProverData<M> = MerkleTree<P::Value, PW::Value, M, DIGEST_ELEMS>; *)
    Definition _ProverData (DIGEST_ELEMS : Value.t) (P PW H C : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_merkle_tree::merkle_tree::MerkleTree")
        [ DIGEST_ELEMS ]
        [
          Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value";
          Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value";
          M_
        ].
    
    (*     type Commitment = Hash<P::Value, PW::Value, DIGEST_ELEMS>; *)
    Definition _Commitment (DIGEST_ELEMS : Value.t) (P PW H C : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_symmetric::hash::Hash")
        [ DIGEST_ELEMS ]
        [
          Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value";
          Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value"
        ].
    
    (*     type Proof = Vec<[PW::Value; DIGEST_ELEMS]>; *)
    Definition _Proof (DIGEST_ELEMS : Value.t) (P PW H C : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "alloc::vec::Vec")
        []
        [
          Ty.apply
            (Ty.path "array")
            [ DIGEST_ELEMS ]
            [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value" ];
          Ty.path "alloc::alloc::Global"
        ].
    
    (*     type Error = MerkleTreeError; *)
    Definition _Error (DIGEST_ELEMS : Value.t) (P PW H C : Ty.t) : Ty.t :=
      Ty.path "p3_merkle_tree::mmcs::MerkleTreeError".
    
    (*
        fn commit<M: Matrix<P::Value>>(
            &self,
            inputs: Vec<M>,
        ) -> (Self::Commitment, Self::ProverData<M>) {
            let tree = MerkleTree::new::<P, PW, H, C>(&self.hash, &self.compress, inputs);
            let root = tree.root();
            (root, tree)
        }
    *)
    Definition commit
        (DIGEST_ELEMS : Value.t)
        (P PW H C : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS P PW H C in
      match ε, τ, α with
      | [], [ M_ ], [ self; inputs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let inputs := M.alloc (| inputs |) in
          M.read (|
            let~ tree :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_merkle_tree::merkle_tree::MerkleTree")
                      [ DIGEST_ELEMS ]
                      [
                        Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value";
                        Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value";
                        M_
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_merkle_tree::merkle_tree::MerkleTree")
                    [ DIGEST_ELEMS ]
                    [
                      Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value";
                      Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value";
                      M_
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_merkle_tree::merkle_tree::MerkleTree")
                      [ DIGEST_ELEMS ]
                      [
                        Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value";
                        Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value";
                        M_
                      ],
                    "new",
                    [],
                    [ P; PW; H; C ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_merkle_tree::mmcs::MerkleTreeMmcs",
                            "hash"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_merkle_tree::mmcs::MerkleTreeMmcs",
                            "compress"
                          |)
                        |)
                      |)
                    |);
                    M.read (| inputs |)
                  ]
                |)
              |) in
            let~ root :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_symmetric::hash::Hash")
                      [ DIGEST_ELEMS ]
                      [
                        Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value";
                        Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value"
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_symmetric::hash::Hash")
                    [ DIGEST_ELEMS ]
                    [
                      Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value";
                      Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_merkle_tree::merkle_tree::MerkleTree")
                      [ DIGEST_ELEMS ]
                      [
                        Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value";
                        Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value";
                        M_
                      ],
                    "root",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, tree |) ]
                |)
              |) in
            M.alloc (| Value.Tuple [ M.read (| root |); M.read (| tree |) ] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn open_batch<M: Matrix<P::Value>>(
            &self,
            index: usize,
            prover_data: &MerkleTree<P::Value, PW::Value, M, DIGEST_ELEMS>,
        ) -> (Vec<Vec<P::Value>>, Self::Proof) {
            let max_height = self.get_max_height(prover_data);
            let log_max_height = log2_ceil_usize(max_height);
    
            // Get the matrix rows encountered along the path from the root to the given leaf index.
            let openings = prover_data
                .leaves
                .iter()
                .map(|matrix| {
                    let log2_height = log2_ceil_usize(matrix.height());
                    let bits_reduced = log_max_height - log2_height;
                    let reduced_index = index >> bits_reduced;
                    matrix.row(reduced_index).collect()
                })
                .collect_vec();
    
            // Get all the siblings nodes corresponding to the path from the root to the given leaf index.
            let proof = (0..log_max_height)
                .map(|i| prover_data.digest_layers[i][(index >> i) ^ 1])
                .collect();
    
            (openings, proof)
        }
    *)
    Definition open_batch
        (DIGEST_ELEMS : Value.t)
        (P PW H C : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS P PW H C in
      match ε, τ, α with
      | [], [ M_ ], [ self; index; prover_data ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let index := M.alloc (| index |) in
          let prover_data := M.alloc (| prover_data |) in
          M.read (|
            let~ max_height : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "p3_commit::mmcs::Mmcs",
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ DIGEST_ELEMS ]
                      [ P; PW; H; C ],
                    [],
                    [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value" ],
                    "get_max_height",
                    [],
                    [ M_ ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| prover_data |) |) |)
                  ]
                |)
              |) in
            let~ log_max_height : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_function (| "p3_util::log2_ceil_usize", [], [] |),
                  [ M.read (| max_height |) ]
                |)
              |) in
            let~ openings :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value";
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value";
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "itertools::Itertools",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ M_ ];
                        Ty.function
                          [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ M_ ] ] ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_field::packed::PackedValue"
                                []
                                []
                                P
                                "Value";
                              Ty.path "alloc::alloc::Global"
                            ])
                      ],
                    [],
                    [],
                    "collect_vec",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ M_ ];
                          Ty.function
                            [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ M_ ] ] ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_field::packed::PackedValue"
                                  []
                                  []
                                  P
                                  "Value";
                                Ty.path "alloc::alloc::Global"
                              ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ M_ ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_field::packed::PackedValue"
                                []
                                []
                                P
                                "Value";
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.function
                            [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ M_ ] ] ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_field::packed::PackedValue"
                                  []
                                  []
                                  P
                                  "Value";
                                Ty.path "alloc::alloc::Global"
                              ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ M_ ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ M_ ],
                            "iter",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ M_ ] ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ M_; Ty.path "alloc::alloc::Global" ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| prover_data |) |),
                                        "p3_merkle_tree::merkle_tree::MerkleTree",
                                        "leaves"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ M_ ] ] ]
                                          (Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_field::packed::PackedValue"
                                                []
                                                []
                                                P
                                                "Value";
                                              Ty.path "alloc::alloc::Global"
                                            ])
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let matrix := M.copy (| γ |) in
                                          M.read (|
                                            let~ log2_height :
                                                Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_function (|
                                                    "p3_util::log2_ceil_usize",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_trait_method (|
                                                        "p3_matrix::Matrix",
                                                        M_,
                                                        [],
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::packed::PackedValue"
                                                            []
                                                            []
                                                            P
                                                            "Value"
                                                        ],
                                                        "height",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| matrix |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let~ bits_reduced :
                                                Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.sub,
                                                  [
                                                    M.read (| log_max_height |);
                                                    M.read (| log2_height |)
                                                  ]
                                                |)
                                              |) in
                                            let~ reduced_index :
                                                Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.shr,
                                                  [ M.read (| index |); M.read (| bits_reduced |) ]
                                                |)
                                              |) in
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      P
                                                      "Value";
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.associated_in_trait
                                                    "p3_matrix::Matrix"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_field::packed::PackedValue"
                                                        []
                                                        []
                                                        P
                                                        "Value"
                                                    ]
                                                    M_
                                                    "Row",
                                                  [],
                                                  [],
                                                  "collect",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_field::packed::PackedValue"
                                                          []
                                                          []
                                                          P
                                                          "Value";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_matrix::Matrix"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_field::packed::PackedValue"
                                                          []
                                                          []
                                                          P
                                                          "Value"
                                                      ]
                                                      M_
                                                      "Row",
                                                    M.get_trait_method (|
                                                      "p3_matrix::Matrix",
                                                      M_,
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_field::packed::PackedValue"
                                                          []
                                                          []
                                                          P
                                                          "Value"
                                                      ],
                                                      "row",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| matrix |) |)
                                                      |);
                                                      M.read (| reduced_index |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            let~ proof :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ DIGEST_ELEMS ]
                          [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ DIGEST_ELEMS ]
                        [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.apply
                            (Ty.path "array")
                            [ DIGEST_ELEMS ]
                            [
                              Ty.associated_in_trait
                                "p3_field::packed::PackedValue"
                                []
                                []
                                PW
                                "Value"
                            ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ DIGEST_ELEMS ]
                            [
                              Ty.associated_in_trait
                                "p3_field::packed::PackedValue"
                                []
                                []
                                PW
                                "Value"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize" ] ]
                            (Ty.apply
                              (Ty.path "array")
                              [ DIGEST_ELEMS ]
                              [
                                Ty.associated_in_trait
                                  "p3_field::packed::PackedValue"
                                  []
                                  []
                                  PW
                                  "Value"
                              ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ DIGEST_ELEMS ]
                            [
                              Ty.associated_in_trait
                                "p3_field::packed::PackedValue"
                                []
                                []
                                PW
                                "Value"
                            ];
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize" ] ]
                            (Ty.apply
                              (Ty.path "array")
                              [ DIGEST_ELEMS ]
                              [
                                Ty.associated_in_trait
                                  "p3_field::packed::PackedValue"
                                  []
                                  []
                                  PW
                                  "Value"
                              ])
                        ]
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_", M.read (| log_max_height |))
                          ];
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                          (Ty.apply
                                            (Ty.path "array")
                                            [ DIGEST_ELEMS ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_field::packed::PackedValue"
                                                []
                                                []
                                                PW
                                                "Value"
                                            ])
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let i := M.copy (| γ |) in
                                          M.read (|
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ DIGEST_ELEMS ]
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_field::packed::PackedValue"
                                                          []
                                                          []
                                                          PW
                                                          "Value"
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ DIGEST_ELEMS ]
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::packed::PackedValue"
                                                            []
                                                            []
                                                            PW
                                                            "Value"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [ Ty.path "usize" ],
                                                  "index",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [ DIGEST_ELEMS ]
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_field::packed::PackedValue"
                                                                      []
                                                                      []
                                                                      PW
                                                                      "Value"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::ops::index::Index",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [ DIGEST_ELEMS ]
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_field::packed::PackedValue"
                                                                        []
                                                                        []
                                                                        PW
                                                                        "Value"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [],
                                                          [ Ty.path "usize" ],
                                                          "index",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (|
                                                                M.read (| prover_data |)
                                                              |),
                                                              "p3_merkle_tree::merkle_tree::MerkleTree",
                                                              "digest_layers"
                                                            |)
                                                          |);
                                                          M.read (| i |)
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.bit_xor,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.shr,
                                                        [ M.read (| index |); M.read (| i |) ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [ M.read (| openings |); M.read (| proof |) ] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn get_matrices<'a, M: Matrix<P::Value>>(
            &self,
            prover_data: &'a Self::ProverData<M>,
        ) -> Vec<&'a M> {
            prover_data.leaves.iter().collect()
        }
    *)
    Definition get_matrices
        (DIGEST_ELEMS : Value.t)
        (P PW H C : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS P PW H C in
      match ε, τ, α with
      | [], [ M_ ], [ self; prover_data ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let prover_data := M.alloc (| prover_data |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global" ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ M_ ],
              [],
              [],
              "collect",
              [],
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global" ]
              ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ M_ ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "slice") [] [ M_ ],
                  "iter",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ M_ ] ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ M_; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| prover_data |) |),
                              "p3_merkle_tree::merkle_tree::MerkleTree",
                              "leaves"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn verify_batch(
            &self,
            commit: &Self::Commitment,
            dimensions: &[Dimensions],
            mut index: usize,
            opened_values: &[Vec<P::Value>],
            proof: &Self::Proof,
        ) -> Result<(), Self::Error> {
            // Check that the openings have the correct shape.
            if dimensions.len() != opened_values.len() {
                return Err(WrongBatchSize);
            }
    
            // TODO: Disabled for now since TwoAdicFriPcs and CirclePcs currently pass 0 for width.
            // for (dims, opened_vals) in zip_eq(dimensions.iter(), opened_values) {
            //     if opened_vals.len() != dims.width {
            //         return Err(WrongWidth);
            //     }
            // }
    
            let mut heights_tallest_first = dimensions
                .iter()
                .enumerate()
                .sorted_by_key(|(_, dims)| Reverse(dims.height))
                .peekable();
    
            // Matrix heights that round up to the same power of two must be equal
            if !heights_tallest_first
                .clone()
                .map(|(_, dims)| dims.height)
                .tuple_windows()
                .all(|(curr, next)| {
                    curr == next || curr.next_power_of_two() != next.next_power_of_two()
                })
            {
                return Err(IncompatibleHeights);
            }
    
            // Get the initial height padded to a power of two. As heights_tallest_first is sorted,
            // the initial height will be the maximum height.
            // Returns an error if either:
            //              1. proof.len() != log_max_height
            //              2. heights_tallest_first is empty.
            let mut curr_height_padded = match heights_tallest_first.peek() {
                Some((_, dims)) => {
                    let max_height = dims.height.next_power_of_two();
                    let log_max_height = log2_strict_usize(max_height);
                    if proof.len() != log_max_height {
                        return Err(WrongHeight {
                            log_max_height,
                            num_siblings: proof.len(),
                        });
                    }
                    max_height
                }
                None => return Err(EmptyBatch),
            };
    
            // Hash all matrix openings at the current height.
            let mut root = self.hash.hash_iter_slices(
                heights_tallest_first
                    .peeking_take_while(|(_, dims)| {
                        dims.height.next_power_of_two() == curr_height_padded
                    })
                    .map(|(i, _)| opened_values[i].as_slice()),
            );
    
            for &sibling in proof {
                // The last bit of index informs us whether the current node is on the left or right.
                let (left, right) = if index & 1 == 0 {
                    (root, sibling)
                } else {
                    (sibling, root)
                };
    
                // Combine the current node with the sibling node to get the parent node.
                root = self.compress.compress([left, right]);
                index >>= 1;
                curr_height_padded >>= 1;
    
                // Check if there are any new matrix rows to inject at the next height.
                let next_height = heights_tallest_first
                    .peek()
                    .map(|(_, dims)| dims.height)
                    .filter(|h| h.next_power_of_two() == curr_height_padded);
                if let Some(next_height) = next_height {
                    // If there are new matrix rows, hash the rows together and then combine with the current root.
                    let next_height_openings_digest = self.hash.hash_iter_slices(
                        heights_tallest_first
                            .peeking_take_while(|(_, dims)| dims.height == next_height)
                            .map(|(i, _)| opened_values[i].as_slice()),
                    );
    
                    root = self.compress.compress([root, next_height_openings_digest]);
                }
            }
    
            // The computed root should equal the committed one.
            if commit == &root {
                Ok(())
            } else {
                Err(RootMismatch)
            }
        }
    *)
    Definition verify_batch
        (DIGEST_ELEMS : Value.t)
        (P PW H C : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS P PW H C in
      match ε, τ, α with
      | [], [], [ self; commit; dimensions; index; opened_values; proof ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let commit := M.alloc (| commit |) in
          let dimensions := M.alloc (| dimensions |) in
          let index := M.alloc (| index |) in
          let opened_values := M.alloc (| opened_values |) in
          let proof := M.alloc (| proof |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.tuple [];
                Ty.associated_in_trait
                  "p3_commit::mmcs::Mmcs"
                  []
                  [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value" ]
                  (Ty.apply
                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                    [ DIGEST_ELEMS ]
                    [ P; PW; H; C ])
                  "Error"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.ne,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [ Ty.path "p3_matrix::Dimensions" ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| dimensions |) |)
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::packed::PackedValue"
                                                  []
                                                  []
                                                  P
                                                  "Value";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| opened_values |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "p3_merkle_tree::mmcs::MerkleTreeError::WrongBatchSize"
                                        []
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ heights_tallest_first :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::peekable::Peekable")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.path "usize";
                                    Ty.apply (Ty.path "&") [] [ Ty.path "p3_matrix::Dimensions" ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::peekable::Peekable")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.path "usize";
                                  Ty.apply (Ty.path "&") [] [ Ty.path "p3_matrix::Dimensions" ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.path "usize";
                                Ty.apply (Ty.path "&") [] [ Ty.path "p3_matrix::Dimensions" ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [],
                        "peekable",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.path "usize";
                                  Ty.apply (Ty.path "&") [] [ Ty.path "p3_matrix::Dimensions" ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "itertools::Itertools",
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.path "p3_matrix::Dimensions" ]
                              ],
                            [],
                            [],
                            "sorted_by_key",
                            [],
                            [
                              Ty.apply (Ty.path "core::cmp::Reverse") [] [ Ty.path "usize" ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "p3_matrix::Dimensions" ]
                                            ]
                                        ]
                                    ]
                                ]
                                (Ty.apply (Ty.path "core::cmp::Reverse") [] [ Ty.path "usize" ])
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.path "p3_matrix::Dimensions" ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.path "p3_matrix::Dimensions" ],
                                [],
                                [],
                                "enumerate",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.path "p3_matrix::Dimensions" ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [ Ty.path "p3_matrix::Dimensions" ],
                                    "iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| dimensions |) |)
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "usize";
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "p3_matrix::Dimensions" ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::cmp::Reverse")
                                                []
                                                [ Ty.path "usize" ])
                                          ],
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ := M.read (| γ |) in
                                              let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let dims := M.alloc (| γ1_1 |) in
                                              Value.StructTuple
                                                "core::cmp::Reverse"
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (|
                                                        M.read (| M.deref (| M.read (| dims |) |) |)
                                                      |),
                                                      "p3_matrix::Dimensions",
                                                      "height"
                                                    |)
                                                  |)
                                                ]))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "itertools::tuple_impl::TupleWindows")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::peekable::Peekable")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "p3_matrix::Dimensions" ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "p3_matrix::Dimensions" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "usize")
                                            ];
                                          Ty.tuple [ Ty.path "usize"; Ty.path "usize" ]
                                        ],
                                      [],
                                      [],
                                      "all",
                                      [],
                                      [
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ]
                                          ]
                                          (Ty.path "bool")
                                      ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "itertools::tuple_impl::TupleWindows")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::peekable::Peekable")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::vec::into_iter::IntoIter")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "p3_matrix::Dimensions"
                                                                  ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "p3_matrix::Dimensions"
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.path "usize")
                                                  ];
                                                Ty.tuple [ Ty.path "usize"; Ty.path "usize" ]
                                              ],
                                            M.get_trait_method (|
                                              "itertools::Itertools",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::map::Map")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::peekable::Peekable")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                                        []
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "p3_matrix::Dimensions" ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "p3_matrix::Dimensions" ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.path "usize")
                                                ],
                                              [],
                                              [],
                                              "tuple_windows",
                                              [],
                                              [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::peekable::Peekable")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::vec::into_iter::IntoIter")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "p3_matrix::Dimensions"
                                                                  ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "p3_matrix::Dimensions"
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.path "usize")
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::peekable::Peekable")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                                        []
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "p3_matrix::Dimensions" ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  [],
                                                  [],
                                                  "map",
                                                  [],
                                                  [
                                                    Ty.path "usize";
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "p3_matrix::Dimensions"
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.path "usize")
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::peekable::Peekable")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::vec::into_iter::IntoIter")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "p3_matrix::Dimensions"
                                                                  ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::peekable::Peekable")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::vec::into_iter::IntoIter")
                                                            []
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "p3_matrix::Dimensions"
                                                                    ]
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ],
                                                      [],
                                                      [],
                                                      "clone",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        heights_tallest_first
                                                      |)
                                                    ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path "usize";
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "p3_matrix::Dimensions"
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                    (Ty.path "usize")
                                                                ],
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ,
                                                                        0
                                                                      |) in
                                                                    let γ0_1 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ,
                                                                        1
                                                                      |) in
                                                                    let dims := M.copy (| γ0_1 |) in
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| dims |)
                                                                        |),
                                                                        "p3_matrix::Dimensions",
                                                                        "height"
                                                                      |)
                                                                    |)))
                                                              ]
                                                            |)))
                                                        | _ =>
                                                          M.impossible "wrong number of arguments"
                                                        end))
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [ Ty.path "usize"; Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.path "bool")
                                                    ],
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                        let curr := M.copy (| γ0_0 |) in
                                                        let next := M.copy (| γ0_1 |) in
                                                        LogicalOp.or (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            BinOp.eq,
                                                            [ M.read (| curr |); M.read (| next |) ]
                                                          |),
                                                          ltac:(M.monadic
                                                            (M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.ne,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_associated_function (|
                                                                    Ty.path "usize",
                                                                    "next_power_of_two",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ M.read (| curr |) ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_associated_function (|
                                                                    Ty.path "usize",
                                                                    "next_power_of_two",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ M.read (| next |) ]
                                                                |)
                                                              ]
                                                            |)))
                                                        |)))
                                                  ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end))
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "p3_merkle_tree::mmcs::MerkleTreeError::IncompatibleHeights"
                                        []
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ curr_height_padded : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                  M.copy (|
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "usize";
                                      Ty.apply (Ty.path "&") [] [ Ty.path "p3_matrix::Dimensions" ]
                                    ]
                                ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::peekable::Peekable")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "usize";
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "p3_matrix::Dimensions" ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            "peek",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, heights_tallest_first |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                            let γ2_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                            let dims := M.alloc (| γ2_1 |) in
                            let~ max_height : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.path "usize",
                                    "next_power_of_two",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| M.deref (| M.read (| dims |) |) |) |),
                                        "p3_matrix::Dimensions",
                                        "height"
                                      |)
                                    |)
                                  ]
                                |)
                              |) in
                            let~ log_max_height : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                                  [ M.read (| max_height |) ]
                                |)
                              |) in
                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.ne,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ DIGEST_ELEMS ]
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::packed::PackedValue"
                                                              []
                                                              []
                                                              PW
                                                              "Value"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "len",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| proof |) |)
                                                    |)
                                                  ]
                                                |);
                                                M.read (| log_max_height |)
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              Value.StructTuple
                                                "core::result::Result::Err"
                                                [
                                                  Value.StructRecord
                                                    "p3_merkle_tree::mmcs::MerkleTreeError::WrongHeight"
                                                    [
                                                      ("log_max_height",
                                                        M.read (| log_max_height |));
                                                      ("num_siblings",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [ DIGEST_ELEMS ]
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_field::packed::PackedValue"
                                                                      []
                                                                      []
                                                                      PW
                                                                      "Value"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| proof |) |)
                                                            |)
                                                          ]
                                                        |))
                                                    ]
                                                ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            max_height));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::result::Result::Err"
                                      [
                                        Value.StructTuple
                                          "p3_merkle_tree::mmcs::MerkleTreeError::EmptyBatch"
                                          []
                                      ]
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |) in
                let~ root :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ DIGEST_ELEMS ]
                          [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value"
                          ]
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "array")
                        [ DIGEST_ELEMS ]
                        [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] PW "Value" ],
                      M.get_trait_method (|
                        "p3_symmetric::hasher::CryptographicHasher",
                        H,
                        [],
                        [
                          Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value";
                          Ty.apply
                            (Ty.path "array")
                            [ DIGEST_ELEMS ]
                            [
                              Ty.associated_in_trait
                                "p3_field::packed::PackedValue"
                                []
                                []
                                PW
                                "Value"
                            ]
                        ],
                        "hash_iter_slices",
                        [],
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "itertools::peeking_take_while::PeekingTakeWhile")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::peekable::Peekable")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "p3_matrix::Dimensions" ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "p3_matrix::Dimensions" ]
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.path "bool")
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "p3_matrix::Dimensions" ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_field::packed::PackedValue"
                                          []
                                          []
                                          P
                                          "Value"
                                      ]
                                  ])
                            ]
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_merkle_tree::mmcs::MerkleTreeMmcs",
                            "hash"
                          |)
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "itertools::peeking_take_while::PeekingTakeWhile")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::peekable::Peekable")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "p3_matrix::Dimensions" ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "p3_matrix::Dimensions" ]
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.path "bool")
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "p3_matrix::Dimensions" ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_field::packed::PackedValue"
                                          []
                                          []
                                          P
                                          "Value"
                                      ]
                                  ])
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "itertools::peeking_take_while::PeekingTakeWhile")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::peekable::Peekable")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "p3_matrix::Dimensions" ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "p3_matrix::Dimensions" ]
                                              ]
                                          ]
                                      ]
                                  ]
                                  (Ty.path "bool")
                              ],
                            [],
                            [],
                            "map",
                            [],
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_field::packed::PackedValue"
                                        []
                                        []
                                        P
                                        "Value"
                                    ]
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "p3_matrix::Dimensions" ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_field::packed::PackedValue"
                                          []
                                          []
                                          P
                                          "Value"
                                      ]
                                  ])
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "itertools::peeking_take_while::PeekingTakeWhile")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::peekable::Peekable")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "p3_matrix::Dimensions" ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "p3_matrix::Dimensions" ]
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.path "bool")
                                ],
                              M.get_trait_method (|
                                "itertools::Itertools",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::peekable::Peekable")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "p3_matrix::Dimensions" ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                [],
                                [],
                                "peeking_take_while",
                                [],
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "p3_matrix::Dimensions" ]
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.path "bool")
                                ]
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, heights_tallest_first |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "p3_matrix::Dimensions"
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.path "bool")
                                              ],
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ := M.read (| γ |) in
                                                  let γ1_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ1_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let dims := M.alloc (| γ1_1 |) in
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.eq,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_associated_function (|
                                                          Ty.path "usize",
                                                          "next_power_of_two",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (|
                                                                M.read (|
                                                                  M.deref (| M.read (| dims |) |)
                                                                |)
                                                              |),
                                                              "p3_matrix::Dimensions",
                                                              "height"
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.read (| curr_height_padded |)
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path "usize";
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "p3_matrix::Dimensions" ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_field::packed::PackedValue"
                                                        []
                                                        []
                                                        P
                                                        "Value"
                                                    ]
                                                ])
                                          ],
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let i := M.copy (| γ0_0 |) in
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_field::packed::PackedValue"
                                                          []
                                                          []
                                                          P
                                                          "Value"
                                                      ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_field::packed::PackedValue"
                                                        []
                                                        []
                                                        P
                                                        "Value";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "as_slice",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_array_field (|
                                                      M.deref (| M.read (| opened_values |) |),
                                                      M.read (| i |)
                                                    |)
                                                  |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.use
                    (M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ DIGEST_ELEMS ]
                                [
                                  Ty.associated_in_trait
                                    "p3_field::packed::PackedValue"
                                    []
                                    []
                                    PW
                                    "Value"
                                ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ DIGEST_ELEMS ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_field::packed::PackedValue"
                                          []
                                          []
                                          PW
                                          "Value"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| proof |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              ltac:(M.monadic
                                (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ DIGEST_ELEMS ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_field::packed::PackedValue"
                                                      []
                                                      []
                                                      PW
                                                      "Value"
                                                  ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ DIGEST_ELEMS ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_field::packed::PackedValue"
                                                    []
                                                    []
                                                    PW
                                                    "Value"
                                                ]
                                            ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ0_0 := M.read (| γ0_0 |) in
                                          let sibling := M.copy (| γ0_0 |) in
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.match_operator (|
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ DIGEST_ELEMS ]
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::packed::PackedValue"
                                                            []
                                                            []
                                                            PW
                                                            "Value"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ DIGEST_ELEMS ]
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::packed::PackedValue"
                                                            []
                                                            []
                                                            PW
                                                            "Value"
                                                        ]
                                                    ]
                                                ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            BinOp.eq,
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.bit_and,
                                                                [
                                                                  M.read (| index |);
                                                                  Value.Integer IntegerKind.Usize 1
                                                                ]
                                                              |);
                                                              Value.Integer IntegerKind.Usize 0
                                                            ]
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      Value.Tuple
                                                        [ M.read (| root |); M.read (| sibling |) ]
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      Value.Tuple
                                                        [ M.read (| sibling |); M.read (| root |) ]
                                                    |)))
                                              ]
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let left := M.copy (| γ0_0 |) in
                                                  let right := M.copy (| γ0_1 |) in
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.alloc (|
                                                      M.write (|
                                                        root,
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ DIGEST_ELEMS ]
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                PW
                                                                "Value"
                                                            ],
                                                          M.get_trait_method (|
                                                            "p3_symmetric::compression::PseudoCompressionFunction",
                                                            C,
                                                            [ Value.Integer IntegerKind.Usize 2 ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ DIGEST_ELEMS ]
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_field::packed::PackedValue"
                                                                    []
                                                                    []
                                                                    PW
                                                                    "Value"
                                                                ]
                                                            ],
                                                            "compress",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| self |) |),
                                                                "p3_merkle_tree::mmcs::MerkleTreeMmcs",
                                                                "compress"
                                                              |)
                                                            |);
                                                            Value.Array
                                                              [
                                                                M.read (| left |);
                                                                M.read (| right |)
                                                              ]
                                                          ]
                                                        |)
                                                      |)
                                                    |) in
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.alloc (|
                                                      let β := index in
                                                      M.write (|
                                                        β,
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.shr,
                                                          [
                                                            M.read (| β |);
                                                            Value.Integer IntegerKind.I32 1
                                                          ]
                                                        |)
                                                      |)
                                                    |) in
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.alloc (|
                                                      let β := curr_height_padded in
                                                      M.write (|
                                                        β,
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.shr,
                                                          [
                                                            M.read (| β |);
                                                            Value.Integer IntegerKind.I32 1
                                                          ]
                                                        |)
                                                      |)
                                                    |) in
                                                  let~ next_height :
                                                      Ty.apply
                                                        (Ty.path "*")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          "filter",
                                                          [],
                                                          [
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ Ty.path "usize" ]
                                                                  ]
                                                              ]
                                                              (Ty.path "bool")
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "p3_matrix::Dimensions"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ],
                                                              "map",
                                                              [],
                                                              [
                                                                Ty.path "usize";
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "p3_matrix::Dimensions"
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.path "usize")
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "p3_matrix::Dimensions"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::peekable::Peekable")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::vec::into_iter::IntoIter")
                                                                        []
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path "usize";
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "p3_matrix::Dimensions"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ],
                                                                  "peek",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    heights_tallest_first
                                                                  |)
                                                                ]
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      ltac:(M.monadic
                                                                        (M.match_operator (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize";
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "p3_matrix::Dimensions"
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                                (Ty.path "usize")
                                                                            ],
                                                                          M.alloc (| α0 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ :=
                                                                                  M.read (| γ |) in
                                                                                let γ1_0 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ,
                                                                                    0
                                                                                  |) in
                                                                                let γ1_1 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ,
                                                                                    1
                                                                                  |) in
                                                                                let dims :=
                                                                                  M.alloc (|
                                                                                    γ1_1
                                                                                  |) in
                                                                                M.read (|
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            dims
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |),
                                                                                    "p3_matrix::Dimensions",
                                                                                    "height"
                                                                                  |)
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                    | _ =>
                                                                      M.impossible
                                                                        "wrong number of arguments"
                                                                    end))
                                                            ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.path "bool")
                                                                        ],
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let h :=
                                                                              M.copy (| γ |) in
                                                                            M.call_closure (|
                                                                              Ty.path "bool",
                                                                              BinOp.eq,
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.path "usize",
                                                                                  M.get_associated_function (|
                                                                                    Ty.path "usize",
                                                                                    "next_power_of_two",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          h
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.read (|
                                                                                  curr_height_padded
                                                                                |)
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ := next_height in
                                                          let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::option::Option::Some",
                                                              0
                                                            |) in
                                                          let next_height := M.copy (| γ0_0 |) in
                                                          let~ next_height_openings_digest :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [ DIGEST_ELEMS ]
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_field::packed::PackedValue"
                                                                        []
                                                                        []
                                                                        PW
                                                                        "Value"
                                                                    ]
                                                                ] :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [ DIGEST_ELEMS ]
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_field::packed::PackedValue"
                                                                      []
                                                                      []
                                                                      PW
                                                                      "Value"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "p3_symmetric::hasher::CryptographicHasher",
                                                                  H,
                                                                  [],
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_field::packed::PackedValue"
                                                                      []
                                                                      []
                                                                      P
                                                                      "Value";
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [ DIGEST_ELEMS ]
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_field::packed::PackedValue"
                                                                          []
                                                                          []
                                                                          PW
                                                                          "Value"
                                                                      ]
                                                                  ],
                                                                  "hash_iter_slices",
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::map::Map")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "itertools::peeking_take_while::PeekingTakeWhile")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::peekable::Peekable")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::into_iter::IntoIter")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize";
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "p3_matrix::Dimensions"
                                                                                          ]
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ];
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize";
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "p3_matrix::Dimensions"
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.path "bool")
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "p3_matrix::Dimensions"
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "p3_field::packed::PackedValue"
                                                                                    []
                                                                                    []
                                                                                    P
                                                                                    "Value"
                                                                                ]
                                                                            ])
                                                                      ]
                                                                  ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| self |)
                                                                      |),
                                                                      "p3_merkle_tree::mmcs::MerkleTreeMmcs",
                                                                      "hash"
                                                                    |)
                                                                  |);
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::map::Map")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "itertools::peeking_take_while::PeekingTakeWhile")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::peekable::Peekable")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::into_iter::IntoIter")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize";
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "p3_matrix::Dimensions"
                                                                                          ]
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ];
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize";
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "p3_matrix::Dimensions"
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.path "bool")
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "p3_matrix::Dimensions"
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "p3_field::packed::PackedValue"
                                                                                    []
                                                                                    []
                                                                                    P
                                                                                    "Value"
                                                                                ]
                                                                            ])
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "itertools::peeking_take_while::PeekingTakeWhile")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::peekable::Peekable")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::into_iter::IntoIter")
                                                                                []
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize";
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "p3_matrix::Dimensions"
                                                                                        ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize";
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "p3_matrix::Dimensions"
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.path "bool")
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "map",
                                                                      [],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_field::packed::PackedValue"
                                                                                  []
                                                                                  []
                                                                                  P
                                                                                  "Value"
                                                                              ]
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "p3_matrix::Dimensions"
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "p3_field::packed::PackedValue"
                                                                                    []
                                                                                    []
                                                                                    P
                                                                                    "Value"
                                                                                ]
                                                                            ])
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "itertools::peeking_take_while::PeekingTakeWhile")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::peekable::Peekable")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::into_iter::IntoIter")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize";
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "p3_matrix::Dimensions"
                                                                                          ]
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ];
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize";
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "p3_matrix::Dimensions"
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.path "bool")
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "itertools::Itertools",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::peekable::Peekable")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::into_iter::IntoIter")
                                                                                []
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize";
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "p3_matrix::Dimensions"
                                                                                        ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ],
                                                                          [],
                                                                          [],
                                                                          "peeking_take_while",
                                                                          [],
                                                                          [
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize";
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "p3_matrix::Dimensions"
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.path "bool")
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            heights_tallest_first
                                                                          |);
                                                                          M.closure
                                                                            (fun γ =>
                                                                              ltac:(M.monadic
                                                                                match γ with
                                                                                | [ α0 ] =>
                                                                                  ltac:(M.monadic
                                                                                    (M.match_operator (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "*")
                                                                                        []
                                                                                        [
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize";
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "p3_matrix::Dimensions"
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                            (Ty.path
                                                                                              "bool")
                                                                                        ],
                                                                                      M.alloc (|
                                                                                        α0
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ :=
                                                                                              M.read (|
                                                                                                γ
                                                                                              |) in
                                                                                            let
                                                                                                  γ1_0 :=
                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                γ,
                                                                                                0
                                                                                              |) in
                                                                                            let
                                                                                                  γ1_1 :=
                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                γ,
                                                                                                1
                                                                                              |) in
                                                                                            let
                                                                                                  dims :=
                                                                                              M.alloc (|
                                                                                                γ1_1
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "bool",
                                                                                              BinOp.eq,
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        M.deref (|
                                                                                                          M.read (|
                                                                                                            dims
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    |),
                                                                                                    "p3_matrix::Dimensions",
                                                                                                    "height"
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  next_height
                                                                                                |)
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                                | _ =>
                                                                                  M.impossible
                                                                                    "wrong number of arguments"
                                                                                end))
                                                                        ]
                                                                      |);
                                                                      M.closure
                                                                        (fun γ =>
                                                                          ltac:(M.monadic
                                                                            match γ with
                                                                            | [ α0 ] =>
                                                                              ltac:(M.monadic
                                                                                (M.match_operator (|
                                                                                  Ty.apply
                                                                                    (Ty.path "*")
                                                                                    []
                                                                                    [
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize";
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "p3_matrix::Dimensions"
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                        (Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "slice")
                                                                                              []
                                                                                              [
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_field::packed::PackedValue"
                                                                                                  []
                                                                                                  []
                                                                                                  P
                                                                                                  "Value"
                                                                                              ]
                                                                                          ])
                                                                                    ],
                                                                                  M.alloc (| α0 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            γ,
                                                                                            0
                                                                                          |) in
                                                                                        let γ0_1 :=
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            γ,
                                                                                            1
                                                                                          |) in
                                                                                        let i :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.call_closure (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "slice")
                                                                                                []
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_field::packed::PackedValue"
                                                                                                    []
                                                                                                    []
                                                                                                    P
                                                                                                    "Value"
                                                                                                ]
                                                                                            ],
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_field::packed::PackedValue"
                                                                                                  []
                                                                                                  []
                                                                                                  P
                                                                                                  "Value";
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            "as_slice",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    opened_values
                                                                                                  |)
                                                                                                |),
                                                                                                M.read (|
                                                                                                  i
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)))
                                                                            | _ =>
                                                                              M.impossible
                                                                                "wrong number of arguments"
                                                                            end))
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          let~ _ :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.tuple [] ] :=
                                                            M.alloc (|
                                                              M.write (|
                                                                root,
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [ DIGEST_ELEMS ]
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_field::packed::PackedValue"
                                                                        []
                                                                        []
                                                                        PW
                                                                        "Value"
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "p3_symmetric::compression::PseudoCompressionFunction",
                                                                    C,
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        2
                                                                    ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [ DIGEST_ELEMS ]
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_field::packed::PackedValue"
                                                                            []
                                                                            []
                                                                            PW
                                                                            "Value"
                                                                        ]
                                                                    ],
                                                                    "compress",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| self |)
                                                                        |),
                                                                        "p3_merkle_tree::mmcs::MerkleTreeMmcs",
                                                                        "compress"
                                                                      |)
                                                                    |);
                                                                    Value.Array
                                                                      [
                                                                        M.read (| root |);
                                                                        M.read (|
                                                                          next_height_openings_digest
                                                                        |)
                                                                      ]
                                                                  ]
                                                                |)
                                                              |)
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.match_operator (|
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "p3_merkle_tree::mmcs::MerkleTreeError" ]
                    ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::hash::Hash")
                                        [ DIGEST_ELEMS ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_field::packed::PackedValue"
                                            []
                                            []
                                            P
                                            "Value";
                                          Ty.associated_in_trait
                                            "p3_field::packed::PackedValue"
                                            []
                                            []
                                            PW
                                            "Value"
                                        ]
                                    ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ DIGEST_ELEMS ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::packed::PackedValue"
                                              []
                                              []
                                              PW
                                              "Value"
                                          ]
                                      ]
                                  ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, commit |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (| M.borrow (| Pointer.Kind.Ref, root |) |)
                                  |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "p3_merkle_tree::mmcs::MerkleTreeError::RootMismatch"
                                []
                            ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (P PW H C : Ty.t),
      M.IsTraitInstance
        "p3_commit::mmcs::Mmcs"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.associated_in_trait "p3_field::packed::PackedValue" [] [] P "Value" ]
        (Self DIGEST_ELEMS P PW H C)
        (* Instance *)
        [
          ("ProverData", InstanceField.Ty (_ProverData DIGEST_ELEMS P PW H C));
          ("Commitment", InstanceField.Ty (_Commitment DIGEST_ELEMS P PW H C));
          ("Proof", InstanceField.Ty (_Proof DIGEST_ELEMS P PW H C));
          ("Error", InstanceField.Ty (_Error DIGEST_ELEMS P PW H C));
          ("commit", InstanceField.Method (commit DIGEST_ELEMS P PW H C));
          ("open_batch", InstanceField.Method (open_batch DIGEST_ELEMS P PW H C));
          ("get_matrices", InstanceField.Method (get_matrices DIGEST_ELEMS P PW H C));
          ("verify_batch", InstanceField.Method (verify_batch DIGEST_ELEMS P PW H C))
        ].
  End Impl_p3_commit_mmcs_Mmcs_where_p3_field_packed_PackedValue_P_where_p3_field_packed_PackedValue_PW_where_p3_symmetric_hasher_CryptographicHasher_H_associated_in_trait_p3_field_packed_PackedValue___P_Value_array_DIGEST_ELEMS_associated_in_trait_p3_field_packed_PackedValue___PW_Value_where_p3_symmetric_hasher_CryptographicHasher_H_P_array_DIGEST_ELEMS_PW_where_core_marker_Sync_H_where_p3_symmetric_compression_PseudoCompressionFunction_C_array_DIGEST_ELEMS_associated_in_trait_p3_field_packed_PackedValue___PW_Value_where_p3_symmetric_compression_PseudoCompressionFunction_C_array_DIGEST_ELEMS_PW_where_core_marker_Sync_C_where_core_cmp_Eq_associated_in_trait_p3_field_packed_PackedValue___PW_Value_where_serde_ser_Serialize_array_DIGEST_ELEMS_associated_in_trait_p3_field_packed_PackedValue___PW_Value_where_serde_de_Deserialize_array_DIGEST_ELEMS_associated_in_trait_p3_field_packed_PackedValue___PW_Value_associated_in_trait_p3_field_packed_PackedValue___P_Value_for_p3_merkle_tree_mmcs_MerkleTreeMmcs_DIGEST_ELEMS_P_PW_H_C.
End mmcs.
