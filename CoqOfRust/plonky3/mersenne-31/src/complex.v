(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module complex.
  Module Impl_p3_field_extension_complex_ComplexExtendable_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*     const CIRCLE_TWO_ADICITY: usize = 31; *)
    (* Ty.path "usize" *)
    Definition value_CIRCLE_TWO_ADICITY (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 31 |))).
    
    (*     const COMPLEX_GENERATOR: Complex<Self> = Complex::new_complex(Self::new(12), Self::ONE); *)
    (* Ty.apply
      (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
      [ Value.Integer IntegerKind.Usize 2 ]
      [
        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
      ] *)
    Definition value_COMPLEX_GENERATOR (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
              [ Value.Integer IntegerKind.Usize 2 ]
              [
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
              ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                [ Value.Integer IntegerKind.Usize 2 ]
                [
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                ],
              "new_complex",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                M.get_associated_function (|
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  "new",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U32 12 ]
              |);
              M.read (|
                get_constant (|
                  "p3_field::field::PrimeCharacteristicRing::ONE",
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                |)
              |)
            ]
          |)
        |))).
    
    (*
        fn circle_two_adic_generator(bits: usize) -> Complex<Self> {
            // Generator of the whole 2^TWO_ADICITY group
            // sage: p = 2^31 - 1
            // sage: F = GF(p)
            // sage: R.<x> = F[]
            // sage: F2.<u> = F.extension(x^2 + 1)
            // sage: g = F2.multiplicative_generator()^((p^2 - 1) / 2^31); g
            // 1584694829*u + 311014874
            // sage: assert(g.multiplicative_order() == 2^31)
            // sage: assert(g.norm() == 1)
            let base = Complex::new_complex(Self::new(311_014_874), Self::new(1_584_694_829));
            base.exp_power_of_2(Self::CIRCLE_TWO_ADICITY - bits)
        }
    *)
    Definition circle_two_adic_generator
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ bits ] =>
        ltac:(M.monadic
          (let bits := M.alloc (| bits |) in
          M.read (|
            let~ base :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                    [ Value.Integer IntegerKind.Usize 2 ]
                    [
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                      ],
                    "new_complex",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      M.get_associated_function (|
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        "new",
                        [],
                        []
                      |),
                      [ Value.Integer IntegerKind.U32 311014874 ]
                    |);
                    M.call_closure (|
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      M.get_associated_function (|
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        "new",
                        [],
                        []
                      |),
                      [ Value.Integer IntegerKind.U32 1584694829 ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [
                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                  ],
                M.get_trait_method (|
                  "p3_field::field::PrimeCharacteristicRing",
                  Ty.apply
                    (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                    [ Value.Integer IntegerKind.Usize 2 ]
                    [
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                    ],
                  [],
                  [],
                  "exp_power_of_2",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, base |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [
                      M.read (|
                        get_constant (|
                          "p3_field::extension::complex::ComplexExtendable::CIRCLE_TWO_ADICITY",
                          Ty.path "usize"
                        |)
                      |);
                      M.read (| bits |)
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_field::extension::complex::ComplexExtendable"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [
          ("value_CIRCLE_TWO_ADICITY", InstanceField.Method value_CIRCLE_TWO_ADICITY);
          ("value_COMPLEX_GENERATOR", InstanceField.Method value_COMPLEX_GENERATOR);
          ("circle_two_adic_generator", InstanceField.Method circle_two_adic_generator)
        ].
  End Impl_p3_field_extension_complex_ComplexExtendable_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_p3_field_extension_HasTwoAdicBinomialExtension_Usize_2_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*     const EXT_TWO_ADICITY: usize = 32; *)
    (* Ty.path "usize" *)
    Definition value_EXT_TWO_ADICITY (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 32 |))).
    
    (*
        fn ext_two_adic_generator(bits: usize) -> [Self; 2] {
            // TODO: Consider a `match` which may speed this up.
            assert!(bits <= Self::EXT_TWO_ADICITY);
            // Generator of the whole 2^TWO_ADICITY group
            // sage: p = 2^31 - 1
            // sage: F = GF(p)
            // sage: R.<x> = F[]
            // sage: F2.<u> = F.extension(x^2 + 1)
            // sage: g = F2.multiplicative_generator()^((p^2 - 1) / 2^32); g
            // 1117296306*u + 1166849849
            // sage: assert(g.multiplicative_order() == 2^32)
            let base = Complex::<Self>::new_complex(Self::new(1_166_849_849), Self::new(1_117_296_306));
            base.exp_power_of_2(Self::EXT_TWO_ADICITY - bits).to_array()
        }
    *)
    Definition ext_two_adic_generator (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ bits ] =>
        ltac:(M.monadic
          (let bits := M.alloc (| bits |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.le,
                                [
                                  M.read (| bits |);
                                  M.read (|
                                    get_constant (|
                                      "p3_field::extension::HasTwoAdicBinomialExtension::EXT_TWO_ADICITY",
                                      Ty.path "usize"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: bits <= Self::EXT_TWO_ADICITY" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ base :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                    [ Value.Integer IntegerKind.Usize 2 ]
                    [
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                      ],
                    "new_complex",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      M.get_associated_function (|
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        "new",
                        [],
                        []
                      |),
                      [ Value.Integer IntegerKind.U32 1166849849 ]
                    |);
                    M.call_closure (|
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      M.get_associated_function (|
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        "new",
                        [],
                        []
                      |),
                      [ Value.Integer IntegerKind.U32 1117296306 ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                    [ Value.Integer IntegerKind.Usize 2 ]
                    [
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                    ],
                  "to_array",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                          ],
                        M.get_trait_method (|
                          "p3_field::field::PrimeCharacteristicRing",
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                            ],
                          [],
                          [],
                          "exp_power_of_2",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, base |);
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.sub,
                            [
                              M.read (|
                                get_constant (|
                                  "p3_field::extension::HasTwoAdicBinomialExtension::EXT_TWO_ADICITY",
                                  Ty.path "usize"
                                |)
                              |);
                              M.read (| bits |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_field::extension::HasTwoAdicBinomialExtension"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 2 ]
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [
          ("value_EXT_TWO_ADICITY", InstanceField.Method value_EXT_TWO_ADICITY);
          ("ext_two_adic_generator", InstanceField.Method ext_two_adic_generator)
        ].
  End Impl_p3_field_extension_HasTwoAdicBinomialExtension_Usize_2_for_p3_mersenne_31_mersenne_31_Mersenne31.
End complex.
