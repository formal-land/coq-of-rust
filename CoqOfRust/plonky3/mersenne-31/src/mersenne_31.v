(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module mersenne_31.
  Definition value_P (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        M.call_closure (|
          Ty.path "u32",
          BinOp.Wrap.sub,
          [
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shl,
              [ Value.Integer IntegerKind.U32 1; Value.Integer IntegerKind.I32 31 ]
            |);
            Value.Integer IntegerKind.U32 1
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_P :
    M.IsFunction.C "p3_mersenne_31::mersenne_31::P" value_P.
  Admitted.
  Global Typeclasses Opaque value_P.
  
  (* StructRecord
    {
      name := "Mersenne31";
      const_params := [];
      ty_params := [];
      fields := [ ("value", Ty.path "u32") ];
    } *)
  
  Module Impl_core_marker_Copy_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_clone_Clone_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_default_Default_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "p3_mersenne_31::mersenne_31::Mersenne31"
            [
              ("value",
                M.call_closure (|
                  Ty.path "u32",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "u32",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        pub(crate) const fn new(value: u32) -> Self {
            debug_assert!((value >> 31) == 0);
            Self { value }
        }
    *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.eq,
                                          [
                                            M.call_closure (|
                                              Ty.path "u32",
                                              BinOp.Wrap.shr,
                                              [ M.read (| value |); Value.Integer IntegerKind.I32 31
                                              ]
                                            |);
                                            Value.Integer IntegerKind.U32 0
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic", [], [] |),
                                      [ mk_str (| "assertion failed: (value >> 31) == 0" |) ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              Value.StructRecord
                "p3_mersenne_31::mersenne_31::Mersenne31"
                [ ("value", M.read (| value |)) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub const fn new_checked(value: u32) -> Option<Self> {
            if (value >> 31) == 0 {
                Some(Self { value })
            } else {
                None
            }
        }
    *)
    Definition new_checked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [
                              M.call_closure (|
                                Ty.path "u32",
                                BinOp.Wrap.shr,
                                [ M.read (| value |); Value.Integer IntegerKind.I32 31 ]
                              |);
                              Value.Integer IntegerKind.U32 0
                            ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [
                          Value.StructRecord
                            "p3_mersenne_31::mersenne_31::Mersenne31"
                            [ ("value", M.read (| value |)) ]
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_checked :
      M.IsAssociatedFunction.C Self "new_checked" new_checked.
    Admitted.
    Global Typeclasses Opaque new_checked.
    
    (*
        pub const fn new_array<const N: usize>(input: [u32; N]) -> [Self; N] {
            let mut output = [Self::ZERO; N];
            let mut i = 0;
            while i < N {
                output[i].value = input[i] % P;
                i += 1;
            }
            output
        }
    *)
    Definition new_array (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ N ], [], [ input ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          M.read (|
            let~ output :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ N ]
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                  ] :=
              M.alloc (|
                repeat (|
                  M.read (|
                    get_constant (|
                      "p3_field::field::PrimeCharacteristicRing::ZERO",
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                    |)
                  |),
                  N
                |)
              |) in
            let~ i : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.loop (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                ltac:(M.monadic
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (| Ty.path "bool", BinOp.lt, [ M.read (| i |); N ] |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_array_field (| output, M.read (| i |) |),
                                  "p3_mersenne_31::mersenne_31::Mersenne31",
                                  "value"
                                |),
                                M.call_closure (|
                                  Ty.path "u32",
                                  BinOp.Wrap.rem,
                                  [
                                    M.read (|
                                      M.SubPointer.get_array_field (| input, M.read (| i |) |)
                                    |);
                                    M.read (|
                                      get_constant (|
                                        "p3_mersenne_31::mersenne_31::P",
                                        Ty.path "u32"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              let β := i in
                              M.write (|
                                β,
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                M.alloc (| Value.Tuple [] |)
                              |)
                            |)
                          |)))
                    ]
                  |)))
              |) in
            output
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_array :
      M.IsAssociatedFunction.C Self "new_array" new_array.
    Admitted.
    Global Typeclasses Opaque new_array.
  End Impl_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_cmp_PartialEq_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn eq(&self, other: &Self) -> bool {
            self.as_canonical_u32() == other.as_canonical_u32()
        }
    *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.path "bool",
            BinOp.eq,
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_trait_method (|
                  "p3_field::field::PrimeField32",
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  [],
                  [],
                  "as_canonical_u32",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |);
              M.call_closure (|
                Ty.path "u32",
                M.get_trait_method (|
                  "p3_field::field::PrimeField32",
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  [],
                  [],
                  "as_canonical_u32",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_cmp_Eq_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_cmp_Eq_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_p3_field_packed_Packable_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_field::packed::Packable"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_p3_field_packed_Packable_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_hash_Hash_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn hash<H: Hasher>(&self, state: &mut H) {
            state.write_u32(self.to_unique_u32());
        }
    *)
    Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (| "core::hash::Hasher", H, [], [], "write_u32", [], [] |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |);
                    M.call_closure (|
                      Ty.path "u32",
                      M.get_trait_method (|
                        "p3_field::field::PrimeField32",
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        [],
                        [],
                        "to_unique_u32",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_cmp_Ord_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn cmp(&self, other: &Self) -> core::cmp::Ordering {
            self.as_canonical_u32().cmp(&other.as_canonical_u32())
        }
    *)
    Definition cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.path "core::cmp::Ordering",
            M.get_trait_method (| "core::cmp::Ord", Ty.path "u32", [], [], "cmp", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u32",
                    M.get_trait_method (|
                      "p3_field::field::PrimeField32",
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      [],
                      [],
                      "as_canonical_u32",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |)
              |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u32",
                        M.get_trait_method (|
                          "p3_field::field::PrimeField32",
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          [],
                          [],
                          "as_canonical_u32",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                      |)
                    |)
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Ord"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
  End Impl_core_cmp_Ord_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_cmp_PartialOrd_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
            Some(self.cmp(other))
        }
    *)
    Definition partial_cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          Value.StructTuple
            "core::option::Option::Some"
            [
              M.call_closure (|
                Ty.path "core::cmp::Ordering",
                M.get_trait_method (|
                  "core::cmp::Ord",
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  [],
                  [],
                  "cmp",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |)
                ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        Self
        (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
  End Impl_core_cmp_PartialOrd_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_fmt_Display_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
            Display::fmt(&self.value, f)
        }
    *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_trait_method (| "core::fmt::Display", Ty.path "u32", [], [], "fmt", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_mersenne_31::mersenne_31::Mersenne31",
                      "value"
                    |)
                  |)
                |)
              |);
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_fmt_Debug_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
            Debug::fmt(&self.value, f)
        }
    *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_trait_method (| "core::fmt::Debug", Ty.path "u32", [], [], "fmt", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_mersenne_31::mersenne_31::Mersenne31",
                      "value"
                    |)
                  |)
                |)
              |);
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_rand_distr_distribution_Distribution_p3_mersenne_31_mersenne_31_Mersenne31_for_rand_distr_StandardUniform.
    Definition Self : Ty.t := Ty.path "rand::distr::StandardUniform".
    
    (*
        fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Mersenne31 {
            loop {
                let next_u31 = rng.next_u32() >> 1;
                let is_canonical = next_u31 != Mersenne31::ORDER_U32;
                if is_canonical {
                    return Mersenne31::new(next_u31);
                }
            }
        }
    *)
    Definition sample (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ R ], [ self; rng ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rng := M.alloc (| rng |) in
          M.catch_return (Ty.path "p3_mersenne_31::mersenne_31::Mersenne31") (|
            ltac:(M.monadic
              (M.never_to_any (|
                M.read (|
                  M.loop (|
                    Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                    ltac:(M.monadic
                      (let~ next_u31 : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.shr,
                            [
                              M.call_closure (|
                                Ty.path "u32",
                                M.get_trait_method (|
                                  "rand_core::RngCore",
                                  R,
                                  [],
                                  [],
                                  "next_u32",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| rng |) |) |)
                                ]
                              |);
                              Value.Integer IntegerKind.I32 1
                            ]
                          |)
                        |) in
                      let~ is_canonical : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.ne,
                            [
                              M.read (| next_u31 |);
                              M.read (|
                                get_constant (|
                                  "p3_field::field::PrimeField32::ORDER_U32",
                                  Ty.path "u32"
                                |)
                              |)
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use is_canonical in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                        M.get_associated_function (|
                                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                          "new",
                                          [],
                                          []
                                        |),
                                        [ M.read (| next_u31 |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "rand::distr::distribution::Distribution"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        Self
        (* Instance *) [ ("sample", InstanceField.Method sample) ].
  End Impl_rand_distr_distribution_Distribution_p3_mersenne_31_mersenne_31_Mersenne31_for_rand_distr_StandardUniform.
  
  Module Impl_serde_ser_Serialize_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn serialize<S: serde::Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {
            // No need to convert to canonical.
            serializer.serialize_u32(self.value)
        }
    *)
    Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ _ as S ], [ self; serializer ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let serializer := M.alloc (| serializer |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.associated_in_trait "serde::ser::Serializer" [] [] S "Ok";
                Ty.associated_in_trait "serde::ser::Serializer" [] [] S "Error"
              ],
            M.get_trait_method (| "serde::ser::Serializer", S, [], [], "serialize_u32", [], [] |),
            [
              M.read (| serializer |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_mersenne_31::mersenne_31::Mersenne31",
                  "value"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "serde::ser::Serialize"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
  End Impl_serde_ser_Serialize_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_serde_de_Deserialize_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn deserialize<D: Deserializer<'a>>(d: D) -> Result<Self, D::Error> {
            let val = u32::deserialize(d)?;
            // Ensure that `val` satisfies our invariant. i.e. Not necessarily canonical, but must fit in 31 bits.
            if val <= P {
                Ok(Self::new(val))
            } else {
                Err(D::Error::custom("Value is out of range"))
            }
        }
    *)
    Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ D ], [ d ] =>
        ltac:(M.monadic
          (let d := M.alloc (| d |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                Ty.associated_in_trait "serde::de::Deserializer" [] [] D "Error"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ val : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                  M.copy (|
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.path "u32" ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::de::Deserializer" [] [] D "Error"
                                ];
                              Ty.path "u32"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "u32";
                                Ty.associated_in_trait "serde::de::Deserializer" [] [] D "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "u32";
                                  Ty.associated_in_trait "serde::de::Deserializer" [] [] D "Error"
                                ],
                              M.get_trait_method (|
                                "serde::de::Deserialize",
                                Ty.path "u32",
                                [],
                                [],
                                "deserialize",
                                [],
                                [ D ]
                              |),
                              [ M.read (| d |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                          Ty.associated_in_trait
                                            "serde::de::Deserializer"
                                            []
                                            []
                                            D
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                            Ty.associated_in_trait
                                              "serde::de::Deserializer"
                                              []
                                              []
                                              D
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::de::Deserializer"
                                                []
                                                []
                                                D
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                M.match_operator (|
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.associated_in_trait "serde::de::Deserializer" [] [] D "Error"
                        ]
                    ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.le,
                                [
                                  M.read (| val |);
                                  M.read (|
                                    get_constant (|
                                      "p3_mersenne_31::mersenne_31::P",
                                      Ty.path "u32"
                                    |)
                                  |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              M.call_closure (|
                                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                M.get_associated_function (|
                                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                  "new",
                                  [],
                                  []
                                |),
                                [ M.read (| val |) ]
                              |)
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              M.call_closure (|
                                Ty.associated_in_trait "serde::de::Deserializer" [] [] D "Error",
                                M.get_trait_method (|
                                  "serde::de::Error",
                                  Ty.associated_in_trait "serde::de::Deserializer" [] [] D "Error",
                                  [],
                                  [],
                                  "custom",
                                  [],
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                |),
                                [ mk_str (| "Value is out of range" |) ]
                              |)
                            ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "serde::de::Deserialize"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
  End Impl_serde_de_Deserialize_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_p3_field_field_PrimeCharacteristicRing_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*     type PrimeSubfield = Self; *)
    Definition _PrimeSubfield : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*     const ZERO: Self = Self { value: 0 }; *)
    (* Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" *)
    Definition value_ZERO (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          Value.StructRecord
            "p3_mersenne_31::mersenne_31::Mersenne31"
            [ ("value", Value.Integer IntegerKind.U32 0) ]
        |))).
    
    (*     const ONE: Self = Self { value: 1 }; *)
    (* Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" *)
    Definition value_ONE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          Value.StructRecord
            "p3_mersenne_31::mersenne_31::Mersenne31"
            [ ("value", Value.Integer IntegerKind.U32 1) ]
        |))).
    
    (*     const TWO: Self = Self { value: 2 }; *)
    (* Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" *)
    Definition value_TWO (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          Value.StructRecord
            "p3_mersenne_31::mersenne_31::Mersenne31"
            [ ("value", Value.Integer IntegerKind.U32 2) ]
        |))).
    
    (*
        const NEG_ONE: Self = Self {
            value: Self::ORDER_U32 - 1,
        };
    *)
    (* Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" *)
    Definition value_NEG_ONE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          Value.StructRecord
            "p3_mersenne_31::mersenne_31::Mersenne31"
            [
              ("value",
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.sub,
                  [
                    M.read (|
                      get_constant (| "p3_field::field::PrimeField32::ORDER_U32", Ty.path "u32" |)
                    |);
                    Value.Integer IntegerKind.U32 1
                  ]
                |))
            ]
        |))).
    
    (*
        fn from_prime_subfield(f: Self::PrimeSubfield) -> Self {
            f
        }
    *)
    Definition from_prime_subfield (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ f ] =>
        ltac:(M.monadic
          (let f := M.alloc (| f |) in
          M.read (| f |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn from_bool(b: bool) -> Self {
            Self::new(b as u32)
        }
    *)
    Definition from_bool (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ b ] =>
        ltac:(M.monadic
          (let b := M.alloc (| b |) in
          M.call_closure (|
            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
            M.get_associated_function (|
              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
              "new",
              [],
              []
            |),
            [ M.cast (Ty.path "u32") (M.read (| b |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn mul_2exp_u64(&self, exp: u64) -> Self {
            // In a Mersenne field, multiplication by 2^k is just a left rotation by k bits.
            let exp = exp % 31;
            let left = (self.value << exp) & ((1 << 31) - 1);
            let right = self.value >> (31 - exp);
            let rotated = left | right;
            Self::new(rotated)
        }
    *)
    Definition mul_2exp_u64 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; exp ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let exp := M.alloc (| exp |) in
          M.read (|
            let~ exp : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u64",
                  BinOp.Wrap.rem,
                  [ M.read (| exp |); Value.Integer IntegerKind.U64 31 ]
                |)
              |) in
            let~ left : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.bit_and,
                  [
                    M.call_closure (|
                      Ty.path "u32",
                      BinOp.Wrap.shl,
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_mersenne_31::mersenne_31::Mersenne31",
                            "value"
                          |)
                        |);
                        M.read (| exp |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.path "u32",
                      BinOp.Wrap.sub,
                      [
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.shl,
                          [ Value.Integer IntegerKind.U32 1; Value.Integer IntegerKind.I32 31 ]
                        |);
                        Value.Integer IntegerKind.U32 1
                      ]
                    |)
                  ]
                |)
              |) in
            let~ right : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.shr,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_mersenne_31::mersenne_31::Mersenne31",
                        "value"
                      |)
                    |);
                    M.call_closure (|
                      Ty.path "u64",
                      BinOp.Wrap.sub,
                      [ Value.Integer IntegerKind.U64 31; M.read (| exp |) ]
                    |)
                  ]
                |)
              |) in
            let~ rotated : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.bit_or,
                  [ M.read (| left |); M.read (| right |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                M.get_associated_function (|
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  "new",
                  [],
                  []
                |),
                [ M.read (| rotated |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn sum_array<const N: usize>(input: &[Self]) -> Self {
            assert_eq!(N, input.len());
            // Benchmarking shows that for N <= 5 it's faster to sum the elements directly
            // but for N > 5 it's faster to use the .sum() methods which passes through u64's
            // allowing for delayed reductions.
            match N {
                0 => Self::ZERO,
                1 => input[0],
                2 => input[0] + input[1],
                3 => input[0] + input[1] + input[2],
                4 => (input[0] + input[1]) + (input[2] + input[3]),
                5 => {
                    let lhs = input[0] + input[1];
                    let rhs = input[2] + input[3];
                    lhs + rhs + input[4]
                }
                _ => input.iter().copied().sum(),
            }
        }
    *)
    Definition sum_array (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ N ], [], [ input ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (| Pointer.Kind.Ref, M.alloc (| N |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "usize"; Ty.path "usize" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple "core::option::Option::None" []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
              M.alloc (| N |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 0
                      |) in
                    get_constant (|
                      "p3_field::field::PrimeCharacteristicRing::ZERO",
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 1
                      |) in
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| input |) |),
                      Value.Integer IntegerKind.Usize 0
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 2
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          [],
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| input |) |),
                              Value.Integer IntegerKind.Usize 0
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| input |) |),
                              Value.Integer IntegerKind.Usize 1
                            |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 3
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          [],
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            M.get_trait_method (|
                              "core::ops::arith::Add",
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                              [],
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |);
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 1
                                |)
                              |)
                            ]
                          |);
                          M.read (|
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| input |) |),
                              Value.Integer IntegerKind.Usize 2
                            |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 4
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          [],
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            M.get_trait_method (|
                              "core::ops::arith::Add",
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                              [],
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |);
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 1
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            M.get_trait_method (|
                              "core::ops::arith::Add",
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                              [],
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 2
                                |)
                              |);
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 3
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 5
                      |) in
                    let~ lhs :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          M.get_trait_method (|
                            "core::ops::arith::Add",
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            [],
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                            "add",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.deref (| M.read (| input |) |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.deref (| M.read (| input |) |),
                                Value.Integer IntegerKind.Usize 1
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ rhs :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          M.get_trait_method (|
                            "core::ops::arith::Add",
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            [],
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                            "add",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.deref (| M.read (| input |) |),
                                Value.Integer IntegerKind.Usize 2
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.deref (| M.read (| input |) |),
                                Value.Integer IntegerKind.Usize 3
                              |)
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          [],
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            M.get_trait_method (|
                              "core::ops::arith::Add",
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                              [],
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                              "add",
                              [],
                              []
                            |),
                            [ M.read (| lhs |); M.read (| rhs |) ]
                          |);
                          M.read (|
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| input |) |),
                              Value.Integer IntegerKind.Usize 4
                            |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.call_closure (|
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::copied::Copied")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                            ],
                          [],
                          [],
                          "sum",
                          [],
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::copied::Copied")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                              [],
                              [],
                              "copied",
                              [],
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn zero_vec(len: usize) -> Vec<Self> {
            // SAFETY:
            // Due to `#[repr(transparent)]`, Mersenne31 and u32 have the same size, alignment
            // and memory layout making `flatten_to_base` safe. This this will create
            // a vector Mersenne31 elements with value set to 0.
            unsafe { flatten_to_base(vec![0u32; len]) }
        }
    *)
    Definition zero_vec (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ len ] =>
        ltac:(M.monadic
          (let len := M.alloc (| len |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"; Ty.path "alloc::alloc::Global" ],
            M.get_function (|
              "p3_util::flatten_to_base",
              [],
              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"; Ty.path "u32" ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                M.get_function (| "alloc::vec::from_elem", [], [ Ty.path "u32" ] |),
                [ Value.Integer IntegerKind.U32 0; M.read (| len |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_field::field::PrimeCharacteristicRing"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [
          ("PrimeSubfield", InstanceField.Ty _PrimeSubfield);
          ("value_ZERO", InstanceField.Method value_ZERO);
          ("value_ONE", InstanceField.Method value_ONE);
          ("value_TWO", InstanceField.Method value_TWO);
          ("value_NEG_ONE", InstanceField.Method value_NEG_ONE);
          ("from_prime_subfield", InstanceField.Method from_prime_subfield);
          ("from_bool", InstanceField.Method from_bool);
          ("mul_2exp_u64", InstanceField.Method mul_2exp_u64);
          ("sum_array", InstanceField.Method sum_array);
          ("zero_vec", InstanceField.Method zero_vec)
        ].
  End Impl_p3_field_field_PrimeCharacteristicRing_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_p3_field_field_InjectiveMonomial_U64_5_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_field::field::InjectiveMonomial"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.U64 5 ]
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_p3_field_field_InjectiveMonomial_U64_5_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_p3_field_field_PermutationMonomial_U64_5_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn injective_exp_root_n(&self) -> Self {
            exp_1717986917( *self)
        }
    *)
    Definition injective_exp_root_n (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
            M.get_function (|
              "p3_field::exponentiation::exp_1717986917",
              [],
              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
            |),
            [ M.read (| M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_field::field::PermutationMonomial"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.U64 5 ]
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("injective_exp_root_n", InstanceField.Method injective_exp_root_n) ].
  End Impl_p3_field_field_PermutationMonomial_U64_5_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_p3_field_field_Field_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*     type Packing = Self; *)
    Definition _Packing : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*     const GENERATOR: Self = Self::new(7); *)
    (* Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" *)
    Definition value_GENERATOR (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          M.call_closure (|
            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
            M.get_associated_function (|
              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
              "new",
              [],
              []
            |),
            [ Value.Integer IntegerKind.U32 7 ]
          |)
        |))).
    
    (*
        fn is_zero(&self) -> bool {
            self.value == 0 || self.value == Self::ORDER_U32
        }
    *)
    Definition is_zero (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          LogicalOp.or (|
            M.call_closure (|
              Ty.path "bool",
              BinOp.eq,
              [
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "p3_mersenne_31::mersenne_31::Mersenne31",
                    "value"
                  |)
                |);
                Value.Integer IntegerKind.U32 0
              ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_mersenne_31::mersenne_31::Mersenne31",
                      "value"
                    |)
                  |);
                  M.read (|
                    get_constant (| "p3_field::field::PrimeField32::ORDER_U32", Ty.path "u32" |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn div_2exp_u64(&self, exp: u64) -> Self {
            // In a Mersenne field, division by 2^k is just a right rotation by k bits.
            let exp = (exp % 31) as u8;
            let left = self.value >> exp;
            let right = (self.value << (31 - exp)) & ((1 << 31) - 1);
            let rotated = left | right;
            Self::new(rotated)
        }
    *)
    Definition div_2exp_u64 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; exp ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let exp := M.alloc (| exp |) in
          M.read (|
            let~ exp : Ty.apply (Ty.path "*") [] [ Ty.path "u8" ] :=
              M.alloc (|
                M.cast
                  (Ty.path "u8")
                  (M.call_closure (|
                    Ty.path "u64",
                    BinOp.Wrap.rem,
                    [ M.read (| exp |); Value.Integer IntegerKind.U64 31 ]
                  |))
              |) in
            let~ left : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.shr,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_mersenne_31::mersenne_31::Mersenne31",
                        "value"
                      |)
                    |);
                    M.read (| exp |)
                  ]
                |)
              |) in
            let~ right : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.bit_and,
                  [
                    M.call_closure (|
                      Ty.path "u32",
                      BinOp.Wrap.shl,
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_mersenne_31::mersenne_31::Mersenne31",
                            "value"
                          |)
                        |);
                        M.call_closure (|
                          Ty.path "u8",
                          BinOp.Wrap.sub,
                          [ Value.Integer IntegerKind.U8 31; M.read (| exp |) ]
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.path "u32",
                      BinOp.Wrap.sub,
                      [
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.shl,
                          [ Value.Integer IntegerKind.U32 1; Value.Integer IntegerKind.I32 31 ]
                        |);
                        Value.Integer IntegerKind.U32 1
                      ]
                    |)
                  ]
                |)
              |) in
            let~ rotated : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.bit_or,
                  [ M.read (| left |); M.read (| right |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                M.get_associated_function (|
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  "new",
                  [],
                  []
                |),
                [ M.read (| rotated |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn try_inverse(&self) -> Option<Self> {
            if self.is_zero() {
                return None;
            }
    
            // From Fermat's little theorem, in a prime field `F_p`, the inverse of `a` is `a^(p-2)`.
            // Here p-2 = 2147483645 = 1111111111111111111111111111101_2.
            // Uses 30 Squares + 7 Multiplications => 37 Operations total.
    
            let p1 = *self;
            let p101 = p1.exp_power_of_2(2) * p1;
            let p1111 = p101.square() * p101;
            let p11111111 = p1111.exp_power_of_2(4) * p1111;
            let p111111110000 = p11111111.exp_power_of_2(4);
            let p111111111111 = p111111110000 * p1111;
            let p1111111111111111 = p111111110000.exp_power_of_2(4) * p11111111;
            let p1111111111111111111111111111 = p1111111111111111.exp_power_of_2(12) * p111111111111;
            let p1111111111111111111111111111101 =
                p1111111111111111111111111111.exp_power_of_2(3) * p101;
            Some(p1111111111111111111111111111101)
        }
    *)
    Definition try_inverse (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "p3_field::field::Field",
                                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                    [],
                                    [],
                                    "is_zero",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ p1 :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ] :=
                  M.copy (| M.deref (| M.read (| self |) |) |) in
                let~ p101 :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        [],
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          M.get_trait_method (|
                            "p3_field::field::PrimeCharacteristicRing",
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            [],
                            [],
                            "exp_power_of_2",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, p1 |); Value.Integer IntegerKind.Usize 2 ]
                        |);
                        M.read (| p1 |)
                      ]
                    |)
                  |) in
                let~ p1111 :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        [],
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          M.get_trait_method (|
                            "p3_field::field::PrimeCharacteristicRing",
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            [],
                            [],
                            "square",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, p101 |) ]
                        |);
                        M.read (| p101 |)
                      ]
                    |)
                  |) in
                let~ p11111111 :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        [],
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          M.get_trait_method (|
                            "p3_field::field::PrimeCharacteristicRing",
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            [],
                            [],
                            "exp_power_of_2",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, p1111 |);
                            Value.Integer IntegerKind.Usize 4
                          ]
                        |);
                        M.read (| p1111 |)
                      ]
                    |)
                  |) in
                let~ p111111110000 :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      M.get_trait_method (|
                        "p3_field::field::PrimeCharacteristicRing",
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        [],
                        [],
                        "exp_power_of_2",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, p11111111 |);
                        Value.Integer IntegerKind.Usize 4
                      ]
                    |)
                  |) in
                let~ p111111111111 :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        [],
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                        "mul",
                        [],
                        []
                      |),
                      [ M.read (| p111111110000 |); M.read (| p1111 |) ]
                    |)
                  |) in
                let~ p1111111111111111 :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        [],
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          M.get_trait_method (|
                            "p3_field::field::PrimeCharacteristicRing",
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            [],
                            [],
                            "exp_power_of_2",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, p111111110000 |);
                            Value.Integer IntegerKind.Usize 4
                          ]
                        |);
                        M.read (| p11111111 |)
                      ]
                    |)
                  |) in
                let~ p1111111111111111111111111111 :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        [],
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          M.get_trait_method (|
                            "p3_field::field::PrimeCharacteristicRing",
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            [],
                            [],
                            "exp_power_of_2",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, p1111111111111111 |);
                            Value.Integer IntegerKind.Usize 12
                          ]
                        |);
                        M.read (| p111111111111 |)
                      ]
                    |)
                  |) in
                let~ p1111111111111111111111111111101 :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        [],
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          M.get_trait_method (|
                            "p3_field::field::PrimeCharacteristicRing",
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            [],
                            [],
                            "exp_power_of_2",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, p1111111111111111111111111111 |);
                            Value.Integer IntegerKind.Usize 3
                          ]
                        |);
                        M.read (| p101 |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::option::Option::Some"
                    [ M.read (| p1111111111111111111111111111101 |) ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn halve(&self) -> Self {
            Self::new(halve_u32::<P>(self.value))
        }
    *)
    Definition halve (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
            M.get_associated_function (|
              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
              "new",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_function (|
                  "p3_field::helpers::halve_u32",
                  [ Value.Integer IntegerKind.U32 2147483647 ],
                  []
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_mersenne_31::mersenne_31::Mersenne31",
                      "value"
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn order() -> BigUint {
            P.into()
        }
    *)
    Definition order (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.call_closure (|
            Ty.path "num_bigint::biguint::BigUint",
            M.get_trait_method (|
              "core::convert::Into",
              Ty.path "u32",
              [],
              [ Ty.path "num_bigint::biguint::BigUint" ],
              "into",
              [],
              []
            |),
            [ M.read (| get_constant (| "p3_mersenne_31::mersenne_31::P", Ty.path "u32" |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_field::field::Field"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [
          ("Packing", InstanceField.Ty _Packing);
          ("value_GENERATOR", InstanceField.Method value_GENERATOR);
          ("is_zero", InstanceField.Method is_zero);
          ("div_2exp_u64", InstanceField.Method div_2exp_u64);
          ("try_inverse", InstanceField.Method try_inverse);
          ("halve", InstanceField.Method halve);
          ("order", InstanceField.Method order)
        ].
  End Impl_p3_field_field_Field_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_p3_field_integers_QuotientMap_u32_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn from_int(int: u32) -> Self {
            // To reduce `n` to 31 bits, we clear its MSB, then add it back in its reduced form.
            let msb = int & (1 << 31);
            let msb_reduced = msb >> 31;
            Self::new(int ^ msb) + Self::new(msb_reduced)
        }
    *)
    Definition from_int (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.read (|
            let~ msb : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.bit_and,
                  [
                    M.read (| int |);
                    M.call_closure (|
                      Ty.path "u32",
                      BinOp.Wrap.shl,
                      [ Value.Integer IntegerKind.U32 1; Value.Integer IntegerKind.I32 31 ]
                    |)
                  ]
                |)
              |) in
            let~ msb_reduced : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.shr,
                  [ M.read (| msb |); Value.Integer IntegerKind.I32 31 ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                M.get_trait_method (|
                  "core::ops::arith::Add",
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  [],
                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                  "add",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                    M.get_associated_function (|
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      "new",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.bit_xor,
                        [ M.read (| int |); M.read (| msb |) ]
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                    M.get_associated_function (|
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      "new",
                      [],
                      []
                    |),
                    [ M.read (| msb_reduced |) ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn from_canonical_checked(int: u32) -> Option<Self> {
            (int < Self::ORDER_U32).then(|| Self::new(int))
        }
    *)
    Definition from_canonical_checked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
            M.get_associated_function (|
              Ty.path "bool",
              "then",
              [],
              [
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                Ty.function [ Ty.tuple [] ] (Ty.path "p3_mersenne_31::mersenne_31::Mersenne31")
              ]
            |),
            [
              M.call_closure (|
                Ty.path "bool",
                BinOp.lt,
                [
                  M.read (| int |);
                  M.read (|
                    get_constant (| "p3_field::field::PrimeField32::ORDER_U32", Ty.path "u32" |)
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [ Ty.tuple [] ]
                                (Ty.path "p3_mersenne_31::mersenne_31::Mersenne31")
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.call_closure (|
                                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                  M.get_associated_function (|
                                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                    "new",
                                    [],
                                    []
                                  |),
                                  [ M.read (| int |) ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        unsafe fn from_canonical_unchecked(int: u32) -> Self {
            debug_assert!(int < Self::ORDER_U32);
            Self::new(int)
        }
    *)
    Definition from_canonical_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.lt,
                                          [
                                            M.read (| int |);
                                            M.read (|
                                              get_constant (|
                                                "p3_field::field::PrimeField32::ORDER_U32",
                                                Ty.path "u32"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic", [], [] |),
                                      [ mk_str (| "assertion failed: int < Self::ORDER_U32" |) ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                M.get_associated_function (|
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  "new",
                  [],
                  []
                |),
                [ M.read (| int |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_field::integers::QuotientMap"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u32" ]
        Self
        (* Instance *)
        [
          ("from_int", InstanceField.Method from_int);
          ("from_canonical_checked", InstanceField.Method from_canonical_checked);
          ("from_canonical_unchecked", InstanceField.Method from_canonical_unchecked)
        ].
  End Impl_p3_field_integers_QuotientMap_u32_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_p3_field_integers_QuotientMap_i32_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn from_int(int: i32) -> Self {
            if int >= 0 {
                Self::new(int as u32)
            } else if int > (-1 << 31) {
                Self::new(Self::ORDER_U32.wrapping_add_signed(int))
            } else {
                // The only other option is int = -(2^31) = -1 mod p.
                Self::NEG_ONE
            }
        }
    *)
    Definition from_int (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.ge,
                            [ M.read (| int |); Value.Integer IntegerKind.I32 0 ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        M.get_associated_function (|
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          "new",
                          [],
                          []
                        |),
                        [ M.cast (Ty.path "u32") (M.read (| int |)) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply
                        (Ty.path "*")
                        []
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.gt,
                                    [
                                      M.read (| int |);
                                      M.call_closure (|
                                        Ty.path "i32",
                                        BinOp.Wrap.shl,
                                        [
                                          Value.Integer IntegerKind.I32 (-1);
                                          Value.Integer IntegerKind.I32 31
                                        ]
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                M.get_associated_function (|
                                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "u32",
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "wrapping_add_signed",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        get_constant (|
                                          "p3_field::field::PrimeField32::ORDER_U32",
                                          Ty.path "u32"
                                        |)
                                      |);
                                      M.read (| int |)
                                    ]
                                  |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (get_constant (|
                              "p3_field::field::PrimeCharacteristicRing::NEG_ONE",
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn from_canonical_checked(int: i32) -> Option<Self> {
            const TWO_EXP_30: i32 = 1 << 30;
            const NEG_TWO_EXP_30_PLUS_1: i32 = (-1 << 30) + 1;
            match int {
                0..TWO_EXP_30 => Some(Self::new(int as u32)),
                NEG_TWO_EXP_30_PLUS_1..0 => Some(Self::new(Self::ORDER_U32.wrapping_add_signed(int))),
                _ => None,
            }
        }
    *)
    Definition from_canonical_checked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                ],
              int,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [
                          M.call_closure (|
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            M.get_associated_function (|
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                              "new",
                              [],
                              []
                            |),
                            [ M.cast (Ty.path "u32") (M.read (| int |)) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [
                          M.call_closure (|
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            M.get_associated_function (|
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                              "new",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.path "u32",
                                M.get_associated_function (|
                                  Ty.path "u32",
                                  "wrapping_add_signed",
                                  [],
                                  []
                                |),
                                [
                                  M.read (|
                                    get_constant (|
                                      "p3_field::field::PrimeField32::ORDER_U32",
                                      Ty.path "u32"
                                    |)
                                  |);
                                  M.read (| int |)
                                ]
                              |)
                            ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        unsafe fn from_canonical_unchecked(int: i32) -> Self {
            if int >= 0 {
                Self::new(int as u32)
            } else {
                Self::new(Self::ORDER_U32.wrapping_add_signed(int))
            }
        }
    *)
    Definition from_canonical_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.ge,
                            [ M.read (| int |); Value.Integer IntegerKind.I32 0 ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        M.get_associated_function (|
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          "new",
                          [],
                          []
                        |),
                        [ M.cast (Ty.path "u32") (M.read (| int |)) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.call_closure (|
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        M.get_associated_function (|
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          "new",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            M.get_associated_function (|
                              Ty.path "u32",
                              "wrapping_add_signed",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                get_constant (|
                                  "p3_field::field::PrimeField32::ORDER_U32",
                                  Ty.path "u32"
                                |)
                              |);
                              M.read (| int |)
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_field::integers::QuotientMap"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i32" ]
        Self
        (* Instance *)
        [
          ("from_int", InstanceField.Method from_int);
          ("from_canonical_checked", InstanceField.Method from_canonical_checked);
          ("from_canonical_unchecked", InstanceField.Method from_canonical_unchecked)
        ].
  End Impl_p3_field_integers_QuotientMap_i32_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_p3_field_field_PrimeField_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn as_canonical_biguint(&self) -> BigUint {
            <Self as PrimeField32>::as_canonical_u32(self).into()
        }
    *)
    Definition as_canonical_biguint (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "num_bigint::biguint::BigUint",
            M.get_trait_method (|
              "core::convert::Into",
              Ty.path "u32",
              [],
              [ Ty.path "num_bigint::biguint::BigUint" ],
              "into",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_trait_method (|
                  "p3_field::field::PrimeField32",
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  [],
                  [],
                  "as_canonical_u32",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_field::field::PrimeField"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("as_canonical_biguint", InstanceField.Method as_canonical_biguint) ].
  End Impl_p3_field_field_PrimeField_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_p3_field_field_PrimeField32_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*     const ORDER_U32: u32 = P; *)
    (* Ty.path "u32" *)
    Definition value_ORDER_U32 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (get_constant (| "p3_mersenne_31::mersenne_31::P", Ty.path "u32" |))).
    
    (*
        fn as_canonical_u32(&self) -> u32 {
            // Since our invariant guarantees that `value` fits in 31 bits, there is only one possible
            // `value` that is not canonical, namely 2^31 - 1 = p = 0.
            if self.value == Self::ORDER_U32 {
                0
            } else {
                self.value
            }
        }
    *)
    Definition as_canonical_u32 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "u32" ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "p3_mersenne_31::mersenne_31::Mersenne31",
                                  "value"
                                |)
                              |);
                              M.read (|
                                get_constant (|
                                  "p3_field::field::PrimeField32::ORDER_U32",
                                  Ty.path "u32"
                                |)
                              |)
                            ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (| Value.Integer IntegerKind.U32 0 |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_mersenne_31::mersenne_31::Mersenne31",
                      "value"
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_field::field::PrimeField32"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [
          ("value_ORDER_U32", InstanceField.Method value_ORDER_U32);
          ("as_canonical_u32", InstanceField.Method as_canonical_u32)
        ].
  End Impl_p3_field_field_PrimeField32_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_p3_field_field_PrimeField64_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*     const ORDER_U64: u64 = <Self as PrimeField32>::ORDER_U32 as u64; *)
    (* Ty.path "u64" *)
    Definition value_ORDER_U64 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          M.cast
            (Ty.path "u64")
            (M.read (|
              get_constant (| "p3_field::field::PrimeField32::ORDER_U32", Ty.path "u32" |)
            |))
        |))).
    
    (*
        fn as_canonical_u64(&self) -> u64 {
            self.as_canonical_u32().into()
        }
    *)
    Definition as_canonical_u64 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "u64",
            M.get_trait_method (|
              "core::convert::Into",
              Ty.path "u32",
              [],
              [ Ty.path "u64" ],
              "into",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_trait_method (|
                  "p3_field::field::PrimeField32",
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  [],
                  [],
                  "as_canonical_u32",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_field::field::PrimeField64"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [
          ("value_ORDER_U64", InstanceField.Method value_ORDER_U64);
          ("as_canonical_u64", InstanceField.Method as_canonical_u64)
        ].
  End Impl_p3_field_field_PrimeField64_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_ops_arith_Add_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*     type Output = Self; *)
    Definition _Output : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn add(self, rhs: Self) -> Self {
            // See the following for a way to compute the sum that avoids
            // the conditional which may be preferable on some
            // architectures.
            // https://github.com/Plonky3/Plonky3/blob/6049a30c3b1f5351c3eb0f7c994dc97e8f68d10d/mersenne-31/src/lib.rs#L249
    
            // Working with i32 means we get a flag which informs us if overflow happened.
            let (sum_i32, over) = (self.value as i32).overflowing_add(rhs.value as i32);
            let sum_u32 = sum_i32 as u32;
            let sum_corr = sum_u32.wrapping_sub(Self::ORDER_U32);
    
            // If self + rhs did not overflow, return it.
            // If self + rhs overflowed, sum_corr = self + rhs - (2**31 - 1).
            Self::new(if over { sum_corr } else { sum_u32 })
        }
    *)
    Definition add (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.path "i32"; Ty.path "bool" ],
                  M.get_associated_function (| Ty.path "i32", "overflowing_add", [], [] |),
                  [
                    M.cast
                      (Ty.path "i32")
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "p3_mersenne_31::mersenne_31::Mersenne31",
                          "value"
                        |)
                      |));
                    M.cast
                      (Ty.path "i32")
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          rhs,
                          "p3_mersenne_31::mersenne_31::Mersenne31",
                          "value"
                        |)
                      |))
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let sum_i32 := M.copy (| γ0_0 |) in
                    let over := M.copy (| γ0_1 |) in
                    let~ sum_u32 : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                      M.alloc (| M.cast (Ty.path "u32") (M.read (| sum_i32 |)) |) in
                    let~ sum_corr : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u32",
                          M.get_associated_function (| Ty.path "u32", "wrapping_sub", [], [] |),
                          [
                            M.read (| sum_u32 |);
                            M.read (|
                              get_constant (|
                                "p3_field::field::PrimeField32::ORDER_U32",
                                Ty.path "u32"
                              |)
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        M.get_associated_function (|
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          "new",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.path "u32" ],
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.use over in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    sum_corr));
                                fun γ => ltac:(M.monadic sum_u32)
                              ]
                            |)
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::arith::Add"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        Self
        (* Instance *) [ ("Output", InstanceField.Ty _Output); ("add", InstanceField.Method add) ].
  End Impl_core_ops_arith_Add_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_ops_arith_AddAssign_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn add_assign(&mut self, rhs: Self) {
            *self = *self + rhs;
        }
    *)
    Definition add_assign (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      [],
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                      "add",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::arith::AddAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        Self
        (* Instance *) [ ("add_assign", InstanceField.Method add_assign) ].
  End Impl_core_ops_arith_AddAssign_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_iter_traits_accum_Sum_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn sum<I: Iterator<Item = Self>>(iter: I) -> Self {
            // This is faster than iter.reduce(|x, y| x + y).unwrap_or(Self::ZERO) for iterators of length >= 6.
            // It assumes that iter.len() < 2^31.
    
            // This sum will not overflow so long as iter.len() < 2^33.
            let sum = iter.map(|x| x.value as u64).sum::<u64>();
    
            // sum is < 2^62 provided iter.len() < 2^31.
            from_u62(sum)
        }
    *)
    Definition sum (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ _ as I ], [ iter ] =>
        ltac:(M.monadic
          (let iter := M.alloc (| iter |) in
          M.read (|
            let~ sum : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u64",
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        I;
                        Ty.function
                          [ Ty.tuple [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ] ]
                          (Ty.path "u64")
                      ],
                    [],
                    [],
                    "sum",
                    [],
                    [ Ty.path "u64" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          I;
                          Ty.function
                            [ Ty.tuple [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ] ]
                            (Ty.path "u64")
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        I,
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.path "u64";
                          Ty.function
                            [ Ty.tuple [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ] ]
                            (Ty.path "u64")
                        ]
                      |),
                      [
                        M.read (| iter |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                                          ]
                                          (Ty.path "u64")
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let x := M.copy (| γ |) in
                                          M.cast
                                            (Ty.path "u64")
                                            (M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                x,
                                                "p3_mersenne_31::mersenne_31::Mersenne31",
                                                "value"
                                              |)
                                            |))))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                M.get_function (| "p3_mersenne_31::mersenne_31::from_u62", [], [] |),
                [ M.read (| sum |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::accum::Sum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        Self
        (* Instance *) [ ("sum", InstanceField.Method sum) ].
  End Impl_core_iter_traits_accum_Sum_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_ops_arith_Sub_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*     type Output = Self; *)
    Definition _Output : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn sub(self, rhs: Self) -> Self {
            let (mut sub, over) = self.value.overflowing_sub(rhs.value);
    
            // If we didn't overflow we have the correct value.
            // Otherwise we have added 2**32 = 2**31 + 1 mod 2**31 - 1.
            // Hence we need to remove the most significant bit and subtract 1.
            sub -= over as u32;
            Self::new(sub & Self::ORDER_U32)
        }
    *)
    Definition sub (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.path "u32"; Ty.path "bool" ],
                  M.get_associated_function (| Ty.path "u32", "overflowing_sub", [], [] |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "p3_mersenne_31::mersenne_31::Mersenne31",
                        "value"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        rhs,
                        "p3_mersenne_31::mersenne_31::Mersenne31",
                        "value"
                      |)
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let sub := M.copy (| γ0_0 |) in
                    let over := M.copy (| γ0_1 |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        let β := sub in
                        M.write (|
                          β,
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.sub,
                            [ M.read (| β |); M.cast (Ty.path "u32") (M.read (| over |)) ]
                          |)
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        M.get_associated_function (|
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                          "new",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.bit_and,
                            [
                              M.read (| sub |);
                              M.read (|
                                get_constant (|
                                  "p3_field::field::PrimeField32::ORDER_U32",
                                  Ty.path "u32"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::arith::Sub"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        Self
        (* Instance *) [ ("Output", InstanceField.Ty _Output); ("sub", InstanceField.Method sub) ].
  End Impl_core_ops_arith_Sub_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_ops_arith_SubAssign_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn sub_assign(&mut self, rhs: Self) {
            *self = *self - rhs;
        }
    *)
    Definition sub_assign (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                    M.get_trait_method (|
                      "core::ops::arith::Sub",
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      [],
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                      "sub",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::arith::SubAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        Self
        (* Instance *) [ ("sub_assign", InstanceField.Method sub_assign) ].
  End Impl_core_ops_arith_SubAssign_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_ops_arith_Neg_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*     type Output = Self; *)
    Definition _Output : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn neg(self) -> Self::Output {
            // Can't underflow, since self.value is 31-bits and thus can't exceed ORDER.
            Self::new(Self::ORDER_U32 - self.value)
        }
    *)
    Definition neg (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
            M.get_associated_function (|
              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
              "new",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                BinOp.Wrap.sub,
                [
                  M.read (|
                    get_constant (| "p3_field::field::PrimeField32::ORDER_U32", Ty.path "u32" |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "p3_mersenne_31::mersenne_31::Mersenne31",
                      "value"
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::arith::Neg"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("Output", InstanceField.Ty _Output); ("neg", InstanceField.Method neg) ].
  End Impl_core_ops_arith_Neg_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_ops_arith_Mul_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*     type Output = Self; *)
    Definition _Output : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn mul(self, rhs: Self) -> Self {
            let prod = u64::from(self.value) * u64::from(rhs.value);
            from_u62(prod)
        }
    *)
    Definition mul (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ prod : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u64",
                  BinOp.Wrap.mul,
                  [
                    M.call_closure (|
                      Ty.path "u64",
                      M.get_trait_method (|
                        "core::convert::From",
                        Ty.path "u64",
                        [],
                        [ Ty.path "u32" ],
                        "from",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "p3_mersenne_31::mersenne_31::Mersenne31",
                            "value"
                          |)
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.path "u64",
                      M.get_trait_method (|
                        "core::convert::From",
                        Ty.path "u64",
                        [],
                        [ Ty.path "u32" ],
                        "from",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            rhs,
                            "p3_mersenne_31::mersenne_31::Mersenne31",
                            "value"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                M.get_function (| "p3_mersenne_31::mersenne_31::from_u62", [], [] |),
                [ M.read (| prod |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::arith::Mul"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        Self
        (* Instance *) [ ("Output", InstanceField.Ty _Output); ("mul", InstanceField.Method mul) ].
  End Impl_core_ops_arith_Mul_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_ops_arith_MulAssign_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn mul_assign(&mut self, rhs: Self) {
            *self = *self * rhs;
        }
    *)
    Definition mul_assign (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                    M.get_trait_method (|
                      "core::ops::arith::Mul",
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                      [],
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                      "mul",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::arith::MulAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        Self
        (* Instance *) [ ("mul_assign", InstanceField.Method mul_assign) ].
  End Impl_core_ops_arith_MulAssign_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_iter_traits_accum_Product_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn product<I: Iterator<Item = Self>>(iter: I) -> Self {
            iter.reduce(|x, y| x * y).unwrap_or(Self::ONE)
        }
    *)
    Definition product (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ _ as I ], [ iter ] =>
        ltac:(M.monadic
          (let iter := M.alloc (| iter |) in
          M.call_closure (|
            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
              "unwrap_or",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  I,
                  [],
                  [],
                  "reduce",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                          ]
                      ]
                      (Ty.path "p3_mersenne_31::mersenne_31::Mersenne31")
                  ]
                |),
                [
                  M.read (| iter |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0; α1 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                                        ]
                                    ]
                                    (Ty.path "p3_mersenne_31::mersenne_31::Mersenne31")
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                                                ]
                                            ]
                                            (Ty.path "p3_mersenne_31::mersenne_31::Mersenne31")
                                        ],
                                      M.alloc (| α1 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let y := M.copy (| γ |) in
                                            M.call_closure (|
                                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                              M.get_trait_method (|
                                                "core::ops::arith::Mul",
                                                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                                [],
                                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                                                ],
                                                "mul",
                                                [],
                                                []
                                              |),
                                              [ M.read (| x |); M.read (| y |) ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |);
              M.read (|
                get_constant (|
                  "p3_field::field::PrimeCharacteristicRing::ONE",
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::accum::Product"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        Self
        (* Instance *) [ ("product", InstanceField.Method product) ].
  End Impl_core_iter_traits_accum_Product_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  Module Impl_core_ops_arith_Div_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
    Definition Self : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*     type Output = Self; *)
    Definition _Output : Ty.t := Ty.path "p3_mersenne_31::mersenne_31::Mersenne31".
    
    (*
        fn div(self, rhs: Self) -> Self {
            self * rhs.inverse()
        }
    *)
    Definition div (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
            M.get_trait_method (|
              "core::ops::arith::Mul",
              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
              [],
              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
              "mul",
              [],
              []
            |),
            [
              M.read (| self |);
              M.call_closure (|
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                M.get_trait_method (|
                  "p3_field::field::Field",
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  [],
                  [],
                  "inverse",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::arith::Div"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        Self
        (* Instance *) [ ("Output", InstanceField.Ty _Output); ("div", InstanceField.Method div) ].
  End Impl_core_ops_arith_Div_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_mersenne_31_Mersenne31.
  
  (*
  pub(crate) fn from_u62(input: u64) -> Mersenne31 {
      debug_assert!(input < (1 << 62));
      let input_lo = (input & ((1 << 31) - 1)) as u32;
      let input_high = (input >> 31) as u32;
      Mersenne31::new(input_lo) + Mersenne31::new(input_high)
  }
  *)
  Definition from_u62 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ input ] =>
      ltac:(M.monadic
        (let input := M.alloc (| input |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.use (M.alloc (| Value.Bool true |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.read (| input |);
                                          M.call_closure (|
                                            Ty.path "u64",
                                            BinOp.Wrap.shl,
                                            [
                                              Value.Integer IntegerKind.U64 1;
                                              Value.Integer IntegerKind.I32 62
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    Ty.path "never",
                                    M.get_function (| "core::panicking::panic", [], [] |),
                                    [ mk_str (| "assertion failed: input < (1 << 62)" |) ]
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |) in
          let~ input_lo : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
            M.alloc (|
              M.cast
                (Ty.path "u32")
                (M.call_closure (|
                  Ty.path "u64",
                  BinOp.Wrap.bit_and,
                  [
                    M.read (| input |);
                    M.call_closure (|
                      Ty.path "u64",
                      BinOp.Wrap.sub,
                      [
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.shl,
                          [ Value.Integer IntegerKind.U64 1; Value.Integer IntegerKind.I32 31 ]
                        |);
                        Value.Integer IntegerKind.U64 1
                      ]
                    |)
                  ]
                |))
            |) in
          let~ input_high : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
            M.alloc (|
              M.cast
                (Ty.path "u32")
                (M.call_closure (|
                  Ty.path "u64",
                  BinOp.Wrap.shr,
                  [ M.read (| input |); Value.Integer IntegerKind.I32 31 ]
                |))
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
              M.get_trait_method (|
                "core::ops::arith::Add",
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                [],
                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                "add",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  M.get_associated_function (|
                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                    "new",
                    [],
                    []
                  |),
                  [ M.read (| input_lo |) ]
                |);
                M.call_closure (|
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  M.get_associated_function (|
                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                    "new",
                    [],
                    []
                  |),
                  [ M.read (| input_high |) ]
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_from_u62 :
    M.IsFunction.C "p3_mersenne_31::mersenne_31::from_u62" from_u62.
  Admitted.
  Global Typeclasses Opaque from_u62.
End mersenne_31.
