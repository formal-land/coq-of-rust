(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module poseidon2.
  Definition value_MERSENNE31_S_BOX_DEGREE
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 5 |))).
  
  Global Instance Instance_IsConstant_value_MERSENNE31_S_BOX_DEGREE :
    M.IsFunction.C
      "p3_mersenne_31::poseidon2::MERSENNE31_S_BOX_DEGREE"
      value_MERSENNE31_S_BOX_DEGREE.
  Admitted.
  Global Typeclasses Opaque value_MERSENNE31_S_BOX_DEGREE.
  
  Axiom Poseidon2Mersenne31 :
    forall (WIDTH : Value.t),
    (Ty.apply (Ty.path "p3_mersenne_31::poseidon2::Poseidon2Mersenne31") [ WIDTH ] []) =
      (Ty.apply
        (Ty.path "p3_poseidon2::Poseidon2")
        [
          WIDTH;
          M.unevaluated_const
            (mk_str (| "p3_mersenne_31_poseidon2_Poseidon2Mersenne31_discriminant" |))
        ]
        [
          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
          Ty.apply
            (Ty.path "p3_mersenne_31::no_packing::poseidon2::Poseidon2ExternalLayerMersenne31")
            [ WIDTH ]
            [];
          Ty.path "p3_mersenne_31::no_packing::poseidon2::Poseidon2InternalLayerMersenne31"
        ]).
  
  (* StructTuple
    {
      name := "GenericPoseidon2LinearLayersMersenne31";
      const_params := [];
      ty_params := [];
      fields := [];
    } *)
  
  Definition value_POSEIDON2_INTERNAL_MATRIX_DIAG_16_SHIFTS
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.Array
          [
            Value.Integer IntegerKind.U8 0;
            Value.Integer IntegerKind.U8 1;
            Value.Integer IntegerKind.U8 2;
            Value.Integer IntegerKind.U8 3;
            Value.Integer IntegerKind.U8 4;
            Value.Integer IntegerKind.U8 5;
            Value.Integer IntegerKind.U8 6;
            Value.Integer IntegerKind.U8 7;
            Value.Integer IntegerKind.U8 8;
            Value.Integer IntegerKind.U8 10;
            Value.Integer IntegerKind.U8 12;
            Value.Integer IntegerKind.U8 13;
            Value.Integer IntegerKind.U8 14;
            Value.Integer IntegerKind.U8 15;
            Value.Integer IntegerKind.U8 16
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_POSEIDON2_INTERNAL_MATRIX_DIAG_16_SHIFTS :
    M.IsFunction.C
      "p3_mersenne_31::poseidon2::POSEIDON2_INTERNAL_MATRIX_DIAG_16_SHIFTS"
      value_POSEIDON2_INTERNAL_MATRIX_DIAG_16_SHIFTS.
  Admitted.
  Global Typeclasses Opaque value_POSEIDON2_INTERNAL_MATRIX_DIAG_16_SHIFTS.
  
  Definition value_POSEIDON2_INTERNAL_MATRIX_DIAG_24_SHIFTS
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.Array
          [
            Value.Integer IntegerKind.U8 0;
            Value.Integer IntegerKind.U8 1;
            Value.Integer IntegerKind.U8 2;
            Value.Integer IntegerKind.U8 3;
            Value.Integer IntegerKind.U8 4;
            Value.Integer IntegerKind.U8 5;
            Value.Integer IntegerKind.U8 6;
            Value.Integer IntegerKind.U8 7;
            Value.Integer IntegerKind.U8 8;
            Value.Integer IntegerKind.U8 9;
            Value.Integer IntegerKind.U8 10;
            Value.Integer IntegerKind.U8 11;
            Value.Integer IntegerKind.U8 12;
            Value.Integer IntegerKind.U8 13;
            Value.Integer IntegerKind.U8 14;
            Value.Integer IntegerKind.U8 15;
            Value.Integer IntegerKind.U8 16;
            Value.Integer IntegerKind.U8 17;
            Value.Integer IntegerKind.U8 18;
            Value.Integer IntegerKind.U8 19;
            Value.Integer IntegerKind.U8 20;
            Value.Integer IntegerKind.U8 21;
            Value.Integer IntegerKind.U8 22
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_POSEIDON2_INTERNAL_MATRIX_DIAG_24_SHIFTS :
    M.IsFunction.C
      "p3_mersenne_31::poseidon2::POSEIDON2_INTERNAL_MATRIX_DIAG_24_SHIFTS"
      value_POSEIDON2_INTERNAL_MATRIX_DIAG_24_SHIFTS.
  Admitted.
  Global Typeclasses Opaque value_POSEIDON2_INTERNAL_MATRIX_DIAG_24_SHIFTS.
  
  (*
  fn permute_mut<const N: usize>(state: &mut [Mersenne31; N], shifts: &[u8]) {
      debug_assert_eq!(shifts.len() + 1, N);
      let part_sum: u64 = state[1..].iter().map(|x| x.value as u64).sum();
      let full_sum = part_sum + (state[0].value as u64);
      let s0 = part_sum + (-state[0]).value as u64;
      state[0] = from_u62(s0);
      for i in 1..N {
          let si = full_sum + ((state[i].value as u64) << shifts[i - 1]);
          state[i] = from_u62(si);
      }
  }
  *)
  Definition permute_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [], [ state; shifts ] =>
      ltac:(M.monadic
        (let state := M.alloc (| state |) in
        let shifts := M.alloc (| shifts |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.use (M.alloc (| Value.Bool true |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (|
                          Value.Tuple
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| shifts |) |)
                                          |)
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                |)
                              |);
                              M.borrow (| Pointer.Kind.Ref, M.alloc (| N |) |)
                            ]
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let left_val := M.copy (| γ0_0 |) in
                              let right_val := M.copy (| γ0_1 |) in
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.eq,
                                                [
                                                  M.read (| M.deref (| M.read (| left_val |) |) |);
                                                  M.read (| M.deref (| M.read (| right_val |) |) |)
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            let~ kind :
                                                Ty.apply
                                                  (Ty.path "*")
                                                  []
                                                  [ Ty.path "core::panicking::AssertKind" ] :=
                                              M.alloc (|
                                                Value.StructTuple
                                                  "core::panicking::AssertKind::Eq"
                                                  []
                                              |) in
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "never",
                                                M.get_function (|
                                                  "core::panicking::assert_failed",
                                                  [],
                                                  [ Ty.path "usize"; Ty.path "usize" ]
                                                |),
                                                [
                                                  M.read (| kind |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| left_val |) |)
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| right_val |) |)
                                                      |)
                                                    |)
                                                  |);
                                                  Value.StructTuple "core::option::Option::None" []
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |) in
          let~ part_sum : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "u64",
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                            ]
                        ]
                        (Ty.path "u64")
                    ],
                  [],
                  [],
                  "sum",
                  [],
                  [ Ty.path "u64" ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                              ]
                          ]
                          (Ty.path "u64")
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.path "u64";
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                              ]
                          ]
                          (Ty.path "u64")
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::index::Index",
                                  Ty.apply
                                    (Ty.path "array")
                                    [ N ]
                                    [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeFrom")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                  "index",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| state |) |) |);
                                  Value.StructRecord
                                    "core::ops::range::RangeFrom"
                                    [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                                                ]
                                            ]
                                        ]
                                        (Ty.path "u64")
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let x := M.copy (| γ |) in
                                        M.cast
                                          (Ty.path "u64")
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| x |) |),
                                              "p3_mersenne_31::mersenne_31::Mersenne31",
                                              "value"
                                            |)
                                          |))))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)
            |) in
          let~ full_sum : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "u64",
                BinOp.Wrap.add,
                [
                  M.read (| part_sum |);
                  M.cast
                    (Ty.path "u64")
                    (M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| state |) |),
                          Value.Integer IntegerKind.Usize 0
                        |),
                        "p3_mersenne_31::mersenne_31::Mersenne31",
                        "value"
                      |)
                    |))
                ]
              |)
            |) in
          let~ s0 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "u64",
                BinOp.Wrap.add,
                [
                  M.read (| part_sum |);
                  M.cast
                    (Ty.path "u64")
                    (M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                            M.get_trait_method (|
                              "core::ops::arith::Neg",
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                              [],
                              [],
                              "neg",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| state |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)
                            ]
                          |)
                        |),
                        "p3_mersenne_31::mersenne_31::Mersenne31",
                        "value"
                      |)
                    |))
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| state |) |),
                  Value.Integer IntegerKind.Usize 0
                |),
                M.call_closure (|
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  M.get_function (| "p3_mersenne_31::mersenne_31::from_u62", [], [] |),
                  [ M.read (| s0 |) ]
                |)
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [ ("start", Value.Integer IntegerKind.Usize 1); ("end_", N) ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let i := M.copy (| γ0_0 |) in
                                  let~ si : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "u64",
                                        BinOp.Wrap.add,
                                        [
                                          M.read (| full_sum |);
                                          M.call_closure (|
                                            Ty.path "u64",
                                            BinOp.Wrap.shl,
                                            [
                                              M.cast
                                                (Ty.path "u64")
                                                (M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.SubPointer.get_array_field (|
                                                      M.deref (| M.read (| state |) |),
                                                      M.read (| i |)
                                                    |),
                                                    "p3_mersenne_31::mersenne_31::Mersenne31",
                                                    "value"
                                                  |)
                                                |));
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.deref (| M.read (| shifts |) |),
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.sub,
                                                    [
                                                      M.read (| i |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      M.write (|
                                        M.SubPointer.get_array_field (|
                                          M.deref (| M.read (| state |) |),
                                          M.read (| i |)
                                        |),
                                        M.call_closure (|
                                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                          M.get_function (|
                                            "p3_mersenne_31::mersenne_31::from_u62",
                                            [],
                                            []
                                          |),
                                          [ M.read (| si |) ]
                                        |)
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_permute_mut :
    M.IsFunction.C "p3_mersenne_31::poseidon2::permute_mut" permute_mut.
  Admitted.
  Global Typeclasses Opaque permute_mut.
  
  Module Impl_p3_poseidon2_internal_InternalLayer_Usize_16_expr_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_no_packing_poseidon2_Poseidon2InternalLayerMersenne31.
    Definition Self : Ty.t :=
      Ty.path "p3_mersenne_31::no_packing::poseidon2::Poseidon2InternalLayerMersenne31".
    
    (*
        fn permute_state(&self, state: &mut [Mersenne31; 16]) {
            internal_permute_state(
                state,
                |x| permute_mut(x, &POSEIDON2_INTERNAL_MATRIX_DIAG_16_SHIFTS),
                &self.internal_constants,
            )
        }
    *)
    Definition permute_state (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.call_closure (|
            Ty.tuple [],
            M.get_function (|
              "p3_poseidon2::internal::internal_permute_state",
              [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.U64 5 ],
              [
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
              ]
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |);
              (* ClosureFnPointer(Safe) *)
              M.pointer_coercion
                (M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply
                              (Ty.path "*")
                              []
                              [
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                                          ]
                                      ]
                                  ]
                                  (Ty.tuple [])
                              ],
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let x := M.copy (| γ |) in
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_function (|
                                      "p3_mersenne_31::poseidon2::permute_mut",
                                      [ Value.Integer IntegerKind.Usize 16 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |);
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              get_constant (|
                                                "p3_mersenne_31::poseidon2::POSEIDON2_INTERNAL_MATRIX_DIAG_16_SHIFTS",
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 15 ]
                                                  [ Ty.path "u8" ]
                                              |)
                                            |)
                                          |)
                                        |))
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end)));
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                      ],
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "deref",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_mersenne_31::no_packing::poseidon2::Poseidon2InternalLayerMersenne31",
                              "internal_constants"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_poseidon2::internal::InternalLayer"
        (* Trait polymorphic consts *)
        [
          Value.Integer IntegerKind.Usize 16;
          M.unevaluated_const (mk_str (| "p3_mersenne_31_poseidon2_discriminant" |))
        ]
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        Self
        (* Instance *) [ ("permute_state", InstanceField.Method permute_state) ].
  End Impl_p3_poseidon2_internal_InternalLayer_Usize_16_expr_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_no_packing_poseidon2_Poseidon2InternalLayerMersenne31.
  
  Module Impl_p3_poseidon2_internal_InternalLayer_Usize_24_expr_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_no_packing_poseidon2_Poseidon2InternalLayerMersenne31.
    Definition Self : Ty.t :=
      Ty.path "p3_mersenne_31::no_packing::poseidon2::Poseidon2InternalLayerMersenne31".
    
    (*
        fn permute_state(&self, state: &mut [Mersenne31; 24]) {
            internal_permute_state(
                state,
                |x| permute_mut(x, &POSEIDON2_INTERNAL_MATRIX_DIAG_24_SHIFTS),
                &self.internal_constants,
            )
        }
    *)
    Definition permute_state (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.call_closure (|
            Ty.tuple [],
            M.get_function (|
              "p3_poseidon2::internal::internal_permute_state",
              [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.U64 5 ],
              [
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
              ]
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |);
              (* ClosureFnPointer(Safe) *)
              M.pointer_coercion
                (M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply
                              (Ty.path "*")
                              []
                              [
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 24 ]
                                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                                          ]
                                      ]
                                  ]
                                  (Ty.tuple [])
                              ],
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let x := M.copy (| γ |) in
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_function (|
                                      "p3_mersenne_31::poseidon2::permute_mut",
                                      [ Value.Integer IntegerKind.Usize 24 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x |) |)
                                      |);
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              get_constant (|
                                                "p3_mersenne_31::poseidon2::POSEIDON2_INTERNAL_MATRIX_DIAG_24_SHIFTS",
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 23 ]
                                                  [ Ty.path "u8" ]
                                              |)
                                            |)
                                          |)
                                        |))
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end)));
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                      ],
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "deref",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_mersenne_31::no_packing::poseidon2::Poseidon2InternalLayerMersenne31",
                              "internal_constants"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_poseidon2::internal::InternalLayer"
        (* Trait polymorphic consts *)
        [
          Value.Integer IntegerKind.Usize 24;
          M.unevaluated_const (mk_str (| "p3_mersenne_31_poseidon2_discriminant" |))
        ]
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        Self
        (* Instance *) [ ("permute_state", InstanceField.Method permute_state) ].
  End Impl_p3_poseidon2_internal_InternalLayer_Usize_24_expr_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_no_packing_poseidon2_Poseidon2InternalLayerMersenne31.
  
  Module Impl_p3_poseidon2_external_ExternalLayer_WIDTH_expr_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_no_packing_poseidon2_Poseidon2ExternalLayerMersenne31_WIDTH.
    Definition Self (WIDTH : Value.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_mersenne_31::no_packing::poseidon2::Poseidon2ExternalLayerMersenne31")
        [ WIDTH ]
        [].
    
    (*
        fn permute_state_initial(&self, state: &mut [Mersenne31; WIDTH]) {
            external_initial_permute_state(
                state,
                self.external_constants.get_initial_constants(),
                add_rc_and_sbox_generic,
                &MDSMat4,
            );
        }
    *)
    Definition permute_state_initial
        (WIDTH : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH in
      match ε, τ, α with
      | [], [], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (|
                    "p3_poseidon2::external::external_initial_permute_state",
                    [ WIDTH ],
                    [
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.path "p3_poseidon2::external::MDSMat4"
                    ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ WIDTH ]
                                    [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ WIDTH ]
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ WIDTH ]
                                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "p3_poseidon2::external::ExternalLayerConstants")
                                      [ WIDTH ]
                                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                                    "get_initial_constants",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_mersenne_31::no_packing::poseidon2::Poseidon2ExternalLayerMersenne31",
                                        "external_constants"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    (* ReifyFnPointer *)
                    M.pointer_coercion
                      (M.get_function (|
                        "p3_poseidon2::generic::add_rc_and_sbox_generic",
                        [ Value.Integer IntegerKind.U64 5 ],
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                        ]
                      |));
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (| Value.StructTuple "p3_poseidon2::external::MDSMat4" [] |)
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_state_terminal(&self, state: &mut [Mersenne31; WIDTH]) {
            external_terminal_permute_state(
                state,
                self.external_constants.get_terminal_constants(),
                add_rc_and_sbox_generic,
                &MDSMat4,
            );
        }
    *)
    Definition permute_state_terminal
        (WIDTH : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH in
      match ε, τ, α with
      | [], [], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (|
                    "p3_poseidon2::external::external_terminal_permute_state",
                    [ WIDTH ],
                    [
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.path "p3_poseidon2::external::MDSMat4"
                    ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ WIDTH ]
                                    [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ WIDTH ]
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ WIDTH ]
                                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "p3_poseidon2::external::ExternalLayerConstants")
                                      [ WIDTH ]
                                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                                    "get_terminal_constants",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_mersenne_31::no_packing::poseidon2::Poseidon2ExternalLayerMersenne31",
                                        "external_constants"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    (* ReifyFnPointer *)
                    M.pointer_coercion
                      (M.get_function (|
                        "p3_poseidon2::generic::add_rc_and_sbox_generic",
                        [ Value.Integer IntegerKind.U64 5 ],
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                        ]
                      |));
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (| Value.StructTuple "p3_poseidon2::external::MDSMat4" [] |)
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH : Value.t),
      M.IsTraitInstance
        "p3_poseidon2::external::ExternalLayer"
        (* Trait polymorphic consts *)
        [ WIDTH; M.unevaluated_const (mk_str (| "p3_mersenne_31_poseidon2_discriminant" |)) ]
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        (Self WIDTH)
        (* Instance *)
        [
          ("permute_state_initial", InstanceField.Method (permute_state_initial WIDTH));
          ("permute_state_terminal", InstanceField.Method (permute_state_terminal WIDTH))
        ].
  End Impl_p3_poseidon2_external_ExternalLayer_WIDTH_expr_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_mersenne_31_no_packing_poseidon2_Poseidon2ExternalLayerMersenne31_WIDTH.
  
  Module Impl_p3_poseidon2_generic_GenericPoseidon2LinearLayers_where_p3_field_field_Algebra_A_p3_mersenne_31_mersenne_31_Mersenne31_Usize_16_A_for_p3_mersenne_31_poseidon2_GenericPoseidon2LinearLayersMersenne31.
    Definition Self (A : Ty.t) : Ty.t :=
      Ty.path "p3_mersenne_31::poseidon2::GenericPoseidon2LinearLayersMersenne31".
    
    (*
        fn internal_linear_layer(state: &mut [A; 16]) {
            let part_sum: A = state[1..].iter().cloned().sum();
            let full_sum = part_sum.clone() + state[0].clone();
    
            // The first three diagonal elements are -2, 1, 2 so we do something custom.
            state[0] = part_sum - state[0].clone();
            state[1] = full_sum.clone() + state[1].clone();
            state[2] = full_sum.clone() + state[2].double();
    
            // For the remaining elements we use the mul_2exp_u64 method.
            // We need state[1..] as POSEIDON2_INTERNAL_MATRIX_DIAG_16_SHIFTS
            // doesn't include the shift for the 0'th element as it is -2.
            state[1..]
                .iter_mut()
                .zip(POSEIDON2_INTERNAL_MATRIX_DIAG_16_SHIFTS)
                .skip(2)
                .for_each(|(val, diag_shift)| {
                    *val = full_sum.clone() + val.clone().mul_2exp_u64(diag_shift as u64);
                });
        }
    *)
    Definition internal_linear_layer
        (A : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self A in
      match ε, τ, α with
      | [], [], [ state ] =>
        ltac:(M.monadic
          (let state := M.alloc (| state |) in
          M.read (|
            let~ part_sum : Ty.apply (Ty.path "*") [] [ A ] :=
              M.alloc (|
                M.call_closure (|
                  A,
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::cloned::Cloned")
                      []
                      [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ A ] ],
                    [],
                    [],
                    "sum",
                    [],
                    [ A ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::cloned::Cloned")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ A ] ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ A ],
                        [],
                        [],
                        "cloned",
                        [],
                        [ A ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ A ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ A ],
                            "iter",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ A ] ],
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [ A ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeFrom")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                    "index",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| state |) |)
                                    |);
                                    Value.StructRecord
                                      "core::ops::range::RangeFrom"
                                      [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ full_sum : Ty.apply (Ty.path "*") [] [ A ] :=
              M.alloc (|
                M.call_closure (|
                  A,
                  M.get_trait_method (| "core::ops::arith::Add", A, [], [ A ], "add", [], [] |),
                  [
                    M.call_closure (|
                      A,
                      M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, part_sum |) ]
                    |);
                    M.call_closure (|
                      A,
                      M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| state |) |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.SubPointer.get_array_field (|
                    M.deref (| M.read (| state |) |),
                    Value.Integer IntegerKind.Usize 0
                  |),
                  M.call_closure (|
                    A,
                    M.get_trait_method (| "core::ops::arith::Sub", A, [], [ A ], "sub", [], [] |),
                    [
                      M.read (| part_sum |);
                      M.call_closure (|
                        A,
                        M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| state |) |),
                              Value.Integer IntegerKind.Usize 0
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.SubPointer.get_array_field (|
                    M.deref (| M.read (| state |) |),
                    Value.Integer IntegerKind.Usize 1
                  |),
                  M.call_closure (|
                    A,
                    M.get_trait_method (| "core::ops::arith::Add", A, [], [ A ], "add", [], [] |),
                    [
                      M.call_closure (|
                        A,
                        M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                        [ M.borrow (| Pointer.Kind.Ref, full_sum |) ]
                      |);
                      M.call_closure (|
                        A,
                        M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| state |) |),
                              Value.Integer IntegerKind.Usize 1
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.SubPointer.get_array_field (|
                    M.deref (| M.read (| state |) |),
                    Value.Integer IntegerKind.Usize 2
                  |),
                  M.call_closure (|
                    A,
                    M.get_trait_method (| "core::ops::arith::Add", A, [], [ A ], "add", [], [] |),
                    [
                      M.call_closure (|
                        A,
                        M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                        [ M.borrow (| Pointer.Kind.Ref, full_sum |) ]
                      |);
                      M.call_closure (|
                        A,
                        M.get_trait_method (|
                          "p3_field::field::PrimeCharacteristicRing",
                          A,
                          [],
                          [],
                          "double",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| state |) |),
                              Value.Integer IntegerKind.Usize 2
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::skip::Skip")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ A ];
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ Value.Integer IntegerKind.Usize 15 ]
                              [ Ty.path "u8" ]
                          ]
                      ],
                    [],
                    [],
                    "for_each",
                    [],
                    [
                      Ty.function
                        [ Ty.tuple [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ A ]; Ty.path "u8" ] ]
                        ]
                        (Ty.tuple [])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::skip::Skip")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ A ];
                              Ty.apply
                                (Ty.path "core::array::iter::IntoIter")
                                [ Value.Integer IntegerKind.Usize 15 ]
                                [ Ty.path "u8" ]
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ A ];
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ Value.Integer IntegerKind.Usize 15 ]
                              [ Ty.path "u8" ]
                          ],
                        [],
                        [],
                        "skip",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ A ];
                              Ty.apply
                                (Ty.path "core::array::iter::IntoIter")
                                [ Value.Integer IntegerKind.Usize 15 ]
                                [ Ty.path "u8" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ A ],
                            [],
                            [],
                            "zip",
                            [],
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 15 ]
                                [ Ty.path "u8" ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ A ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ A ],
                                "iter_mut",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ A ] ],
                                      M.get_trait_method (|
                                        "core::ops::index::IndexMut",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [ A ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeFrom")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                        "index_mut",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| state |) |)
                                        |);
                                        Value.StructRecord
                                          "core::ops::range::RangeFrom"
                                          [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.read (|
                              get_constant (|
                                "p3_mersenne_31::poseidon2::POSEIDON2_INTERNAL_MATRIX_DIAG_16_SHIFTS",
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 15 ]
                                  [ Ty.path "u8" ]
                              |)
                            |)
                          ]
                        |);
                        Value.Integer IntegerKind.Usize 2
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [ Ty.apply (Ty.path "&mut") [] [ A ]; Ty.path "u8" ]
                                          ]
                                      ]
                                      (Ty.tuple [])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let val := M.copy (| γ0_0 |) in
                                      let diag_shift := M.copy (| γ0_1 |) in
                                      M.read (|
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.write (|
                                              M.deref (| M.read (| val |) |),
                                              M.call_closure (|
                                                A,
                                                M.get_trait_method (|
                                                  "core::ops::arith::Add",
                                                  A,
                                                  [],
                                                  [ A ],
                                                  "add",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    A,
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      A,
                                                      [],
                                                      [],
                                                      "clone",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, full_sum |) ]
                                                  |);
                                                  M.call_closure (|
                                                    A,
                                                    M.get_trait_method (|
                                                      "p3_field::field::PrimeCharacteristicRing",
                                                      A,
                                                      [],
                                                      [],
                                                      "mul_2exp_u64",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            A,
                                                            M.get_trait_method (|
                                                              "core::clone::Clone",
                                                              A,
                                                              [],
                                                              [],
                                                              "clone",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| val |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.cast
                                                        (Ty.path "u64")
                                                        (M.read (| diag_shift |))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (A : Ty.t),
      M.IsTraitInstance
        "p3_poseidon2::generic::GenericPoseidon2LinearLayers"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 16 ]
        (* Trait polymorphic types *) [ A ]
        (Self A)
        (* Instance *)
        [ ("internal_linear_layer", InstanceField.Method (internal_linear_layer A)) ].
  End Impl_p3_poseidon2_generic_GenericPoseidon2LinearLayers_where_p3_field_field_Algebra_A_p3_mersenne_31_mersenne_31_Mersenne31_Usize_16_A_for_p3_mersenne_31_poseidon2_GenericPoseidon2LinearLayersMersenne31.
  
  Module Impl_p3_poseidon2_generic_GenericPoseidon2LinearLayers_where_p3_field_field_Algebra_A_p3_mersenne_31_mersenne_31_Mersenne31_Usize_24_A_for_p3_mersenne_31_poseidon2_GenericPoseidon2LinearLayersMersenne31.
    Definition Self (A : Ty.t) : Ty.t :=
      Ty.path "p3_mersenne_31::poseidon2::GenericPoseidon2LinearLayersMersenne31".
    
    (*
        fn internal_linear_layer(state: &mut [A; 24]) {
            let part_sum: A = state[1..].iter().cloned().sum();
            let full_sum = part_sum.clone() + state[0].clone();
    
            // The first three diagonal elements are -2, 1, 2 so we do something custom.
            state[0] = part_sum - state[0].clone();
            state[1] = full_sum.clone() + state[1].clone();
            state[2] = full_sum.clone() + state[2].double();
    
            // For the remaining elements we use the mul_2exp_u64 method.
            // We need state[1..] as POSEIDON2_INTERNAL_MATRIX_DIAG_24_SHIFTS
            // doesn't include the shift for the 0'th element as it is -2.
            state[1..]
                .iter_mut()
                .zip(POSEIDON2_INTERNAL_MATRIX_DIAG_24_SHIFTS)
                .skip(2)
                .for_each(|(val, diag_shift)| {
                    *val = full_sum.clone() + val.clone().mul_2exp_u64(diag_shift as u64);
                });
        }
    *)
    Definition internal_linear_layer
        (A : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self A in
      match ε, τ, α with
      | [], [], [ state ] =>
        ltac:(M.monadic
          (let state := M.alloc (| state |) in
          M.read (|
            let~ part_sum : Ty.apply (Ty.path "*") [] [ A ] :=
              M.alloc (|
                M.call_closure (|
                  A,
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::cloned::Cloned")
                      []
                      [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ A ] ],
                    [],
                    [],
                    "sum",
                    [],
                    [ A ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::cloned::Cloned")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ A ] ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ A ],
                        [],
                        [],
                        "cloned",
                        [],
                        [ A ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ A ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ A ],
                            "iter",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ A ] ],
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 24 ]
                                      [ A ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeFrom")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                    "index",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| state |) |)
                                    |);
                                    Value.StructRecord
                                      "core::ops::range::RangeFrom"
                                      [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ full_sum : Ty.apply (Ty.path "*") [] [ A ] :=
              M.alloc (|
                M.call_closure (|
                  A,
                  M.get_trait_method (| "core::ops::arith::Add", A, [], [ A ], "add", [], [] |),
                  [
                    M.call_closure (|
                      A,
                      M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, part_sum |) ]
                    |);
                    M.call_closure (|
                      A,
                      M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| state |) |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.SubPointer.get_array_field (|
                    M.deref (| M.read (| state |) |),
                    Value.Integer IntegerKind.Usize 0
                  |),
                  M.call_closure (|
                    A,
                    M.get_trait_method (| "core::ops::arith::Sub", A, [], [ A ], "sub", [], [] |),
                    [
                      M.read (| part_sum |);
                      M.call_closure (|
                        A,
                        M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| state |) |),
                              Value.Integer IntegerKind.Usize 0
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.SubPointer.get_array_field (|
                    M.deref (| M.read (| state |) |),
                    Value.Integer IntegerKind.Usize 1
                  |),
                  M.call_closure (|
                    A,
                    M.get_trait_method (| "core::ops::arith::Add", A, [], [ A ], "add", [], [] |),
                    [
                      M.call_closure (|
                        A,
                        M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                        [ M.borrow (| Pointer.Kind.Ref, full_sum |) ]
                      |);
                      M.call_closure (|
                        A,
                        M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| state |) |),
                              Value.Integer IntegerKind.Usize 1
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.SubPointer.get_array_field (|
                    M.deref (| M.read (| state |) |),
                    Value.Integer IntegerKind.Usize 2
                  |),
                  M.call_closure (|
                    A,
                    M.get_trait_method (| "core::ops::arith::Add", A, [], [ A ], "add", [], [] |),
                    [
                      M.call_closure (|
                        A,
                        M.get_trait_method (| "core::clone::Clone", A, [], [], "clone", [], [] |),
                        [ M.borrow (| Pointer.Kind.Ref, full_sum |) ]
                      |);
                      M.call_closure (|
                        A,
                        M.get_trait_method (|
                          "p3_field::field::PrimeCharacteristicRing",
                          A,
                          [],
                          [],
                          "double",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| state |) |),
                              Value.Integer IntegerKind.Usize 2
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::skip::Skip")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ A ];
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ Value.Integer IntegerKind.Usize 23 ]
                              [ Ty.path "u8" ]
                          ]
                      ],
                    [],
                    [],
                    "for_each",
                    [],
                    [
                      Ty.function
                        [ Ty.tuple [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ A ]; Ty.path "u8" ] ]
                        ]
                        (Ty.tuple [])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::skip::Skip")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ A ];
                              Ty.apply
                                (Ty.path "core::array::iter::IntoIter")
                                [ Value.Integer IntegerKind.Usize 23 ]
                                [ Ty.path "u8" ]
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ A ];
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ Value.Integer IntegerKind.Usize 23 ]
                              [ Ty.path "u8" ]
                          ],
                        [],
                        [],
                        "skip",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ A ];
                              Ty.apply
                                (Ty.path "core::array::iter::IntoIter")
                                [ Value.Integer IntegerKind.Usize 23 ]
                                [ Ty.path "u8" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ A ],
                            [],
                            [],
                            "zip",
                            [],
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 23 ]
                                [ Ty.path "u8" ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ A ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ A ],
                                "iter_mut",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ A ] ],
                                      M.get_trait_method (|
                                        "core::ops::index::IndexMut",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 24 ]
                                          [ A ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeFrom")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                        "index_mut",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| state |) |)
                                        |);
                                        Value.StructRecord
                                          "core::ops::range::RangeFrom"
                                          [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.read (|
                              get_constant (|
                                "p3_mersenne_31::poseidon2::POSEIDON2_INTERNAL_MATRIX_DIAG_24_SHIFTS",
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 23 ]
                                  [ Ty.path "u8" ]
                              |)
                            |)
                          ]
                        |);
                        Value.Integer IntegerKind.Usize 2
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [ Ty.apply (Ty.path "&mut") [] [ A ]; Ty.path "u8" ]
                                          ]
                                      ]
                                      (Ty.tuple [])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let val := M.copy (| γ0_0 |) in
                                      let diag_shift := M.copy (| γ0_1 |) in
                                      M.read (|
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.write (|
                                              M.deref (| M.read (| val |) |),
                                              M.call_closure (|
                                                A,
                                                M.get_trait_method (|
                                                  "core::ops::arith::Add",
                                                  A,
                                                  [],
                                                  [ A ],
                                                  "add",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    A,
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      A,
                                                      [],
                                                      [],
                                                      "clone",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, full_sum |) ]
                                                  |);
                                                  M.call_closure (|
                                                    A,
                                                    M.get_trait_method (|
                                                      "p3_field::field::PrimeCharacteristicRing",
                                                      A,
                                                      [],
                                                      [],
                                                      "mul_2exp_u64",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            A,
                                                            M.get_trait_method (|
                                                              "core::clone::Clone",
                                                              A,
                                                              [],
                                                              [],
                                                              "clone",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| val |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.cast
                                                        (Ty.path "u64")
                                                        (M.read (| diag_shift |))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (A : Ty.t),
      M.IsTraitInstance
        "p3_poseidon2::generic::GenericPoseidon2LinearLayers"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 24 ]
        (* Trait polymorphic types *) [ A ]
        (Self A)
        (* Instance *)
        [ ("internal_linear_layer", InstanceField.Method (internal_linear_layer A)) ].
  End Impl_p3_poseidon2_generic_GenericPoseidon2LinearLayers_where_p3_field_field_Algebra_A_p3_mersenne_31_mersenne_31_Mersenne31_Usize_24_A_for_p3_mersenne_31_poseidon2_GenericPoseidon2LinearLayersMersenne31.
End poseidon2.
