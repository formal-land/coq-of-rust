(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module monolith.
  (* StructRecord
    {
      name := "MonolithMersenne31";
      const_params := [ "WIDTH"; "NUM_FULL_ROUNDS" ];
      ty_params := [ "Mds" ];
      fields :=
        [
          ("round_constants",
            Ty.apply
              (Ty.path "array")
              [ NUM_FULL_ROUNDS ]
              [
                Ty.apply
                  (Ty.path "array")
                  [ WIDTH ]
                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
              ]);
          ("lookup1",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]);
          ("lookup2",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]);
          ("mds", Mds)
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_Mds_where_p3_mds_MdsPermutation_Mds_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_monolith_monolith_MonolithMersenne31_WIDTH_NUM_FULL_ROUNDS_Mds.
    Definition Self (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_monolith::monolith::MonolithMersenne31")
        [ WIDTH; NUM_FULL_ROUNDS ]
        [ Mds ].
    
    (* Debug *)
    Definition fmt
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field4_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MonolithMersenne31" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "round_constants" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_monolith::monolith::MonolithMersenne31",
                        "round_constants"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "lookup1" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_monolith::monolith::MonolithMersenne31",
                        "lookup1"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "lookup2" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_monolith::monolith::MonolithMersenne31",
                        "lookup2"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "mds" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_monolith::monolith::MonolithMersenne31",
                            "mds"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt WIDTH NUM_FULL_ROUNDS Mds)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_Mds_where_p3_mds_MdsPermutation_Mds_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_monolith_monolith_MonolithMersenne31_WIDTH_NUM_FULL_ROUNDS_Mds.
  
  Module Impl_p3_monolith_monolith_MonolithMersenne31_WIDTH_NUM_FULL_ROUNDS_Mds.
    Definition Self (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_monolith::monolith::MonolithMersenne31")
        [ WIDTH; NUM_FULL_ROUNDS ]
        [ Mds ].
    
    (*     pub const NUM_BARS: usize = 8; *)
    (* Ty.path "usize" *)
    Definition value_NUM_BARS
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 8 |))).
    
    Global Instance AssociatedConstant_value_NUM_BARS :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "NUM_BARS"
        (value_NUM_BARS WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque value_NUM_BARS.
    
    (*
        pub fn new(mds: Mds) -> Self {
            assert!(WIDTH >= 8);
            assert!(WIDTH <= 24);
            assert_eq!(WIDTH % 4, 0);
    
            let round_constants = Self::instantiate_round_constants();
            let lookup1 = Self::instantiate_lookup1();
            let lookup2 = Self::instantiate_lookup2();
    
            Self {
                round_constants,
                lookup1,
                lookup2,
                mds,
            }
        }
    *)
    Definition new
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [ mds ] =>
        ltac:(M.monadic
          (let mds := M.alloc (| mds |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ge,
                                [ WIDTH; Value.Integer IntegerKind.Usize 8 ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: WIDTH >= 8" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.le,
                                [ WIDTH; Value.Integer IntegerKind.Usize 24 ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: WIDTH <= 24" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.rem,
                            [ WIDTH; Value.Integer IntegerKind.Usize 4 ]
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (| Value.Integer IntegerKind.Usize 0 |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "usize"; Ty.path "usize" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple "core::option::Option::None" []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            let~ round_constants :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ NUM_FULL_ROUNDS ]
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ WIDTH ]
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_FULL_ROUNDS ]
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ WIDTH ]
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_monolith::monolith::MonolithMersenne31")
                      [ WIDTH; NUM_FULL_ROUNDS ]
                      [ Mds ],
                    "instantiate_round_constants",
                    [],
                    []
                  |),
                  []
                |)
              |) in
            let~ lookup1 :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_monolith::monolith::MonolithMersenne31")
                      [ WIDTH; NUM_FULL_ROUNDS ]
                      [ Mds ],
                    "instantiate_lookup1",
                    [],
                    []
                  |),
                  []
                |)
              |) in
            let~ lookup2 :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_monolith::monolith::MonolithMersenne31")
                      [ WIDTH; NUM_FULL_ROUNDS ]
                      [ Mds ],
                    "instantiate_lookup2",
                    [],
                    []
                  |),
                  []
                |)
              |) in
            M.alloc (|
              Value.StructRecord
                "p3_monolith::monolith::MonolithMersenne31"
                [
                  ("round_constants", M.read (| round_constants |));
                  ("lookup1", M.read (| lookup1 |));
                  ("lookup2", M.read (| lookup2 |));
                  ("mds", M.read (| mds |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "new"
        (new WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        const fn s_box(y: u8) -> u8 {
            let tmp = y ^ !y.rotate_left(1) & y.rotate_left(2) & y.rotate_left(3);
            tmp.rotate_left(1)
        }
    *)
    Definition s_box
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [ y ] =>
        ltac:(M.monadic
          (let y := M.alloc (| y |) in
          M.read (|
            let~ tmp : Ty.apply (Ty.path "*") [] [ Ty.path "u8" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u8",
                  BinOp.Wrap.bit_xor,
                  [
                    M.read (| y |);
                    M.call_closure (|
                      Ty.path "u8",
                      BinOp.Wrap.bit_and,
                      [
                        M.call_closure (|
                          Ty.path "u8",
                          BinOp.Wrap.bit_and,
                          [
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "u8",
                                M.get_associated_function (| Ty.path "u8", "rotate_left", [], [] |),
                                [ M.read (| y |); Value.Integer IntegerKind.U32 1 ]
                              |)
                            |);
                            M.call_closure (|
                              Ty.path "u8",
                              M.get_associated_function (| Ty.path "u8", "rotate_left", [], [] |),
                              [ M.read (| y |); Value.Integer IntegerKind.U32 2 ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.path "u8",
                          M.get_associated_function (| Ty.path "u8", "rotate_left", [], [] |),
                          [ M.read (| y |); Value.Integer IntegerKind.U32 3 ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "u8",
                M.get_associated_function (| Ty.path "u8", "rotate_left", [], [] |),
                [ M.read (| tmp |); Value.Integer IntegerKind.U32 1 ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_s_box :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "s_box"
        (s_box WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque s_box.
    
    (*
        pub fn final_s_box(y: u8) -> u8 {
            debug_assert_eq!(y >> 7, 0); // must be a 7-bit value
    
            let y_rot_1 = (y >> 6) | (y << 1);
            let y_rot_2 = (y >> 5) | (y << 2);
    
            let tmp = (y ^ !y_rot_1 & y_rot_2) & 0x7F;
            ((tmp >> 6) | (tmp << 1)) & 0x7F
        }
    *)
    Definition final_s_box
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [ y ] =>
        ltac:(M.monadic
          (let y := M.alloc (| y |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (|
                            Value.Tuple
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "u8",
                                      BinOp.Wrap.shr,
                                      [ M.read (| y |); Value.Integer IntegerKind.I32 7 ]
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (| Value.Integer IntegerKind.U8 0 |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val := M.copy (| γ0_0 |) in
                                let right_val := M.copy (| γ0_1 |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.eq,
                                                  [
                                                    M.read (|
                                                      M.deref (| M.read (| left_val |) |)
                                                    |);
                                                    M.read (|
                                                      M.deref (| M.read (| right_val |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let~ kind :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [ Ty.path "core::panicking::AssertKind" ] :=
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [],
                                                    [ Ty.path "u8"; Ty.path "u8" ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| left_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ y_rot_1 : Ty.apply (Ty.path "*") [] [ Ty.path "u8" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u8",
                  BinOp.Wrap.bit_or,
                  [
                    M.call_closure (|
                      Ty.path "u8",
                      BinOp.Wrap.shr,
                      [ M.read (| y |); Value.Integer IntegerKind.I32 6 ]
                    |);
                    M.call_closure (|
                      Ty.path "u8",
                      BinOp.Wrap.shl,
                      [ M.read (| y |); Value.Integer IntegerKind.I32 1 ]
                    |)
                  ]
                |)
              |) in
            let~ y_rot_2 : Ty.apply (Ty.path "*") [] [ Ty.path "u8" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u8",
                  BinOp.Wrap.bit_or,
                  [
                    M.call_closure (|
                      Ty.path "u8",
                      BinOp.Wrap.shr,
                      [ M.read (| y |); Value.Integer IntegerKind.I32 5 ]
                    |);
                    M.call_closure (|
                      Ty.path "u8",
                      BinOp.Wrap.shl,
                      [ M.read (| y |); Value.Integer IntegerKind.I32 2 ]
                    |)
                  ]
                |)
              |) in
            let~ tmp : Ty.apply (Ty.path "*") [] [ Ty.path "u8" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u8",
                  BinOp.Wrap.bit_and,
                  [
                    M.call_closure (|
                      Ty.path "u8",
                      BinOp.Wrap.bit_xor,
                      [
                        M.read (| y |);
                        M.call_closure (|
                          Ty.path "u8",
                          BinOp.Wrap.bit_and,
                          [ UnOp.not (| M.read (| y_rot_1 |) |); M.read (| y_rot_2 |) ]
                        |)
                      ]
                    |);
                    Value.Integer IntegerKind.U8 127
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "u8",
                BinOp.Wrap.bit_and,
                [
                  M.call_closure (|
                    Ty.path "u8",
                    BinOp.Wrap.bit_or,
                    [
                      M.call_closure (|
                        Ty.path "u8",
                        BinOp.Wrap.shr,
                        [ M.read (| tmp |); Value.Integer IntegerKind.I32 6 ]
                      |);
                      M.call_closure (|
                        Ty.path "u8",
                        BinOp.Wrap.shl,
                        [ M.read (| tmp |); Value.Integer IntegerKind.I32 1 ]
                      |)
                    ]
                  |);
                  Value.Integer IntegerKind.U8 127
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_final_s_box :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "final_s_box"
        (final_s_box WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque final_s_box.
    
    (*
        fn instantiate_lookup1() -> Vec<u16> {
            (0..=u16::MAX)
                .map(|i| {
                    let hi = (i >> 8) as u8;
                    let lo = i as u8;
                    ((Self::s_box(hi) as u16) << 8) | Self::s_box(lo) as u16
                })
                .collect()
        }
    *)
    Definition instantiate_lookup1
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ Ty.path "u16" ];
                  Ty.function [ Ty.tuple [ Ty.path "u16" ] ] (Ty.path "u16")
                ],
              [],
              [],
              "collect",
              [],
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ Ty.path "u16" ];
                    Ty.function [ Ty.tuple [ Ty.path "u16" ] ] (Ty.path "u16")
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ Ty.path "u16" ],
                  [],
                  [],
                  "map",
                  [],
                  [ Ty.path "u16"; Ty.function [ Ty.tuple [ Ty.path "u16" ] ] (Ty.path "u16") ]
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ Ty.path "u16" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ Ty.path "u16" ],
                      "new",
                      [],
                      []
                    |),
                    [
                      Value.Integer IntegerKind.U16 0;
                      M.read (| get_associated_constant (| Ty.path "u16", "MAX", Ty.path "u16" |) |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.function [ Ty.tuple [ Ty.path "u16" ] ] (Ty.path "u16") ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let i := M.copy (| γ |) in
                                    M.read (|
                                      let~ hi : Ty.apply (Ty.path "*") [] [ Ty.path "u8" ] :=
                                        M.alloc (|
                                          M.cast
                                            (Ty.path "u8")
                                            (M.call_closure (|
                                              Ty.path "u16",
                                              BinOp.Wrap.shr,
                                              [ M.read (| i |); Value.Integer IntegerKind.I32 8 ]
                                            |))
                                        |) in
                                      let~ lo : Ty.apply (Ty.path "*") [] [ Ty.path "u8" ] :=
                                        M.alloc (| M.cast (Ty.path "u8") (M.read (| i |)) |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "u16",
                                          BinOp.Wrap.bit_or,
                                          [
                                            M.call_closure (|
                                              Ty.path "u16",
                                              BinOp.Wrap.shl,
                                              [
                                                M.cast
                                                  (Ty.path "u16")
                                                  (M.call_closure (|
                                                    Ty.path "u8",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "p3_monolith::monolith::MonolithMersenne31")
                                                        [ WIDTH; NUM_FULL_ROUNDS ]
                                                        [ Mds ],
                                                      "s_box",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| hi |) ]
                                                  |));
                                                Value.Integer IntegerKind.I32 8
                                              ]
                                            |);
                                            M.cast
                                              (Ty.path "u16")
                                              (M.call_closure (|
                                                Ty.path "u8",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_monolith::monolith::MonolithMersenne31")
                                                    [ WIDTH; NUM_FULL_ROUNDS ]
                                                    [ Mds ],
                                                  "s_box",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| lo |) ]
                                              |))
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_instantiate_lookup1 :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "instantiate_lookup1"
        (instantiate_lookup1 WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque instantiate_lookup1.
    
    (*
        fn instantiate_lookup2() -> Vec<u16> {
            (0..(1 << 15))
                .map(|i| {
                    let hi = (i >> 8) as u8;
                    let lo: u8 = i as u8;
                    ((Self::final_s_box(hi) as u16) << 8) | Self::s_box(lo) as u16
                })
                .collect()
        }
    *)
    Definition instantiate_lookup2
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ];
                  Ty.function [ Ty.tuple [ Ty.path "i32" ] ] (Ty.path "u16")
                ],
              [],
              [],
              "collect",
              [],
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ];
                    Ty.function [ Ty.tuple [ Ty.path "i32" ] ] (Ty.path "u16")
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  [],
                  [],
                  "map",
                  [],
                  [ Ty.path "u16"; Ty.function [ Ty.tuple [ Ty.path "i32" ] ] (Ty.path "u16") ]
                |),
                [
                  Value.StructRecord
                    "core::ops::range::Range"
                    [
                      ("start", Value.Integer IntegerKind.I32 0);
                      ("end_",
                        M.call_closure (|
                          Ty.path "i32",
                          BinOp.Wrap.shl,
                          [ Value.Integer IntegerKind.I32 1; Value.Integer IntegerKind.I32 15 ]
                        |))
                    ];
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.function [ Ty.tuple [ Ty.path "i32" ] ] (Ty.path "u16") ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let i := M.copy (| γ |) in
                                    M.read (|
                                      let~ hi : Ty.apply (Ty.path "*") [] [ Ty.path "u8" ] :=
                                        M.alloc (|
                                          M.cast
                                            (Ty.path "u8")
                                            (M.call_closure (|
                                              Ty.path "i32",
                                              BinOp.Wrap.shr,
                                              [ M.read (| i |); Value.Integer IntegerKind.I32 8 ]
                                            |))
                                        |) in
                                      let~ lo : Ty.apply (Ty.path "*") [] [ Ty.path "u8" ] :=
                                        M.alloc (| M.cast (Ty.path "u8") (M.read (| i |)) |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "u16",
                                          BinOp.Wrap.bit_or,
                                          [
                                            M.call_closure (|
                                              Ty.path "u16",
                                              BinOp.Wrap.shl,
                                              [
                                                M.cast
                                                  (Ty.path "u16")
                                                  (M.call_closure (|
                                                    Ty.path "u8",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "p3_monolith::monolith::MonolithMersenne31")
                                                        [ WIDTH; NUM_FULL_ROUNDS ]
                                                        [ Mds ],
                                                      "final_s_box",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| hi |) ]
                                                  |));
                                                Value.Integer IntegerKind.I32 8
                                              ]
                                            |);
                                            M.cast
                                              (Ty.path "u16")
                                              (M.call_closure (|
                                                Ty.path "u8",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_monolith::monolith::MonolithMersenne31")
                                                    [ WIDTH; NUM_FULL_ROUNDS ]
                                                    [ Mds ],
                                                  "s_box",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| lo |) ]
                                              |))
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_instantiate_lookup2 :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "instantiate_lookup2"
        (instantiate_lookup2 WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque instantiate_lookup2.
    
    (*
        fn random_field_element(shake: &mut Shake128Reader) -> Mersenne31 {
            let mut val = get_random_u32(shake);
            while val >= Mersenne31::ORDER_U32 {
                val = get_random_u32(shake);
            }
    
            unsafe {
                // Safety: By construction, val is now < 2^31 - 1.
                Mersenne31::from_canonical_unchecked(val)
            }
        }
    *)
    Definition random_field_element
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [ shake ] =>
        ltac:(M.monadic
          (let shake := M.alloc (| shake |) in
          M.read (|
            let~ val : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u32",
                  M.get_function (| "p3_monolith::util::get_random_u32", [], [] |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| shake |) |) |) ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.loop (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                ltac:(M.monadic
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.ge,
                                  [
                                    M.read (| val |);
                                    M.read (|
                                      get_constant (|
                                        "p3_field::field::PrimeField32::ORDER_U32",
                                        Ty.path "u32"
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                val,
                                M.call_closure (|
                                  Ty.path "u32",
                                  M.get_function (| "p3_monolith::util::get_random_u32", [], [] |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| shake |) |)
                                    |)
                                  ]
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                M.alloc (| Value.Tuple [] |)
                              |)
                            |)
                          |)))
                    ]
                  |)))
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                M.get_trait_method (|
                  "p3_field::integers::QuotientMap",
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  [],
                  [ Ty.path "u32" ],
                  "from_canonical_unchecked",
                  [],
                  []
                |),
                [ M.read (| val |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_random_field_element :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "random_field_element"
        (random_field_element WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque random_field_element.
    
    (*
        fn init_shake() -> Shake128Reader {
            let num_rounds = (NUM_FULL_ROUNDS + 1) as u8;
    
            let mut shake = Shake128::default();
            shake.update(b"Monolith");
            shake.update(&[WIDTH as u8, num_rounds]);
            shake.update(&Mersenne31::ORDER_U32.to_le_bytes());
            shake.update(&[8, 8, 8, 7]);
            shake.finalize_xof()
        }
    *)
    Definition init_shake
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.read (|
            let~ num_rounds : Ty.apply (Ty.path "*") [] [ Ty.path "u8" ] :=
              M.alloc (|
                M.cast
                  (Ty.path "u8")
                  (M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.add,
                    [ NUM_FULL_ROUNDS; Value.Integer IntegerKind.Usize 1 ]
                  |))
              |) in
            let~ shake :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "digest::core_api::wrapper::CoreWrapper")
                      []
                      [ Ty.path "sha3::Shake128Core" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "digest::core_api::wrapper::CoreWrapper")
                    []
                    [ Ty.path "sha3::Shake128Core" ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "digest::core_api::wrapper::CoreWrapper")
                      []
                      [ Ty.path "sha3::Shake128Core" ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "digest::Update",
                    Ty.apply
                      (Ty.path "digest::core_api::wrapper::CoreWrapper")
                      []
                      [ Ty.path "sha3::Shake128Core" ],
                    [],
                    [],
                    "update",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, shake |);
                    (* Unsize *)
                    M.pointer_coercion
                      (M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.read (| UnsupportedLiteral |) |)
                      |))
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "digest::Update",
                    Ty.apply
                      (Ty.path "digest::core_api::wrapper::CoreWrapper")
                      []
                      [ Ty.path "sha3::Shake128Core" ],
                    [],
                    [],
                    "update",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, shake |);
                    (* Unsize *)
                    M.pointer_coercion
                      (M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Value.Array [ M.cast (Ty.path "u8") WIDTH; M.read (| num_rounds |) ]
                            |)
                          |)
                        |)
                      |))
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "digest::Update",
                    Ty.apply
                      (Ty.path "digest::core_api::wrapper::CoreWrapper")
                      []
                      [ Ty.path "sha3::Shake128Core" ],
                    [],
                    [],
                    "update",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, shake |);
                    (* Unsize *)
                    M.pointer_coercion
                      (M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [ Ty.path "u8" ],
                                M.get_associated_function (|
                                  Ty.path "u32",
                                  "to_le_bytes",
                                  [],
                                  []
                                |),
                                [
                                  M.read (|
                                    get_constant (|
                                      "p3_field::field::PrimeField32::ORDER_U32",
                                      Ty.path "u32"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        |)
                      |))
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "digest::Update",
                    Ty.apply
                      (Ty.path "digest::core_api::wrapper::CoreWrapper")
                      []
                      [ Ty.path "sha3::Shake128Core" ],
                    [],
                    [],
                    "update",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, shake |);
                    (* Unsize *)
                    M.pointer_coercion
                      (M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Value.Array
                                [
                                  Value.Integer IntegerKind.U8 8;
                                  Value.Integer IntegerKind.U8 8;
                                  Value.Integer IntegerKind.U8 8;
                                  Value.Integer IntegerKind.U8 7
                                ]
                            |)
                          |)
                        |)
                      |))
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "digest::core_api::xof_reader::XofReaderCoreWrapper")
                  []
                  [ Ty.path "sha3::Shake128ReaderCore" ],
                M.get_trait_method (|
                  "digest::ExtendableOutput",
                  Ty.apply
                    (Ty.path "digest::core_api::wrapper::CoreWrapper")
                    []
                    [ Ty.path "sha3::Shake128Core" ],
                  [],
                  [],
                  "finalize_xof",
                  [],
                  []
                |),
                [ M.read (| shake |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_init_shake :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "init_shake"
        (init_shake WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque init_shake.
    
    (*
        fn instantiate_round_constants() -> [[Mersenne31; WIDTH]; NUM_FULL_ROUNDS] {
            let mut shake = Self::init_shake();
    
            [[Mersenne31::ZERO; WIDTH]; NUM_FULL_ROUNDS]
                .map(|arr| arr.map(|_| Self::random_field_element(&mut shake)))
        }
    *)
    Definition instantiate_round_constants
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.read (|
            let~ shake :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "digest::core_api::xof_reader::XofReaderCoreWrapper")
                      []
                      [ Ty.path "sha3::Shake128ReaderCore" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "digest::core_api::xof_reader::XofReaderCoreWrapper")
                    []
                    [ Ty.path "sha3::Shake128ReaderCore" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_monolith::monolith::MonolithMersenne31")
                      [ WIDTH; NUM_FULL_ROUNDS ]
                      [ Mds ],
                    "init_shake",
                    [],
                    []
                  |),
                  []
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "array")
                  [ NUM_FULL_ROUNDS ]
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ WIDTH ]
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_FULL_ROUNDS ]
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ WIDTH ]
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                    ],
                  "map",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ WIDTH ]
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                          ]
                      ]
                      (Ty.apply
                        (Ty.path "array")
                        [ WIDTH ]
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]);
                    Ty.apply
                      (Ty.path "array")
                      [ WIDTH ]
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                  ]
                |),
                [
                  repeat (|
                    repeat (|
                      M.read (|
                        get_constant (|
                          "p3_field::field::PrimeCharacteristicRing::ZERO",
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                        |)
                      |),
                      WIDTH
                    |),
                    NUM_FULL_ROUNDS
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ WIDTH ]
                                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "array")
                                      [ WIDTH ]
                                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let arr := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ WIDTH ]
                                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ WIDTH ]
                                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                                        "map",
                                        [],
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                                                ]
                                            ]
                                            (Ty.path "p3_mersenne_31::mersenne_31::Mersenne31");
                                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                                        ]
                                      |),
                                      [
                                        M.read (| arr |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path
                                                                  "p3_mersenne_31::mersenne_31::Mersenne31"
                                                              ]
                                                          ]
                                                          (Ty.path
                                                            "p3_mersenne_31::mersenne_31::Mersenne31")
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.call_closure (|
                                                            Ty.path
                                                              "p3_mersenne_31::mersenne_31::Mersenne31",
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_monolith::monolith::MonolithMersenne31")
                                                                [ WIDTH; NUM_FULL_ROUNDS ]
                                                                [ Mds ],
                                                              "random_field_element",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    shake
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_instantiate_round_constants :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "instantiate_round_constants"
        (instantiate_round_constants WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque instantiate_round_constants.
    
    (*
        pub fn concrete(&self, state: &mut [Mersenne31; WIDTH]) {
            self.mds.permute_mut(state);
        }
    *)
    Definition concrete
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_symmetric::permutation::Permutation",
                    Mds,
                    [],
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ WIDTH ]
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                    ],
                    "permute_mut",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_monolith::monolith::MonolithMersenne31",
                        "mds"
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_concrete :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "concrete"
        (concrete WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque concrete.
    
    (*
        pub fn add_round_constants(
            &self,
            state: &mut [Mersenne31; WIDTH],
            round_constants: &[Mersenne31; WIDTH],
        ) {
            // TODO: vectorize?
            for (x, rc) in state.iter_mut().zip(round_constants) {
                *x += *rc;
            }
        }
    *)
    Definition add_round_constants
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [ self; state; round_constants ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          let round_constants := M.alloc (| round_constants |) in
          M.read (|
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::zip::Zip")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::IterMut")
                          []
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::IterMut")
                            []
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                        ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::IterMut")
                              []
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::IterMut")
                            []
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                          [],
                          [],
                          "zip",
                          [],
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ WIDTH ]
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                              ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::IterMut")
                              []
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                              "iter_mut",
                              [],
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| state |) |)
                                |))
                            ]
                          |);
                          M.read (| round_constants |)
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::IterMut")
                                          []
                                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                                      ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                    let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                    let x := M.copy (| γ1_0 |) in
                                    let rc := M.copy (| γ1_1 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "core::ops::arith::AddAssign",
                                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                            [],
                                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                                            "add_assign",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| x |) |)
                                            |);
                                            M.read (| M.deref (| M.read (| rc |) |) |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_add_round_constants :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "add_round_constants"
        (add_round_constants WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque add_round_constants.
    
    (*
        pub fn bricks(state: &mut [Mersenne31; WIDTH]) {
            // Feistel Type-3
            for (x, x_mut) in state.to_owned().iter().zip(state.iter_mut().skip(1)) {
                *x_mut += x.square();
            }
        }
    *)
    Definition bricks
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [ state ] =>
        ltac:(M.monadic
          (let state := M.alloc (| state |) in
          M.read (|
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::zip::Zip")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                        Ty.apply
                          (Ty.path "core::iter::adapters::skip::Skip")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::IterMut")
                              []
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                          ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::skip::Skip")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::IterMut")
                                []
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                            ]
                        ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::skip::Skip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                          [],
                          [],
                          "zip",
                          [],
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::skip::Skip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                              ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ WIDTH ]
                                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                                      M.get_trait_method (|
                                        "alloc::borrow::ToOwned",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ WIDTH ]
                                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                                        [],
                                        [],
                                        "to_owned",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| state |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |))
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::skip::Skip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::slice::iter::IterMut")
                                []
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                              [],
                              [],
                              "skip",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                                  "iter_mut",
                                  [],
                                  []
                                |),
                                [
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| state |) |)
                                    |))
                                ]
                              |);
                              Value.Integer IntegerKind.Usize 1
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::skip::Skip")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                                          ]
                                      ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                    let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                    let x := M.copy (| γ1_0 |) in
                                    let x_mut := M.copy (| γ1_1 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "core::ops::arith::AddAssign",
                                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                            [],
                                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                                            "add_assign",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| x_mut |) |)
                                            |);
                                            M.call_closure (|
                                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                              M.get_trait_method (|
                                                "p3_field::field::PrimeCharacteristicRing",
                                                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                                [],
                                                [],
                                                "square",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| x |) |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_bricks :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "bricks"
        (bricks WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque bricks.
    
    (*
        pub fn bar(&self, el: Mersenne31) -> Mersenne31 {
            let val = &mut el.as_canonical_u32();
    
            unsafe {
                // get_unchecked here is safe because lookup table 1 contains 2^16 elements
                let low = *self.lookup1.get_unchecked( *val as u16 as usize);
    
                // get_unchecked here is safe because lookup table 2 contains 2^15 elements,
                // and el >> 16 < 2^15 (since el < Mersenne31::ORDER_U32 < 2^31)
                let high = *self.lookup2.get_unchecked(( *val >> 16) as u16 as usize);
                *val = ((high as u32) << 16) | low as u32
            }
    
            unsafe {
                // Safety: low + high < 2^31 as low < 2^16 and high < 2^15.
                Mersenne31::from_canonical_unchecked( *val)
            }
        }
    *)
    Definition bar
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [ self; el ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let el := M.alloc (| el |) in
          M.read (|
            let~ val :
                Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "&mut") [] [ Ty.path "u32" ] ] :=
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "u32",
                      M.get_trait_method (|
                        "p3_field::field::PrimeField32",
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                        [],
                        [],
                        "as_canonical_u32",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, el |) ]
                    |)
                  |)
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              let~ low : Ty.apply (Ty.path "*") [] [ Ty.path "u16" ] :=
                M.copy (|
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.path "u16" ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ],
                        "get_unchecked",
                        [],
                        [ Ty.path "usize" ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ] ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "p3_monolith::monolith::MonolithMersenne31",
                                    "lookup1"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.cast
                          (Ty.path "usize")
                          (M.cast (Ty.path "u16") (M.read (| M.deref (| M.read (| val |) |) |)))
                      ]
                    |)
                  |)
                |) in
              let~ high : Ty.apply (Ty.path "*") [] [ Ty.path "u16" ] :=
                M.copy (|
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.path "u16" ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ],
                        "get_unchecked",
                        [],
                        [ Ty.path "usize" ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ] ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "p3_monolith::monolith::MonolithMersenne31",
                                    "lookup2"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.cast
                          (Ty.path "usize")
                          (M.cast
                            (Ty.path "u16")
                            (M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.shr,
                              [
                                M.read (| M.deref (| M.read (| val |) |) |);
                                Value.Integer IntegerKind.I32 16
                              ]
                            |)))
                      ]
                    |)
                  |)
                |) in
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| val |) |),
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.bit_or,
                    [
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.shl,
                        [
                          M.cast (Ty.path "u32") (M.read (| high |));
                          Value.Integer IntegerKind.I32 16
                        ]
                      |);
                      M.cast (Ty.path "u32") (M.read (| low |))
                    ]
                  |)
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                M.get_trait_method (|
                  "p3_field::integers::QuotientMap",
                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                  [],
                  [ Ty.path "u32" ],
                  "from_canonical_unchecked",
                  [],
                  []
                |),
                [ M.read (| M.deref (| M.read (| val |) |) |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_bar :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "bar"
        (bar WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque bar.
    
    (*
        pub fn bars(&self, state: &mut [Mersenne31; WIDTH]) {
            state
                .iter_mut()
                .take(Self::NUM_BARS)
                .for_each(|el| *el = self.bar( *el));
        }
    *)
    Definition bars
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::take::Take")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::IterMut")
                          []
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                      ],
                    [],
                    [],
                    "for_each",
                    [],
                    [
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                            ]
                        ]
                        (Ty.tuple [])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::take::Take")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::IterMut")
                            []
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::IterMut")
                          []
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                        [],
                        [],
                        "take",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::slice::iter::IterMut")
                            []
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                            "iter_mut",
                            [],
                            []
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |))
                          ]
                        |);
                        M.read (|
                          get_associated_constant (|
                            Ty.apply
                              (Ty.path "p3_monolith::monolith::MonolithMersenne31")
                              [ WIDTH; NUM_FULL_ROUNDS ]
                              [ Mds ],
                            "NUM_BARS",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                                          ]
                                      ]
                                      (Ty.tuple [])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let el := M.copy (| γ |) in
                                      M.write (|
                                        M.deref (| M.read (| el |) |),
                                        M.call_closure (|
                                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "p3_monolith::monolith::MonolithMersenne31")
                                              [ WIDTH; NUM_FULL_ROUNDS ]
                                              [ Mds ],
                                            "bar",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (| M.deref (| M.read (| el |) |) |)
                                          ]
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_bars :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "bars"
        (bars WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque bars.
    
    (*
        pub fn permutation(&self, state: &mut [Mersenne31; WIDTH]) {
            self.concrete(state);
            for rc in self.round_constants {
                self.bars(state);
                Self::bricks(state);
                self.concrete(state);
                self.add_round_constants(state, &rc);
            }
            self.bars(state);
            Self::bricks(state);
            self.concrete(state);
        }
    *)
    Definition permutation
        (WIDTH NUM_FULL_ROUNDS : Value.t)
        (Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_FULL_ROUNDS Mds in
      match ε, τ, α with
      | [], [], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_monolith::monolith::MonolithMersenne31")
                      [ WIDTH; NUM_FULL_ROUNDS ]
                      [ Mds ],
                    "concrete",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::array::iter::IntoIter")
                        [ NUM_FULL_ROUNDS ]
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ WIDTH ]
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "array")
                          [ NUM_FULL_ROUNDS ]
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ WIDTH ]
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                          ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_monolith::monolith::MonolithMersenne31",
                            "round_constants"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ WIDTH ]
                                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ NUM_FULL_ROUNDS ]
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ WIDTH ]
                                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                                        ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let rc := M.copy (| γ0_0 |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monolith::monolith::MonolithMersenne31")
                                                [ WIDTH; NUM_FULL_ROUNDS ]
                                                [ Mds ],
                                              "bars",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| self |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| state |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monolith::monolith::MonolithMersenne31")
                                                [ WIDTH; NUM_FULL_ROUNDS ]
                                                [ Mds ],
                                              "bricks",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| state |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monolith::monolith::MonolithMersenne31")
                                                [ WIDTH; NUM_FULL_ROUNDS ]
                                                [ Mds ],
                                              "concrete",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| self |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| state |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monolith::monolith::MonolithMersenne31")
                                                [ WIDTH; NUM_FULL_ROUNDS ]
                                                [ Mds ],
                                              "add_round_constants",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| self |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| state |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, rc |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_monolith::monolith::MonolithMersenne31")
                      [ WIDTH; NUM_FULL_ROUNDS ]
                      [ Mds ],
                    "bars",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_monolith::monolith::MonolithMersenne31")
                      [ WIDTH; NUM_FULL_ROUNDS ]
                      [ Mds ],
                    "bricks",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |) ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_monolith::monolith::MonolithMersenne31")
                      [ WIDTH; NUM_FULL_ROUNDS ]
                      [ Mds ],
                    "concrete",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_permutation :
      forall (WIDTH NUM_FULL_ROUNDS : Value.t) (Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH NUM_FULL_ROUNDS Mds)
        "permutation"
        (permutation WIDTH NUM_FULL_ROUNDS Mds).
    Admitted.
    Global Typeclasses Opaque permutation.
  End Impl_p3_monolith_monolith_MonolithMersenne31_WIDTH_NUM_FULL_ROUNDS_Mds.
End monolith.
