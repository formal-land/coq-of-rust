(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module monolith_mds.
  (* StructTuple
    {
      name := "MonolithMdsMatrixMersenne31";
      const_params := [ "NUM_ROUNDS" ];
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_clone_Clone_for_p3_monolith_monolith_mds_MonolithMdsMatrixMersenne31_NUM_ROUNDS.
    Definition Self (NUM_ROUNDS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monolith::monolith_mds::MonolithMdsMatrixMersenne31") [ NUM_ROUNDS ] [].
    
    (* Clone *)
    Definition clone
        (NUM_ROUNDS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self NUM_ROUNDS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "p3_monolith::monolith_mds::MonolithMdsMatrixMersenne31" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (NUM_ROUNDS : Value.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self NUM_ROUNDS)
        (* Instance *) [ ("clone", InstanceField.Method (clone NUM_ROUNDS)) ].
  End Impl_core_clone_Clone_for_p3_monolith_monolith_mds_MonolithMdsMatrixMersenne31_NUM_ROUNDS.
  
  Module Impl_core_fmt_Debug_for_p3_monolith_monolith_mds_MonolithMdsMatrixMersenne31_NUM_ROUNDS.
    Definition Self (NUM_ROUNDS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monolith::monolith_mds::MonolithMdsMatrixMersenne31") [ NUM_ROUNDS ] [].
    
    (* Debug *)
    Definition fmt
        (NUM_ROUNDS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self NUM_ROUNDS in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| mk_str (| "MonolithMdsMatrixMersenne31" |) |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (NUM_ROUNDS : Value.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self NUM_ROUNDS)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt NUM_ROUNDS)) ].
  End Impl_core_fmt_Debug_for_p3_monolith_monolith_mds_MonolithMdsMatrixMersenne31_NUM_ROUNDS.
  
  Definition value_MATRIX_CIRC_MDS_16_MERSENNE31_MONOLITH
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.Array
          [
            Value.Integer IntegerKind.U64 61402;
            Value.Integer IntegerKind.U64 17845;
            Value.Integer IntegerKind.U64 26798;
            Value.Integer IntegerKind.U64 59689;
            Value.Integer IntegerKind.U64 12021;
            Value.Integer IntegerKind.U64 40901;
            Value.Integer IntegerKind.U64 41351;
            Value.Integer IntegerKind.U64 27521;
            Value.Integer IntegerKind.U64 56951;
            Value.Integer IntegerKind.U64 12034;
            Value.Integer IntegerKind.U64 53865;
            Value.Integer IntegerKind.U64 43244;
            Value.Integer IntegerKind.U64 7454;
            Value.Integer IntegerKind.U64 33823;
            Value.Integer IntegerKind.U64 28750;
            Value.Integer IntegerKind.U64 1108
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_MATRIX_CIRC_MDS_16_MERSENNE31_MONOLITH :
    M.IsFunction.C
      "p3_monolith::monolith_mds::MATRIX_CIRC_MDS_16_MERSENNE31_MONOLITH"
      value_MATRIX_CIRC_MDS_16_MERSENNE31_MONOLITH.
  Admitted.
  Global Typeclasses Opaque value_MATRIX_CIRC_MDS_16_MERSENNE31_MONOLITH.
  
  Module Impl_p3_symmetric_permutation_Permutation_array_WIDTH_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_monolith_monolith_mds_MonolithMdsMatrixMersenne31_NUM_ROUNDS.
    Definition Self (WIDTH NUM_ROUNDS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monolith::monolith_mds::MonolithMdsMatrixMersenne31") [ NUM_ROUNDS ] [].
    
    (*
        fn permute(&self, input: [Mersenne31; WIDTH]) -> [Mersenne31; WIDTH] {
            if WIDTH == 16 {
                let matrix: [u64; WIDTH] = MATRIX_CIRC_MDS_16_MERSENNE31_MONOLITH[..]
                    .try_into()
                    .unwrap();
                apply_circulant(&matrix, input)
            } else {
                let mut shake = Shake128::default();
                shake.update(b"Monolith");
                shake.update(&[WIDTH as u8, NUM_ROUNDS as u8]);
                shake.update(&Mersenne31::ORDER_U32.to_le_bytes());
                shake.update(&[16, 15]);
                shake.update(b"MDS");
                let mut shake_finalized = shake.finalize_xof();
                apply_cauchy_mds_matrix(&mut shake_finalized, input)
            }
        }
    *)
    Definition permute
        (WIDTH NUM_ROUNDS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_ROUNDS in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "array")
                    [ WIDTH ]
                    [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [ WIDTH; Value.Integer IntegerKind.Usize 16 ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    let~ matrix :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [ Ty.apply (Ty.path "array") [ WIDTH ] [ Ty.path "u64" ] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "array") [ WIDTH ] [ Ty.path "u64" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply (Ty.path "array") [ WIDTH ] [ Ty.path "u64" ];
                                Ty.path "core::array::TryFromSliceError"
                              ],
                            "unwrap",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply (Ty.path "array") [ WIDTH ] [ Ty.path "u64" ];
                                  Ty.path "core::array::TryFromSliceError"
                                ],
                              M.get_trait_method (|
                                "core::convert::TryInto",
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ] ],
                                [],
                                [ Ty.apply (Ty.path "array") [ WIDTH ] [ Ty.path "u64" ] ],
                                "try_into",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ] ],
                                      M.get_trait_method (|
                                        "core::ops::index::Index",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [ Ty.path "u64" ],
                                        [],
                                        [ Ty.path "core::ops::range::RangeFull" ],
                                        "index",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_constant (|
                                            "p3_monolith::monolith_mds::MATRIX_CIRC_MDS_16_MERSENNE31_MONOLITH",
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [ Ty.path "u64" ]
                                          |)
                                        |);
                                        Value.StructTuple "core::ops::range::RangeFull" []
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "array")
                          [ WIDTH ]
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                        M.get_function (|
                          "p3_mds::util::apply_circulant",
                          [ WIDTH ],
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.borrow (| Pointer.Kind.Ref, matrix |) |)
                          |);
                          M.read (| input |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let~ shake :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.apply
                              (Ty.path "digest::core_api::wrapper::CoreWrapper")
                              []
                              [ Ty.path "sha3::Shake128Core" ]
                          ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "digest::core_api::wrapper::CoreWrapper")
                            []
                            [ Ty.path "sha3::Shake128Core" ],
                          M.get_trait_method (|
                            "core::default::Default",
                            Ty.apply
                              (Ty.path "digest::core_api::wrapper::CoreWrapper")
                              []
                              [ Ty.path "sha3::Shake128Core" ],
                            [],
                            [],
                            "default",
                            [],
                            []
                          |),
                          []
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "digest::Update",
                            Ty.apply
                              (Ty.path "digest::core_api::wrapper::CoreWrapper")
                              []
                              [ Ty.path "sha3::Shake128Core" ],
                            [],
                            [],
                            "update",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, shake |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.read (| UnsupportedLiteral |) |)
                              |))
                          ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "digest::Update",
                            Ty.apply
                              (Ty.path "digest::core_api::wrapper::CoreWrapper")
                              []
                              [ Ty.path "sha3::Shake128Core" ],
                            [],
                            [],
                            "update",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, shake |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [
                                          M.cast (Ty.path "u8") WIDTH;
                                          M.cast (Ty.path "u8") NUM_ROUNDS
                                        ]
                                    |)
                                  |)
                                |)
                              |))
                          ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "digest::Update",
                            Ty.apply
                              (Ty.path "digest::core_api::wrapper::CoreWrapper")
                              []
                              [ Ty.path "sha3::Shake128Core" ],
                            [],
                            [],
                            "update",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, shake |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 4 ]
                                          [ Ty.path "u8" ],
                                        M.get_associated_function (|
                                          Ty.path "u32",
                                          "to_le_bytes",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (|
                                            get_constant (|
                                              "p3_field::field::PrimeField32::ORDER_U32",
                                              Ty.path "u32"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |))
                          ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "digest::Update",
                            Ty.apply
                              (Ty.path "digest::core_api::wrapper::CoreWrapper")
                              []
                              [ Ty.path "sha3::Shake128Core" ],
                            [],
                            [],
                            "update",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, shake |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [
                                          Value.Integer IntegerKind.U8 16;
                                          Value.Integer IntegerKind.U8 15
                                        ]
                                    |)
                                  |)
                                |)
                              |))
                          ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "digest::Update",
                            Ty.apply
                              (Ty.path "digest::core_api::wrapper::CoreWrapper")
                              []
                              [ Ty.path "sha3::Shake128Core" ],
                            [],
                            [],
                            "update",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, shake |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.read (| UnsupportedLiteral |) |)
                              |))
                          ]
                        |)
                      |) in
                    let~ shake_finalized :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.apply
                              (Ty.path "digest::core_api::xof_reader::XofReaderCoreWrapper")
                              []
                              [ Ty.path "sha3::Shake128ReaderCore" ]
                          ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "digest::core_api::xof_reader::XofReaderCoreWrapper")
                            []
                            [ Ty.path "sha3::Shake128ReaderCore" ],
                          M.get_trait_method (|
                            "digest::ExtendableOutput",
                            Ty.apply
                              (Ty.path "digest::core_api::wrapper::CoreWrapper")
                              []
                              [ Ty.path "sha3::Shake128Core" ],
                            [],
                            [],
                            "finalize_xof",
                            [],
                            []
                          |),
                          [ M.read (| shake |) ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "array")
                          [ WIDTH ]
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                        M.get_function (|
                          "p3_monolith::monolith_mds::apply_cauchy_mds_matrix",
                          [ WIDTH ],
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (| M.borrow (| Pointer.Kind.MutRef, shake_finalized |) |)
                          |);
                          M.read (| input |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_mut(&self, input: &mut [Mersenne31; WIDTH]) {
            *input = self.permute( *input);
        }
    *)
    Definition permute_mut
        (WIDTH NUM_ROUNDS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH NUM_ROUNDS in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| input |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ WIDTH ]
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.apply
                        (Ty.path "p3_monolith::monolith_mds::MonolithMdsMatrixMersenne31")
                        [ NUM_ROUNDS ]
                        [],
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ WIDTH ]
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                      ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| M.deref (| M.read (| input |) |) |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH NUM_ROUNDS : Value.t),
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "array") [ WIDTH ] [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        ]
        (Self WIDTH NUM_ROUNDS)
        (* Instance *)
        [
          ("permute", InstanceField.Method (permute WIDTH NUM_ROUNDS));
          ("permute_mut", InstanceField.Method (permute_mut WIDTH NUM_ROUNDS))
        ].
  End Impl_p3_symmetric_permutation_Permutation_array_WIDTH_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_monolith_monolith_mds_MonolithMdsMatrixMersenne31_NUM_ROUNDS.
  
  Module Impl_p3_mds_MdsPermutation_WIDTH_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_monolith_monolith_mds_MonolithMdsMatrixMersenne31_NUM_ROUNDS.
    Definition Self (WIDTH NUM_ROUNDS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monolith::monolith_mds::MonolithMdsMatrixMersenne31") [ NUM_ROUNDS ] [].
    
    Axiom Implements :
      forall (WIDTH NUM_ROUNDS : Value.t),
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ WIDTH ]
        (* Trait polymorphic types *) [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
        (Self WIDTH NUM_ROUNDS)
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_WIDTH_p3_mersenne_31_mersenne_31_Mersenne31_for_p3_monolith_monolith_mds_MonolithMdsMatrixMersenne31_NUM_ROUNDS.
  
  (*
  fn apply_cauchy_mds_matrix<F: PrimeField32, const WIDTH: usize>(
      shake: &mut Shake128Reader,
      to_multiply: [F; WIDTH],
  ) -> [F; WIDTH] {
      let mut output: [F; WIDTH] = [F::ZERO; WIDTH];
  
      // As F is a PrimeField, it's order is equal to its characteristic.
      // Thus 2|F| > 2^bits > |F|.
      let bits = F::bits();
      let x_mask = (1 << (bits - 9)) - 1;
      let y_mask = ((1 << bits) - 1) >> 2;
  
      let y = get_random_y_i::<WIDTH>(shake, x_mask, y_mask);
      let mut x = y;
      x.iter_mut().for_each(|x_i| *x_i &= x_mask);
  
      for (i, x_i) in x.iter().enumerate() {
          for (j, y_j) in y.iter().enumerate() {
              let val = unsafe {
                  // Safety:
                  // x_i < x_mask < 2^{-8}|F|
                  // y_j < y_mask < 2^{-1}|F|
                  // Hence x_i + y_j < |F|.
                  F::from_canonical_unchecked(x_i + y_j).inverse()
              };
              output[i] += val * to_multiply[j];
          }
      }
  
      output
  }
  *)
  Definition apply_cauchy_mds_matrix (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ WIDTH ], [ F ], [ shake; to_multiply ] =>
      ltac:(M.monadic
        (let shake := M.alloc (| shake |) in
        let to_multiply := M.alloc (| to_multiply |) in
        M.read (|
          let~ output : Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ] ] :=
            M.alloc (|
              repeat (|
                M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", F |) |),
                WIDTH
              |)
            |) in
          let~ bits : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (| "p3_field::field::Field", F, [], [], "bits", [], [] |),
                []
              |)
            |) in
          let~ x_mask : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "u32",
                BinOp.Wrap.sub,
                [
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.shl,
                    [
                      Value.Integer IntegerKind.U32 1;
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [ M.read (| bits |); Value.Integer IntegerKind.Usize 9 ]
                      |)
                    ]
                  |);
                  Value.Integer IntegerKind.U32 1
                ]
              |)
            |) in
          let~ y_mask : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "u32",
                BinOp.Wrap.shr,
                [
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.sub,
                    [
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.shl,
                        [ Value.Integer IntegerKind.U32 1; M.read (| bits |) ]
                      |);
                      Value.Integer IntegerKind.U32 1
                    ]
                  |);
                  Value.Integer IntegerKind.I32 2
                ]
              |)
            |) in
          let~ y :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "array") [ WIDTH ] [ Ty.path "u32" ] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "array") [ WIDTH ] [ Ty.path "u32" ],
                M.get_function (| "p3_monolith::monolith_mds::get_random_y_i", [ WIDTH ], [] |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| shake |) |) |);
                  M.read (| x_mask |);
                  M.read (| y_mask |)
                ]
              |)
            |) in
          let~ x :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "array") [ WIDTH ] [ Ty.path "u32" ] ] :=
            M.copy (| y |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u32" ],
                  [],
                  [],
                  "for_each",
                  [],
                  [
                    Ty.function
                      [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ Ty.path "u32" ] ] ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u32" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ],
                      "iter_mut",
                      [],
                      []
                    |),
                    [ (* Unsize *) M.pointer_coercion (M.borrow (| Pointer.Kind.MutRef, x |)) ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ Ty.path "u32" ] ] ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x_i := M.copy (| γ |) in
                                    let β := M.deref (| M.read (| x_i |) |) in
                                    M.write (|
                                      β,
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.bit_and,
                                        [ M.read (| β |); M.read (| x_mask |) ]
                                      |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                      []
                      [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ] ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ] ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ] ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ],
                          [],
                          [],
                          "enumerate",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ],
                              "iter",
                              [],
                              []
                            |),
                            [ (* Unsize *) M.pointer_coercion (M.borrow (| Pointer.Kind.Ref, x |)) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply (Ty.path "&") [] [ Ty.path "u32" ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.path "u32" ]
                                      ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                    let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                    let i := M.copy (| γ1_0 |) in
                                    let x_i := M.copy (| γ1_1 |) in
                                    M.use
                                      (M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ Ty.path "u32" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Ty.path "u32" ]
                                                ],
                                              [],
                                              [],
                                              "into_iter",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ Ty.path "u32" ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Ty.path "u32" ],
                                                  [],
                                                  [],
                                                  "enumerate",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ Ty.path "u32" ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [ Ty.path "u32" ],
                                                      "iter",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.borrow (| Pointer.Kind.Ref, y |))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let iter := M.copy (| γ |) in
                                              M.loop (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                ltac:(M.monadic
                                                  (let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.match_operator (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "u32" ]
                                                                ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::enumerate::Enumerate")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [ Ty.path "u32" ]
                                                              ],
                                                            [],
                                                            [],
                                                            "next",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  iter
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "core::option::Option::None"
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let γ1_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                0
                                                              |) in
                                                            let γ1_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                1
                                                              |) in
                                                            let j := M.copy (| γ1_0 |) in
                                                            let y_j := M.copy (| γ1_1 |) in
                                                            let~ val :
                                                                Ty.apply (Ty.path "*") [] [ F ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  F,
                                                                  M.get_trait_method (|
                                                                    "p3_field::field::Field",
                                                                    F,
                                                                    [],
                                                                    [],
                                                                    "inverse",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          F,
                                                                          M.get_trait_method (|
                                                                            "p3_field::integers::QuotientMap",
                                                                            F,
                                                                            [],
                                                                            [ Ty.path "u32" ],
                                                                            "from_canonical_unchecked",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.path "u32",
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ Ty.path "u32" ],
                                                                                [],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [ Ty.path "u32"
                                                                                    ]
                                                                                ],
                                                                                "add",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| x_i |);
                                                                                M.read (| y_j |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::AddAssign",
                                                                    F,
                                                                    [],
                                                                    [ F ],
                                                                    "add_assign",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.SubPointer.get_array_field (|
                                                                        output,
                                                                        M.read (| i |)
                                                                      |)
                                                                    |);
                                                                    M.call_closure (|
                                                                      F,
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        F,
                                                                        [],
                                                                        [ F ],
                                                                        "mul",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| val |);
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            to_multiply,
                                                                            M.read (| j |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                              |)))
                                        ]
                                      |))))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          output
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_apply_cauchy_mds_matrix :
    M.IsFunction.C "p3_monolith::monolith_mds::apply_cauchy_mds_matrix" apply_cauchy_mds_matrix.
  Admitted.
  Global Typeclasses Opaque apply_cauchy_mds_matrix.
  
  (*
  fn get_random_y_i<const WIDTH: usize>(
      shake: &mut Shake128Reader,
      x_mask: u32,
      y_mask: u32,
  ) -> [u32; WIDTH] {
      let mut res = [0; WIDTH];
  
      for i in 0..WIDTH {
          let mut y_i = get_random_u32(shake) & y_mask;
          let mut x_i = y_i & x_mask;
          while res.iter().take(i).any(|r| r & x_mask == x_i) {
              y_i = get_random_u32(shake) & y_mask;
              x_i = y_i & x_mask;
          }
          res[i] = y_i;
      }
  
      res
  }
  *)
  Definition get_random_y_i (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ WIDTH ], [], [ shake; x_mask; y_mask ] =>
      ltac:(M.monadic
        (let shake := M.alloc (| shake |) in
        let x_mask := M.alloc (| x_mask |) in
        let y_mask := M.alloc (| y_mask |) in
        M.read (|
          let~ res :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "array") [ WIDTH ] [ Ty.path "u32" ] ] :=
            M.alloc (| repeat (| Value.Integer IntegerKind.U32 0, WIDTH |) |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", WIDTH) ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let i := M.copy (| γ0_0 |) in
                                    let~ y_i : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "u32",
                                          BinOp.Wrap.bit_and,
                                          [
                                            M.call_closure (|
                                              Ty.path "u32",
                                              M.get_function (|
                                                "p3_monolith::util::get_random_u32",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| shake |) |)
                                                |)
                                              ]
                                            |);
                                            M.read (| y_mask |)
                                          ]
                                        |)
                                      |) in
                                    let~ x_i : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "u32",
                                          BinOp.Wrap.bit_and,
                                          [ M.read (| y_i |); M.read (| x_mask |) ]
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.loop (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::take::Take")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [ Ty.path "u32" ]
                                                              ],
                                                            [],
                                                            [],
                                                            "any",
                                                            [],
                                                            [
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "u32" ]
                                                                    ]
                                                                ]
                                                                (Ty.path "bool")
                                                            ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::take::Take")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ Ty.path "u32" ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [ Ty.path "u32" ],
                                                                    [],
                                                                    [],
                                                                    "take",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ Ty.path "u32" ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Ty.path "u32" ],
                                                                        "iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        (* Unsize *)
                                                                        M.pointer_coercion
                                                                          (M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            res
                                                                          |))
                                                                      ]
                                                                    |);
                                                                    M.read (| i |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    ltac:(M.monadic
                                                                      (M.match_operator (|
                                                                        Ty.apply
                                                                          (Ty.path "*")
                                                                          []
                                                                          [
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "u32"
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.path "bool")
                                                                          ],
                                                                        M.alloc (| α0 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let r :=
                                                                                M.copy (| γ |) in
                                                                              M.call_closure (|
                                                                                Ty.path "bool",
                                                                                BinOp.eq,
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.path "u32",
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::bit::BitAnd",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "u32"
                                                                                        ],
                                                                                      [],
                                                                                      [
                                                                                        Ty.path
                                                                                          "u32"
                                                                                      ],
                                                                                      "bitand",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        r
                                                                                      |);
                                                                                      M.read (|
                                                                                        x_mask
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.read (| x_i |)
                                                                                ]
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                  | _ =>
                                                                    M.impossible
                                                                      "wrong number of arguments"
                                                                  end))
                                                          ]
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.alloc (|
                                                      M.write (|
                                                        y_i,
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.bit_and,
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "u32",
                                                              M.get_function (|
                                                                "p3_monolith::util::get_random_u32",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (| M.read (| shake |) |)
                                                                |)
                                                              ]
                                                            |);
                                                            M.read (| y_mask |)
                                                          ]
                                                        |)
                                                      |)
                                                    |) in
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.alloc (|
                                                      M.write (|
                                                        x_i,
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.bit_and,
                                                          [ M.read (| y_i |); M.read (| x_mask |) ]
                                                        |)
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (| M.break (||) |)
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)
                                                      |)
                                                    |)
                                                  |)))
                                            ]
                                          |)))
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.write (|
                                          M.SubPointer.get_array_field (| res, M.read (| i |) |),
                                          M.read (| y_i |)
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          res
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_get_random_y_i :
    M.IsFunction.C "p3_monolith::monolith_mds::get_random_y_i" get_random_y_i.
  Admitted.
  Global Typeclasses Opaque get_random_y_i.
End monolith_mds.
