(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module util.
  (*
  pub(crate) fn get_random_u32(shake: &mut Shake128Reader) -> u32 {
      let mut rand = [0u8; 4];
      shake.read(&mut rand);
      u32::from_le_bytes(rand)
  }
  *)
  Definition get_random_u32 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ shake ] =>
      ltac:(M.monadic
        (let shake := M.alloc (| shake |) in
        M.read (|
          let~ rand :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ Ty.path "u8" ]
                ] :=
            M.alloc (|
              repeat (| Value.Integer IntegerKind.U8 0, Value.Integer IntegerKind.Usize 4 |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "digest::XofReader",
                  Ty.apply
                    (Ty.path "digest::core_api::xof_reader::XofReaderCoreWrapper")
                    []
                    [ Ty.path "sha3::Shake128ReaderCore" ],
                  [],
                  [],
                  "read",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| shake |) |) |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (| M.borrow (| Pointer.Kind.MutRef, rand |) |)
                    |))
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              M.get_associated_function (| Ty.path "u32", "from_le_bytes", [], [] |),
              [ M.read (| rand |) ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_get_random_u32 :
    M.IsFunction.C "p3_monolith::util::get_random_u32" get_random_u32.
  Admitted.
  Global Typeclasses Opaque get_random_u32.
End util.
