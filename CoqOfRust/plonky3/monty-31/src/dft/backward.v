(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module dft.
  Module backward.
    (*
    fn backward_butterfly<T: PrimeCharacteristicRing + Copy>(x: T, y: T, roots: T) -> (T, T) {
        let t = y * roots;
        (x + t, x - t)
    }
    *)
    Definition backward_butterfly (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ x; y; roots ] =>
        ltac:(M.monadic
          (let x := M.alloc (| x |) in
          let y := M.alloc (| y |) in
          let roots := M.alloc (| roots |) in
          M.read (|
            let~ t : Ty.apply (Ty.path "*") [] [ T ] :=
              M.alloc (|
                M.call_closure (|
                  T,
                  M.get_trait_method (| "core::ops::arith::Mul", T, [], [ T ], "mul", [], [] |),
                  [ M.read (| y |); M.read (| roots |) ]
                |)
              |) in
            M.alloc (|
              Value.Tuple
                [
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::ops::arith::Add", T, [], [ T ], "add", [], [] |),
                    [ M.read (| x |); M.read (| t |) ]
                  |);
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::ops::arith::Sub", T, [], [ T ], "sub", [], [] |),
                    [ M.read (| x |); M.read (| t |) ]
                  |)
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_backward_butterfly :
      M.IsFunction.C "p3_monty_31::dft::backward::backward_butterfly" backward_butterfly.
    Admitted.
    Global Typeclasses Opaque backward_butterfly.
    
    (*
    fn backward_butterfly_interleaved<const HALF_RADIX: usize, T: PackedFieldPow2>(
        x: T,
        y: T,
        roots: T,
    ) -> (T, T) {
        let (x, y) = x.interleave(y, HALF_RADIX);
        let (x, y) = backward_butterfly(x, y, roots);
        x.interleave(y, HALF_RADIX)
    }
    *)
    Definition backward_butterfly_interleaved
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [ HALF_RADIX ], [ T ], [ x; y; roots ] =>
        ltac:(M.monadic
          (let x := M.alloc (| x |) in
          let y := M.alloc (| y |) in
          let roots := M.alloc (| roots |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [ T; T ] ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ T; T ],
                  M.get_trait_method (|
                    "p3_field::packed::PackedFieldPow2",
                    T,
                    [],
                    [],
                    "interleave",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, x |); M.read (| y |); HALF_RADIX ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let x := M.copy (| γ0_0 |) in
                    let y := M.copy (| γ0_1 |) in
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [ T; T ] ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [ T; T ],
                          M.get_function (|
                            "p3_monty_31::dft::backward::backward_butterfly",
                            [],
                            [ T ]
                          |),
                          [ M.read (| x |); M.read (| y |); M.read (| roots |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let x := M.copy (| γ0_0 |) in
                            let y := M.copy (| γ0_1 |) in
                            M.alloc (|
                              M.call_closure (|
                                Ty.tuple [ T; T ],
                                M.get_trait_method (|
                                  "p3_field::packed::PackedFieldPow2",
                                  T,
                                  [],
                                  [],
                                  "interleave",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, x |); M.read (| y |); HALF_RADIX ]
                              |)
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_backward_butterfly_interleaved :
      M.IsFunction.C
        "p3_monty_31::dft::backward::backward_butterfly_interleaved"
        backward_butterfly_interleaved.
    Admitted.
    Global Typeclasses Opaque backward_butterfly_interleaved.
    
    (*
    fn backward_pass_packed<T: PackedFieldPow2>(input: &mut [T], roots: &[T::Scalar]) {
        let packed_roots = T::pack_slice(roots);
        let n = input.len();
        let (xs, ys) = unsafe { input.split_at_mut_unchecked(n / 2) };
    
        izip!(xs, ys, packed_roots)
            .for_each(|(x, y, &roots)| ( *x, *y) = backward_butterfly( *x, *y, roots));
    }
    *)
    Definition backward_pass_packed (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ input; roots ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          let roots := M.alloc (| roots |) in
          M.read (|
            let~ packed_roots :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                  M.get_trait_method (|
                    "p3_field::packed::PackedValue",
                    T,
                    [],
                    [],
                    "pack_slice",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| roots |) |) |) ]
                |)
              |) in
            let~ n : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ T ],
                    "len",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |) ]
                |)
              |) in
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                    ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ T ],
                    "split_at_mut_unchecked",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.div,
                      [ M.read (| n |); Value.Integer IntegerKind.Usize 2 ]
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let xs := M.copy (| γ0_0 |) in
                    let ys := M.copy (| γ0_1 |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ];
                                        Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ]
                                      ];
                                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply (Ty.path "&mut") [] [ T ];
                                                Ty.apply (Ty.path "&mut") [] [ T ]
                                              ];
                                            Ty.apply (Ty.path "&") [] [ T ]
                                          ]
                                      ]
                                  ]
                                  (Ty.tuple
                                    [
                                      Ty.apply (Ty.path "&mut") [] [ T ];
                                      Ty.apply (Ty.path "&mut") [] [ T ];
                                      Ty.apply (Ty.path "&") [] [ T ]
                                    ])
                              ],
                            [],
                            [],
                            "for_each",
                            [],
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                          Ty.apply (Ty.path "&") [] [ T ]
                                        ]
                                    ]
                                ]
                                (Ty.tuple [])
                            ]
                          |),
                          [
                            M.read (|
                              let~ iter :
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ] ] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ],
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                      [],
                                      [],
                                      "into_iter",
                                      [],
                                      []
                                    |),
                                    [ M.read (| xs |) ]
                                  |)
                                |) in
                              let~ iter :
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ];
                                          Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ]
                                        ]
                                    ] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ];
                                        Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ],
                                      [],
                                      [],
                                      "zip",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                      ]
                                    |),
                                    [ M.read (| iter |); M.read (| ys |) ]
                                  |)
                                |) in
                              let~ iter :
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::zip::Zip")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [ T ];
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [ T ]
                                            ];
                                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ]
                                        ]
                                    ] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [ T ];
                                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ]
                                          ];
                                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ];
                                          Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ]
                                        ],
                                      [],
                                      [],
                                      "zip",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                      ]
                                    |),
                                    [ M.read (| iter |); M.read (| packed_roots |) ]
                                  |)
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::map::Map")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::zip::Zip")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [ T ];
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [ T ]
                                            ];
                                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ]
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply (Ty.path "&mut") [] [ T ];
                                                      Ty.apply (Ty.path "&mut") [] [ T ]
                                                    ];
                                                  Ty.apply (Ty.path "&") [] [ T ]
                                                ]
                                            ]
                                        ]
                                        (Ty.tuple
                                          [
                                            Ty.apply (Ty.path "&mut") [] [ T ];
                                            Ty.apply (Ty.path "&mut") [] [ T ];
                                            Ty.apply (Ty.path "&") [] [ T ]
                                          ])
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [ T ];
                                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ]
                                          ];
                                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ]
                                      ],
                                    [],
                                    [],
                                    "map",
                                    [],
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                          Ty.apply (Ty.path "&") [] [ T ]
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply (Ty.path "&mut") [] [ T ];
                                                      Ty.apply (Ty.path "&mut") [] [ T ]
                                                    ];
                                                  Ty.apply (Ty.path "&") [] [ T ]
                                                ]
                                            ]
                                        ]
                                        (Ty.tuple
                                          [
                                            Ty.apply (Ty.path "&mut") [] [ T ];
                                            Ty.apply (Ty.path "&mut") [] [ T ];
                                            Ty.apply (Ty.path "&") [] [ T ]
                                          ])
                                    ]
                                  |),
                                  [
                                    M.read (| iter |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.apply
                                                  (Ty.path "*")
                                                  []
                                                  [
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [ T ];
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [ T ]
                                                                  ];
                                                                Ty.apply (Ty.path "&") [] [ T ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.tuple
                                                        [
                                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                                          Ty.apply (Ty.path "&") [] [ T ]
                                                        ])
                                                  ],
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                      let γ0_1 :=
                                                        M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                      let γ1_0 :=
                                                        M.SubPointer.get_tuple_field (|
                                                          γ0_0,
                                                          0
                                                        |) in
                                                      let γ1_1 :=
                                                        M.SubPointer.get_tuple_field (|
                                                          γ0_0,
                                                          1
                                                        |) in
                                                      let a := M.copy (| γ1_0 |) in
                                                      let b := M.copy (| γ1_1 |) in
                                                      let b := M.copy (| γ0_1 |) in
                                                      Value.Tuple
                                                        [
                                                          M.read (| a |);
                                                          M.read (| b |);
                                                          M.read (| b |)
                                                        ]))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |)
                              |)
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply (Ty.path "&mut") [] [ T ];
                                                        Ty.apply (Ty.path "&mut") [] [ T ];
                                                        Ty.apply (Ty.path "&") [] [ T ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.tuple [])
                                          ],
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                              let x := M.copy (| γ0_0 |) in
                                              let y := M.copy (| γ0_1 |) in
                                              let γ0_2 := M.read (| γ0_2 |) in
                                              let roots := M.copy (| γ0_2 |) in
                                              M.read (|
                                                M.match_operator (|
                                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [ T; T ],
                                                      M.get_function (|
                                                        "p3_monty_31::dft::backward::backward_butterfly",
                                                        [],
                                                        [ T ]
                                                      |),
                                                      [
                                                        M.read (| M.deref (| M.read (| x |) |) |);
                                                        M.read (| M.deref (| M.read (| y |) |) |);
                                                        M.read (| roots |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                        let lhs := M.copy (| γ0_0 |) in
                                                        let lhs := M.copy (| γ0_1 |) in
                                                        let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.alloc (|
                                                            M.write (|
                                                              M.deref (| M.read (| x |) |),
                                                              M.read (| lhs |)
                                                            |)
                                                          |) in
                                                        let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.alloc (|
                                                            M.write (|
                                                              M.deref (| M.read (| y |) |),
                                                              M.read (| lhs |)
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |)
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      |) in
                    M.alloc (| Value.Tuple [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_backward_pass_packed :
      M.IsFunction.C "p3_monty_31::dft::backward::backward_pass_packed" backward_pass_packed.
    Admitted.
    Global Typeclasses Opaque backward_pass_packed.
    
    (*
    fn backward_iterative_layer_1<T: PackedFieldPow2>(input: &mut [T], roots: &[T::Scalar]) {
        let packed_roots = T::pack_slice(roots);
        let n = input.len();
        let (top_half, bottom_half) = unsafe { input.split_at_mut_unchecked(n / 2) };
        let (xs, ys) = unsafe { top_half.split_at_mut_unchecked(n / 4) };
        let (zs, ws) = unsafe { bottom_half.split_at_mut_unchecked(n / 4) };
    
        izip!(xs, ys, zs, ws, packed_roots).for_each(|(x, y, z, w, &root)| {
            ( *x, *y) = backward_butterfly( *x, *y, root);
            ( *z, *w) = backward_butterfly( *z, *w, root);
        });
    }
    *)
    Definition backward_iterative_layer_1
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ T ], [ input; roots ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          let roots := M.alloc (| roots |) in
          M.read (|
            let~ packed_roots :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                  M.get_trait_method (|
                    "p3_field::packed::PackedValue",
                    T,
                    [],
                    [],
                    "pack_slice",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| roots |) |) |) ]
                |)
              |) in
            let~ n : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ T ],
                    "len",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |) ]
                |)
              |) in
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                    ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ T ],
                    "split_at_mut_unchecked",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.div,
                      [ M.read (| n |); Value.Integer IntegerKind.Usize 2 ]
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let top_half := M.copy (| γ0_0 |) in
                    let bottom_half := M.copy (| γ0_1 |) in
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "split_at_mut_unchecked",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| top_half |) |) |);
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.div,
                              [ M.read (| n |); Value.Integer IntegerKind.Usize 4 ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let xs := M.copy (| γ0_0 |) in
                            let ys := M.copy (| γ0_1 |) in
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ T ],
                                    "split_at_mut_unchecked",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| bottom_half |) |)
                                    |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.div,
                                      [ M.read (| n |); Value.Integer IntegerKind.Usize 4 ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let zs := M.copy (| γ0_0 |) in
                                    let ws := M.copy (| γ0_1 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::zip::Zip")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::zip::Zip")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [ T ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [ T ]
                                                              ];
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              []
                                                              [ T ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::IterMut")
                                                          []
                                                          [ T ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ T ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [ T ];
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [ T ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [ T ]
                                                                  ];
                                                                Ty.apply (Ty.path "&mut") [] [ T ]
                                                              ];
                                                            Ty.apply (Ty.path "&") [] [ T ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.tuple
                                                    [
                                                      Ty.apply (Ty.path "&mut") [] [ T ];
                                                      Ty.apply (Ty.path "&mut") [] [ T ];
                                                      Ty.apply (Ty.path "&mut") [] [ T ];
                                                      Ty.apply (Ty.path "&mut") [] [ T ];
                                                      Ty.apply (Ty.path "&") [] [ T ]
                                                    ])
                                              ],
                                            [],
                                            [],
                                            "for_each",
                                            [],
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                                          Ty.apply (Ty.path "&") [] [ T ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.tuple [])
                                            ]
                                          |),
                                          [
                                            M.read (|
                                              let~ iter :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::IterMut")
                                                        []
                                                        [ T ]
                                                    ] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [ T ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                                      [],
                                                      [],
                                                      "into_iter",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| xs |) ]
                                                  |)
                                                |) in
                                              let~ iter :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [ T ];
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [ T ]
                                                        ]
                                                    ] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::IterMut")
                                                          []
                                                          [ T ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::IterMut")
                                                          []
                                                          [ T ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::IterMut")
                                                        []
                                                        [ T ],
                                                      [],
                                                      [],
                                                      "zip",
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                                      ]
                                                    |),
                                                    [ M.read (| iter |); M.read (| ys |) ]
                                                  |)
                                                |) in
                                              let~ iter :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [ T ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [ T ]
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [ T ]
                                                        ]
                                                    ] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::zip::Zip")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              []
                                                              [ T ];
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              []
                                                              [ T ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::IterMut")
                                                          []
                                                          [ T ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [ T ];
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [ T ]
                                                        ],
                                                      [],
                                                      [],
                                                      "zip",
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                                      ]
                                                    |),
                                                    [ M.read (| iter |); M.read (| zs |) ]
                                                  |)
                                                |) in
                                              let~ iter :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::zip::Zip")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    []
                                                                    [ T ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    []
                                                                    [ T ]
                                                                ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [ T ]
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [ T ]
                                                        ]
                                                    ] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::zip::Zip")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::zip::Zip")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [ T ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [ T ]
                                                              ];
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              []
                                                              [ T ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::IterMut")
                                                          []
                                                          [ T ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [ T ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [ T ]
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [ T ]
                                                        ],
                                                      [],
                                                      [],
                                                      "zip",
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                                      ]
                                                    |),
                                                    [ M.read (| iter |); M.read (| ws |) ]
                                                  |)
                                                |) in
                                              let~ iter :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::zip::Zip")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::zip::Zip")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        []
                                                                        [ T ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        []
                                                                        [ T ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    []
                                                                    [ T ]
                                                                ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [ T ]
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ T ]
                                                        ]
                                                    ] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::zip::Zip")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::zip::Zip")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::zip::Zip")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      []
                                                                      [ T ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      []
                                                                      [ T ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [ T ]
                                                              ];
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              []
                                                              [ T ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ T ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::zip::Zip")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    []
                                                                    [ T ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    []
                                                                    [ T ]
                                                                ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [ T ]
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            []
                                                            [ T ]
                                                        ],
                                                      [],
                                                      [],
                                                      "zip",
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                                      ]
                                                    |),
                                                    [ M.read (| iter |); M.read (| packed_roots |) ]
                                                  |)
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::map::Map")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::zip::Zip")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::zip::Zip")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        []
                                                                        [ T ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        []
                                                                        [ T ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    []
                                                                    [ T ]
                                                                ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [ T ]
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ T ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&mut")
                                                                                []
                                                                                [ T ];
                                                                              Ty.apply
                                                                                (Ty.path "&mut")
                                                                                []
                                                                                [ T ]
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [ T ]
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [ T ]
                                                                    ];
                                                                  Ty.apply (Ty.path "&") [] [ T ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.tuple
                                                          [
                                                            Ty.apply (Ty.path "&mut") [] [ T ];
                                                            Ty.apply (Ty.path "&mut") [] [ T ];
                                                            Ty.apply (Ty.path "&mut") [] [ T ];
                                                            Ty.apply (Ty.path "&mut") [] [ T ];
                                                            Ty.apply (Ty.path "&") [] [ T ]
                                                          ])
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::zip::Zip")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::zip::Zip")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::zip::Zip")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      []
                                                                      [ T ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      []
                                                                      [ T ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [ T ]
                                                              ];
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              []
                                                              [ T ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ T ]
                                                      ],
                                                    [],
                                                    [],
                                                    "map",
                                                    [],
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                                          Ty.apply (Ty.path "&") [] [ T ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&mut")
                                                                                []
                                                                                [ T ];
                                                                              Ty.apply
                                                                                (Ty.path "&mut")
                                                                                []
                                                                                [ T ]
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [ T ]
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [ T ]
                                                                    ];
                                                                  Ty.apply (Ty.path "&") [] [ T ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.tuple
                                                          [
                                                            Ty.apply (Ty.path "&mut") [] [ T ];
                                                            Ty.apply (Ty.path "&mut") [] [ T ];
                                                            Ty.apply (Ty.path "&mut") [] [ T ];
                                                            Ty.apply (Ty.path "&mut") [] [ T ];
                                                            Ty.apply (Ty.path "&") [] [ T ]
                                                          ])
                                                    ]
                                                  |),
                                                  [
                                                    M.read (| iter |);
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            ltac:(M.monadic
                                                              (M.match_operator (|
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&mut")
                                                                                              []
                                                                                              [ T ];
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&mut")
                                                                                              []
                                                                                              [ T ]
                                                                                          ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&mut")
                                                                                          []
                                                                                          [ T ]
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "&mut")
                                                                                      []
                                                                                      [ T ]
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ T ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [ T ];
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [ T ];
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [ T ];
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [ T ];
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ T ]
                                                                        ])
                                                                  ],
                                                                M.alloc (| α0 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ,
                                                                          0
                                                                        |) in
                                                                      let γ0_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ,
                                                                          1
                                                                        |) in
                                                                      let γ1_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ0_0,
                                                                          0
                                                                        |) in
                                                                      let γ1_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ0_0,
                                                                          1
                                                                        |) in
                                                                      let γ2_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ1_0,
                                                                          0
                                                                        |) in
                                                                      let γ2_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ1_0,
                                                                          1
                                                                        |) in
                                                                      let γ3_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ2_0,
                                                                          0
                                                                        |) in
                                                                      let γ3_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ2_0,
                                                                          1
                                                                        |) in
                                                                      let a := M.copy (| γ3_0 |) in
                                                                      let b := M.copy (| γ3_1 |) in
                                                                      let b := M.copy (| γ2_1 |) in
                                                                      let b := M.copy (| γ1_1 |) in
                                                                      let b := M.copy (| γ0_1 |) in
                                                                      Value.Tuple
                                                                        [
                                                                          M.read (| a |);
                                                                          M.read (| b |);
                                                                          M.read (| b |);
                                                                          M.read (| b |);
                                                                          M.read (| b |)
                                                                        ]))
                                                                ]
                                                              |)))
                                                          | _ =>
                                                            M.impossible "wrong number of arguments"
                                                          end))
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    ltac:(M.monadic
                                                      (M.match_operator (|
                                                        Ty.apply
                                                          (Ty.path "*")
                                                          []
                                                          [
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [ T ];
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [ T ];
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [ T ];
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [ T ];
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ T ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.tuple [])
                                                          ],
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  0
                                                                |) in
                                                              let γ0_1 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  1
                                                                |) in
                                                              let γ0_2 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  2
                                                                |) in
                                                              let γ0_3 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  3
                                                                |) in
                                                              let γ0_4 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  4
                                                                |) in
                                                              let x := M.copy (| γ0_0 |) in
                                                              let y := M.copy (| γ0_1 |) in
                                                              let z := M.copy (| γ0_2 |) in
                                                              let w := M.copy (| γ0_3 |) in
                                                              let γ0_4 := M.read (| γ0_4 |) in
                                                              let root := M.copy (| γ0_4 |) in
                                                              M.read (|
                                                                let~ _ :
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [ Ty.tuple [] ] :=
                                                                  M.match_operator (|
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [ Ty.tuple [] ],
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.tuple [ T; T ],
                                                                        M.get_function (|
                                                                          "p3_monty_31::dft::backward::backward_butterfly",
                                                                          [],
                                                                          [ T ]
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| x |)
                                                                            |)
                                                                          |);
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| y |)
                                                                            |)
                                                                          |);
                                                                          M.read (| root |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ,
                                                                              0
                                                                            |) in
                                                                          let γ0_1 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ,
                                                                              1
                                                                            |) in
                                                                          let lhs :=
                                                                            M.copy (| γ0_0 |) in
                                                                          let lhs :=
                                                                            M.copy (| γ0_1 |) in
                                                                          let~ _ :
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [ Ty.tuple [] ] :=
                                                                            M.alloc (|
                                                                              M.write (|
                                                                                M.deref (|
                                                                                  M.read (| x |)
                                                                                |),
                                                                                M.read (| lhs |)
                                                                              |)
                                                                            |) in
                                                                          let~ _ :
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [ Ty.tuple [] ] :=
                                                                            M.alloc (|
                                                                              M.write (|
                                                                                M.deref (|
                                                                                  M.read (| y |)
                                                                                |),
                                                                                M.read (| lhs |)
                                                                              |)
                                                                            |) in
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |)))
                                                                    ]
                                                                  |) in
                                                                let~ _ :
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [ Ty.tuple [] ] :=
                                                                  M.match_operator (|
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [ Ty.tuple [] ],
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.tuple [ T; T ],
                                                                        M.get_function (|
                                                                          "p3_monty_31::dft::backward::backward_butterfly",
                                                                          [],
                                                                          [ T ]
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| z |)
                                                                            |)
                                                                          |);
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| w |)
                                                                            |)
                                                                          |);
                                                                          M.read (| root |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ,
                                                                              0
                                                                            |) in
                                                                          let γ0_1 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ,
                                                                              1
                                                                            |) in
                                                                          let lhs :=
                                                                            M.copy (| γ0_0 |) in
                                                                          let lhs :=
                                                                            M.copy (| γ0_1 |) in
                                                                          let~ _ :
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [ Ty.tuple [] ] :=
                                                                            M.alloc (|
                                                                              M.write (|
                                                                                M.deref (|
                                                                                  M.read (| z |)
                                                                                |),
                                                                                M.read (| lhs |)
                                                                              |)
                                                                            |) in
                                                                          let~ _ :
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [ Ty.tuple [] ] :=
                                                                            M.alloc (|
                                                                              M.write (|
                                                                                M.deref (|
                                                                                  M.read (| w |)
                                                                                |),
                                                                                M.read (| lhs |)
                                                                              |)
                                                                            |) in
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |)))
                                                                    ]
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)
                                                              |)))
                                                        ]
                                                      |)))
                                                  | _ => M.impossible "wrong number of arguments"
                                                  end))
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_backward_iterative_layer_1 :
      M.IsFunction.C
        "p3_monty_31::dft::backward::backward_iterative_layer_1"
        backward_iterative_layer_1.
    Admitted.
    Global Typeclasses Opaque backward_iterative_layer_1.
    
    (*
    fn backward_iterative_packed<const HALF_RADIX: usize, T: PackedFieldPow2>(
        input: &mut [T],
        roots: &[T::Scalar],
    ) {
        // roots[0] == 1
        // roots <-- [1, roots[1], ..., roots[HALF_RADIX-1], 1, roots[1], ...]
        let roots = T::from_fn(|i| roots[i % HALF_RADIX]);
    
        input.chunks_exact_mut(2).for_each(|pair| {
            let (x, y) = backward_butterfly_interleaved::<HALF_RADIX, _>(pair[0], pair[1], roots);
            pair[0] = x;
            pair[1] = y;
        });
    }
    *)
    Definition backward_iterative_packed
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [ HALF_RADIX ], [ T ], [ input; roots ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          let roots := M.alloc (| roots |) in
          M.read (|
            let~ roots : Ty.apply (Ty.path "*") [] [ T ] :=
              M.alloc (|
                M.call_closure (|
                  T,
                  M.get_trait_method (|
                    "p3_field::packed::PackedValue",
                    T,
                    [],
                    [],
                    "from_fn",
                    [],
                    [
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.associated_in_trait "p3_field::packed::PackedField" [] [] T "Scalar")
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.associated_in_trait
                                        "p3_field::packed::PackedField"
                                        []
                                        []
                                        T
                                        "Scalar")
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      M.read (|
                                        M.SubPointer.get_array_field (|
                                          M.deref (| M.read (| roots |) |),
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.rem,
                                            [ M.read (| i |); HALF_RADIX ]
                                          |)
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply (Ty.path "core::slice::iter::ChunksExactMut") [] [ T ],
                    [],
                    [],
                    "for_each",
                    [],
                    [
                      Ty.function
                        [
                          Ty.tuple
                            [ Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ]
                        ]
                        (Ty.tuple [])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "core::slice::iter::ChunksExactMut") [] [ T ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "chunks_exact_mut",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |);
                        Value.Integer IntegerKind.Usize 2
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                          ]
                                      ]
                                      (Ty.tuple [])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let pair_ := M.copy (| γ |) in
                                      M.read (|
                                        M.match_operator (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [ T; T ],
                                              M.get_function (|
                                                "p3_monty_31::dft::backward::backward_butterfly_interleaved",
                                                [ HALF_RADIX ],
                                                [ T ]
                                              |),
                                              [
                                                M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| pair_ |) |),
                                                    Value.Integer IntegerKind.Usize 0
                                                  |)
                                                |);
                                                M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| pair_ |) |),
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |);
                                                M.read (| roots |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let x := M.copy (| γ0_0 |) in
                                                let y := M.copy (| γ0_1 |) in
                                                let~ _ :
                                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                  M.alloc (|
                                                    M.write (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| pair_ |) |),
                                                        Value.Integer IntegerKind.Usize 0
                                                      |),
                                                      M.read (| x |)
                                                    |)
                                                  |) in
                                                let~ _ :
                                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                  M.alloc (|
                                                    M.write (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| pair_ |) |),
                                                        Value.Integer IntegerKind.Usize 1
                                                      |),
                                                      M.read (| y |)
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_backward_iterative_packed :
      M.IsFunction.C
        "p3_monty_31::dft::backward::backward_iterative_packed"
        backward_iterative_packed.
    Admitted.
    Global Typeclasses Opaque backward_iterative_packed.
    
    (*
    fn backward_iterative_packed_radix_2<T: PackedFieldPow2>(input: &mut [T]) {
        input.chunks_exact_mut(2).for_each(|pair| {
            let x = pair[0];
            let y = pair[1];
            let (mut x, y) = x.interleave(y, 1);
            let t = x - y; // roots[0] == 1
            x += y;
            let (x, y) = x.interleave(t, 1);
            pair[0] = x;
            pair[1] = y;
        });
    }
    *)
    Definition backward_iterative_packed_radix_2
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ T ], [ input ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply (Ty.path "core::slice::iter::ChunksExactMut") [] [ T ],
                    [],
                    [],
                    "for_each",
                    [],
                    [
                      Ty.function
                        [
                          Ty.tuple
                            [ Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ]
                        ]
                        (Ty.tuple [])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "core::slice::iter::ChunksExactMut") [] [ T ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "chunks_exact_mut",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |);
                        Value.Integer IntegerKind.Usize 2
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                          ]
                                      ]
                                      (Ty.tuple [])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let pair_ := M.copy (| γ |) in
                                      M.read (|
                                        let~ x : Ty.apply (Ty.path "*") [] [ T ] :=
                                          M.copy (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| pair_ |) |),
                                              Value.Integer IntegerKind.Usize 0
                                            |)
                                          |) in
                                        let~ y : Ty.apply (Ty.path "*") [] [ T ] :=
                                          M.copy (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| pair_ |) |),
                                              Value.Integer IntegerKind.Usize 1
                                            |)
                                          |) in
                                        M.match_operator (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [ T; T ],
                                              M.get_trait_method (|
                                                "p3_field::packed::PackedFieldPow2",
                                                T,
                                                [],
                                                [],
                                                "interleave",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (| Pointer.Kind.Ref, x |);
                                                M.read (| y |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let x := M.copy (| γ0_0 |) in
                                                let y := M.copy (| γ0_1 |) in
                                                let~ t : Ty.apply (Ty.path "*") [] [ T ] :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      T,
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Sub",
                                                        T,
                                                        [],
                                                        [ T ],
                                                        "sub",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.read (| x |); M.read (| y |) ]
                                                    |)
                                                  |) in
                                                let~ _ :
                                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "core::ops::arith::AddAssign",
                                                        T,
                                                        [],
                                                        [ T ],
                                                        "add_assign",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, x |);
                                                        M.read (| y |)
                                                      ]
                                                    |)
                                                  |) in
                                                M.match_operator (|
                                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [ T; T ],
                                                      M.get_trait_method (|
                                                        "p3_field::packed::PackedFieldPow2",
                                                        T,
                                                        [],
                                                        [],
                                                        "interleave",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.Ref, x |);
                                                        M.read (| t |);
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                        let x := M.copy (| γ0_0 |) in
                                                        let y := M.copy (| γ0_1 |) in
                                                        let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.alloc (|
                                                            M.write (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (| M.read (| pair_ |) |),
                                                                Value.Integer IntegerKind.Usize 0
                                                              |),
                                                              M.read (| x |)
                                                            |)
                                                          |) in
                                                        let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.alloc (|
                                                            M.write (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (| M.read (| pair_ |) |),
                                                                Value.Integer IntegerKind.Usize 1
                                                              |),
                                                              M.read (| y |)
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |)))
                                          ]
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_backward_iterative_packed_radix_2 :
      M.IsFunction.C
        "p3_monty_31::dft::backward::backward_iterative_packed_radix_2"
        backward_iterative_packed_radix_2.
    Admitted.
    Global Typeclasses Opaque backward_iterative_packed_radix_2.
    
    Module Impl_p3_monty_31_monty_31_MontyField31_MP.
      Definition Self (MP : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ].
      
      (*
          fn backward_iterative_layer(
              packed_input: &mut [<Self as Field>::Packing],
              roots: &[Self],
              m: usize,
          ) {
              debug_assert_eq!(roots.len(), m);
              let packed_roots = <Self as Field>::Packing::pack_slice(roots);
      
              // lg_m >= 4, so m = 2^lg_m >= 2^4, hence packing_width divides m
              let packed_m = m / <Self as Field>::Packing::WIDTH;
              packed_input
                  .chunks_exact_mut(2 * packed_m)
                  .for_each(|layer_chunk| {
                      let (xs, ys) = unsafe { layer_chunk.split_at_mut_unchecked(packed_m) };
      
                      izip!(xs, ys, packed_roots)
                          .for_each(|(x, y, &root)| ( *x, *y) = backward_butterfly( *x, *y, root));
                  });
          }
      *)
      Definition backward_iterative_layer
          (MP : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self MP in
        match ε, τ, α with
        | [], [], [ packed_input; roots; m ] =>
          ltac:(M.monadic
            (let packed_input := M.alloc (| packed_input |) in
            let roots := M.alloc (| roots |) in
            let m := M.alloc (| m |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              Value.Tuple
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ MP ]
                                            ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| roots |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |);
                                  M.borrow (| Pointer.Kind.Ref, m |)
                                ]
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let left_val := M.copy (| γ0_0 |) in
                                  let right_val := M.copy (| γ0_1 |) in
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.eq,
                                                    [
                                                      M.read (|
                                                        M.deref (| M.read (| left_val |) |)
                                                      |);
                                                      M.read (|
                                                        M.deref (| M.read (| right_val |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind :
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [ Ty.path "core::panicking::AssertKind" ] :=
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                  |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "usize"; Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ packed_roots :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                        ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                      ],
                    M.get_trait_method (|
                      "p3_field::packed::PackedValue",
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                      [],
                      [],
                      "pack_slice",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| roots |) |) |) ]
                  |)
                |) in
              let~ packed_m : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.div,
                    [
                      M.read (| m |);
                      M.read (|
                        get_constant (| "p3_field::packed::PackedValue::WIDTH", Ty.path "usize" |)
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::ChunksExactMut")
                        []
                        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                      [],
                      [],
                      "for_each",
                      [],
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ MP ]
                                      ]
                                  ]
                              ]
                          ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::ChunksExactMut")
                          []
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                          "chunks_exact_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (| M.read (| packed_input |) |)
                          |);
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.mul,
                            [ Value.Integer IntegerKind.Usize 2; M.read (| packed_m |) ]
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "p3_monty_31::monty_31::MontyField31")
                                                        []
                                                        [ MP ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                        (Ty.tuple [])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let layer_chunk := M.copy (| γ |) in
                                        M.read (|
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::monty_31::MontyField31")
                                                              []
                                                              [ MP ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::monty_31::MontyField31")
                                                              []
                                                              [ MP ]
                                                          ]
                                                      ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "p3_monty_31::monty_31::MontyField31")
                                                        []
                                                        [ MP ]
                                                    ],
                                                  "split_at_mut_unchecked",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (| M.read (| layer_chunk |) |)
                                                  |);
                                                  M.read (| packed_m |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let xs := M.copy (| γ0_0 |) in
                                                  let ys := M.copy (| γ0_1 |) in
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::map::Map")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::zip::Zip")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::zip::Zip")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_monty_31::monty_31::MontyField31")
                                                                            []
                                                                            [ MP ]
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_monty_31::monty_31::MontyField31")
                                                                            []
                                                                            [ MP ]
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_monty_31::monty_31::MontyField31")
                                                                        []
                                                                        [ MP ]
                                                                    ]
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&mut")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "p3_monty_31::monty_31::MontyField31")
                                                                                    []
                                                                                    [ MP ]
                                                                                ];
                                                                              Ty.apply
                                                                                (Ty.path "&mut")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "p3_monty_31::monty_31::MontyField31")
                                                                                    []
                                                                                    [ MP ]
                                                                                ]
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                                []
                                                                                [ MP ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_monty_31::monty_31::MontyField31")
                                                                          []
                                                                          [ MP ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_monty_31::monty_31::MontyField31")
                                                                          []
                                                                          [ MP ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_monty_31::monty_31::MontyField31")
                                                                          []
                                                                          [ MP ]
                                                                      ]
                                                                  ])
                                                            ],
                                                          [],
                                                          [],
                                                          "for_each",
                                                          [],
                                                          [
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                              []
                                                                              [ MP ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                              []
                                                                              [ MP ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                              []
                                                                              [ MP ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.tuple [])
                                                          ]
                                                        |),
                                                        [
                                                          M.read (|
                                                            let~ iter :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_monty_31::monty_31::MontyField31")
                                                                          []
                                                                          [ MP ]
                                                                      ]
                                                                  ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_monty_31::monty_31::MontyField31")
                                                                        []
                                                                        [ MP ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::collect::IntoIterator",
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                              []
                                                                              [ MP ]
                                                                          ]
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "into_iter",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ M.read (| xs |) ]
                                                                |)
                                                              |) in
                                                            let~ iter :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::zip::Zip")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::IterMut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                              []
                                                                              [ MP ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::IterMut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                              []
                                                                              [ MP ]
                                                                          ]
                                                                      ]
                                                                  ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::zip::Zip")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_monty_31::monty_31::MontyField31")
                                                                            []
                                                                            [ MP ]
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_monty_31::monty_31::MontyField31")
                                                                            []
                                                                            [ MP ]
                                                                        ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_monty_31::monty_31::MontyField31")
                                                                          []
                                                                          [ MP ]
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "zip",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                                []
                                                                                [ MP ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| iter |);
                                                                    M.read (| ys |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            let~ iter :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::zip::Zip")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::zip::Zip")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::IterMut")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "p3_monty_31::monty_31::MontyField31")
                                                                                  []
                                                                                  [ MP ]
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::IterMut")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "p3_monty_31::monty_31::MontyField31")
                                                                                  []
                                                                                  [ MP ]
                                                                              ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                              []
                                                                              [ MP ]
                                                                          ]
                                                                      ]
                                                                  ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::zip::Zip")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::zip::Zip")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::IterMut")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                                []
                                                                                [ MP ]
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::IterMut")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                                []
                                                                                [ MP ]
                                                                            ]
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_monty_31::monty_31::MontyField31")
                                                                            []
                                                                            [ MP ]
                                                                        ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::zip::Zip")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::IterMut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                              []
                                                                              [ MP ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::IterMut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                              []
                                                                              [ MP ]
                                                                          ]
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "zip",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                                []
                                                                                [ MP ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| iter |);
                                                                    M.read (| packed_roots |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::map::Map")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::zip::Zip")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::zip::Zip")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::IterMut")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "p3_monty_31::monty_31::MontyField31")
                                                                                  []
                                                                                  [ MP ]
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::IterMut")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "p3_monty_31::monty_31::MontyField31")
                                                                                  []
                                                                                  [ MP ]
                                                                              ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                              []
                                                                              [ MP ]
                                                                          ]
                                                                      ];
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "&mut")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "p3_monty_31::monty_31::MontyField31")
                                                                                          []
                                                                                          [ MP ]
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "&mut")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "p3_monty_31::monty_31::MontyField31")
                                                                                          []
                                                                                          [ MP ]
                                                                                      ]
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "p3_monty_31::monty_31::MontyField31")
                                                                                      []
                                                                                      [ MP ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                                []
                                                                                [ MP ]
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                                []
                                                                                [ MP ]
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                                []
                                                                                [ MP ]
                                                                            ]
                                                                        ])
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::zip::Zip")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::zip::Zip")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::IterMut")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                                []
                                                                                [ MP ]
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::IterMut")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                                []
                                                                                [ MP ]
                                                                            ]
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_monty_31::monty_31::MontyField31")
                                                                            []
                                                                            [ MP ]
                                                                        ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "map",
                                                                  [],
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                              []
                                                                              [ MP ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                              []
                                                                              [ MP ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                              []
                                                                              [ MP ]
                                                                          ]
                                                                      ];
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "&mut")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "p3_monty_31::monty_31::MontyField31")
                                                                                          []
                                                                                          [ MP ]
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "&mut")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "p3_monty_31::monty_31::MontyField31")
                                                                                          []
                                                                                          [ MP ]
                                                                                      ]
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "p3_monty_31::monty_31::MontyField31")
                                                                                      []
                                                                                      [ MP ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                                []
                                                                                [ MP ]
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                                []
                                                                                [ MP ]
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                                []
                                                                                [ MP ]
                                                                            ]
                                                                        ])
                                                                  ]
                                                                |),
                                                                [
                                                                  M.read (| iter |);
                                                                  M.closure
                                                                    (fun γ =>
                                                                      ltac:(M.monadic
                                                                        match γ with
                                                                        | [ α0 ] =>
                                                                          ltac:(M.monadic
                                                                            (M.match_operator (|
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [
                                                                                  Ty.function
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&mut")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "p3_monty_31::monty_31::MontyField31")
                                                                                                        []
                                                                                                        [
                                                                                                          MP
                                                                                                        ]
                                                                                                    ];
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&mut")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "p3_monty_31::monty_31::MontyField31")
                                                                                                        []
                                                                                                        [
                                                                                                          MP
                                                                                                        ]
                                                                                                    ]
                                                                                                ];
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "p3_monty_31::monty_31::MontyField31")
                                                                                                    []
                                                                                                    [
                                                                                                      MP
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                    (Ty.tuple
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&mut")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                                              []
                                                                                              [ MP ]
                                                                                          ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&mut")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                                              []
                                                                                              [ MP ]
                                                                                          ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "p3_monty_31::monty_31::MontyField31")
                                                                                              []
                                                                                              [ MP ]
                                                                                          ]
                                                                                      ])
                                                                                ],
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ0_0 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        0
                                                                                      |) in
                                                                                    let γ0_1 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        1
                                                                                      |) in
                                                                                    let γ1_0 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ0_0,
                                                                                        0
                                                                                      |) in
                                                                                    let γ1_1 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ0_0,
                                                                                        1
                                                                                      |) in
                                                                                    let a :=
                                                                                      M.copy (|
                                                                                        γ1_0
                                                                                      |) in
                                                                                    let b :=
                                                                                      M.copy (|
                                                                                        γ1_1
                                                                                      |) in
                                                                                    let b :=
                                                                                      M.copy (|
                                                                                        γ0_1
                                                                                      |) in
                                                                                    Value.Tuple
                                                                                      [
                                                                                        M.read (|
                                                                                          a
                                                                                        |);
                                                                                        M.read (|
                                                                                          b
                                                                                        |);
                                                                                        M.read (|
                                                                                          b
                                                                                        |)
                                                                                      ]))
                                                                              ]
                                                                            |)))
                                                                        | _ =>
                                                                          M.impossible
                                                                            "wrong number of arguments"
                                                                        end))
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&mut")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "p3_monty_31::monty_31::MontyField31")
                                                                                            []
                                                                                            [ MP ]
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&mut")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "p3_monty_31::monty_31::MontyField31")
                                                                                            []
                                                                                            [ MP ]
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "p3_monty_31::monty_31::MontyField31")
                                                                                            []
                                                                                            [ MP ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.tuple [])
                                                                        ],
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                0
                                                                              |) in
                                                                            let γ0_1 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                1
                                                                              |) in
                                                                            let γ0_2 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                2
                                                                              |) in
                                                                            let x :=
                                                                              M.copy (| γ0_0 |) in
                                                                            let y :=
                                                                              M.copy (| γ0_1 |) in
                                                                            let γ0_2 :=
                                                                              M.read (| γ0_2 |) in
                                                                            let root :=
                                                                              M.copy (| γ0_2 |) in
                                                                            M.read (|
                                                                              M.match_operator (|
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ],
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "p3_monty_31::monty_31::MontyField31")
                                                                                          []
                                                                                          [ MP ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "p3_monty_31::monty_31::MontyField31")
                                                                                          []
                                                                                          [ MP ]
                                                                                      ],
                                                                                    M.get_function (|
                                                                                      "p3_monty_31::dft::backward::backward_butterfly",
                                                                                      [],
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "p3_monty_31::monty_31::MontyField31")
                                                                                          []
                                                                                          [ MP ]
                                                                                      ]
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            x
                                                                                          |)
                                                                                        |)
                                                                                      |);
                                                                                      M.read (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            y
                                                                                          |)
                                                                                        |)
                                                                                      |);
                                                                                      M.read (|
                                                                                        root
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_tuple_field (|
                                                                                          γ,
                                                                                          0
                                                                                        |) in
                                                                                      let γ0_1 :=
                                                                                        M.SubPointer.get_tuple_field (|
                                                                                          γ,
                                                                                          1
                                                                                        |) in
                                                                                      let lhs :=
                                                                                        M.copy (|
                                                                                          γ0_0
                                                                                        |) in
                                                                                      let lhs :=
                                                                                        M.copy (|
                                                                                          γ0_1
                                                                                        |) in
                                                                                      let~ _ :
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "*")
                                                                                            []
                                                                                            [
                                                                                              Ty.tuple
                                                                                                []
                                                                                            ] :=
                                                                                        M.alloc (|
                                                                                          M.write (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                x
                                                                                              |)
                                                                                            |),
                                                                                            M.read (|
                                                                                              lhs
                                                                                            |)
                                                                                          |)
                                                                                        |) in
                                                                                      let~ _ :
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "*")
                                                                                            []
                                                                                            [
                                                                                              Ty.tuple
                                                                                                []
                                                                                            ] :=
                                                                                        M.alloc (|
                                                                                          M.write (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                y
                                                                                              |)
                                                                                            |),
                                                                                            M.read (|
                                                                                              lhs
                                                                                            |)
                                                                                          |)
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |)))
                                                                                ]
                                                                              |)
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_backward_iterative_layer :
        forall (MP : Ty.t),
        M.IsAssociatedFunction.C (Self MP) "backward_iterative_layer" (backward_iterative_layer MP).
      Admitted.
      Global Typeclasses Opaque backward_iterative_layer.
      
      (*
          fn backward_iterative_packed_radix_16(input: &mut [<Self as Field>::Packing]) {
              // Rather surprisingly, a version similar where the separate
              // loops in each call to backward_iterative_packed() are
              // combined into one, was not only not faster, but was
              // actually a bit slower.
      
              // Radix 2
              backward_iterative_packed_radix_2(input);
      
              // Radix 4
              let roots4 = [MP::INV_ROOTS_8.as_ref()[0], MP::INV_ROOTS_8.as_ref()[2]];
              if <Self as Field>::Packing::WIDTH >= 4 {
                  backward_iterative_packed::<2, _>(input, &roots4);
              } else {
                  Self::backward_iterative_layer(input, &roots4, 2);
              }
      
              // Radix 8
              if <Self as Field>::Packing::WIDTH >= 8 {
                  backward_iterative_packed::<4, _>(input, MP::INV_ROOTS_8.as_ref());
              } else {
                  Self::backward_iterative_layer(input, MP::INV_ROOTS_8.as_ref(), 4);
              }
      
              // Radix 16
              if <Self as Field>::Packing::WIDTH >= 16 {
                  backward_iterative_packed::<8, _>(input, MP::INV_ROOTS_16.as_ref());
              } else {
                  Self::backward_iterative_layer(input, MP::INV_ROOTS_16.as_ref(), 8);
              }
          }
      *)
      Definition backward_iterative_packed_radix_16
          (MP : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self MP in
        match ε, τ, α with
        | [], [], [ input ] =>
          ltac:(M.monadic
            (let input := M.alloc (| input |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (|
                      "p3_monty_31::dft::backward::backward_iterative_packed_radix_2",
                      [],
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                    |),
                    [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |) ]
                  |)
                |) in
              let~ roots4 :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                    ] :=
                M.alloc (|
                  Value.Array
                    [
                      M.read (|
                        M.SubPointer.get_array_field (|
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ MP ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::convert::AsRef",
                                Ty.associated_in_trait
                                  "p3_monty_31::data_traits::TwoAdicData"
                                  []
                                  []
                                  MP
                                  "ArrayLike",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ MP ]
                                    ]
                                ],
                                "as_ref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  get_constant (|
                                    "p3_monty_31::data_traits::TwoAdicData::INV_ROOTS_8",
                                    Ty.associated_in_trait
                                      "p3_monty_31::data_traits::TwoAdicData"
                                      []
                                      []
                                      MP
                                      "ArrayLike"
                                  |)
                                |)
                              ]
                            |)
                          |),
                          Value.Integer IntegerKind.Usize 0
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_array_field (|
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ MP ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::convert::AsRef",
                                Ty.associated_in_trait
                                  "p3_monty_31::data_traits::TwoAdicData"
                                  []
                                  []
                                  MP
                                  "ArrayLike",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ MP ]
                                    ]
                                ],
                                "as_ref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  get_constant (|
                                    "p3_monty_31::data_traits::TwoAdicData::INV_ROOTS_8",
                                    Ty.associated_in_trait
                                      "p3_monty_31::data_traits::TwoAdicData"
                                      []
                                      []
                                      MP
                                      "ArrayLike"
                                  |)
                                |)
                              ]
                            |)
                          |),
                          Value.Integer IntegerKind.Usize 2
                        |)
                      |)
                    ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ge,
                                [
                                  M.read (|
                                    get_constant (|
                                      "p3_field::packed::PackedValue::WIDTH",
                                      Ty.path "usize"
                                    |)
                                  |);
                                  Value.Integer IntegerKind.Usize 4
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_function (|
                                "p3_monty_31::dft::backward::backward_iterative_packed",
                                [ Value.Integer IntegerKind.Usize 2 ],
                                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ]
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| input |) |)
                                |);
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.borrow (| Pointer.Kind.Ref, roots4 |) |)
                                  |))
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                                "backward_iterative_layer",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| input |) |)
                                |);
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.borrow (| Pointer.Kind.Ref, roots4 |) |)
                                  |));
                                Value.Integer IntegerKind.Usize 2
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ge,
                                [
                                  M.read (|
                                    get_constant (|
                                      "p3_field::packed::PackedValue::WIDTH",
                                      Ty.path "usize"
                                    |)
                                  |);
                                  Value.Integer IntegerKind.Usize 8
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_function (|
                                "p3_monty_31::dft::backward::backward_iterative_packed",
                                [ Value.Integer IntegerKind.Usize 4 ],
                                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ]
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| input |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ MP ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::convert::AsRef",
                                        Ty.associated_in_trait
                                          "p3_monty_31::data_traits::TwoAdicData"
                                          []
                                          []
                                          MP
                                          "ArrayLike",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ MP ]
                                            ]
                                        ],
                                        "as_ref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_constant (|
                                            "p3_monty_31::data_traits::TwoAdicData::INV_ROOTS_8",
                                            Ty.associated_in_trait
                                              "p3_monty_31::data_traits::TwoAdicData"
                                              []
                                              []
                                              MP
                                              "ArrayLike"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                                "backward_iterative_layer",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| input |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ MP ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::convert::AsRef",
                                        Ty.associated_in_trait
                                          "p3_monty_31::data_traits::TwoAdicData"
                                          []
                                          []
                                          MP
                                          "ArrayLike",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ MP ]
                                            ]
                                        ],
                                        "as_ref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_constant (|
                                            "p3_monty_31::data_traits::TwoAdicData::INV_ROOTS_8",
                                            Ty.associated_in_trait
                                              "p3_monty_31::data_traits::TwoAdicData"
                                              []
                                              []
                                              MP
                                              "ArrayLike"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |);
                                Value.Integer IntegerKind.Usize 4
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.ge,
                              [
                                M.read (|
                                  get_constant (|
                                    "p3_field::packed::PackedValue::WIDTH",
                                    Ty.path "usize"
                                  |)
                                |);
                                Value.Integer IntegerKind.Usize 16
                              ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_function (|
                              "p3_monty_31::dft::backward::backward_iterative_packed",
                              [ Value.Integer IntegerKind.Usize 8 ],
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::convert::AsRef",
                                      Ty.associated_in_trait
                                        "p3_monty_31::data_traits::TwoAdicData"
                                        []
                                        []
                                        MP
                                        "ArrayLike",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ]
                                      ],
                                      "as_ref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "p3_monty_31::data_traits::TwoAdicData::INV_ROOTS_16",
                                          Ty.associated_in_trait
                                            "p3_monty_31::data_traits::TwoAdicData"
                                            []
                                            []
                                            MP
                                            "ArrayLike"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                              "backward_iterative_layer",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::convert::AsRef",
                                      Ty.associated_in_trait
                                        "p3_monty_31::data_traits::TwoAdicData"
                                        []
                                        []
                                        MP
                                        "ArrayLike",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ]
                                      ],
                                      "as_ref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "p3_monty_31::data_traits::TwoAdicData::INV_ROOTS_16",
                                          Ty.associated_in_trait
                                            "p3_monty_31::data_traits::TwoAdicData"
                                            []
                                            []
                                            MP
                                            "ArrayLike"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |);
                              Value.Integer IntegerKind.Usize 8
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_backward_iterative_packed_radix_16 :
        forall (MP : Ty.t),
        M.IsAssociatedFunction.C
          (Self MP)
          "backward_iterative_packed_radix_16"
          (backward_iterative_packed_radix_16 MP).
      Admitted.
      Global Typeclasses Opaque backward_iterative_packed_radix_16.
      
      (*
          fn backward_iterative(packed_input: &mut [<Self as Field>::Packing], root_table: &[Vec<Self>]) {
              assert!(packed_input.len() >= 2);
              let packing_width = <Self as Field>::Packing::WIDTH;
              let n = packed_input.len() * packing_width;
              let lg_n = log2_strict_usize(n);
      
              // Start loop after doing radix 16 separately. This value is determined by the largest
              // packing width we will encounter, which is 16 at the moment for AVX512. Specifically
              // it is log_2(max{possible packing widths}) = lg(16) = 4.
              const FIRST_LOOP_LAYER: usize = 4;
      
              // How many layers have we specialised after the main loop
              const NUM_SPECIALISATIONS: usize = 2;
      
              // Needed to avoid overlap of the 2 specialisations at the start
              // with the radix-16 specialisation at the end of the loop
              assert!(lg_n >= FIRST_LOOP_LAYER + NUM_SPECIALISATIONS);
      
              Self::backward_iterative_packed_radix_16(packed_input);
      
              for lg_m in FIRST_LOOP_LAYER..(lg_n - NUM_SPECIALISATIONS) {
                  let s = lg_n - lg_m - 1;
                  let m = 1 << lg_m;
      
                  let roots = &root_table[s];
                  debug_assert_eq!(roots.len(), m);
      
                  Self::backward_iterative_layer(packed_input, roots, m);
              }
              // Specialise the last few iterations; improves performance a little.
              backward_iterative_layer_1(packed_input, &root_table[1]); // lg_m == lg_n - 2, s == 1
              backward_pass_packed(packed_input, &root_table[0]); // lg_m == lg_n - 1, s == 0
          }
      *)
      Definition backward_iterative
          (MP : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self MP in
        match ε, τ, α with
        | [], [], [ packed_input; root_table ] =>
          ltac:(M.monadic
            (let packed_input := M.alloc (| packed_input |) in
            let root_table := M.alloc (| root_table |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.ge,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| packed_input |) |)
                                        |)
                                      ]
                                    |);
                                    Value.Integer IntegerKind.Usize 2
                                  ]
                                |)
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [ mk_str (| "assertion failed: packed_input.len() >= 2" |) ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ packing_width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.copy (|
                  get_constant (| "p3_field::packed::PackedValue::WIDTH", Ty.path "usize" |)
                |) in
              let~ n : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| packed_input |) |) |) ]
                      |);
                      M.read (| packing_width |)
                    ]
                  |)
                |) in
              let~ lg_n : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                    [ M.read (| n |) ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.ge,
                                  [
                                    M.read (| lg_n |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.read (|
                                          get_constant (|
                                            "p3_monty_31::dft::backward::backward_iterative::FIRST_LOOP_LAYER",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.read (|
                                          get_constant (|
                                            "p3_monty_31::dft::backward::backward_iterative::NUM_SPECIALISATIONS",
                                            Ty.path "usize"
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [
                                mk_str (|
                                  "assertion failed: lg_n >= FIRST_LOOP_LAYER + NUM_SPECIALISATIONS"
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                      "backward_iterative_packed_radix_16",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| packed_input |) |) |) ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.use
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start",
                                M.read (|
                                  get_constant (|
                                    "p3_monty_31::dft::backward::backward_iterative::FIRST_LOOP_LAYER",
                                    Ty.path "usize"
                                  |)
                                |));
                              ("end_",
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.sub,
                                  [
                                    M.read (| lg_n |);
                                    M.read (|
                                      get_constant (|
                                        "p3_monty_31::dft::backward::backward_iterative::NUM_SPECIALISATIONS",
                                        Ty.path "usize"
                                      |)
                                    |)
                                  ]
                                |))
                            ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            ltac:(M.monadic
                              (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "usize" ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let lg_m := M.copy (| γ0_0 |) in
                                        let~ s : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.sub,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.sub,
                                                  [ M.read (| lg_n |); M.read (| lg_m |) ]
                                                |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          |) in
                                        let~ m : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.shl,
                                              [ Value.Integer IntegerKind.Usize 1; M.read (| lg_m |)
                                              ]
                                            |)
                                          |) in
                                        let~ roots :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [ MP ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ] :=
                                          M.alloc (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_array_field (|
                                                M.deref (| M.read (| root_table |) |),
                                                M.read (| s |)
                                              |)
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.match_operator (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      M.alloc (|
                                                        Value.Tuple
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_monty_31::monty_31::MontyField31")
                                                                          []
                                                                          [ MP ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "len",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| roots |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (| Pointer.Kind.Ref, m |)
                                                          ]
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                0
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                1
                                                              |) in
                                                            let left_val := M.copy (| γ0_0 |) in
                                                            let right_val := M.copy (| γ0_1 |) in
                                                            M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.tuple [] ],
                                                              M.alloc (| Value.Tuple [] |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ :=
                                                                      M.use
                                                                        (M.alloc (|
                                                                          UnOp.not (|
                                                                            M.call_closure (|
                                                                              Ty.path "bool",
                                                                              BinOp.eq,
                                                                              [
                                                                                M.read (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      left_val
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.read (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      right_val
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)) in
                                                                    let _ :=
                                                                      is_constant_or_break_match (|
                                                                        M.read (| γ |),
                                                                        Value.Bool true
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (|
                                                                          let~ kind :
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "core::panicking::AssertKind"
                                                                                ] :=
                                                                            M.alloc (|
                                                                              Value.StructTuple
                                                                                "core::panicking::AssertKind::Eq"
                                                                                []
                                                                            |) in
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              Ty.path "never",
                                                                              M.get_function (|
                                                                                "core::panicking::assert_failed",
                                                                                [],
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.path "usize"
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.read (| kind |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          left_val
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          right_val
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "core::option::Option::None"
                                                                                  []
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ MP ],
                                                "backward_iterative_layer",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| packed_input |) |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                []
                                                                [ MP ]
                                                            ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::monty_31::MontyField31")
                                                              []
                                                              [ MP ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [],
                                                        "deref",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| roots |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.read (| m |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (|
                      "p3_monty_31::dft::backward::backward_iterative_layer_1",
                      [],
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| packed_input |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ MP ]
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ MP ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| root_table |) |),
                                      Value.Integer IntegerKind.Usize 1
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (|
                      "p3_monty_31::dft::backward::backward_pass_packed",
                      [],
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| packed_input |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ MP ]
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ MP ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| root_table |) |),
                                      Value.Integer IntegerKind.Usize 0
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_backward_iterative :
        forall (MP : Ty.t),
        M.IsAssociatedFunction.C (Self MP) "backward_iterative" (backward_iterative MP).
      Admitted.
      Global Typeclasses Opaque backward_iterative.
      
      (*
          fn backward_pass(input: &mut [Self], roots: &[Self]) {
              let half_n = input.len() / 2;
              assert_eq!(roots.len(), half_n);
      
              // Safe because 0 <= half_n < input.len()
              let (xs, ys) = unsafe { input.split_at_mut_unchecked(half_n) };
      
              let s = xs[0] + ys[0];
              let t = xs[0] - ys[0];
              xs[0] = s;
              ys[0] = t;
      
              izip!(&mut xs[1..], &mut ys[1..], &roots[1..]).for_each(|(x, y, &root)| {
                  ( *x, *y) = backward_butterfly( *x, *y, root);
              });
          }
      *)
      Definition backward_pass
          (MP : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self MP in
        match ε, τ, α with
        | [], [], [ input; roots ] =>
          ltac:(M.monadic
            (let input := M.alloc (| input |) in
            let roots := M.alloc (| roots |) in
            M.read (|
              let~ half_n : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.div,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |) ]
                      |);
                      Value.Integer IntegerKind.Usize 2
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    Value.Tuple
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ MP ]
                                  ],
                                "len",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| roots |) |) |) ]
                            |)
                          |)
                        |);
                        M.borrow (| Pointer.Kind.Ref, half_n |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.eq,
                                          [
                                            M.read (| M.deref (| M.read (| left_val |) |) |);
                                            M.read (| M.deref (| M.read (| right_val |) |) |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let~ kind :
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [ Ty.path "core::panicking::AssertKind" ] :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [],
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| left_val |) |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| right_val |) |)
                                                |)
                                              |)
                                            |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                          ];
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                          ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                      "split_at_mut_unchecked",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |);
                      M.read (| half_n |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let xs := M.copy (| γ0_0 |) in
                      let ys := M.copy (| γ0_1 |) in
                      let~ s :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ]
                            ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                            M.get_trait_method (|
                              "core::ops::arith::Add",
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                              [],
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ]
                              ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| xs |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |);
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| ys |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)
                            ]
                          |)
                        |) in
                      let~ t :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ]
                            ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                            M.get_trait_method (|
                              "core::ops::arith::Sub",
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                              [],
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ]
                              ],
                              "sub",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| xs |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |);
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| ys |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)
                            ]
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.write (|
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| xs |) |),
                              Value.Integer IntegerKind.Usize 0
                            |),
                            M.read (| s |)
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.write (|
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| ys |) |),
                              Value.Integer IntegerKind.Usize 0
                            |),
                            M.read (| t |)
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::IterMut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ MP ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::slice::iter::IterMut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ MP ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ MP ]
                                        ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "p3_monty_31::monty_31::MontyField31")
                                                        []
                                                        [ MP ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "p3_monty_31::monty_31::MontyField31")
                                                        []
                                                        [ MP ]
                                                    ]
                                                ];
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ];
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ];
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ]
                                      ])
                                ],
                              [],
                              [],
                              "for_each",
                              [],
                              [
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ MP ]
                                              ];
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ MP ]
                                              ];
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ MP ]
                                              ]
                                          ]
                                      ]
                                  ]
                                  (Ty.tuple [])
                              ]
                            |),
                            [
                              M.read (|
                                let~ iter :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::IterMut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ]
                                      ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::IterMut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ MP ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ MP ]
                                              ]
                                          ],
                                        [],
                                        [],
                                        "into_iter",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "p3_monty_31::monty_31::MontyField31")
                                                        []
                                                        [ MP ]
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::index::IndexMut",
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [ MP ]
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::RangeFrom")
                                                    []
                                                    [ Ty.path "usize" ]
                                                ],
                                                "index_mut",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| xs |) |)
                                                |);
                                                Value.StructRecord
                                                  "core::ops::range::RangeFrom"
                                                  [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  |) in
                                let~ iter :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ MP ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ MP ]
                                              ]
                                          ]
                                      ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::IterMut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ MP ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::slice::iter::IterMut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ MP ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::IterMut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ],
                                        [],
                                        [],
                                        "zip",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ]
                                            ]
                                        ]
                                      |),
                                      [
                                        M.read (| iter |);
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "p3_monty_31::monty_31::MontyField31")
                                                        []
                                                        [ MP ]
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::index::IndexMut",
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [ MP ]
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::RangeFrom")
                                                    []
                                                    [ Ty.path "usize" ]
                                                ],
                                                "index_mut",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| ys |) |)
                                                |);
                                                Value.StructRecord
                                                  "core::ops::range::RangeFrom"
                                                  [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  |) in
                                let~ iter :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::zip::Zip")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::IterMut")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [ MP ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::IterMut")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [ MP ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ MP ]
                                              ]
                                          ]
                                      ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::zip::Zip")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ];
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ MP ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ MP ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ MP ]
                                              ]
                                          ],
                                        [],
                                        [],
                                        "zip",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ]
                                            ]
                                        ]
                                      |),
                                      [
                                        M.read (| iter |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "p3_monty_31::monty_31::MontyField31")
                                                        []
                                                        [ MP ]
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::index::Index",
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [ MP ]
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::RangeFrom")
                                                    []
                                                    [ Ty.path "usize" ]
                                                ],
                                                "index",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| roots |) |)
                                                |);
                                                Value.StructRecord
                                                  "core::ops::range::RangeFrom"
                                                  [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  |) in
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::zip::Zip")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::IterMut")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [ MP ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::IterMut")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [ MP ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ MP ]
                                              ]
                                          ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::monty_31::MontyField31")
                                                              []
                                                              [ MP ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::monty_31::MontyField31")
                                                              []
                                                              [ MP ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [ MP ]
                                                      ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ];
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ];
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ]
                                            ])
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::zip::Zip")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ];
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ MP ]
                                            ]
                                        ],
                                      [],
                                      [],
                                      "map",
                                      [],
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ MP ]
                                              ];
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ MP ]
                                              ];
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ MP ]
                                              ]
                                          ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::monty_31::MontyField31")
                                                              []
                                                              [ MP ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::monty_31::MontyField31")
                                                              []
                                                              [ MP ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [ MP ]
                                                      ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ];
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ];
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ]
                                            ])
                                      ]
                                    |),
                                    [
                                      M.read (| iter |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_monty_31::monty_31::MontyField31")
                                                                            []
                                                                            [ MP ]
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_monty_31::monty_31::MontyField31")
                                                                            []
                                                                            [ MP ]
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_monty_31::monty_31::MontyField31")
                                                                        []
                                                                        [ MP ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::monty_31::MontyField31")
                                                                  []
                                                                  [ MP ]
                                                              ];
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::monty_31::MontyField31")
                                                                  []
                                                                  [ MP ]
                                                              ];
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::monty_31::MontyField31")
                                                                  []
                                                                  [ MP ]
                                                              ]
                                                          ])
                                                    ],
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                        let γ1_0 :=
                                                          M.SubPointer.get_tuple_field (|
                                                            γ0_0,
                                                            0
                                                          |) in
                                                        let γ1_1 :=
                                                          M.SubPointer.get_tuple_field (|
                                                            γ0_0,
                                                            1
                                                          |) in
                                                        let a := M.copy (| γ1_0 |) in
                                                        let b := M.copy (| γ1_1 |) in
                                                        let b := M.copy (| γ0_1 |) in
                                                        Value.Tuple
                                                          [
                                                            M.read (| a |);
                                                            M.read (| b |);
                                                            M.read (| b |)
                                                          ]))
                                                  ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end))
                                    ]
                                  |)
                                |)
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                []
                                                                [ MP ]
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                []
                                                                [ MP ]
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                []
                                                                [ MP ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.tuple [])
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let γ0_2 :=
                                                  M.SubPointer.get_tuple_field (| γ, 2 |) in
                                                let x := M.copy (| γ0_0 |) in
                                                let y := M.copy (| γ0_1 |) in
                                                let γ0_2 := M.read (| γ0_2 |) in
                                                let root := M.copy (| γ0_2 |) in
                                                M.read (|
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.match_operator (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                []
                                                                [ MP ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                []
                                                                [ MP ]
                                                            ],
                                                          M.get_function (|
                                                            "p3_monty_31::dft::backward::backward_butterfly",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_monty_31::monty_31::MontyField31")
                                                                []
                                                                [ MP ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| x |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| y |) |)
                                                            |);
                                                            M.read (| root |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                0
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                1
                                                              |) in
                                                            let lhs := M.copy (| γ0_0 |) in
                                                            let lhs := M.copy (| γ0_1 |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.alloc (|
                                                                M.write (|
                                                                  M.deref (| M.read (| x |) |),
                                                                  M.read (| lhs |)
                                                                |)
                                                              |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.alloc (|
                                                                M.write (|
                                                                  M.deref (| M.read (| y |) |),
                                                                  M.read (| lhs |)
                                                                |)
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_backward_pass :
        forall (MP : Ty.t),
        M.IsAssociatedFunction.C (Self MP) "backward_pass" (backward_pass MP).
      Admitted.
      Global Typeclasses Opaque backward_pass.
      
      (*
          fn backward_2(a: &mut [Self]) {
              assert_eq!(a.len(), 2);
      
              let s = a[0] + a[1];
              let t = a[0] - a[1];
              a[0] = s;
              a[1] = t;
          }
      *)
      Definition backward_2 (MP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self MP in
        match ε, τ, α with
        | [], [], [ a ] =>
          ltac:(M.monadic
            (let a := M.alloc (| a |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    Value.Tuple
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ MP ]
                                  ],
                                "len",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| a |) |) |) ]
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (| Value.Integer IntegerKind.Usize 2 |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.eq,
                                          [
                                            M.read (| M.deref (| M.read (| left_val |) |) |);
                                            M.read (| M.deref (| M.read (| right_val |) |) |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let~ kind :
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [ Ty.path "core::panicking::AssertKind" ] :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [],
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| left_val |) |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| right_val |) |)
                                                |)
                                              |)
                                            |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              let~ s :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                      [],
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                      "add",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| a |) |),
                          Value.Integer IntegerKind.Usize 0
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| a |) |),
                          Value.Integer IntegerKind.Usize 1
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ t :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                    M.get_trait_method (|
                      "core::ops::arith::Sub",
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                      [],
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                      "sub",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| a |) |),
                          Value.Integer IntegerKind.Usize 0
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| a |) |),
                          Value.Integer IntegerKind.Usize 1
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.write (|
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| a |) |),
                      Value.Integer IntegerKind.Usize 0
                    |),
                    M.read (| s |)
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.write (|
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| a |) |),
                      Value.Integer IntegerKind.Usize 1
                    |),
                    M.read (| t |)
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_backward_2 :
        forall (MP : Ty.t),
        M.IsAssociatedFunction.C (Self MP) "backward_2" (backward_2 MP).
      Admitted.
      Global Typeclasses Opaque backward_2.
      
      (*
          fn backward_4(a: &mut [Self]) {
              assert_eq!(a.len(), 4);
      
              // Read in bit-reversed order
              let a0 = a[0];
              let a2 = a[1];
              let a1 = a[2];
              let a3 = a[3];
      
              // Expanding the calculation of t3 saves one instruction
              let t1 = MP::PRIME + a1.value - a3.value;
              let t3 = Self::new_monty(monty_reduce::<MP>(
                  t1 as u64 * MP::INV_ROOTS_8.as_ref()[2].value as u64,
              ));
              let t5 = a1 + a3;
              let t4 = a0 + a2;
              let t2 = a0 - a2;
      
              a[0] = t4 + t5;
              a[1] = t2 + t3;
              a[2] = t4 - t5;
              a[3] = t2 - t3;
          }
      *)
      Definition backward_4 (MP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self MP in
        match ε, τ, α with
        | [], [], [ a ] =>
          ltac:(M.monadic
            (let a := M.alloc (| a |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    Value.Tuple
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ MP ]
                                  ],
                                "len",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| a |) |) |) ]
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (| Value.Integer IntegerKind.Usize 4 |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.eq,
                                          [
                                            M.read (| M.deref (| M.read (| left_val |) |) |);
                                            M.read (| M.deref (| M.read (| right_val |) |) |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let~ kind :
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [ Ty.path "core::panicking::AssertKind" ] :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [],
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| left_val |) |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| right_val |) |)
                                                |)
                                              |)
                                            |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              let~ a0 :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ] :=
                M.copy (|
                  M.SubPointer.get_array_field (|
                    M.deref (| M.read (| a |) |),
                    Value.Integer IntegerKind.Usize 0
                  |)
                |) in
              let~ a2 :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ] :=
                M.copy (|
                  M.SubPointer.get_array_field (|
                    M.deref (| M.read (| a |) |),
                    Value.Integer IntegerKind.Usize 1
                  |)
                |) in
              let~ a1 :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ] :=
                M.copy (|
                  M.SubPointer.get_array_field (|
                    M.deref (| M.read (| a |) |),
                    Value.Integer IntegerKind.Usize 2
                  |)
                |) in
              let~ a3 :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ] :=
                M.copy (|
                  M.SubPointer.get_array_field (|
                    M.deref (| M.read (| a |) |),
                    Value.Integer IntegerKind.Usize 3
                  |)
                |) in
              let~ t1 : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.sub,
                    [
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.add,
                        [
                          M.read (|
                            get_constant (|
                              "p3_monty_31::data_traits::MontyParameters::PRIME",
                              Ty.path "u32"
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              a1,
                              "p3_monty_31::monty_31::MontyField31",
                              "value"
                            |)
                          |)
                        ]
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          a3,
                          "p3_monty_31::monty_31::MontyField31",
                          "value"
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ t3 :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                      "new_monty",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "u32",
                        M.get_function (| "p3_monty_31::utils::monty_reduce", [], [ MP ] |),
                        [
                          M.call_closure (|
                            Ty.path "u64",
                            BinOp.Wrap.mul,
                            [
                              M.cast (Ty.path "u64") (M.read (| t1 |));
                              M.cast
                                (Ty.path "u64")
                                (M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.SubPointer.get_array_field (|
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::convert::AsRef",
                                            Ty.associated_in_trait
                                              "p3_monty_31::data_traits::TwoAdicData"
                                              []
                                              []
                                              MP
                                              "ArrayLike",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ]
                                                ]
                                            ],
                                            "as_ref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              get_constant (|
                                                "p3_monty_31::data_traits::TwoAdicData::INV_ROOTS_8",
                                                Ty.associated_in_trait
                                                  "p3_monty_31::data_traits::TwoAdicData"
                                                  []
                                                  []
                                                  MP
                                                  "ArrayLike"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      Value.Integer IntegerKind.Usize 2
                                    |),
                                    "p3_monty_31::monty_31::MontyField31",
                                    "value"
                                  |)
                                |))
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ t5 :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                      [],
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                      "add",
                      [],
                      []
                    |),
                    [ M.read (| a1 |); M.read (| a3 |) ]
                  |)
                |) in
              let~ t4 :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                      [],
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                      "add",
                      [],
                      []
                    |),
                    [ M.read (| a0 |); M.read (| a2 |) ]
                  |)
                |) in
              let~ t2 :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                    M.get_trait_method (|
                      "core::ops::arith::Sub",
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                      [],
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                      "sub",
                      [],
                      []
                    |),
                    [ M.read (| a0 |); M.read (| a2 |) ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.write (|
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| a |) |),
                      Value.Integer IntegerKind.Usize 0
                    |),
                    M.call_closure (|
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                        [],
                        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                        "add",
                        [],
                        []
                      |),
                      [ M.read (| t4 |); M.read (| t5 |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.write (|
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| a |) |),
                      Value.Integer IntegerKind.Usize 1
                    |),
                    M.call_closure (|
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                        [],
                        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                        "add",
                        [],
                        []
                      |),
                      [ M.read (| t2 |); M.read (| t3 |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.write (|
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| a |) |),
                      Value.Integer IntegerKind.Usize 2
                    |),
                    M.call_closure (|
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                      M.get_trait_method (|
                        "core::ops::arith::Sub",
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                        [],
                        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                        "sub",
                        [],
                        []
                      |),
                      [ M.read (| t4 |); M.read (| t5 |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.write (|
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| a |) |),
                      Value.Integer IntegerKind.Usize 3
                    |),
                    M.call_closure (|
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                      M.get_trait_method (|
                        "core::ops::arith::Sub",
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                        [],
                        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                        "sub",
                        [],
                        []
                      |),
                      [ M.read (| t2 |); M.read (| t3 |) ]
                    |)
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_backward_4 :
        forall (MP : Ty.t),
        M.IsAssociatedFunction.C (Self MP) "backward_4" (backward_4 MP).
      Admitted.
      Global Typeclasses Opaque backward_4.
      
      (*
          fn backward_8(a: &mut [Self]) {
              assert_eq!(a.len(), 8);
      
              // Safe because a.len() == 8
              let (a0, a1) = unsafe { a.split_at_mut_unchecked(a.len() / 2) };
              Self::backward_4(a0);
              Self::backward_4(a1);
      
              Self::backward_pass(a, MP::INV_ROOTS_8.as_ref());
          }
      *)
      Definition backward_8 (MP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self MP in
        match ε, τ, α with
        | [], [], [ a ] =>
          ltac:(M.monadic
            (let a := M.alloc (| a |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    Value.Tuple
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ MP ]
                                  ],
                                "len",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| a |) |) |) ]
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (| Value.Integer IntegerKind.Usize 8 |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.eq,
                                          [
                                            M.read (| M.deref (| M.read (| left_val |) |) |);
                                            M.read (| M.deref (| M.read (| right_val |) |) |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let~ kind :
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [ Ty.path "core::panicking::AssertKind" ] :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [],
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| left_val |) |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| right_val |) |)
                                                |)
                                              |)
                                            |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                          ];
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                          ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                      "split_at_mut_unchecked",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| a |) |) |);
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.div,
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ]
                                ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| a |) |) |) ]
                          |);
                          Value.Integer IntegerKind.Usize 2
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let a0 := M.copy (| γ0_0 |) in
                      let a1 := M.copy (| γ0_1 |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                              "backward_4",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| a0 |) |) |) ]
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                              "backward_4",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| a1 |) |) |) ]
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                              "backward_pass",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| a |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::convert::AsRef",
                                      Ty.associated_in_trait
                                        "p3_monty_31::data_traits::TwoAdicData"
                                        []
                                        []
                                        MP
                                        "ArrayLike",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ]
                                      ],
                                      "as_ref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "p3_monty_31::data_traits::TwoAdicData::INV_ROOTS_8",
                                          Ty.associated_in_trait
                                            "p3_monty_31::data_traits::TwoAdicData"
                                            []
                                            []
                                            MP
                                            "ArrayLike"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_backward_8 :
        forall (MP : Ty.t),
        M.IsAssociatedFunction.C (Self MP) "backward_8" (backward_8 MP).
      Admitted.
      Global Typeclasses Opaque backward_8.
      
      (*
          fn backward_16(a: &mut [Self]) {
              assert_eq!(a.len(), 16);
      
              // Safe because a.len() == 16
              let (a0, a1) = unsafe { a.split_at_mut_unchecked(a.len() / 2) };
              Self::backward_8(a0);
              Self::backward_8(a1);
      
              Self::backward_pass(a, MP::INV_ROOTS_16.as_ref());
          }
      *)
      Definition backward_16
          (MP : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self MP in
        match ε, τ, α with
        | [], [], [ a ] =>
          ltac:(M.monadic
            (let a := M.alloc (| a |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    Value.Tuple
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ MP ]
                                  ],
                                "len",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| a |) |) |) ]
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (| Value.Integer IntegerKind.Usize 16 |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.eq,
                                          [
                                            M.read (| M.deref (| M.read (| left_val |) |) |);
                                            M.read (| M.deref (| M.read (| right_val |) |) |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let~ kind :
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [ Ty.path "core::panicking::AssertKind" ] :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [],
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| left_val |) |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| right_val |) |)
                                                |)
                                              |)
                                            |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                          ];
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                          ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                      "split_at_mut_unchecked",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| a |) |) |);
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.div,
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ]
                                ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| a |) |) |) ]
                          |);
                          Value.Integer IntegerKind.Usize 2
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let a0 := M.copy (| γ0_0 |) in
                      let a1 := M.copy (| γ0_1 |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                              "backward_8",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| a0 |) |) |) ]
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                              "backward_8",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| a1 |) |) |) ]
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                              "backward_pass",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| a |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::convert::AsRef",
                                      Ty.associated_in_trait
                                        "p3_monty_31::data_traits::TwoAdicData"
                                        []
                                        []
                                        MP
                                        "ArrayLike",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ]
                                      ],
                                      "as_ref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "p3_monty_31::data_traits::TwoAdicData::INV_ROOTS_16",
                                          Ty.associated_in_trait
                                            "p3_monty_31::data_traits::TwoAdicData"
                                            []
                                            []
                                            MP
                                            "ArrayLike"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_backward_16 :
        forall (MP : Ty.t),
        M.IsAssociatedFunction.C (Self MP) "backward_16" (backward_16 MP).
      Admitted.
      Global Typeclasses Opaque backward_16.
      
      (*
          fn backward_32(a: &mut [Self], root_table: &[Vec<Self>]) {
              assert_eq!(a.len(), 32);
      
              // Safe because a.len() == 32
              let (a0, a1) = unsafe { a.split_at_mut_unchecked(a.len() / 2) };
              Self::backward_16(a0);
              Self::backward_16(a1);
      
              Self::backward_pass(a, &root_table[0]);
          }
      *)
      Definition backward_32
          (MP : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self MP in
        match ε, τ, α with
        | [], [], [ a; root_table ] =>
          ltac:(M.monadic
            (let a := M.alloc (| a |) in
            let root_table := M.alloc (| root_table |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    Value.Tuple
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ MP ]
                                  ],
                                "len",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| a |) |) |) ]
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (| Value.Integer IntegerKind.Usize 32 |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.eq,
                                          [
                                            M.read (| M.deref (| M.read (| left_val |) |) |);
                                            M.read (| M.deref (| M.read (| right_val |) |) |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let~ kind :
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [ Ty.path "core::panicking::AssertKind" ] :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [],
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| left_val |) |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| right_val |) |)
                                                |)
                                              |)
                                            |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                          ];
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                          ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                      "split_at_mut_unchecked",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| a |) |) |);
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.div,
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ]
                                ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| a |) |) |) ]
                          |);
                          Value.Integer IntegerKind.Usize 2
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let a0 := M.copy (| γ0_0 |) in
                      let a1 := M.copy (| γ0_1 |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                              "backward_16",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| a0 |) |) |) ]
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                              "backward_16",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| a1 |) |) |) ]
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                              "backward_pass",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| a |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ MP ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ MP ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| root_table |) |),
                                              Value.Integer IntegerKind.Usize 0
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_backward_32 :
        forall (MP : Ty.t),
        M.IsAssociatedFunction.C (Self MP) "backward_32" (backward_32 MP).
      Admitted.
      Global Typeclasses Opaque backward_32.
      
      (*
          fn backward_fft_recur(input: &mut [<Self as Field>::Packing], root_table: &[Vec<Self>]) {
              const ITERATIVE_FFT_THRESHOLD: usize = 1024;
      
              let n = input.len() * <Self as Field>::Packing::WIDTH;
              if n <= ITERATIVE_FFT_THRESHOLD {
                  Self::backward_iterative(input, root_table);
              } else {
                  assert_eq!(n, 1 << (root_table.len() + 1));
      
                  // Safe because input.len() > ITERATIVE_FFT_THRESHOLD
                  let (a0, a1) = unsafe { input.split_at_mut_unchecked(input.len() / 2) };
                  Self::backward_fft_recur(a0, &root_table[1..]);
                  Self::backward_fft_recur(a1, &root_table[1..]);
      
                  backward_pass_packed(input, &root_table[0]);
              }
          }
      *)
      Definition backward_fft_recur
          (MP : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self MP in
        match ε, τ, α with
        | [], [], [ input; root_table ] =>
          ltac:(M.monadic
            (let input := M.alloc (| input |) in
            let root_table := M.alloc (| root_table |) in
            M.read (|
              let~ n : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |) ]
                      |);
                      M.read (|
                        get_constant (| "p3_field::packed::PackedValue::WIDTH", Ty.path "usize" |)
                      |)
                    ]
                  |)
                |) in
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.le,
                              [
                                M.read (| n |);
                                M.read (|
                                  get_constant (|
                                    "p3_monty_31::dft::backward::backward_fft_recur::ITERATIVE_FFT_THRESHOLD",
                                    Ty.path "usize"
                                  |)
                                |)
                              ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                              "backward_iterative",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |);
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| root_table |) |) |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (|
                            Value.Tuple
                              [
                                M.borrow (| Pointer.Kind.Ref, n |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.shl,
                                      [
                                        Value.Integer IntegerKind.Usize 1;
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [ MP ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| root_table |) |)
                                                |)
                                              ]
                                            |);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val := M.copy (| γ0_0 |) in
                                let right_val := M.copy (| γ0_1 |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.eq,
                                                  [
                                                    M.read (|
                                                      M.deref (| M.read (| left_val |) |)
                                                    |);
                                                    M.read (|
                                                      M.deref (| M.read (| right_val |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let~ kind :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [ Ty.path "core::panicking::AssertKind" ] :=
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [],
                                                    [ Ty.path "usize"; Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| left_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ MP ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ MP ]
                                      ]
                                  ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ]
                                ],
                              "split_at_mut_unchecked",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |);
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.div,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ MP ]
                                        ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| input |) |)
                                      |)
                                    ]
                                  |);
                                  Value.Integer IntegerKind.Usize 2
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let a0 := M.copy (| γ0_0 |) in
                              let a1 := M.copy (| γ0_1 |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ MP ],
                                      "backward_fft_recur",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| a0 |) |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::monty_31::MontyField31")
                                                              []
                                                              [ MP ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_monty_31::monty_31::MontyField31")
                                                            []
                                                            [ MP ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::RangeFrom")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ],
                                                  "index",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| root_table |) |)
                                                  |);
                                                  Value.StructRecord
                                                    "core::ops::range::RangeFrom"
                                                    [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ MP ],
                                      "backward_fft_recur",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| a1 |) |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::monty_31::MontyField31")
                                                              []
                                                              [ MP ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_monty_31::monty_31::MontyField31")
                                                            []
                                                            [ MP ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::RangeFrom")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ],
                                                  "index",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| root_table |) |)
                                                  |);
                                                  Value.StructRecord
                                                    "core::ops::range::RangeFrom"
                                                    [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_function (|
                                      "p3_monty_31::dft::backward::backward_pass_packed",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ MP ]
                                      ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| input |) |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [ MP ]
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ MP ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_array_field (|
                                                      M.deref (| M.read (| root_table |) |),
                                                      Value.Integer IntegerKind.Usize 0
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_backward_fft_recur :
        forall (MP : Ty.t),
        M.IsAssociatedFunction.C (Self MP) "backward_fft_recur" (backward_fft_recur MP).
      Admitted.
      Global Typeclasses Opaque backward_fft_recur.
      
      (*
          pub fn backward_fft(input: &mut [Self], root_table: &[Vec<Self>]) {
              let n = input.len();
              if n == 1 {
                  return;
              }
      
              assert_eq!(n, 1 << (root_table.len() + 1));
              match n {
                  32 => Self::backward_32(input, root_table),
                  16 => Self::backward_16(input),
                  8 => Self::backward_8(input),
                  4 => Self::backward_4(input),
                  2 => Self::backward_2(input),
                  _ => {
                      let packed_input = <Self as Field>::Packing::pack_slice_mut(input);
                      Self::backward_fft_recur(packed_input, root_table)
                  }
              }
          }
      *)
      Definition backward_fft
          (MP : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self MP in
        match ε, τ, α with
        | [], [], [ input; root_table ] =>
          ltac:(M.monadic
            (let input := M.alloc (| input |) in
            let root_table := M.alloc (| root_table |) in
            M.catch_return (Ty.tuple []) (|
              ltac:(M.monadic
                (M.read (|
                  let~ n : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |) ]
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.eq,
                                    [ M.read (| n |); Value.Integer IntegerKind.Usize 1 ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (| M.read (| M.return_ (| Value.Tuple [] |) |) |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (|
                        Value.Tuple
                          [
                            M.borrow (| Pointer.Kind.Ref, n |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.shl,
                                  [
                                    Value.Integer IntegerKind.Usize 1;
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [ MP ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| root_table |) |)
                                            |)
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let left_val := M.copy (| γ0_0 |) in
                            let right_val := M.copy (| γ0_1 |) in
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.eq,
                                              [
                                                M.read (| M.deref (| M.read (| left_val |) |) |);
                                                M.read (| M.deref (| M.read (| right_val |) |) |)
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          let~ kind :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.path "core::panicking::AssertKind" ] :=
                                            M.alloc (|
                                              Value.StructTuple "core::panicking::AssertKind::Eq" []
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "never",
                                              M.get_function (|
                                                "core::panicking::assert_failed",
                                                [],
                                                [ Ty.path "usize"; Ty.path "usize" ]
                                              |),
                                              [
                                                M.read (| kind |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| left_val |) |)
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| right_val |) |)
                                                    |)
                                                  |)
                                                |);
                                                Value.StructTuple "core::option::Option::None" []
                                              ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |)))
                      ]
                    |) in
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    n,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 32
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                                "backward_32",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| input |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| root_table |) |)
                                |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 16
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                                "backward_16",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 8
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                                "backward_8",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 4
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                                "backward_4",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 2
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                                "backward_2",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let~ packed_input :
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ MP ]
                                        ]
                                    ]
                                ] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ MP ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "p3_field::packed::PackedValue",
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ MP ],
                                  [],
                                  [],
                                  "pack_slice_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| input |) |)
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                                "backward_fft_recur",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| packed_input |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| root_table |) |)
                                |)
                              ]
                            |)
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_backward_fft :
        forall (MP : Ty.t),
        M.IsAssociatedFunction.C (Self MP) "backward_fft" (backward_fft MP).
      Admitted.
      Global Typeclasses Opaque backward_fft.
    End Impl_p3_monty_31_monty_31_MontyField31_MP.
  End backward.
End dft.
