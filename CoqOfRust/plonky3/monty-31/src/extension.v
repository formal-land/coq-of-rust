(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module extension.
  Module Impl_p3_field_extension_BinomiallyExtendable_where_p3_monty_31_data_traits_BinomialExtensionData_FP_where_p3_monty_31_data_traits_FieldParameters_FP_WIDTH_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (WIDTH : Value.t) (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*     const W: Self = FP::W; *)
    (* Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] *)
    Definition value_W
        (WIDTH : Value.t)
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH FP in
      ltac:(M.monadic
        (get_constant (|
          "p3_monty_31::data_traits::BinomialExtensionData::W",
          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
        |))).
    
    (*     const DTH_ROOT: Self = FP::DTH_ROOT; *)
    (* Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] *)
    Definition value_DTH_ROOT
        (WIDTH : Value.t)
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH FP in
      ltac:(M.monadic
        (get_constant (|
          "p3_monty_31::data_traits::BinomialExtensionData::DTH_ROOT",
          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
        |))).
    
    (*     const EXT_GENERATOR: [Self; WIDTH] = FP::EXT_GENERATOR; *)
    (* Ty.apply
      (Ty.path "array")
      [ WIDTH ]
      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ] *)
    Definition value_EXT_GENERATOR
        (WIDTH : Value.t)
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH FP in
      ltac:(M.monadic
        (get_constant (|
          "p3_monty_31::data_traits::BinomialExtensionData::EXT_GENERATOR",
          Ty.apply
            (Ty.path "array")
            [ WIDTH ]
            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        |))).
    
    Axiom Implements :
      forall (WIDTH : Value.t) (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::extension::BinomiallyExtendable"
        (* Trait polymorphic consts *) [ WIDTH ]
        (* Trait polymorphic types *) []
        (Self WIDTH FP)
        (* Instance *)
        [
          ("value_W", InstanceField.Method (value_W WIDTH FP));
          ("value_DTH_ROOT", InstanceField.Method (value_DTH_ROOT WIDTH FP));
          ("value_EXT_GENERATOR", InstanceField.Method (value_EXT_GENERATOR WIDTH FP))
        ].
  End Impl_p3_field_extension_BinomiallyExtendable_where_p3_monty_31_data_traits_BinomialExtensionData_FP_where_p3_monty_31_data_traits_FieldParameters_FP_WIDTH_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_extension_HasTwoAdicBinomialExtension_where_p3_monty_31_data_traits_BinomialExtensionData_FP_where_p3_monty_31_data_traits_TwoAdicData_FP_where_p3_monty_31_data_traits_FieldParameters_FP_WIDTH_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (WIDTH : Value.t) (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*     const EXT_TWO_ADICITY: usize = FP::EXT_TWO_ADICITY; *)
    (* Ty.path "usize" *)
    Definition value_EXT_TWO_ADICITY
        (WIDTH : Value.t)
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH FP in
      ltac:(M.monadic
        (get_constant (|
          "p3_monty_31::data_traits::BinomialExtensionData::EXT_TWO_ADICITY",
          Ty.path "usize"
        |))).
    
    (*
        fn ext_two_adic_generator(bits: usize) -> [Self; WIDTH] {
            assert!(bits <= Self::EXT_TWO_ADICITY);
            if bits <= FP::TWO_ADICITY {
                field_to_array(Self::two_adic_generator(bits))
            } else {
                FP::TWO_ADIC_EXTENSION_GENERATORS.as_ref()[bits - FP::TWO_ADICITY - 1]
            }
        }
    *)
    Definition ext_two_adic_generator
        (WIDTH : Value.t)
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH FP in
      match ε, τ, α with
      | [], [], [ bits ] =>
        ltac:(M.monadic
          (let bits := M.alloc (| bits |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.le,
                                [
                                  M.read (| bits |);
                                  M.read (|
                                    get_constant (|
                                      "p3_field::extension::HasTwoAdicBinomialExtension::EXT_TWO_ADICITY",
                                      Ty.path "usize"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: bits <= Self::EXT_TWO_ADICITY" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "array")
                    [ WIDTH ]
                    [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.le,
                            [
                              M.read (| bits |);
                              M.read (|
                                get_constant (|
                                  "p3_monty_31::data_traits::TwoAdicData::TWO_ADICITY",
                                  Ty.path "usize"
                                |)
                              |)
                            ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "array")
                          [ WIDTH ]
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                        M.get_function (|
                          "p3_field::helpers::field_to_array",
                          [ WIDTH ],
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                            M.get_trait_method (|
                              "p3_field::field::TwoAdicField",
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                              [],
                              [],
                              "two_adic_generator",
                              [],
                              []
                            |),
                            [ M.read (| bits |) ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.SubPointer.get_array_field (|
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ WIDTH ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ FP ]
                                    ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::convert::AsRef",
                            Ty.associated_in_trait
                              "p3_monty_31::data_traits::BinomialExtensionData"
                              [ WIDTH ]
                              []
                              FP
                              "ArrayLike",
                            [],
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ WIDTH ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ FP ]
                                    ]
                                ]
                            ],
                            "as_ref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              get_constant (|
                                "p3_monty_31::data_traits::BinomialExtensionData::TWO_ADIC_EXTENSION_GENERATORS",
                                Ty.associated_in_trait
                                  "p3_monty_31::data_traits::BinomialExtensionData"
                                  [ WIDTH ]
                                  []
                                  FP
                                  "ArrayLike"
                              |)
                            |)
                          ]
                        |)
                      |),
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.sub,
                            [
                              M.read (| bits |);
                              M.read (|
                                get_constant (|
                                  "p3_monty_31::data_traits::TwoAdicData::TWO_ADICITY",
                                  Ty.path "usize"
                                |)
                              |)
                            ]
                          |);
                          Value.Integer IntegerKind.Usize 1
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH : Value.t) (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::extension::HasTwoAdicBinomialExtension"
        (* Trait polymorphic consts *) [ WIDTH ]
        (* Trait polymorphic types *) []
        (Self WIDTH FP)
        (* Instance *)
        [
          ("value_EXT_TWO_ADICITY", InstanceField.Method (value_EXT_TWO_ADICITY WIDTH FP));
          ("ext_two_adic_generator", InstanceField.Method (ext_two_adic_generator WIDTH FP))
        ].
  End Impl_p3_field_extension_HasTwoAdicBinomialExtension_where_p3_monty_31_data_traits_BinomialExtensionData_FP_where_p3_monty_31_data_traits_TwoAdicData_FP_where_p3_monty_31_data_traits_FieldParameters_FP_WIDTH_for_p3_monty_31_monty_31_MontyField31_FP.
End extension.
