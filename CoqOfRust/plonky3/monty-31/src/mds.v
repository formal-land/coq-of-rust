(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module mds.
  (* Trait *)
  (* Empty module 'MDSUtils' *)
  
  (* StructRecord
    {
      name := "MdsMatrixMontyField31";
      const_params := [];
      ty_params := [ "MU" ];
      fields := [ ("_phantom", Ty.apply (Ty.path "core::marker::PhantomData") [] [ MU ]) ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_MU_where_p3_monty_31_mds_MDSUtils_MU_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    (* Clone *)
    Definition clone (MU : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self MU in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_monty_31::mds::MdsMatrixMontyField31"
            [
              ("_phantom",
                M.call_closure (|
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ MU ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "core::marker::PhantomData") [] [ MU ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_monty_31::mds::MdsMatrixMontyField31",
                            "_phantom"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (MU : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self MU)
        (* Instance *) [ ("clone", InstanceField.Method (clone MU)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_MU_where_p3_monty_31_mds_MDSUtils_MU_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_MU_where_p3_monty_31_mds_MDSUtils_MU_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    (* Debug *)
    Definition fmt (MU : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self MU in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field1_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MdsMatrixMontyField31" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_phantom" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_monty_31::mds::MdsMatrixMontyField31",
                            "_phantom"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (MU : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self MU)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt MU)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_MU_where_p3_monty_31_mds_MDSUtils_MU_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
  
  Module Impl_core_default_Default_where_core_default_Default_MU_where_p3_monty_31_mds_MDSUtils_MU_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    (* Default *)
    Definition default (MU : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self MU in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "p3_monty_31::mds::MdsMatrixMontyField31"
            [
              ("_phantom",
                M.call_closure (|
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ MU ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply (Ty.path "core::marker::PhantomData") [] [ MU ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (MU : Ty.t),
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self MU)
        (* Instance *) [ ("default", InstanceField.Method (default MU)) ].
  End Impl_core_default_Default_where_core_default_Default_MU_where_p3_monty_31_mds_MDSUtils_MU_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
  
  (* StructTuple
    {
      name := "SmallConvolveMontyField31";
      const_params := [];
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_p3_mds_karatsuba_convolution_Convolve_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_i64_i64_i64_for_p3_monty_31_mds_SmallConvolveMontyField31.
    Definition Self (FP : Ty.t) : Ty.t := Ty.path "p3_monty_31::mds::SmallConvolveMontyField31".
    
    (*
        fn read(input: MontyField31<FP>) -> i64 {
            input.value as i64
        }
    *)
    Definition read (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ input ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          M.cast
            (Ty.path "i64")
            (M.read (|
              M.SubPointer.get_struct_record_field (|
                input,
                "p3_monty_31::monty_31::MontyField31",
                "value"
              |)
            |))))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn parity_dot<const N: usize>(u: [i64; N], v: [i64; N]) -> i64 {
            dot_product(u, v)
        }
    *)
    Definition parity_dot (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [ N ], [], [ u; v ] =>
        ltac:(M.monadic
          (let u := M.alloc (| u |) in
          let v := M.alloc (| v |) in
          M.call_closure (|
            Ty.path "i64",
            M.get_function (| "p3_mds::util::dot_product", [ N ], [ Ty.path "i64" ] |),
            [ M.read (| u |); M.read (| v |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn reduce(z: i64) -> MontyField31<FP> {
            debug_assert!(z >= 0);
    
            MontyField31::new_monty((z as u64 % FP::PRIME as u64) as u32)
        }
    *)
    Definition reduce (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ z ] =>
        ltac:(M.monadic
          (let z := M.alloc (| z |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.ge,
                                          [ M.read (| z |); Value.Integer IntegerKind.I64 0 ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic", [], [] |),
                                      [ mk_str (| "assertion failed: z >= 0" |) ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                  "new_monty",
                  [],
                  []
                |),
                [
                  M.cast
                    (Ty.path "u32")
                    (M.call_closure (|
                      Ty.path "u64",
                      BinOp.Wrap.rem,
                      [
                        M.cast (Ty.path "u64") (M.read (| z |));
                        M.cast
                          (Ty.path "u64")
                          (M.read (|
                            get_constant (|
                              "p3_monty_31::data_traits::MontyParameters::PRIME",
                              Ty.path "u32"
                            |)
                          |))
                      ]
                    |))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_mds::karatsuba_convolution::Convolve"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
          Ty.path "i64";
          Ty.path "i64";
          Ty.path "i64"
        ]
        (Self FP)
        (* Instance *)
        [
          ("read", InstanceField.Method (read FP));
          ("parity_dot", InstanceField.Method (parity_dot FP));
          ("reduce", InstanceField.Method (reduce FP))
        ].
  End Impl_p3_mds_karatsuba_convolution_Convolve_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_i64_i64_i64_for_p3_monty_31_mds_SmallConvolveMontyField31.
  
  (*
  const fn barrett_red_monty31<BP: BarrettParameters>(input: i128) -> i64 {
      // input = input_low + beta*input_high
      // So input_high < 2**63 and fits in an i64.
      let input_high = (input >> BP::N) as i64; // input_high < input / beta < 2**{80 - N}
  
      // I, input_high are i64's so this multiplication can't overflow.
      let quot = (((input_high as i128) * (BP::PSEUDO_INV as i128)) >> BP::N) as i64;
  
      // Replace quot by a close value which is divisible by 2^10.
      let quot_2adic = quot & BP::MASK;
  
      // quot_2adic, P are i64's so this can't overflow.
      // sub is by construction divisible by both P and 2^10.
      let sub = (quot_2adic as i128) * BP::PRIME_I128;
  
      (input - sub) as i64
  }
  *)
  Definition barrett_red_monty31 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ BP ], [ input ] =>
      ltac:(M.monadic
        (let input := M.alloc (| input |) in
        M.read (|
          let~ input_high : Ty.apply (Ty.path "*") [] [ Ty.path "i64" ] :=
            M.alloc (|
              M.cast
                (Ty.path "i64")
                (M.call_closure (|
                  Ty.path "i128",
                  BinOp.Wrap.shr,
                  [
                    M.read (| input |);
                    M.read (|
                      get_constant (|
                        "p3_monty_31::data_traits::BarrettParameters::N",
                        Ty.path "usize"
                      |)
                    |)
                  ]
                |))
            |) in
          let~ quot : Ty.apply (Ty.path "*") [] [ Ty.path "i64" ] :=
            M.alloc (|
              M.cast
                (Ty.path "i64")
                (M.call_closure (|
                  Ty.path "i128",
                  BinOp.Wrap.shr,
                  [
                    M.call_closure (|
                      Ty.path "i128",
                      BinOp.Wrap.mul,
                      [
                        M.cast (Ty.path "i128") (M.read (| input_high |));
                        M.cast
                          (Ty.path "i128")
                          (M.read (|
                            get_constant (|
                              "p3_monty_31::data_traits::BarrettParameters::PSEUDO_INV",
                              Ty.path "i64"
                            |)
                          |))
                      ]
                    |);
                    M.read (|
                      get_constant (|
                        "p3_monty_31::data_traits::BarrettParameters::N",
                        Ty.path "usize"
                      |)
                    |)
                  ]
                |))
            |) in
          let~ quot_2adic : Ty.apply (Ty.path "*") [] [ Ty.path "i64" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "i64",
                BinOp.Wrap.bit_and,
                [
                  M.read (| quot |);
                  M.read (|
                    get_constant (|
                      "p3_monty_31::data_traits::BarrettParameters::MASK",
                      Ty.path "i64"
                    |)
                  |)
                ]
              |)
            |) in
          let~ sub : Ty.apply (Ty.path "*") [] [ Ty.path "i128" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "i128",
                BinOp.Wrap.mul,
                [
                  M.cast (Ty.path "i128") (M.read (| quot_2adic |));
                  M.read (|
                    get_constant (|
                      "p3_monty_31::data_traits::BarrettParameters::PRIME_I128",
                      Ty.path "i128"
                    |)
                  |)
                ]
              |)
            |) in
          M.alloc (|
            M.cast
              (Ty.path "i64")
              (M.call_closure (|
                Ty.path "i128",
                BinOp.Wrap.sub,
                [ M.read (| input |); M.read (| sub |) ]
              |))
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_barrett_red_monty31 :
    M.IsFunction.C "p3_monty_31::mds::barrett_red_monty31" barrett_red_monty31.
  Admitted.
  Global Typeclasses Opaque barrett_red_monty31.
  
  (* StructTuple
    {
      name := "LargeConvolveMontyField31";
      const_params := [];
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_fmt_Debug_for_p3_monty_31_mds_LargeConvolveMontyField31.
    Definition Self : Ty.t := Ty.path "p3_monty_31::mds::LargeConvolveMontyField31".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| mk_str (| "LargeConvolveMontyField31" |) |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_p3_monty_31_mds_LargeConvolveMontyField31.
  
  Module Impl_core_clone_Clone_for_p3_monty_31_mds_LargeConvolveMontyField31.
    Definition Self : Ty.t := Ty.path "p3_monty_31::mds::LargeConvolveMontyField31".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "p3_monty_31::mds::LargeConvolveMontyField31" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_p3_monty_31_mds_LargeConvolveMontyField31.
  
  Module Impl_core_default_Default_for_p3_monty_31_mds_LargeConvolveMontyField31.
    Definition Self : Ty.t := Ty.path "p3_monty_31::mds::LargeConvolveMontyField31".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic (Value.StructTuple "p3_monty_31::mds::LargeConvolveMontyField31" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_p3_monty_31_mds_LargeConvolveMontyField31.
  
  Module Impl_p3_mds_karatsuba_convolution_Convolve_where_p3_monty_31_data_traits_BarrettParameters_FP_p3_monty_31_monty_31_MontyField31_FP_i64_i64_i64_for_p3_monty_31_mds_LargeConvolveMontyField31.
    Definition Self (FP : Ty.t) : Ty.t := Ty.path "p3_monty_31::mds::LargeConvolveMontyField31".
    
    (*
        fn read(input: MontyField31<FP>) -> i64 {
            input.value as i64
        }
    *)
    Definition read (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ input ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          M.cast
            (Ty.path "i64")
            (M.read (|
              M.SubPointer.get_struct_record_field (|
                input,
                "p3_monty_31::monty_31::MontyField31",
                "value"
              |)
            |))))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn parity_dot<const N: usize>(u: [i64; N], v: [i64; N]) -> i64 {
            // For a convolution of size N, |x|, |y| < N * 2^31, so the
            // product could be as much as N^2 * 2^62. This will overflow an
            // i64, so we first widen to i128. Note that N^2 * 2^62 < 2^80
            // for N <= 64, as required by `barrett_red_monty31()`.
    
            let mut dp = 0i128;
            for i in 0..N {
                dp += u[i] as i128 * v[i] as i128;
            }
            barrett_red_monty31::<FP>(dp)
        }
    *)
    Definition parity_dot (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [ N ], [], [ u; v ] =>
        ltac:(M.monadic
          (let u := M.alloc (| u |) in
          let v := M.alloc (| v |) in
          M.read (|
            let~ dp : Ty.apply (Ty.path "*") [] [ Ty.path "i128" ] :=
              M.alloc (| Value.Integer IntegerKind.I128 0 |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", N) ]
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let i := M.copy (| γ0_0 |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          let β := dp in
                                          M.write (|
                                            β,
                                            M.call_closure (|
                                              Ty.path "i128",
                                              BinOp.Wrap.add,
                                              [
                                                M.read (| β |);
                                                M.call_closure (|
                                                  Ty.path "i128",
                                                  BinOp.Wrap.mul,
                                                  [
                                                    M.cast
                                                      (Ty.path "i128")
                                                      (M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          u,
                                                          M.read (| i |)
                                                        |)
                                                      |));
                                                    M.cast
                                                      (Ty.path "i128")
                                                      (M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          v,
                                                          M.read (| i |)
                                                        |)
                                                      |))
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            M.alloc (|
              M.call_closure (|
                Ty.path "i64",
                M.get_function (| "p3_monty_31::mds::barrett_red_monty31", [], [ FP ] |),
                [ M.read (| dp |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn reduce(z: i64) -> MontyField31<FP> {
            // After the barrett reduction method, the output z of parity
            // dot satisfies |z| < 2^50 (See Thm 1 above).
            //
            // In the recombining steps, conv_n maps (wo, w1) ->
            // ((wo + w1)/2, (wo + w1)/2) which has no effect on the maximal
            // size. (Indeed, it makes sizes almost strictly smaller).
            //
            // On the other hand, negacyclic_conv_n (ignoring the re-index)
            // recombines as: (w0, w1, w2) -> (w0 + w1, w2 - w0 - w1).
            // Hence if the input is <= K, the output is <= 3K.
            //
            // Thus the values appearing at the end are bounded by 3^n 2^50
            // where n is the maximal number of negacyclic_conv
            // recombination steps. When N = 64, we need to recombine for
            // signed_conv_32, signed_conv_16, signed_conv_8 so the
            // overall bound will be 3^3 2^50 < 32 * 2^50 < 2^55.
            debug_assert!(z > -(1i64 << 55));
            debug_assert!(z < (1i64 << 55));
    
            // Note we do NOT move it into MONTY form. We assume it is already
            // in this form.
            let red = (z % (FP::PRIME as i64)) as u32;
    
            // If z >= 0: 0 <= red < P is the correct value and P + red will
            // not overflow.
            // If z < 0: -P < red < 0 and the value we want is P + red.
            // On bits, + acts identically for i32 and u32. Hence we can use
            // u32's and just check for overflow.
    
            let (corr, over) = red.overflowing_add(FP::PRIME);
            let value = if over { corr } else { red };
            MontyField31::new_monty(value)
        }
    *)
    Definition reduce (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ z ] =>
        ltac:(M.monadic
          (let z := M.alloc (| z |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.gt,
                                          [
                                            M.read (| z |);
                                            UnOp.neg (|
                                              M.call_closure (|
                                                Ty.path "i64",
                                                BinOp.Wrap.shl,
                                                [
                                                  Value.Integer IntegerKind.I64 1;
                                                  Value.Integer IntegerKind.I32 55
                                                ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic", [], [] |),
                                      [ mk_str (| "assertion failed: z > -(1i64 << 55)" |) ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.lt,
                                          [
                                            M.read (| z |);
                                            M.call_closure (|
                                              Ty.path "i64",
                                              BinOp.Wrap.shl,
                                              [
                                                Value.Integer IntegerKind.I64 1;
                                                Value.Integer IntegerKind.I32 55
                                              ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic", [], [] |),
                                      [ mk_str (| "assertion failed: z < (1i64 << 55)" |) ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ red : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
              M.alloc (|
                M.cast
                  (Ty.path "u32")
                  (M.call_closure (|
                    Ty.path "i64",
                    BinOp.Wrap.rem,
                    [
                      M.read (| z |);
                      M.cast
                        (Ty.path "i64")
                        (M.read (|
                          get_constant (|
                            "p3_monty_31::data_traits::MontyParameters::PRIME",
                            Ty.path "u32"
                          |)
                        |))
                    ]
                  |))
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.path "u32"; Ty.path "bool" ],
                  M.get_associated_function (| Ty.path "u32", "overflowing_add", [], [] |),
                  [
                    M.read (| red |);
                    M.read (|
                      get_constant (|
                        "p3_monty_31::data_traits::MontyParameters::PRIME",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let corr := M.copy (| γ0_0 |) in
                    let over := M.copy (| γ0_1 |) in
                    let~ value : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                      M.copy (|
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.path "u32" ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use over in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                corr));
                            fun γ => ltac:(M.monadic red)
                          ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          "new_monty",
                          [],
                          []
                        |),
                        [ M.read (| value |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_mds::karatsuba_convolution::Convolve"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
          Ty.path "i64";
          Ty.path "i64";
          Ty.path "i64"
        ]
        (Self FP)
        (* Instance *)
        [
          ("read", InstanceField.Method (read FP));
          ("parity_dot", InstanceField.Method (parity_dot FP));
          ("reduce", InstanceField.Method (reduce FP))
        ].
  End Impl_p3_mds_karatsuba_convolution_Convolve_where_p3_monty_31_data_traits_BarrettParameters_FP_p3_monty_31_monty_31_MontyField31_FP_i64_i64_i64_for_p3_monty_31_mds_LargeConvolveMontyField31.
  
  Module Impl_p3_symmetric_permutation_Permutation_where_p3_monty_31_data_traits_MontyParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_array_Usize_8_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (FP MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    (*
        fn permute(&self, input: [MontyField31<FP>; 8]) -> [MontyField31<FP>; 8] {
            SmallConvolveMontyField31::apply(
                input,
                MU::MATRIX_CIRC_MDS_8_COL,
                <SmallConvolveMontyField31 as Convolve<MontyField31<FP>, i64, i64, i64>>::conv8,
            )
        }
    *)
    Definition permute (FP MU : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP MU in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 8 ]
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
            M.get_trait_method (|
              "p3_mds::karatsuba_convolution::Convolve",
              Ty.path "p3_monty_31::mds::SmallConvolveMontyField31",
              [],
              [
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                Ty.path "i64";
                Ty.path "i64";
                Ty.path "i64"
              ],
              "apply",
              [ Value.Integer IntegerKind.Usize 8 ],
              [
                Ty.function
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [ Ty.path "i64" ];
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [ Ty.path "i64" ];
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "i64" ] ]
                  ]
                  (Ty.tuple [])
              ]
            |),
            [
              M.read (| input |);
              M.read (|
                get_constant (|
                  "p3_monty_31::mds::MDSUtils::MATRIX_CIRC_MDS_8_COL",
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ Ty.path "i64" ]
                |)
              |);
              M.get_trait_method (|
                "p3_mds::karatsuba_convolution::Convolve",
                Ty.path "p3_monty_31::mds::SmallConvolveMontyField31",
                [],
                [
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                  Ty.path "i64";
                  Ty.path "i64";
                  Ty.path "i64"
                ],
                "conv8",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_mut(&self, input: &mut [MontyField31<FP>; 8]) {
            *input = self.permute( *input);
        }
    *)
    Definition permute_mut
        (FP MU : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP MU in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| input |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                      ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| M.deref (| M.read (| input |) |) |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP MU : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "array")
            [ Value.Integer IntegerKind.Usize 8 ]
            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        ]
        (Self FP MU)
        (* Instance *)
        [
          ("permute", InstanceField.Method (permute FP MU));
          ("permute_mut", InstanceField.Method (permute_mut FP MU))
        ].
  End Impl_p3_symmetric_permutation_Permutation_where_p3_monty_31_data_traits_MontyParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_array_Usize_8_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
  
  Module Impl_p3_mds_MdsPermutation_where_p3_monty_31_data_traits_MontyParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_Usize_8_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (FP MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    Axiom Implements :
      forall (FP MU : Ty.t),
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 8 ]
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP MU)
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_where_p3_monty_31_data_traits_MontyParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_Usize_8_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
  
  Module Impl_p3_symmetric_permutation_Permutation_where_p3_monty_31_data_traits_MontyParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_array_Usize_12_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (FP MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    (*
        fn permute(&self, input: [MontyField31<FP>; 12]) -> [MontyField31<FP>; 12] {
            SmallConvolveMontyField31::apply(
                input,
                MU::MATRIX_CIRC_MDS_12_COL,
                <SmallConvolveMontyField31 as Convolve<MontyField31<FP>, i64, i64, i64>>::conv12,
            )
        }
    *)
    Definition permute (FP MU : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP MU in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 12 ]
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
            M.get_trait_method (|
              "p3_mds::karatsuba_convolution::Convolve",
              Ty.path "p3_monty_31::mds::SmallConvolveMontyField31",
              [],
              [
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                Ty.path "i64";
                Ty.path "i64";
                Ty.path "i64"
              ],
              "apply",
              [ Value.Integer IntegerKind.Usize 12 ],
              [
                Ty.function
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 12 ]
                      [ Ty.path "i64" ];
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 12 ]
                      [ Ty.path "i64" ];
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "i64" ] ]
                  ]
                  (Ty.tuple [])
              ]
            |),
            [
              M.read (| input |);
              M.read (|
                get_constant (|
                  "p3_monty_31::mds::MDSUtils::MATRIX_CIRC_MDS_12_COL",
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 12 ]
                    [ Ty.path "i64" ]
                |)
              |);
              M.get_trait_method (|
                "p3_mds::karatsuba_convolution::Convolve",
                Ty.path "p3_monty_31::mds::SmallConvolveMontyField31",
                [],
                [
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                  Ty.path "i64";
                  Ty.path "i64";
                  Ty.path "i64"
                ],
                "conv12",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_mut(&self, input: &mut [MontyField31<FP>; 12]) {
            *input = self.permute( *input);
        }
    *)
    Definition permute_mut
        (FP MU : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP MU in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| input |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 12 ]
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 12 ]
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                      ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| M.deref (| M.read (| input |) |) |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP MU : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "array")
            [ Value.Integer IntegerKind.Usize 12 ]
            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        ]
        (Self FP MU)
        (* Instance *)
        [
          ("permute", InstanceField.Method (permute FP MU));
          ("permute_mut", InstanceField.Method (permute_mut FP MU))
        ].
  End Impl_p3_symmetric_permutation_Permutation_where_p3_monty_31_data_traits_MontyParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_array_Usize_12_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
  
  Module Impl_p3_mds_MdsPermutation_where_p3_monty_31_data_traits_MontyParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_Usize_12_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (FP MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    Axiom Implements :
      forall (FP MU : Ty.t),
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 12 ]
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP MU)
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_where_p3_monty_31_data_traits_MontyParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_Usize_12_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
  
  Module Impl_p3_symmetric_permutation_Permutation_where_p3_monty_31_data_traits_MontyParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_array_Usize_16_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (FP MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    (*
        fn permute(&self, input: [MontyField31<FP>; 16]) -> [MontyField31<FP>; 16] {
            SmallConvolveMontyField31::apply(
                input,
                MU::MATRIX_CIRC_MDS_16_COL,
                <SmallConvolveMontyField31 as Convolve<MontyField31<FP>, i64, i64, i64>>::conv16,
            )
        }
    *)
    Definition permute (FP MU : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP MU in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 16 ]
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
            M.get_trait_method (|
              "p3_mds::karatsuba_convolution::Convolve",
              Ty.path "p3_monty_31::mds::SmallConvolveMontyField31",
              [],
              [
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                Ty.path "i64";
                Ty.path "i64";
                Ty.path "i64"
              ],
              "apply",
              [ Value.Integer IntegerKind.Usize 16 ],
              [
                Ty.function
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 16 ]
                      [ Ty.path "i64" ];
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 16 ]
                      [ Ty.path "i64" ];
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "i64" ] ]
                  ]
                  (Ty.tuple [])
              ]
            |),
            [
              M.read (| input |);
              M.read (|
                get_constant (|
                  "p3_monty_31::mds::MDSUtils::MATRIX_CIRC_MDS_16_COL",
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 16 ]
                    [ Ty.path "i64" ]
                |)
              |);
              M.get_trait_method (|
                "p3_mds::karatsuba_convolution::Convolve",
                Ty.path "p3_monty_31::mds::SmallConvolveMontyField31",
                [],
                [
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                  Ty.path "i64";
                  Ty.path "i64";
                  Ty.path "i64"
                ],
                "conv16",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_mut(&self, input: &mut [MontyField31<FP>; 16]) {
            *input = self.permute( *input);
        }
    *)
    Definition permute_mut
        (FP MU : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP MU in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| input |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 16 ]
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 16 ]
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                      ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| M.deref (| M.read (| input |) |) |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP MU : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "array")
            [ Value.Integer IntegerKind.Usize 16 ]
            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        ]
        (Self FP MU)
        (* Instance *)
        [
          ("permute", InstanceField.Method (permute FP MU));
          ("permute_mut", InstanceField.Method (permute_mut FP MU))
        ].
  End Impl_p3_symmetric_permutation_Permutation_where_p3_monty_31_data_traits_MontyParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_array_Usize_16_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
  
  Module Impl_p3_mds_MdsPermutation_where_p3_monty_31_data_traits_MontyParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_Usize_16_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (FP MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    Axiom Implements :
      forall (FP MU : Ty.t),
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 16 ]
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP MU)
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_where_p3_monty_31_data_traits_MontyParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_Usize_16_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
  
  Module Impl_p3_symmetric_permutation_Permutation_where_p3_monty_31_mds_MDSUtils_MU_where_p3_monty_31_data_traits_BarrettParameters_FP_array_Usize_24_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (FP MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    (*
        fn permute(&self, input: [MontyField31<FP>; 24]) -> [MontyField31<FP>; 24] {
            LargeConvolveMontyField31::apply(
                input,
                MU::MATRIX_CIRC_MDS_24_COL,
                <LargeConvolveMontyField31 as Convolve<MontyField31<FP>, i64, i64, i64>>::conv24,
            )
        }
    *)
    Definition permute (FP MU : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP MU in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 24 ]
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
            M.get_trait_method (|
              "p3_mds::karatsuba_convolution::Convolve",
              Ty.path "p3_monty_31::mds::LargeConvolveMontyField31",
              [],
              [
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                Ty.path "i64";
                Ty.path "i64";
                Ty.path "i64"
              ],
              "apply",
              [ Value.Integer IntegerKind.Usize 24 ],
              [
                Ty.function
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 24 ]
                      [ Ty.path "i64" ];
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 24 ]
                      [ Ty.path "i64" ];
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "i64" ] ]
                  ]
                  (Ty.tuple [])
              ]
            |),
            [
              M.read (| input |);
              M.read (|
                get_constant (|
                  "p3_monty_31::mds::MDSUtils::MATRIX_CIRC_MDS_24_COL",
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 24 ]
                    [ Ty.path "i64" ]
                |)
              |);
              M.get_trait_method (|
                "p3_mds::karatsuba_convolution::Convolve",
                Ty.path "p3_monty_31::mds::LargeConvolveMontyField31",
                [],
                [
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                  Ty.path "i64";
                  Ty.path "i64";
                  Ty.path "i64"
                ],
                "conv24",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_mut(&self, input: &mut [MontyField31<FP>; 24]) {
            *input = self.permute( *input);
        }
    *)
    Definition permute_mut
        (FP MU : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP MU in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| input |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 24 ]
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 24 ]
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                      ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| M.deref (| M.read (| input |) |) |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP MU : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "array")
            [ Value.Integer IntegerKind.Usize 24 ]
            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        ]
        (Self FP MU)
        (* Instance *)
        [
          ("permute", InstanceField.Method (permute FP MU));
          ("permute_mut", InstanceField.Method (permute_mut FP MU))
        ].
  End Impl_p3_symmetric_permutation_Permutation_where_p3_monty_31_mds_MDSUtils_MU_where_p3_monty_31_data_traits_BarrettParameters_FP_array_Usize_24_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
  
  Module Impl_p3_mds_MdsPermutation_where_p3_monty_31_data_traits_BarrettParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_Usize_24_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (FP MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    Axiom Implements :
      forall (FP MU : Ty.t),
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 24 ]
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP MU)
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_where_p3_monty_31_data_traits_BarrettParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_Usize_24_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
  
  Module Impl_p3_symmetric_permutation_Permutation_where_p3_monty_31_data_traits_BarrettParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_array_Usize_32_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (FP MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    (*
        fn permute(&self, input: [MontyField31<FP>; 32]) -> [MontyField31<FP>; 32] {
            LargeConvolveMontyField31::apply(
                input,
                MU::MATRIX_CIRC_MDS_32_COL,
                <LargeConvolveMontyField31 as Convolve<MontyField31<FP>, i64, i64, i64>>::conv32,
            )
        }
    *)
    Definition permute (FP MU : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP MU in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 32 ]
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
            M.get_trait_method (|
              "p3_mds::karatsuba_convolution::Convolve",
              Ty.path "p3_monty_31::mds::LargeConvolveMontyField31",
              [],
              [
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                Ty.path "i64";
                Ty.path "i64";
                Ty.path "i64"
              ],
              "apply",
              [ Value.Integer IntegerKind.Usize 32 ],
              [
                Ty.function
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "i64" ];
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "i64" ];
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "i64" ] ]
                  ]
                  (Ty.tuple [])
              ]
            |),
            [
              M.read (| input |);
              M.read (|
                get_constant (|
                  "p3_monty_31::mds::MDSUtils::MATRIX_CIRC_MDS_32_COL",
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 32 ]
                    [ Ty.path "i64" ]
                |)
              |);
              M.get_trait_method (|
                "p3_mds::karatsuba_convolution::Convolve",
                Ty.path "p3_monty_31::mds::LargeConvolveMontyField31",
                [],
                [
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                  Ty.path "i64";
                  Ty.path "i64";
                  Ty.path "i64"
                ],
                "conv32",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_mut(&self, input: &mut [MontyField31<FP>; 32]) {
            *input = self.permute( *input);
        }
    *)
    Definition permute_mut
        (FP MU : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP MU in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| input |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                      ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| M.deref (| M.read (| input |) |) |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP MU : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "array")
            [ Value.Integer IntegerKind.Usize 32 ]
            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        ]
        (Self FP MU)
        (* Instance *)
        [
          ("permute", InstanceField.Method (permute FP MU));
          ("permute_mut", InstanceField.Method (permute_mut FP MU))
        ].
  End Impl_p3_symmetric_permutation_Permutation_where_p3_monty_31_data_traits_BarrettParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_array_Usize_32_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
  
  Module Impl_p3_mds_MdsPermutation_where_p3_monty_31_data_traits_BarrettParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_Usize_32_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (FP MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    Axiom Implements :
      forall (FP MU : Ty.t),
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 32 ]
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP MU)
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_where_p3_monty_31_data_traits_BarrettParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_Usize_32_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
  
  Module Impl_p3_symmetric_permutation_Permutation_where_p3_monty_31_data_traits_BarrettParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_array_Usize_64_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (FP MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    (*
        fn permute(&self, input: [MontyField31<FP>; 64]) -> [MontyField31<FP>; 64] {
            LargeConvolveMontyField31::apply(
                input,
                MU::MATRIX_CIRC_MDS_64_COL,
                <LargeConvolveMontyField31 as Convolve<MontyField31<FP>, i64, i64, i64>>::conv64,
            )
        }
    *)
    Definition permute (FP MU : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP MU in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 64 ]
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
            M.get_trait_method (|
              "p3_mds::karatsuba_convolution::Convolve",
              Ty.path "p3_monty_31::mds::LargeConvolveMontyField31",
              [],
              [
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                Ty.path "i64";
                Ty.path "i64";
                Ty.path "i64"
              ],
              "apply",
              [ Value.Integer IntegerKind.Usize 64 ],
              [
                Ty.function
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 64 ]
                      [ Ty.path "i64" ];
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 64 ]
                      [ Ty.path "i64" ];
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "i64" ] ]
                  ]
                  (Ty.tuple [])
              ]
            |),
            [
              M.read (| input |);
              M.read (|
                get_constant (|
                  "p3_monty_31::mds::MDSUtils::MATRIX_CIRC_MDS_64_COL",
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 64 ]
                    [ Ty.path "i64" ]
                |)
              |);
              M.get_trait_method (|
                "p3_mds::karatsuba_convolution::Convolve",
                Ty.path "p3_monty_31::mds::LargeConvolveMontyField31",
                [],
                [
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                  Ty.path "i64";
                  Ty.path "i64";
                  Ty.path "i64"
                ],
                "conv64",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn permute_mut(&self, input: &mut [MontyField31<FP>; 64]) {
            *input = self.permute( *input);
        }
    *)
    Definition permute_mut
        (FP MU : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP MU in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| input |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 64 ]
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 64 ]
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                      ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| M.deref (| M.read (| input |) |) |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP MU : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "array")
            [ Value.Integer IntegerKind.Usize 64 ]
            [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        ]
        (Self FP MU)
        (* Instance *)
        [
          ("permute", InstanceField.Method (permute FP MU));
          ("permute_mut", InstanceField.Method (permute_mut FP MU))
        ].
  End Impl_p3_symmetric_permutation_Permutation_where_p3_monty_31_data_traits_BarrettParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_array_Usize_64_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
  
  Module Impl_p3_mds_MdsPermutation_where_p3_monty_31_data_traits_BarrettParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_Usize_64_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
    Definition Self (FP MU : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::mds::MdsMatrixMontyField31") [] [ MU ].
    
    Axiom Implements :
      forall (FP MU : Ty.t),
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 64 ]
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP MU)
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_where_p3_monty_31_data_traits_BarrettParameters_FP_where_p3_monty_31_mds_MDSUtils_MU_Usize_64_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_mds_MdsMatrixMontyField31_MU.
End mds.
