(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module monty_31.
  (* StructRecord
    {
      name := "MontyField31";
      const_params := [];
      ty_params := [ "MP" ];
      fields :=
        [
          ("value", Ty.path "u32");
          ("_phantom", Ty.apply (Ty.path "core::marker::PhantomData") [] [ MP ])
        ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_MP_where_p3_monty_31_data_traits_MontyParameters_MP_for_p3_monty_31_monty_31_MontyField31_MP.
    Definition Self (MP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ].
    
    (* Clone *)
    Definition clone (MP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self MP in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_monty_31::monty_31::MontyField31"
            [
              ("value",
                M.call_closure (|
                  Ty.path "u32",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "u32",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_monty_31::monty_31::MontyField31",
                            "value"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("_phantom",
                M.call_closure (|
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ MP ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "core::marker::PhantomData") [] [ MP ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_monty_31::monty_31::MontyField31",
                            "_phantom"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (MP : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self MP)
        (* Instance *) [ ("clone", InstanceField.Method (clone MP)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_MP_where_p3_monty_31_data_traits_MontyParameters_MP_for_p3_monty_31_monty_31_MontyField31_MP.
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_MP_where_p3_monty_31_data_traits_MontyParameters_MP_for_p3_monty_31_monty_31_MontyField31_MP.
    Definition Self (MP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ].
    
    Axiom Implements :
      forall (MP : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self MP)
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_MP_where_p3_monty_31_data_traits_MontyParameters_MP_for_p3_monty_31_monty_31_MontyField31_MP.
  
  Module Impl_core_default_Default_where_core_default_Default_MP_where_p3_monty_31_data_traits_MontyParameters_MP_for_p3_monty_31_monty_31_MontyField31_MP.
    Definition Self (MP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ].
    
    (* Default *)
    Definition default (MP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self MP in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "p3_monty_31::monty_31::MontyField31"
            [
              ("value",
                M.call_closure (|
                  Ty.path "u32",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "u32",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("_phantom",
                M.call_closure (|
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ MP ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply (Ty.path "core::marker::PhantomData") [] [ MP ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (MP : Ty.t),
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self MP)
        (* Instance *) [ ("default", InstanceField.Method (default MP)) ].
  End Impl_core_default_Default_where_core_default_Default_MP_where_p3_monty_31_data_traits_MontyParameters_MP_for_p3_monty_31_monty_31_MontyField31_MP.
  
  Module Impl_core_cmp_Eq_where_core_cmp_Eq_MP_where_p3_monty_31_data_traits_MontyParameters_MP_for_p3_monty_31_monty_31_MontyField31_MP.
    Definition Self (MP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ].
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (MP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self MP in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (MP : Ty.t),
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self MP)
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq MP)) ].
  End Impl_core_cmp_Eq_where_core_cmp_Eq_MP_where_p3_monty_31_data_traits_MontyParameters_MP_for_p3_monty_31_monty_31_MontyField31_MP.
  
  Module Impl_core_hash_Hash_where_core_hash_Hash_MP_where_p3_monty_31_data_traits_MontyParameters_MP_for_p3_monty_31_monty_31_MontyField31_MP.
    Definition Self (MP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ].
    
    (* Hash *)
    Definition hash (MP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self MP in
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.path "u32",
                    [],
                    [],
                    "hash",
                    [],
                    [ __H ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_monty_31::monty_31::MontyField31",
                            "value"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::hash::Hash",
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ MP ],
                  [],
                  [],
                  "hash",
                  [],
                  [ __H ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_monty_31::monty_31::MontyField31",
                          "_phantom"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (MP : Ty.t),
      M.IsTraitInstance
        "core::hash::Hash"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self MP)
        (* Instance *) [ ("hash", InstanceField.Method (hash MP)) ].
  End Impl_core_hash_Hash_where_core_hash_Hash_MP_where_p3_monty_31_data_traits_MontyParameters_MP_for_p3_monty_31_monty_31_MontyField31_MP.
  
  Module Impl_core_marker_StructuralPartialEq_where_p3_monty_31_data_traits_MontyParameters_MP_for_p3_monty_31_monty_31_MontyField31_MP.
    Definition Self (MP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ].
    
    Axiom Implements :
      forall (MP : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self MP)
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_where_p3_monty_31_data_traits_MontyParameters_MP_for_p3_monty_31_monty_31_MontyField31_MP.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_MP_where_p3_monty_31_data_traits_MontyParameters_MP_p3_monty_31_monty_31_MontyField31_MP_for_p3_monty_31_monty_31_MontyField31_MP.
    Definition Self (MP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ].
    
    (* PartialEq *)
    Definition eq (MP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self MP in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            M.call_closure (|
              Ty.path "bool",
              BinOp.eq,
              [
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "p3_monty_31::monty_31::MontyField31",
                    "value"
                  |)
                |);
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "p3_monty_31::monty_31::MontyField31",
                    "value"
                  |)
                |)
              ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ MP ],
                  [],
                  [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ MP ] ],
                  "eq",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_monty_31::monty_31::MontyField31",
                      "_phantom"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "p3_monty_31::monty_31::MontyField31",
                      "_phantom"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (MP : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
        (Self MP)
        (* Instance *) [ ("eq", InstanceField.Method (eq MP)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_MP_where_p3_monty_31_data_traits_MontyParameters_MP_p3_monty_31_monty_31_MontyField31_MP_for_p3_monty_31_monty_31_MontyField31_MP.
  
  Module Impl_p3_monty_31_monty_31_MontyField31_MP.
    Definition Self (MP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ].
    
    (*
        pub const fn new(value: u32) -> Self {
            Self {
                value: to_monty::<MP>(value),
                _phantom: PhantomData,
            }
        }
    *)
    Definition new (MP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self MP in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructRecord
            "p3_monty_31::monty_31::MontyField31"
            [
              ("value",
                M.call_closure (|
                  Ty.path "u32",
                  M.get_function (| "p3_monty_31::utils::to_monty", [], [ MP ] |),
                  [ M.read (| value |) ]
                |));
              ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (MP : Ty.t),
      M.IsAssociatedFunction.C (Self MP) "new" (new MP).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub(crate) const fn new_monty(value: u32) -> Self {
            Self {
                value,
                _phantom: PhantomData,
            }
        }
    *)
    Definition new_monty (MP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self MP in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructRecord
            "p3_monty_31::monty_31::MontyField31"
            [
              ("value", M.read (| value |));
              ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_monty :
      forall (MP : Ty.t),
      M.IsAssociatedFunction.C (Self MP) "new_monty" (new_monty MP).
    Admitted.
    Global Typeclasses Opaque new_monty.
    
    (*
        pub(crate) const fn to_u32(elem: &Self) -> u32 {
            from_monty::<MP>(elem.value)
        }
    *)
    Definition to_u32 (MP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self MP in
      match ε, τ, α with
      | [], [], [ elem ] =>
        ltac:(M.monadic
          (let elem := M.alloc (| elem |) in
          M.call_closure (|
            Ty.path "u32",
            M.get_function (| "p3_monty_31::utils::from_monty", [], [ MP ] |),
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| elem |) |),
                  "p3_monty_31::monty_31::MontyField31",
                  "value"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_to_u32 :
      forall (MP : Ty.t),
      M.IsAssociatedFunction.C (Self MP) "to_u32" (to_u32 MP).
    Admitted.
    Global Typeclasses Opaque to_u32.
    
    (*
        pub const fn new_array<const N: usize>(input: [u32; N]) -> [Self; N] {
            let mut output = [Self::new_monty(0); N];
            let mut i = 0;
            while i < N {
                output[i] = Self::new(input[i]);
                i += 1;
            }
            output
        }
    *)
    Definition new_array (MP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self MP in
      match ε, τ, α with
      | [ N ], [], [ input ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          M.read (|
            let~ output :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ N ]
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                  ] :=
              M.alloc (|
                repeat (|
                  M.call_closure (|
                    Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                      "new_monty",
                      [],
                      []
                    |),
                    [ Value.Integer IntegerKind.U32 0 ]
                  |),
                  N
                |)
              |) in
            let~ i : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.loop (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                ltac:(M.monadic
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (| Ty.path "bool", BinOp.lt, [ M.read (| i |); N ] |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                M.SubPointer.get_array_field (| output, M.read (| i |) |),
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ MP ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ MP ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_array_field (| input, M.read (| i |) |)
                                    |)
                                  ]
                                |)
                              |)
                            |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              let β := i in
                              M.write (|
                                β,
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                M.alloc (| Value.Tuple [] |)
                              |)
                            |)
                          |)))
                    ]
                  |)))
              |) in
            output
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_array :
      forall (MP : Ty.t),
      M.IsAssociatedFunction.C (Self MP) "new_array" (new_array MP).
    Admitted.
    Global Typeclasses Opaque new_array.
    
    (*
        pub const fn new_2d_array<const N: usize, const M: usize>(
            input: [[u32; N]; M],
        ) -> [[Self; N]; M] {
            let mut output = [[Self::new_monty(0); N]; M];
            let mut i = 0;
            while i < M {
                output[i] = Self::new_array(input[i]);
                i += 1;
            }
            output
        }
    *)
    Definition new_2d_array (MP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self MP in
      match ε, τ, α with
      | [ N; M_ ], [], [ input ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          M.read (|
            let~ output :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ M ]
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ N ]
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ] ]
                      ]
                  ] :=
              M.alloc (|
                repeat (|
                  repeat (|
                    M.call_closure (|
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ MP ],
                        "new_monty",
                        [],
                        []
                      |),
                      [ Value.Integer IntegerKind.U32 0 ]
                    |),
                    N
                  |),
                  M
                |)
              |) in
            let~ i : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.loop (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                ltac:(M.monadic
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.lt,
                                  [ M.read (| i |); M_ ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                M.SubPointer.get_array_field (| output, M.read (| i |) |),
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ N ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ MP ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ MP ],
                                    "new_array",
                                    [ N ],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_array_field (| input, M.read (| i |) |)
                                    |)
                                  ]
                                |)
                              |)
                            |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              let β := i in
                              M.write (|
                                β,
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                M.alloc (| Value.Tuple [] |)
                              |)
                            |)
                          |)))
                    ]
                  |)))
              |) in
            output
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_2d_array :
      forall (MP : Ty.t),
      M.IsAssociatedFunction.C (Self MP) "new_2d_array" (new_2d_array MP).
    Admitted.
    Global Typeclasses Opaque new_2d_array.
  End Impl_p3_monty_31_monty_31_MontyField31_MP.
  
  Module Impl_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        const MONTY_POWERS_OF_TWO: [Self; 64] = {
            let mut powers_of_two = [FP::MONTY_ONE; 64];
            let mut i = 1;
            while i < 64 {
                powers_of_two[i] = Self::new_monty(to_monty_64::<FP>(1 << i));
                i += 1;
            }
            powers_of_two
        };
    *)
    (* Ty.apply
      (Ty.path "array")
      [ Value.Integer IntegerKind.Usize 64 ]
      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ] *)
    Definition value_MONTY_POWERS_OF_TWO
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      ltac:(M.monadic
        (let~ powers_of_two :
            Ty.apply
              (Ty.path "*")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 64 ]
                  [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
              ] :=
          M.alloc (|
            repeat (|
              M.read (|
                get_constant (|
                  "p3_monty_31::data_traits::FieldParameters::MONTY_ONE",
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                |)
              |),
              Value.Integer IntegerKind.Usize 64
            |)
          |) in
        let~ i : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
          M.alloc (| Value.Integer IntegerKind.Usize 1 |) in
        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
          M.loop (|
            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
            ltac:(M.monadic
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.lt,
                              [ M.read (| i |); Value.Integer IntegerKind.Usize 64 ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.write (|
                            M.SubPointer.get_array_field (| powers_of_two, M.read (| i |) |),
                            M.call_closure (|
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                                "new_monty",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.path "u32",
                                  M.get_function (|
                                    "p3_monty_31::utils::to_monty_64",
                                    [],
                                    [ FP ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.path "u64",
                                      BinOp.Wrap.shl,
                                      [ Value.Integer IntegerKind.U64 1; M.read (| i |) ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          let β := i in
                          M.write (|
                            β,
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.add,
                              [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                            |)
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        M.never_to_any (|
                          M.read (|
                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                            M.alloc (| Value.Tuple [] |)
                          |)
                        |)
                      |)))
                ]
              |)))
          |) in
        powers_of_two)).
    
    Global Instance AssociatedConstant_value_MONTY_POWERS_OF_TWO :
      forall (FP : Ty.t),
      M.IsAssociatedFunction.C (Self FP) "MONTY_POWERS_OF_TWO" (value_MONTY_POWERS_OF_TWO FP).
    Admitted.
    Global Typeclasses Opaque value_MONTY_POWERS_OF_TWO.
    
    (*     const HALF: Self = MontyField31::new(FP::HALF_P_PLUS_1); *)
    (* Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] *)
    Definition value_HALF (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      ltac:(M.monadic
        (M.alloc (|
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "new",
              [],
              []
            |),
            [
              M.read (|
                get_constant (|
                  "p3_monty_31::data_traits::FieldParameters::HALF_P_PLUS_1",
                  Ty.path "u32"
                |)
              |)
            ]
          |)
        |))).
    
    Global Instance AssociatedConstant_value_HALF :
      forall (FP : Ty.t),
      M.IsAssociatedFunction.C (Self FP) "HALF" (value_HALF FP).
    Admitted.
    Global Typeclasses Opaque value_HALF.
  End Impl_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_core_cmp_Ord_where_p3_monty_31_data_traits_MontyParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn cmp(&self, other: &Self) -> core::cmp::Ordering {
            Self::to_u32(self).cmp(&Self::to_u32(other))
        }
    *)
    Definition cmp (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.path "core::cmp::Ordering",
            M.get_trait_method (| "core::cmp::Ord", Ty.path "u32", [], [], "cmp", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u32",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                      "to_u32",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |)
              |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u32",
                        M.get_associated_function (|
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          "to_u32",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                      |)
                    |)
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "core::cmp::Ord"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self FP)
        (* Instance *) [ ("cmp", InstanceField.Method (cmp FP)) ].
  End Impl_core_cmp_Ord_where_p3_monty_31_data_traits_MontyParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_core_cmp_PartialOrd_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
            Some(self.cmp(other))
        }
    *)
    Definition partial_cmp (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          Value.StructTuple
            "core::option::Option::Some"
            [
              M.call_closure (|
                Ty.path "core::cmp::Ordering",
                M.get_trait_method (|
                  "core::cmp::Ord",
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                  [],
                  [],
                  "cmp",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |)
                ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP)
        (* Instance *) [ ("partial_cmp", InstanceField.Method (partial_cmp FP)) ].
  End Impl_core_cmp_PartialOrd_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_core_fmt_Display_where_p3_monty_31_data_traits_MontyParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
            Display::fmt(&Self::to_u32(self), f)
        }
    *)
    Definition fmt (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_trait_method (| "core::fmt::Display", Ty.path "u32", [], [], "fmt", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u32",
                        M.get_associated_function (|
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          "to_u32",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                |)
              |);
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "core::fmt::Display"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self FP)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt FP)) ].
  End Impl_core_fmt_Display_where_p3_monty_31_data_traits_MontyParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_core_fmt_Debug_where_p3_monty_31_data_traits_MontyParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
            Debug::fmt(&Self::to_u32(self), f)
        }
    *)
    Definition fmt (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_trait_method (| "core::fmt::Debug", Ty.path "u32", [], [], "fmt", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u32",
                        M.get_associated_function (|
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          "to_u32",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                |)
              |);
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self FP)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt FP)) ].
  End Impl_core_fmt_Debug_where_p3_monty_31_data_traits_MontyParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_rand_distr_distribution_Distribution_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_rand_distr_StandardUniform.
    Definition Self (FP : Ty.t) : Ty.t := Ty.path "rand::distr::StandardUniform".
    
    (*
        fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> MontyField31<FP> {
            loop {
                let next_u31 = rng.next_u32() >> 1;
                let is_canonical = next_u31 < FP::PRIME;
                if is_canonical {
                    return MontyField31::new_monty(next_u31);
                }
            }
        }
    *)
    Definition sample (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [ R ], [ self; rng ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rng := M.alloc (| rng |) in
          M.catch_return (Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]) (|
            ltac:(M.monadic
              (M.never_to_any (|
                M.read (|
                  M.loop (|
                    Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                    ltac:(M.monadic
                      (let~ next_u31 : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.shr,
                            [
                              M.call_closure (|
                                Ty.path "u32",
                                M.get_trait_method (|
                                  "rand_core::RngCore",
                                  R,
                                  [],
                                  [],
                                  "next_u32",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| rng |) |) |)
                                ]
                              |);
                              Value.Integer IntegerKind.I32 1
                            ]
                          |)
                        |) in
                      let~ is_canonical : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.lt,
                            [
                              M.read (| next_u31 |);
                              M.read (|
                                get_constant (|
                                  "p3_monty_31::data_traits::MontyParameters::PRIME",
                                  Ty.path "u32"
                                |)
                              |)
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use is_canonical in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ FP ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ FP ],
                                          "new_monty",
                                          [],
                                          []
                                        |),
                                        [ M.read (| next_u31 |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "rand::distr::distribution::Distribution"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP)
        (* Instance *) [ ("sample", InstanceField.Method (sample FP)) ].
  End Impl_rand_distr_distribution_Distribution_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_rand_distr_StandardUniform.
  
  Module Impl_serde_ser_Serialize_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn serialize<S: serde::Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {
            // It's faster to Serialize and Deserialize in monty form.
            serializer.serialize_u32(self.value)
        }
    *)
    Definition serialize (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [ _ as S ], [ self; serializer ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let serializer := M.alloc (| serializer |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.associated_in_trait "serde::ser::Serializer" [] [] S "Ok";
                Ty.associated_in_trait "serde::ser::Serializer" [] [] S "Error"
              ],
            M.get_trait_method (| "serde::ser::Serializer", S, [], [], "serialize_u32", [], [] |),
            [
              M.read (| serializer |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_monty_31::monty_31::MontyField31",
                  "value"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "serde::ser::Serialize"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self FP)
        (* Instance *) [ ("serialize", InstanceField.Method (serialize FP)) ].
  End Impl_serde_ser_Serialize_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_serde_de_Deserialize_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn deserialize<D: Deserializer<'de>>(d: D) -> Result<Self, D::Error> {
            // It's faster to Serialize and Deserialize in monty form.
            let val = u32::deserialize(d)?;
            Ok(Self::new_monty(val))
        }
    *)
    Definition deserialize (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [ D ], [ d ] =>
        ltac:(M.monadic
          (let d := M.alloc (| d |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                Ty.associated_in_trait "serde::de::Deserializer" [] [] D "Error"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ val : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                  M.copy (|
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.path "u32" ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::de::Deserializer" [] [] D "Error"
                                ];
                              Ty.path "u32"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "u32";
                                Ty.associated_in_trait "serde::de::Deserializer" [] [] D "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "u32";
                                  Ty.associated_in_trait "serde::de::Deserializer" [] [] D "Error"
                                ],
                              M.get_trait_method (|
                                "serde::de::Deserialize",
                                Ty.path "u32",
                                [],
                                [],
                                "deserialize",
                                [],
                                [ D ]
                              |),
                              [ M.read (| d |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ FP ];
                                          Ty.associated_in_trait
                                            "serde::de::Deserializer"
                                            []
                                            []
                                            D
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ FP ];
                                            Ty.associated_in_trait
                                              "serde::de::Deserializer"
                                              []
                                              []
                                              D
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::de::Deserializer"
                                                []
                                                []
                                                D
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          "new_monty",
                          [],
                          []
                        |),
                        [ M.read (| val |) ]
                      |)
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "serde::de::Deserialize"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self FP)
        (* Instance *) [ ("deserialize", InstanceField.Method (deserialize FP)) ].
  End Impl_serde_de_Deserialize_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_packed_Packable_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::packed::Packable"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self FP)
        (* Instance *) [].
  End Impl_p3_field_packed_Packable_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_field_PrimeCharacteristicRing_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*     type PrimeSubfield = Self; *)
    Definition _PrimeSubfield (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*     const ZERO: Self = FP::MONTY_ZERO; *)
    (* Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] *)
    Definition value_ZERO (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      ltac:(M.monadic
        (get_constant (|
          "p3_monty_31::data_traits::FieldParameters::MONTY_ZERO",
          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
        |))).
    
    (*     const ONE: Self = FP::MONTY_ONE; *)
    (* Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] *)
    Definition value_ONE (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      ltac:(M.monadic
        (get_constant (|
          "p3_monty_31::data_traits::FieldParameters::MONTY_ONE",
          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
        |))).
    
    (*     const TWO: Self = FP::MONTY_TWO; *)
    (* Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] *)
    Definition value_TWO (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      ltac:(M.monadic
        (get_constant (|
          "p3_monty_31::data_traits::FieldParameters::MONTY_TWO",
          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
        |))).
    
    (*     const NEG_ONE: Self = FP::MONTY_NEG_ONE; *)
    (* Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] *)
    Definition value_NEG_ONE
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      ltac:(M.monadic
        (get_constant (|
          "p3_monty_31::data_traits::FieldParameters::MONTY_NEG_ONE",
          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
        |))).
    
    (*
        fn from_prime_subfield(f: Self) -> Self {
            f
        }
    *)
    Definition from_prime_subfield
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ f ] =>
        ltac:(M.monadic
          (let f := M.alloc (| f |) in
          M.read (| f |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn mul_2exp_u64(&self, exp: u64) -> Self {
            // The array FP::MONTY_POWERS_OF_TWO contains the powers of 2
            // from 2^0 to 2^63 in monty form. We can use this to quickly
            // compute 2^exp.
            if exp < 64 {
                *self * Self::MONTY_POWERS_OF_TWO[exp as usize]
            } else {
                // For larger values we use the default method.
                *self * Self::TWO.exp_u64(exp)
            }
        }
    *)
    Definition mul_2exp_u64 (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self; exp ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let exp := M.alloc (| exp |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.lt,
                            [ M.read (| exp |); Value.Integer IntegerKind.U64 64 ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          [],
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.read (| M.deref (| M.read (| self |) |) |);
                          M.read (|
                            M.SubPointer.get_array_field (|
                              get_associated_constant (|
                                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                                "MONTY_POWERS_OF_TWO",
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 64 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ FP ]
                                  ]
                              |),
                              M.cast (Ty.path "usize") (M.read (| exp |))
                            |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          [],
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.read (| M.deref (| M.read (| self |) |) |);
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                              [],
                              [],
                              "exp_u64",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                get_constant (|
                                  "p3_field::field::PrimeCharacteristicRing::TWO",
                                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                                |)
                              |);
                              M.read (| exp |)
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn zero_vec(len: usize) -> Vec<Self> {
            // SAFETY:
            // Due to `#[repr(transparent)]`, MontyField31 and u32 have the same size, alignment
            // and memory layout making `flatten_to_base` safe. This this will create
            // a vector MontyField31 elements with value set to 0 which is the
            // MONTY form of 0.
            unsafe { flatten_to_base(vec![0u32; len]) }
        }
    *)
    Definition zero_vec (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ len ] =>
        ltac:(M.monadic
          (let len := M.alloc (| len |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                Ty.path "alloc::alloc::Global"
              ],
            M.get_function (|
              "p3_util::flatten_to_base",
              [],
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]; Ty.path "u32" ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                M.get_function (| "alloc::vec::from_elem", [], [ Ty.path "u32" ] |),
                [ Value.Integer IntegerKind.U32 0; M.read (| len |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn sum_array<const N: usize>(input: &[Self]) -> Self {
            assert_eq!(N, input.len());
            // Benchmarking shows that for N <= 7 it's faster to sum the elements directly
            // but for N > 7 it's faster to use the .sum() methods which passes through u64's
            // allowing for delayed reductions.
            match N {
                0 => Self::ZERO,
                1 => input[0],
                2 => input[0] + input[1],
                3 => input[0] + input[1] + input[2],
                4 => (input[0] + input[1]) + (input[2] + input[3]),
                5 => Self::sum_array::<4>(&input[..4]) + Self::sum_array::<1>(&input[4..]),
                6 => Self::sum_array::<4>(&input[..4]) + Self::sum_array::<2>(&input[4..]),
                7 => Self::sum_array::<4>(&input[..4]) + Self::sum_array::<3>(&input[4..]),
                _ => input.iter().copied().sum(),
            }
        }
    *)
    Definition sum_array (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [ N ], [], [ input ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (| Pointer.Kind.Ref, M.alloc (| N |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                                ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "usize"; Ty.path "usize" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple "core::option::Option::None" []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
              M.alloc (| N |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 0
                      |) in
                    get_constant (|
                      "p3_field::field::PrimeCharacteristicRing::ZERO",
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 1
                      |) in
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| input |) |),
                      Value.Integer IntegerKind.Usize 0
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 2
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          [],
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| input |) |),
                              Value.Integer IntegerKind.Usize 0
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| input |) |),
                              Value.Integer IntegerKind.Usize 1
                            |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 3
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          [],
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                            M.get_trait_method (|
                              "core::ops::arith::Add",
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                              [],
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                              ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |);
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 1
                                |)
                              |)
                            ]
                          |);
                          M.read (|
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| input |) |),
                              Value.Integer IntegerKind.Usize 2
                            |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 4
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          [],
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                            M.get_trait_method (|
                              "core::ops::arith::Add",
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                              [],
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                              ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |);
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 1
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                            M.get_trait_method (|
                              "core::ops::arith::Add",
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                              [],
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                              ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 2
                                |)
                              |);
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| input |) |),
                                  Value.Integer IntegerKind.Usize 3
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 5
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          [],
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                              [],
                              [],
                              "sum_array",
                              [ Value.Integer IntegerKind.Usize 4 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ FP ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ FP ]
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeTo")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| input |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeTo"
                                            [ ("end_", Value.Integer IntegerKind.Usize 4) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                              [],
                              [],
                              "sum_array",
                              [ Value.Integer IntegerKind.Usize 1 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ FP ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ FP ]
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeFrom")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| input |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeFrom"
                                            [ ("start", Value.Integer IntegerKind.Usize 4) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 6
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          [],
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                              [],
                              [],
                              "sum_array",
                              [ Value.Integer IntegerKind.Usize 4 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ FP ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ FP ]
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeTo")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| input |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeTo"
                                            [ ("end_", Value.Integer IntegerKind.Usize 4) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                              [],
                              [],
                              "sum_array",
                              [ Value.Integer IntegerKind.Usize 2 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ FP ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ FP ]
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeFrom")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| input |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeFrom"
                                            [ ("start", Value.Integer IntegerKind.Usize 4) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.Usize 7
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          [],
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                              [],
                              [],
                              "sum_array",
                              [ Value.Integer IntegerKind.Usize 4 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ FP ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ FP ]
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeTo")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| input |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeTo"
                                            [ ("end_", Value.Integer IntegerKind.Usize 4) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                              [],
                              [],
                              "sum_array",
                              [ Value.Integer IntegerKind.Usize 3 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ FP ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ FP ]
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeFrom")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| input |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeFrom"
                                            [ ("start", Value.Integer IntegerKind.Usize 4) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::copied::Copied")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                                ]
                            ],
                          [],
                          [],
                          "sum",
                          [],
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::copied::Copied")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ FP ]
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                                ],
                              [],
                              [],
                              "copied",
                              [],
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ FP ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ FP ]
                                    ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::field::PrimeCharacteristicRing"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self FP)
        (* Instance *)
        [
          ("PrimeSubfield", InstanceField.Ty (_PrimeSubfield FP));
          ("value_ZERO", InstanceField.Method (value_ZERO FP));
          ("value_ONE", InstanceField.Method (value_ONE FP));
          ("value_TWO", InstanceField.Method (value_TWO FP));
          ("value_NEG_ONE", InstanceField.Method (value_NEG_ONE FP));
          ("from_prime_subfield", InstanceField.Method (from_prime_subfield FP));
          ("mul_2exp_u64", InstanceField.Method (mul_2exp_u64 FP));
          ("zero_vec", InstanceField.Method (zero_vec FP));
          ("sum_array", InstanceField.Method (sum_array FP))
        ].
  End Impl_p3_field_field_PrimeCharacteristicRing_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_field_InjectiveMonomial_where_p3_monty_31_data_traits_FieldParameters_FP_where_p3_monty_31_data_traits_RelativelyPrimePower_FP_D_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (D : Value.t) (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    Axiom Implements :
      forall (D : Value.t) (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::field::InjectiveMonomial"
        (* Trait polymorphic consts *) [ D ]
        (* Trait polymorphic types *) []
        (Self D FP)
        (* Instance *) [].
  End Impl_p3_field_field_InjectiveMonomial_where_p3_monty_31_data_traits_FieldParameters_FP_where_p3_monty_31_data_traits_RelativelyPrimePower_FP_D_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_field_PermutationMonomial_where_p3_monty_31_data_traits_FieldParameters_FP_where_p3_monty_31_data_traits_RelativelyPrimePower_FP_D_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (D : Value.t) (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn injective_exp_root_n(&self) -> Self {
            FP::exp_root_d( *self)
        }
    *)
    Definition injective_exp_root_n
        (D : Value.t)
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self D FP in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_trait_method (|
              "p3_monty_31::data_traits::RelativelyPrimePower",
              FP,
              [ D ],
              [],
              "exp_root_d",
              [],
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
            |),
            [ M.read (| M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (D : Value.t) (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::field::PermutationMonomial"
        (* Trait polymorphic consts *) [ D ]
        (* Trait polymorphic types *) []
        (Self D FP)
        (* Instance *)
        [ ("injective_exp_root_n", InstanceField.Method (injective_exp_root_n D FP)) ].
  End Impl_p3_field_field_PermutationMonomial_where_p3_monty_31_data_traits_FieldParameters_FP_where_p3_monty_31_data_traits_RelativelyPrimePower_FP_D_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_field_Field_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*     type Packing = Self; *)
    Definition _Packing (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*     const GENERATOR: Self = FP::MONTY_GEN; *)
    (* Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] *)
    Definition value_GENERATOR
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      ltac:(M.monadic
        (get_constant (|
          "p3_monty_31::data_traits::FieldParameters::MONTY_GEN",
          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
        |))).
    
    (*
        fn try_inverse(&self) -> Option<Self> {
            FP::try_inverse( *self)
        }
    *)
    Definition try_inverse (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
            M.get_trait_method (|
              "p3_monty_31::data_traits::FieldParameters",
              FP,
              [],
              [],
              "try_inverse",
              [],
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
            |),
            [ M.read (| M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn halve(&self) -> Self {
            Self::new_monty(halve_u32::<FP>(self.value))
        }
    *)
    Definition halve (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "new_monty",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_function (| "p3_monty_31::utils::halve_u32", [], [ FP ] |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_monty_31::monty_31::MontyField31",
                      "value"
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn div_2exp_u64(&self, exp: u64) -> Self {
            if exp <= 32 {
                // As the monty form of 2^{-exp} is 2^{32 - exp} mod P, for
                // 0 <= exp <= 32, we can multiply by 2^{-exp} by doing a shift
                // followed by a monty reduction.
                let long_prod = (self.value as u64) << (32 - exp);
                Self::new_monty(monty_reduce::<FP>(long_prod))
            } else {
                // For larger values we use a slower method though this is
                // still much faster than the default method as it avoids the inverse().
                *self * Self::HALF.exp_u64(exp)
            }
        }
    *)
    Definition div_2exp_u64 (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self; exp ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let exp := M.alloc (| exp |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.le,
                            [ M.read (| exp |); Value.Integer IntegerKind.U64 32 ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    let~ long_prod : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.shl,
                          [
                            M.cast
                              (Ty.path "u64")
                              (M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "p3_monty_31::monty_31::MontyField31",
                                  "value"
                                |)
                              |));
                            M.call_closure (|
                              Ty.path "u64",
                              BinOp.Wrap.sub,
                              [ Value.Integer IntegerKind.U64 32; M.read (| exp |) ]
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          "new_monty",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            M.get_function (| "p3_monty_31::utils::monty_reduce", [], [ FP ] |),
                            [ M.read (| long_prod |) ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          [],
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.read (| M.deref (| M.read (| self |) |) |);
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                              [],
                              [],
                              "exp_u64",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                get_associated_constant (|
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ FP ],
                                  "HALF",
                                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                                |)
                              |);
                              M.read (| exp |)
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn order() -> BigUint {
            FP::PRIME.into()
        }
    *)
    Definition order (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.call_closure (|
            Ty.path "num_bigint::biguint::BigUint",
            M.get_trait_method (|
              "core::convert::Into",
              Ty.path "u32",
              [],
              [ Ty.path "num_bigint::biguint::BigUint" ],
              "into",
              [],
              []
            |),
            [
              M.read (|
                get_constant (| "p3_monty_31::data_traits::MontyParameters::PRIME", Ty.path "u32" |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::field::Field"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self FP)
        (* Instance *)
        [
          ("Packing", InstanceField.Ty (_Packing FP));
          ("value_GENERATOR", InstanceField.Method (value_GENERATOR FP));
          ("try_inverse", InstanceField.Method (try_inverse FP));
          ("halve", InstanceField.Method (halve FP));
          ("div_2exp_u64", InstanceField.Method (div_2exp_u64 FP));
          ("order", InstanceField.Method (order FP))
        ].
  End Impl_p3_field_field_Field_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_integers_QuotientMap_where_p3_monty_31_data_traits_FieldParameters_FP_u32_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn from_int(int: u32) -> Self {
            Self::new(int)
        }
    *)
    Definition from_int (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "new",
              [],
              []
            |),
            [ M.read (| int |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn from_canonical_checked(int: u32) -> Option<Self> {
            (int < FP::PRIME).then(|| Self::new(int))
        }
    *)
    Definition from_canonical_checked
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
            M.get_associated_function (|
              Ty.path "bool",
              "then",
              [],
              [
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                Ty.function
                  [ Ty.tuple [] ]
                  (Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ])
              ]
            |),
            [
              M.call_closure (|
                Ty.path "bool",
                BinOp.lt,
                [
                  M.read (| int |);
                  M.read (|
                    get_constant (|
                      "p3_monty_31::data_traits::MontyParameters::PRIME",
                      Ty.path "u32"
                    |)
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [ Ty.tuple [] ]
                                (Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ])
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.call_closure (|
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ FP ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ FP ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [ M.read (| int |) ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        unsafe fn from_canonical_unchecked(int: u32) -> Self {
            Self::new(int)
        }
    *)
    Definition from_canonical_unchecked
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "new",
              [],
              []
            |),
            [ M.read (| int |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::integers::QuotientMap"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u32" ]
        (Self FP)
        (* Instance *)
        [
          ("from_int", InstanceField.Method (from_int FP));
          ("from_canonical_checked", InstanceField.Method (from_canonical_checked FP));
          ("from_canonical_unchecked", InstanceField.Method (from_canonical_unchecked FP))
        ].
  End Impl_p3_field_integers_QuotientMap_where_p3_monty_31_data_traits_FieldParameters_FP_u32_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_integers_QuotientMap_where_p3_monty_31_data_traits_FieldParameters_FP_i32_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn from_int(int: i32) -> Self {
            Self::new_monty(to_monty_signed::<FP>(int))
        }
    *)
    Definition from_int (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "new_monty",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_function (| "p3_monty_31::utils::to_monty_signed", [], [ FP ] |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn from_canonical_checked(int: i32) -> Option<Self> {
            let bound = (FP::PRIME >> 1) as i32;
            if int <= bound {
                (int >= (-bound)).then(|| Self::new_monty(to_monty_signed::<FP>(int)))
            } else {
                None
            }
        }
    *)
    Definition from_canonical_checked
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.read (|
            let~ bound : Ty.apply (Ty.path "*") [] [ Ty.path "i32" ] :=
              M.alloc (|
                M.cast
                  (Ty.path "i32")
                  (M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.shr,
                    [
                      M.read (|
                        get_constant (|
                          "p3_monty_31::data_traits::MontyParameters::PRIME",
                          Ty.path "u32"
                        |)
                      |);
                      Value.Integer IntegerKind.I32 1
                    ]
                  |))
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.le,
                            [ M.read (| int |); M.read (| bound |) ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                        M.get_associated_function (|
                          Ty.path "bool",
                          "then",
                          [],
                          [
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                            Ty.function
                              [ Ty.tuple [] ]
                              (Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.ge,
                            [ M.read (| int |); UnOp.neg (| M.read (| bound |) |) ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.function
                                            [ Ty.tuple [] ]
                                            (Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ FP ])
                                        ],
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.call_closure (|
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ FP ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ FP ],
                                                "new_monty",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  M.get_function (|
                                                    "p3_monty_31::utils::to_monty_signed",
                                                    [],
                                                    [ FP ]
                                                  |),
                                                  [ M.read (| int |) ]
                                                |)
                                              ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        unsafe fn from_canonical_unchecked(int: i32) -> Self {
            Self::new_monty(to_monty_signed::<FP>(int))
        }
    *)
    Definition from_canonical_unchecked
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "new_monty",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_function (| "p3_monty_31::utils::to_monty_signed", [], [ FP ] |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::integers::QuotientMap"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i32" ]
        (Self FP)
        (* Instance *)
        [
          ("from_int", InstanceField.Method (from_int FP));
          ("from_canonical_checked", InstanceField.Method (from_canonical_checked FP));
          ("from_canonical_unchecked", InstanceField.Method (from_canonical_unchecked FP))
        ].
  End Impl_p3_field_integers_QuotientMap_where_p3_monty_31_data_traits_FieldParameters_FP_i32_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_integers_QuotientMap_where_p3_monty_31_data_traits_FieldParameters_FP_u64_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn from_int(int: u64) -> Self {
            Self::new_monty(to_monty_64::<FP>(int))
        }
    *)
    Definition from_int (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "new_monty",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_function (| "p3_monty_31::utils::to_monty_64", [], [ FP ] |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn from_canonical_checked(int: u64) -> Option<Self> {
            (int < FP::PRIME as u64).then(|| Self::new(int as u32))
        }
    *)
    Definition from_canonical_checked
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
            M.get_associated_function (|
              Ty.path "bool",
              "then",
              [],
              [
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                Ty.function
                  [ Ty.tuple [] ]
                  (Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ])
              ]
            |),
            [
              M.call_closure (|
                Ty.path "bool",
                BinOp.lt,
                [
                  M.read (| int |);
                  M.cast
                    (Ty.path "u64")
                    (M.read (|
                      get_constant (|
                        "p3_monty_31::data_traits::MontyParameters::PRIME",
                        Ty.path "u32"
                      |)
                    |))
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [ Ty.tuple [] ]
                                (Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ])
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.call_closure (|
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ FP ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ FP ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [ M.cast (Ty.path "u32") (M.read (| int |)) ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        unsafe fn from_canonical_unchecked(int: u64) -> Self {
            Self::new_monty(to_monty_64::<FP>(int))
        }
    *)
    Definition from_canonical_unchecked
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "new_monty",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_function (| "p3_monty_31::utils::to_monty_64", [], [ FP ] |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::integers::QuotientMap"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u64" ]
        (Self FP)
        (* Instance *)
        [
          ("from_int", InstanceField.Method (from_int FP));
          ("from_canonical_checked", InstanceField.Method (from_canonical_checked FP));
          ("from_canonical_unchecked", InstanceField.Method (from_canonical_unchecked FP))
        ].
  End Impl_p3_field_integers_QuotientMap_where_p3_monty_31_data_traits_FieldParameters_FP_u64_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_integers_QuotientMap_where_p3_monty_31_data_traits_FieldParameters_FP_i64_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn from_int(int: i64) -> Self {
            Self::new_monty(to_monty_64_signed::<FP>(int))
        }
    *)
    Definition from_int (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "new_monty",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_function (| "p3_monty_31::utils::to_monty_64_signed", [], [ FP ] |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn from_canonical_checked(int: i64) -> Option<Self> {
            let bound = (FP::PRIME >> 1) as i64;
            if int <= bound {
                (int >= (-bound)).then(|| Self::new_monty(to_monty_signed::<FP>(int as i32)))
            } else {
                None
            }
        }
    *)
    Definition from_canonical_checked
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.read (|
            let~ bound : Ty.apply (Ty.path "*") [] [ Ty.path "i64" ] :=
              M.alloc (|
                M.cast
                  (Ty.path "i64")
                  (M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.shr,
                    [
                      M.read (|
                        get_constant (|
                          "p3_monty_31::data_traits::MontyParameters::PRIME",
                          Ty.path "u32"
                        |)
                      |);
                      Value.Integer IntegerKind.I32 1
                    ]
                  |))
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.le,
                            [ M.read (| int |); M.read (| bound |) ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                        M.get_associated_function (|
                          Ty.path "bool",
                          "then",
                          [],
                          [
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                            Ty.function
                              [ Ty.tuple [] ]
                              (Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.ge,
                            [ M.read (| int |); UnOp.neg (| M.read (| bound |) |) ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.function
                                            [ Ty.tuple [] ]
                                            (Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ FP ])
                                        ],
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.call_closure (|
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ FP ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ FP ],
                                                "new_monty",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  M.get_function (|
                                                    "p3_monty_31::utils::to_monty_signed",
                                                    [],
                                                    [ FP ]
                                                  |),
                                                  [ M.cast (Ty.path "i32") (M.read (| int |)) ]
                                                |)
                                              ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        unsafe fn from_canonical_unchecked(int: i64) -> Self {
            Self::new_monty(to_monty_64_signed::<FP>(int))
        }
    *)
    Definition from_canonical_unchecked
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "new_monty",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_function (| "p3_monty_31::utils::to_monty_64_signed", [], [ FP ] |),
                [ M.read (| int |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::integers::QuotientMap"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i64" ]
        (Self FP)
        (* Instance *)
        [
          ("from_int", InstanceField.Method (from_int FP));
          ("from_canonical_checked", InstanceField.Method (from_canonical_checked FP));
          ("from_canonical_unchecked", InstanceField.Method (from_canonical_unchecked FP))
        ].
  End Impl_p3_field_integers_QuotientMap_where_p3_monty_31_data_traits_FieldParameters_FP_i64_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_integers_QuotientMap_where_p3_monty_31_data_traits_FieldParameters_FP_u128_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn from_int(int: u128) -> Self {
            Self::new_monty(to_monty::<FP>((int % (FP::PRIME as u128)) as u32))
        }
    *)
    Definition from_int (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "new_monty",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_function (| "p3_monty_31::utils::to_monty", [], [ FP ] |),
                [
                  M.cast
                    (Ty.path "u32")
                    (M.call_closure (|
                      Ty.path "u128",
                      BinOp.Wrap.rem,
                      [
                        M.read (| int |);
                        M.cast
                          (Ty.path "u128")
                          (M.read (|
                            get_constant (|
                              "p3_monty_31::data_traits::MontyParameters::PRIME",
                              Ty.path "u32"
                            |)
                          |))
                      ]
                    |))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn from_canonical_checked(int: u128) -> Option<Self> {
            (int < FP::PRIME as u128).then(|| Self::new(int as u32))
        }
    *)
    Definition from_canonical_checked
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
            M.get_associated_function (|
              Ty.path "bool",
              "then",
              [],
              [
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                Ty.function
                  [ Ty.tuple [] ]
                  (Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ])
              ]
            |),
            [
              M.call_closure (|
                Ty.path "bool",
                BinOp.lt,
                [
                  M.read (| int |);
                  M.cast
                    (Ty.path "u128")
                    (M.read (|
                      get_constant (|
                        "p3_monty_31::data_traits::MontyParameters::PRIME",
                        Ty.path "u32"
                      |)
                    |))
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [ Ty.tuple [] ]
                                (Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ])
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.call_closure (|
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ FP ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ FP ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [ M.cast (Ty.path "u32") (M.read (| int |)) ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        unsafe fn from_canonical_unchecked(int: u128) -> Self {
            Self::new_monty(to_monty_64::<FP>(int as u64))
        }
    *)
    Definition from_canonical_unchecked
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "new_monty",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_function (| "p3_monty_31::utils::to_monty_64", [], [ FP ] |),
                [ M.cast (Ty.path "u64") (M.read (| int |)) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::integers::QuotientMap"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u128" ]
        (Self FP)
        (* Instance *)
        [
          ("from_int", InstanceField.Method (from_int FP));
          ("from_canonical_checked", InstanceField.Method (from_canonical_checked FP));
          ("from_canonical_unchecked", InstanceField.Method (from_canonical_unchecked FP))
        ].
  End Impl_p3_field_integers_QuotientMap_where_p3_monty_31_data_traits_FieldParameters_FP_u128_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_integers_QuotientMap_where_p3_monty_31_data_traits_FieldParameters_FP_i128_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn from_int(int: i128) -> Self {
            Self::new_monty(to_monty_signed::<FP>((int % (FP::PRIME as i128)) as i32))
        }
    *)
    Definition from_int (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "new_monty",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_function (| "p3_monty_31::utils::to_monty_signed", [], [ FP ] |),
                [
                  M.cast
                    (Ty.path "i32")
                    (M.call_closure (|
                      Ty.path "i128",
                      BinOp.Wrap.rem,
                      [
                        M.read (| int |);
                        M.cast
                          (Ty.path "i128")
                          (M.read (|
                            get_constant (|
                              "p3_monty_31::data_traits::MontyParameters::PRIME",
                              Ty.path "u32"
                            |)
                          |))
                      ]
                    |))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn from_canonical_checked(int: i128) -> Option<Self> {
            let bound = (FP::PRIME >> 1) as i128;
            if int <= bound {
                (int >= (-bound)).then(|| Self::new_monty(to_monty_signed::<FP>(int as i32)))
            } else {
                None
            }
        }
    *)
    Definition from_canonical_checked
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.read (|
            let~ bound : Ty.apply (Ty.path "*") [] [ Ty.path "i128" ] :=
              M.alloc (|
                M.cast
                  (Ty.path "i128")
                  (M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.shr,
                    [
                      M.read (|
                        get_constant (|
                          "p3_monty_31::data_traits::MontyParameters::PRIME",
                          Ty.path "u32"
                        |)
                      |);
                      Value.Integer IntegerKind.I32 1
                    ]
                  |))
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.le,
                            [ M.read (| int |); M.read (| bound |) ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                        M.get_associated_function (|
                          Ty.path "bool",
                          "then",
                          [],
                          [
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                            Ty.function
                              [ Ty.tuple [] ]
                              (Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.ge,
                            [ M.read (| int |); UnOp.neg (| M.read (| bound |) |) ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.function
                                            [ Ty.tuple [] ]
                                            (Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ FP ])
                                        ],
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.call_closure (|
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ FP ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ FP ],
                                                "new_monty",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  M.get_function (|
                                                    "p3_monty_31::utils::to_monty_signed",
                                                    [],
                                                    [ FP ]
                                                  |),
                                                  [ M.cast (Ty.path "i32") (M.read (| int |)) ]
                                                |)
                                              ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        unsafe fn from_canonical_unchecked(int: i128) -> Self {
            Self::new_monty(to_monty_64_signed::<FP>(int as i64))
        }
    *)
    Definition from_canonical_unchecked
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ int ] =>
        ltac:(M.monadic
          (let int := M.alloc (| int |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "new_monty",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_function (| "p3_monty_31::utils::to_monty_64_signed", [], [ FP ] |),
                [ M.cast (Ty.path "i64") (M.read (| int |)) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::integers::QuotientMap"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i128" ]
        (Self FP)
        (* Instance *)
        [
          ("from_int", InstanceField.Method (from_int FP));
          ("from_canonical_checked", InstanceField.Method (from_canonical_checked FP));
          ("from_canonical_unchecked", InstanceField.Method (from_canonical_unchecked FP))
        ].
  End Impl_p3_field_integers_QuotientMap_where_p3_monty_31_data_traits_FieldParameters_FP_i128_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_field_PrimeField_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn as_canonical_biguint(&self) -> BigUint {
            <Self as PrimeField32>::as_canonical_u32(self).into()
        }
    *)
    Definition as_canonical_biguint
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "num_bigint::biguint::BigUint",
            M.get_trait_method (|
              "core::convert::Into",
              Ty.path "u32",
              [],
              [ Ty.path "num_bigint::biguint::BigUint" ],
              "into",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_trait_method (|
                  "p3_field::field::PrimeField32",
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                  [],
                  [],
                  "as_canonical_u32",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::field::PrimeField"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self FP)
        (* Instance *) [ ("as_canonical_biguint", InstanceField.Method (as_canonical_biguint FP)) ].
  End Impl_p3_field_field_PrimeField_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_field_PrimeField64_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*     const ORDER_U64: u64 = FP::PRIME as u64; *)
    (* Ty.path "u64" *)
    Definition value_ORDER_U64
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      ltac:(M.monadic
        (M.alloc (|
          M.cast
            (Ty.path "u64")
            (M.read (|
              get_constant (| "p3_monty_31::data_traits::MontyParameters::PRIME", Ty.path "u32" |)
            |))
        |))).
    
    (*
        fn as_canonical_u64(&self) -> u64 {
            self.as_canonical_u32().into()
        }
    *)
    Definition as_canonical_u64
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "u64",
            M.get_trait_method (|
              "core::convert::Into",
              Ty.path "u32",
              [],
              [ Ty.path "u64" ],
              "into",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "u32",
                M.get_trait_method (|
                  "p3_field::field::PrimeField32",
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                  [],
                  [],
                  "as_canonical_u32",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn to_unique_u64(&self) -> u64 {
            // The internal representation is already a unique u32 for each field element.
            // It's fine to hash things in monty form.
            self.value as u64
        }
    *)
    Definition to_unique_u64
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.cast
            (Ty.path "u64")
            (M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "p3_monty_31::monty_31::MontyField31",
                "value"
              |)
            |))))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::field::PrimeField64"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self FP)
        (* Instance *)
        [
          ("value_ORDER_U64", InstanceField.Method (value_ORDER_U64 FP));
          ("as_canonical_u64", InstanceField.Method (as_canonical_u64 FP));
          ("to_unique_u64", InstanceField.Method (to_unique_u64 FP))
        ].
  End Impl_p3_field_field_PrimeField64_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_field_PrimeField32_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*     const ORDER_U32: u32 = FP::PRIME; *)
    (* Ty.path "u32" *)
    Definition value_ORDER_U32
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      ltac:(M.monadic
        (get_constant (| "p3_monty_31::data_traits::MontyParameters::PRIME", Ty.path "u32" |))).
    
    (*
        fn as_canonical_u32(&self) -> u32 {
            Self::to_u32(self)
        }
    *)
    Definition as_canonical_u32
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "u32",
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              "to_u32",
              [],
              []
            |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn to_unique_u32(&self) -> u32 {
            // The internal representation is already a unique u32 for each field element.
            // It's fine to hash things in monty form.
            self.value
        }
    *)
    Definition to_unique_u32
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| self |) |),
              "p3_monty_31::monty_31::MontyField31",
              "value"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::field::PrimeField32"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self FP)
        (* Instance *)
        [
          ("value_ORDER_U32", InstanceField.Method (value_ORDER_U32 FP));
          ("as_canonical_u32", InstanceField.Method (as_canonical_u32 FP));
          ("to_unique_u32", InstanceField.Method (to_unique_u32 FP))
        ].
  End Impl_p3_field_field_PrimeField32_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_p3_field_field_TwoAdicField_where_p3_monty_31_data_traits_FieldParameters_FP_where_p3_monty_31_data_traits_TwoAdicData_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*     const TWO_ADICITY: usize = FP::TWO_ADICITY; *)
    (* Ty.path "usize" *)
    Definition value_TWO_ADICITY
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      ltac:(M.monadic
        (get_constant (| "p3_monty_31::data_traits::TwoAdicData::TWO_ADICITY", Ty.path "usize" |))).
    
    (*
        fn two_adic_generator(bits: usize) -> Self {
            assert!(bits <= Self::TWO_ADICITY);
            FP::TWO_ADIC_GENERATORS.as_ref()[bits]
        }
    *)
    Definition two_adic_generator
        (FP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ bits ] =>
        ltac:(M.monadic
          (let bits := M.alloc (| bits |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.le,
                                [
                                  M.read (| bits |);
                                  M.read (|
                                    get_constant (|
                                      "p3_field::field::TwoAdicField::TWO_ADICITY",
                                      Ty.path "usize"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: bits <= Self::TWO_ADICITY" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.SubPointer.get_array_field (|
              M.deref (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                    ],
                  M.get_trait_method (|
                    "core::convert::AsRef",
                    Ty.associated_in_trait
                      "p3_monty_31::data_traits::TwoAdicData"
                      []
                      []
                      FP
                      "ArrayLike",
                    [],
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                    ],
                    "as_ref",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      get_constant (|
                        "p3_monty_31::data_traits::TwoAdicData::TWO_ADIC_GENERATORS",
                        Ty.associated_in_trait
                          "p3_monty_31::data_traits::TwoAdicData"
                          []
                          []
                          FP
                          "ArrayLike"
                      |)
                    |)
                  ]
                |)
              |),
              M.read (| bits |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "p3_field::field::TwoAdicField"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self FP)
        (* Instance *)
        [
          ("value_TWO_ADICITY", InstanceField.Method (value_TWO_ADICITY FP));
          ("two_adic_generator", InstanceField.Method (two_adic_generator FP))
        ].
  End Impl_p3_field_field_TwoAdicField_where_p3_monty_31_data_traits_FieldParameters_FP_where_p3_monty_31_data_traits_TwoAdicData_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_core_ops_arith_Add_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*     type Output = Self; *)
    Definition _Output (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn add(self, rhs: Self) -> Self {
            let mut sum = self.value + rhs.value;
            let (corr_sum, over) = sum.overflowing_sub(FP::PRIME);
            if !over {
                sum = corr_sum;
            }
            Self::new_monty(sum)
        }
    *)
    Definition add (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ sum : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.add,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "p3_monty_31::monty_31::MontyField31",
                        "value"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        rhs,
                        "p3_monty_31::monty_31::MontyField31",
                        "value"
                      |)
                    |)
                  ]
                |)
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.path "u32"; Ty.path "bool" ],
                  M.get_associated_function (| Ty.path "u32", "overflowing_sub", [], [] |),
                  [
                    M.read (| sum |);
                    M.read (|
                      get_constant (|
                        "p3_monty_31::data_traits::MontyParameters::PRIME",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let corr_sum := M.copy (| γ0_0 |) in
                    let over := M.copy (| γ0_1 |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| UnOp.not (| M.read (| over |) |) |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (| M.write (| sum, M.read (| corr_sum |) |) |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          "new_monty",
                          [],
                          []
                        |),
                        [ M.read (| sum |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Add"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP)
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output FP)); ("add", InstanceField.Method (add FP)) ].
  End Impl_core_ops_arith_Add_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_core_ops_arith_AddAssign_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn add_assign(&mut self, rhs: Self) {
            *self = *self + rhs;
        }
    *)
    Definition add_assign (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                      [],
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                      "add",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::AddAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP)
        (* Instance *) [ ("add_assign", InstanceField.Method (add_assign FP)) ].
  End Impl_core_ops_arith_AddAssign_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_core_iter_traits_accum_Sum_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn sum<I: Iterator<Item = Self>>(iter: I) -> Self {
            // This is faster than iter.reduce(|x, y| x + y).unwrap_or(Self::ZERO) for iterators of length > 2.
            // There might be a faster reduction method possible for lengths <= 16 which avoids %.
    
            // This sum will not overflow so long as iter.len() < 2^33.
            let sum = iter.map(|x| x.value as u64).sum::<u64>();
            Self::new_monty((sum % FP::PRIME as u64) as u32)
        }
    *)
    Definition sum (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [ _ as I ], [ iter ] =>
        ltac:(M.monadic
          (let iter := M.alloc (| iter |) in
          M.read (|
            let~ sum : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u64",
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        I;
                        Ty.function
                          [
                            Ty.tuple
                              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
                          ]
                          (Ty.path "u64")
                      ],
                    [],
                    [],
                    "sum",
                    [],
                    [ Ty.path "u64" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          I;
                          Ty.function
                            [
                              Ty.tuple
                                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                                ]
                            ]
                            (Ty.path "u64")
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        I,
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.path "u64";
                          Ty.function
                            [
                              Ty.tuple
                                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                                ]
                            ]
                            (Ty.path "u64")
                        ]
                      |),
                      [
                        M.read (| iter |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ FP ]
                                              ]
                                          ]
                                          (Ty.path "u64")
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let x := M.copy (| γ |) in
                                          M.cast
                                            (Ty.path "u64")
                                            (M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                x,
                                                "p3_monty_31::monty_31::MontyField31",
                                                "value"
                                              |)
                                            |))))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                  "new_monty",
                  [],
                  []
                |),
                [
                  M.cast
                    (Ty.path "u32")
                    (M.call_closure (|
                      Ty.path "u64",
                      BinOp.Wrap.rem,
                      [
                        M.read (| sum |);
                        M.cast
                          (Ty.path "u64")
                          (M.read (|
                            get_constant (|
                              "p3_monty_31::data_traits::MontyParameters::PRIME",
                              Ty.path "u32"
                            |)
                          |))
                      ]
                    |))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "core::iter::traits::accum::Sum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP)
        (* Instance *) [ ("sum", InstanceField.Method (sum FP)) ].
  End Impl_core_iter_traits_accum_Sum_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_core_ops_arith_Sub_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*     type Output = Self; *)
    Definition _Output (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn sub(self, rhs: Self) -> Self {
            let (mut diff, over) = self.value.overflowing_sub(rhs.value);
            let corr = if over { FP::PRIME } else { 0 };
            diff = diff.wrapping_add(corr);
            Self::new_monty(diff)
        }
    *)
    Definition sub (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.path "u32"; Ty.path "bool" ],
                  M.get_associated_function (| Ty.path "u32", "overflowing_sub", [], [] |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "p3_monty_31::monty_31::MontyField31",
                        "value"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        rhs,
                        "p3_monty_31::monty_31::MontyField31",
                        "value"
                      |)
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let diff := M.copy (| γ0_0 |) in
                    let over := M.copy (| γ0_1 |) in
                    let~ corr : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                      M.copy (|
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.path "u32" ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use over in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                get_constant (|
                                  "p3_monty_31::data_traits::MontyParameters::PRIME",
                                  Ty.path "u32"
                                |)));
                            fun γ =>
                              ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U32 0 |)))
                          ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.write (|
                          diff,
                          M.call_closure (|
                            Ty.path "u32",
                            M.get_associated_function (| Ty.path "u32", "wrapping_add", [], [] |),
                            [ M.read (| diff |); M.read (| corr |) ]
                          |)
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                          "new_monty",
                          [],
                          []
                        |),
                        [ M.read (| diff |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Sub"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP)
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output FP)); ("sub", InstanceField.Method (sub FP)) ].
  End Impl_core_ops_arith_Sub_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_core_ops_arith_SubAssign_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn sub_assign(&mut self, rhs: Self) {
            *self = *self - rhs;
        }
    *)
    Definition sub_assign (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                    M.get_trait_method (|
                      "core::ops::arith::Sub",
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                      [],
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                      "sub",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::SubAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP)
        (* Instance *) [ ("sub_assign", InstanceField.Method (sub_assign FP)) ].
  End Impl_core_ops_arith_SubAssign_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_core_ops_arith_Neg_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*     type Output = Self; *)
    Definition _Output (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn neg(self) -> Self::Output {
            Self::ZERO - self
        }
    *)
    Definition neg (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_trait_method (|
              "core::ops::arith::Sub",
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              [],
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
              "sub",
              [],
              []
            |),
            [
              M.read (|
                get_constant (|
                  "p3_field::field::PrimeCharacteristicRing::ZERO",
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                |)
              |);
              M.read (| self |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Neg"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self FP)
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output FP)); ("neg", InstanceField.Method (neg FP)) ].
  End Impl_core_ops_arith_Neg_where_p3_monty_31_data_traits_FieldParameters_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_core_ops_arith_Mul_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*     type Output = Self; *)
    Definition _Output (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn mul(self, rhs: Self) -> Self {
            let long_prod = self.value as u64 * rhs.value as u64;
            Self::new_monty(monty_reduce::<FP>(long_prod))
        }
    *)
    Definition mul (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ long_prod : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u64",
                  BinOp.Wrap.mul,
                  [
                    M.cast
                      (Ty.path "u64")
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "p3_monty_31::monty_31::MontyField31",
                          "value"
                        |)
                      |));
                    M.cast
                      (Ty.path "u64")
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          rhs,
                          "p3_monty_31::monty_31::MontyField31",
                          "value"
                        |)
                      |))
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                  "new_monty",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.path "u32",
                    M.get_function (| "p3_monty_31::utils::monty_reduce", [], [ FP ] |),
                    [ M.read (| long_prod |) ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Mul"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP)
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output FP)); ("mul", InstanceField.Method (mul FP)) ].
  End Impl_core_ops_arith_Mul_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_core_ops_arith_MulAssign_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn mul_assign(&mut self, rhs: Self) {
            *self = *self * rhs;
        }
    *)
    Definition mul_assign (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                    M.get_trait_method (|
                      "core::ops::arith::Mul",
                      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                      [],
                      [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                      "mul",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::MulAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP)
        (* Instance *) [ ("mul_assign", InstanceField.Method (mul_assign FP)) ].
  End Impl_core_ops_arith_MulAssign_where_p3_monty_31_data_traits_MontyParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_core_iter_traits_accum_Product_where_p3_monty_31_data_traits_FieldParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn product<I: Iterator<Item = Self>>(iter: I) -> Self {
            iter.reduce(|x, y| x * y).unwrap_or(Self::ONE)
        }
    *)
    Definition product (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [ _ as I ], [ iter ] =>
        ltac:(M.monadic
          (let iter := M.alloc (| iter |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
              "unwrap_or",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  I,
                  [],
                  [],
                  "reduce",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ];
                            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                          ]
                      ]
                      (Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ])
                  ]
                |),
                [
                  M.read (| iter |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0; α1 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ FP ];
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ FP ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ FP ])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ FP ];
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ FP ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [ FP ])
                                        ],
                                      M.alloc (| α1 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let y := M.copy (| γ |) in
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [ FP ],
                                              M.get_trait_method (|
                                                "core::ops::arith::Mul",
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [ FP ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [ FP ]
                                                ],
                                                "mul",
                                                [],
                                                []
                                              |),
                                              [ M.read (| x |); M.read (| y |) ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |);
              M.read (|
                get_constant (|
                  "p3_field::field::PrimeCharacteristicRing::ONE",
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ]
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "core::iter::traits::accum::Product"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP)
        (* Instance *) [ ("product", InstanceField.Method (product FP)) ].
  End Impl_core_iter_traits_accum_Product_where_p3_monty_31_data_traits_FieldParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
  
  Module Impl_core_ops_arith_Div_where_p3_monty_31_data_traits_FieldParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
    Definition Self (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*     type Output = Self; *)
    Definition _Output (FP : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ].
    
    (*
        fn div(self, rhs: Self) -> Self {
            self * rhs.inverse()
        }
    *)
    Definition div (FP : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self FP in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
            M.get_trait_method (|
              "core::ops::arith::Mul",
              Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
              [],
              [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ],
              "mul",
              [],
              []
            |),
            [
              M.read (| self |);
              M.call_closure (|
                Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                M.get_trait_method (|
                  "p3_field::field::Field",
                  Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ],
                  [],
                  [],
                  "inverse",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (FP : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Div"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_monty_31::monty_31::MontyField31") [] [ FP ] ]
        (Self FP)
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output FP)); ("div", InstanceField.Method (div FP)) ].
  End Impl_core_ops_arith_Div_where_p3_monty_31_data_traits_FieldParameters_FP_p3_monty_31_monty_31_MontyField31_FP_for_p3_monty_31_monty_31_MontyField31_FP.
End monty_31.
