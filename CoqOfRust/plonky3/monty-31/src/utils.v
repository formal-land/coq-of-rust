(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module utils.
  (*
  pub(crate) const fn to_monty<MP: MontyParameters>(x: u32) -> u32 {
      (((x as u64) << MP::MONTY_BITS) % MP::PRIME as u64) as u32
  }
  *)
  Definition to_monty (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ MP ], [ x ] =>
      ltac:(M.monadic
        (let x := M.alloc (| x |) in
        M.cast
          (Ty.path "u32")
          (M.call_closure (|
            Ty.path "u64",
            BinOp.Wrap.rem,
            [
              M.call_closure (|
                Ty.path "u64",
                BinOp.Wrap.shl,
                [
                  M.cast (Ty.path "u64") (M.read (| x |));
                  M.read (|
                    get_constant (|
                      "p3_monty_31::data_traits::MontyParameters::MONTY_BITS",
                      Ty.path "u32"
                    |)
                  |)
                ]
              |);
              M.cast
                (Ty.path "u64")
                (M.read (|
                  get_constant (|
                    "p3_monty_31::data_traits::MontyParameters::PRIME",
                    Ty.path "u32"
                  |)
                |))
            ]
          |))))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_to_monty :
    M.IsFunction.C "p3_monty_31::utils::to_monty" to_monty.
  Admitted.
  Global Typeclasses Opaque to_monty.
  
  (*
  pub(crate) const fn to_monty_signed<MP: MontyParameters>(x: i32) -> u32 {
      let red = (((x as i64) << MP::MONTY_BITS) % MP::PRIME as i64) as i32;
      if red >= 0 {
          red as u32
      } else {
          MP::PRIME.wrapping_add_signed(red)
      }
  }
  *)
  Definition to_monty_signed (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ MP ], [ x ] =>
      ltac:(M.monadic
        (let x := M.alloc (| x |) in
        M.read (|
          let~ red : Ty.apply (Ty.path "*") [] [ Ty.path "i32" ] :=
            M.alloc (|
              M.cast
                (Ty.path "i32")
                (M.call_closure (|
                  Ty.path "i64",
                  BinOp.Wrap.rem,
                  [
                    M.call_closure (|
                      Ty.path "i64",
                      BinOp.Wrap.shl,
                      [
                        M.cast (Ty.path "i64") (M.read (| x |));
                        M.read (|
                          get_constant (|
                            "p3_monty_31::data_traits::MontyParameters::MONTY_BITS",
                            Ty.path "u32"
                          |)
                        |)
                      ]
                    |);
                    M.cast
                      (Ty.path "i64")
                      (M.read (|
                        get_constant (|
                          "p3_monty_31::data_traits::MontyParameters::PRIME",
                          Ty.path "u32"
                        |)
                      |))
                  ]
                |))
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "*") [] [ Ty.path "u32" ],
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        M.call_closure (|
                          Ty.path "bool",
                          BinOp.ge,
                          [ M.read (| red |); Value.Integer IntegerKind.I32 0 ]
                        |)
                      |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (| M.cast (Ty.path "u32") (M.read (| red |)) |)));
              fun γ =>
                ltac:(M.monadic
                  (M.alloc (|
                    M.call_closure (|
                      Ty.path "u32",
                      M.get_associated_function (| Ty.path "u32", "wrapping_add_signed", [], [] |),
                      [
                        M.read (|
                          get_constant (|
                            "p3_monty_31::data_traits::MontyParameters::PRIME",
                            Ty.path "u32"
                          |)
                        |);
                        M.read (| red |)
                      ]
                    |)
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_to_monty_signed :
    M.IsFunction.C "p3_monty_31::utils::to_monty_signed" to_monty_signed.
  Admitted.
  Global Typeclasses Opaque to_monty_signed.
  
  (*
  pub(crate) const fn to_monty_64<MP: MontyParameters>(x: u64) -> u32 {
      (((x as u128) << MP::MONTY_BITS) % MP::PRIME as u128) as u32
  }
  *)
  Definition to_monty_64 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ MP ], [ x ] =>
      ltac:(M.monadic
        (let x := M.alloc (| x |) in
        M.cast
          (Ty.path "u32")
          (M.call_closure (|
            Ty.path "u128",
            BinOp.Wrap.rem,
            [
              M.call_closure (|
                Ty.path "u128",
                BinOp.Wrap.shl,
                [
                  M.cast (Ty.path "u128") (M.read (| x |));
                  M.read (|
                    get_constant (|
                      "p3_monty_31::data_traits::MontyParameters::MONTY_BITS",
                      Ty.path "u32"
                    |)
                  |)
                ]
              |);
              M.cast
                (Ty.path "u128")
                (M.read (|
                  get_constant (|
                    "p3_monty_31::data_traits::MontyParameters::PRIME",
                    Ty.path "u32"
                  |)
                |))
            ]
          |))))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_to_monty_64 :
    M.IsFunction.C "p3_monty_31::utils::to_monty_64" to_monty_64.
  Admitted.
  Global Typeclasses Opaque to_monty_64.
  
  (*
  pub(crate) const fn to_monty_64_signed<MP: MontyParameters>(x: i64) -> u32 {
      let red = (((x as i128) << MP::MONTY_BITS) % MP::PRIME as i128) as i32;
      if red >= 0 {
          red as u32
      } else {
          MP::PRIME.wrapping_add_signed(red)
      }
  }
  *)
  Definition to_monty_64_signed (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ MP ], [ x ] =>
      ltac:(M.monadic
        (let x := M.alloc (| x |) in
        M.read (|
          let~ red : Ty.apply (Ty.path "*") [] [ Ty.path "i32" ] :=
            M.alloc (|
              M.cast
                (Ty.path "i32")
                (M.call_closure (|
                  Ty.path "i128",
                  BinOp.Wrap.rem,
                  [
                    M.call_closure (|
                      Ty.path "i128",
                      BinOp.Wrap.shl,
                      [
                        M.cast (Ty.path "i128") (M.read (| x |));
                        M.read (|
                          get_constant (|
                            "p3_monty_31::data_traits::MontyParameters::MONTY_BITS",
                            Ty.path "u32"
                          |)
                        |)
                      ]
                    |);
                    M.cast
                      (Ty.path "i128")
                      (M.read (|
                        get_constant (|
                          "p3_monty_31::data_traits::MontyParameters::PRIME",
                          Ty.path "u32"
                        |)
                      |))
                  ]
                |))
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "*") [] [ Ty.path "u32" ],
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        M.call_closure (|
                          Ty.path "bool",
                          BinOp.ge,
                          [ M.read (| red |); Value.Integer IntegerKind.I32 0 ]
                        |)
                      |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (| M.cast (Ty.path "u32") (M.read (| red |)) |)));
              fun γ =>
                ltac:(M.monadic
                  (M.alloc (|
                    M.call_closure (|
                      Ty.path "u32",
                      M.get_associated_function (| Ty.path "u32", "wrapping_add_signed", [], [] |),
                      [
                        M.read (|
                          get_constant (|
                            "p3_monty_31::data_traits::MontyParameters::PRIME",
                            Ty.path "u32"
                          |)
                        |);
                        M.read (| red |)
                      ]
                    |)
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_to_monty_64_signed :
    M.IsFunction.C "p3_monty_31::utils::to_monty_64_signed" to_monty_64_signed.
  Admitted.
  Global Typeclasses Opaque to_monty_64_signed.
  
  (*
  pub(crate) const fn from_monty<MP: MontyParameters>(x: u32) -> u32 {
      monty_reduce::<MP>(x as u64)
  }
  *)
  Definition from_monty (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ MP ], [ x ] =>
      ltac:(M.monadic
        (let x := M.alloc (| x |) in
        M.call_closure (|
          Ty.path "u32",
          M.get_function (| "p3_monty_31::utils::monty_reduce", [], [ MP ] |),
          [ M.cast (Ty.path "u64") (M.read (| x |)) ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_from_monty :
    M.IsFunction.C "p3_monty_31::utils::from_monty" from_monty.
  Admitted.
  Global Typeclasses Opaque from_monty.
  
  (*
  pub(crate) const fn halve_u32<FP: FieldParameters>(input: u32) -> u32 {
      let shr = input >> 1;
      let lo_bit = input & 1;
      let shr_corr = shr + FP::HALF_P_PLUS_1;
      if lo_bit == 0 { shr } else { shr_corr }
  }
  *)
  Definition halve_u32 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FP ], [ input ] =>
      ltac:(M.monadic
        (let input := M.alloc (| input |) in
        M.read (|
          let~ shr : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "u32",
                BinOp.Wrap.shr,
                [ M.read (| input |); Value.Integer IntegerKind.I32 1 ]
              |)
            |) in
          let~ lo_bit : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "u32",
                BinOp.Wrap.bit_and,
                [ M.read (| input |); Value.Integer IntegerKind.U32 1 ]
              |)
            |) in
          let~ shr_corr : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "u32",
                BinOp.Wrap.add,
                [
                  M.read (| shr |);
                  M.read (|
                    get_constant (|
                      "p3_monty_31::data_traits::FieldParameters::HALF_P_PLUS_1",
                      Ty.path "u32"
                    |)
                  |)
                ]
              |)
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "*") [] [ Ty.path "u32" ],
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        M.call_closure (|
                          Ty.path "bool",
                          BinOp.eq,
                          [ M.read (| lo_bit |); Value.Integer IntegerKind.U32 0 ]
                        |)
                      |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  shr));
              fun γ => ltac:(M.monadic shr_corr)
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_halve_u32 :
    M.IsFunction.C "p3_monty_31::utils::halve_u32" halve_u32.
  Admitted.
  Global Typeclasses Opaque halve_u32.
  
  (*
  pub(crate) const fn monty_reduce<MP: MontyParameters>(x: u64) -> u32 {
      let t = x.wrapping_mul(MP::MONTY_MU as u64) & (MP::MONTY_MASK as u64);
      let u = t * (MP::PRIME as u64);
  
      let (x_sub_u, over) = x.overflowing_sub(u);
      let x_sub_u_hi = (x_sub_u >> MP::MONTY_BITS) as u32;
      let corr = if over { MP::PRIME } else { 0 };
      x_sub_u_hi.wrapping_add(corr)
  }
  *)
  Definition monty_reduce (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ MP ], [ x ] =>
      ltac:(M.monadic
        (let x := M.alloc (| x |) in
        M.read (|
          let~ t : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "u64",
                BinOp.Wrap.bit_and,
                [
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_associated_function (| Ty.path "u64", "wrapping_mul", [], [] |),
                    [
                      M.read (| x |);
                      M.cast
                        (Ty.path "u64")
                        (M.read (|
                          get_constant (|
                            "p3_monty_31::data_traits::MontyParameters::MONTY_MU",
                            Ty.path "u32"
                          |)
                        |))
                    ]
                  |);
                  M.cast
                    (Ty.path "u64")
                    (M.read (|
                      get_constant (|
                        "p3_monty_31::data_traits::MontyParameters::MONTY_MASK",
                        Ty.path "u32"
                      |)
                    |))
                ]
              |)
            |) in
          let~ u : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "u64",
                BinOp.Wrap.mul,
                [
                  M.read (| t |);
                  M.cast
                    (Ty.path "u64")
                    (M.read (|
                      get_constant (|
                        "p3_monty_31::data_traits::MontyParameters::PRIME",
                        Ty.path "u32"
                      |)
                    |))
                ]
              |)
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "*") [] [ Ty.path "u32" ],
            M.alloc (|
              M.call_closure (|
                Ty.tuple [ Ty.path "u64"; Ty.path "bool" ],
                M.get_associated_function (| Ty.path "u64", "overflowing_sub", [], [] |),
                [ M.read (| x |); M.read (| u |) ]
              |)
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                  let x_sub_u := M.copy (| γ0_0 |) in
                  let over := M.copy (| γ0_1 |) in
                  let~ x_sub_u_hi : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                    M.alloc (|
                      M.cast
                        (Ty.path "u32")
                        (M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.shr,
                          [
                            M.read (| x_sub_u |);
                            M.read (|
                              get_constant (|
                                "p3_monty_31::data_traits::MontyParameters::MONTY_BITS",
                                Ty.path "u32"
                              |)
                            |)
                          ]
                        |))
                    |) in
                  let~ corr : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                    M.copy (|
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.path "u32" ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use over in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              get_constant (|
                                "p3_monty_31::data_traits::MontyParameters::PRIME",
                                Ty.path "u32"
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U32 0 |)))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "u32",
                      M.get_associated_function (| Ty.path "u32", "wrapping_add", [], [] |),
                      [ M.read (| x_sub_u_hi |); M.read (| corr |) ]
                    |)
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_monty_reduce :
    M.IsFunction.C "p3_monty_31::utils::monty_reduce" monty_reduce.
  Admitted.
  Global Typeclasses Opaque monty_reduce.
End utils.
