(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module air.
  (* StructRecord
    {
      name := "Poseidon2Air";
      const_params :=
        [ "WIDTH"; "SBOX_DEGREE"; "SBOX_REGISTERS"; "HALF_FULL_ROUNDS"; "PARTIAL_ROUNDS" ];
      ty_params := [ "F"; "LinearLayers" ];
      fields :=
        [
          ("constants",
            Ty.apply
              (Ty.path "p3_poseidon2_air::constants::RoundConstants")
              [ WIDTH; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
              [ F ]);
          ("_phantom", Ty.apply (Ty.path "core::marker::PhantomData") [] [ LinearLayers ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_where_core_fmt_Debug_LinearLayers_for_p3_poseidon2_air_air_Poseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_F_LinearLayers.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F LinearLayers : Ty.t)
        : Ty.t :=
      Ty.apply
        (Ty.path "p3_poseidon2_air::air::Poseidon2Air")
        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
        [ F; LinearLayers ].
    
    (* Debug *)
    Definition fmt
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F LinearLayers : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS F LinearLayers in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Poseidon2Air" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "constants" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_poseidon2_air::air::Poseidon2Air",
                        "constants"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_phantom" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_poseidon2_air::air::Poseidon2Air",
                            "_phantom"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F LinearLayers : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS F LinearLayers)
        (* Instance *)
        [
          ("fmt",
            InstanceField.Method
              (fmt WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS F LinearLayers))
        ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_where_core_fmt_Debug_LinearLayers_for_p3_poseidon2_air_air_Poseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_F_LinearLayers.
  
  Module Impl_p3_poseidon2_air_air_Poseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_F_LinearLayers.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F LinearLayers : Ty.t)
        : Ty.t :=
      Ty.apply
        (Ty.path "p3_poseidon2_air::air::Poseidon2Air")
        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
        [ F; LinearLayers ].
    
    (*
        pub const fn new(
            constants: RoundConstants<F, WIDTH, HALF_FULL_ROUNDS, PARTIAL_ROUNDS>,
        ) -> Self {
            Self {
                constants,
                _phantom: PhantomData,
            }
        }
    *)
    Definition new
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F LinearLayers : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS F LinearLayers in
      match ε, τ, α with
      | [], [], [ constants ] =>
        ltac:(M.monadic
          (let constants := M.alloc (| constants |) in
          Value.StructRecord
            "p3_poseidon2_air::air::Poseidon2Air"
            [
              ("constants", M.read (| constants |));
              ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F LinearLayers : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS F LinearLayers)
        "new"
        (new WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS F LinearLayers).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn generate_trace_rows(
            &self,
            num_hashes: usize,
            extra_capacity_bits: usize,
        ) -> RowMajorMatrix<F>
        where
            F: PrimeField,
            LinearLayers: GenericPoseidon2LinearLayers<F, WIDTH>,
            StandardUniform: Distribution<[F; WIDTH]>,
        {
            let mut rng = SmallRng::seed_from_u64(1);
            let inputs = (0..num_hashes).map(|_| rng.random()).collect();
            generate_trace_rows::<
                _,
                LinearLayers,
                WIDTH,
                SBOX_DEGREE,
                SBOX_REGISTERS,
                HALF_FULL_ROUNDS,
                PARTIAL_ROUNDS,
            >(inputs, &self.constants, extra_capacity_bits)
        }
    *)
    Definition generate_trace_rows
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F LinearLayers : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS F LinearLayers in
      match ε, τ, α with
      | [], [], [ self; num_hashes; extra_capacity_bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let num_hashes := M.alloc (| num_hashes |) in
          let extra_capacity_bits := M.alloc (| extra_capacity_bits |) in
          M.read (|
            let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "rand::rngs::small::SmallRng",
                  M.get_trait_method (|
                    "rand_core::SeedableRng",
                    Ty.path "rand::rngs::small::SmallRng",
                    [],
                    [],
                    "seed_from_u64",
                    [],
                    []
                  |),
                  [ Value.Integer IntegerKind.U64 1 ]
                |)
              |) in
            let~ inputs :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ]; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ]; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.apply (Ty.path "array") [ WIDTH ] [ F ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ]; Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize" ] ]
                            (Ty.apply (Ty.path "array") [ WIDTH ] [ F ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.apply (Ty.path "array") [ WIDTH ] [ F ];
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize" ] ]
                            (Ty.apply (Ty.path "array") [ WIDTH ] [ F ])
                        ]
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_", M.read (| num_hashes |))
                          ];
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                          (Ty.apply (Ty.path "array") [ WIDTH ] [ F ])
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Ty.apply (Ty.path "array") [ WIDTH ] [ F ],
                                            M.get_trait_method (|
                                              "rand::rng::Rng",
                                              Ty.path "rand::rngs::small::SmallRng",
                                              [],
                                              [],
                                              "random",
                                              [],
                                              [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ] ]
                                            |),
                                            [ M.borrow (| Pointer.Kind.MutRef, rng |) ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_function (|
                  "p3_poseidon2_air::generation::generate_trace_rows",
                  [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ],
                  [ F; LinearLayers ]
                |),
                [
                  M.read (| inputs |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_poseidon2_air::air::Poseidon2Air",
                          "constants"
                        |)
                      |)
                    |)
                  |);
                  M.read (| extra_capacity_bits |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_generate_trace_rows :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F LinearLayers : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS F LinearLayers)
        "generate_trace_rows"
        (generate_trace_rows
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          F
          LinearLayers).
    Admitted.
    Global Typeclasses Opaque generate_trace_rows.
  End Impl_p3_poseidon2_air_air_Poseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_F_LinearLayers.
  
  Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_where_core_marker_Sync_LinearLayers_F_for_p3_poseidon2_air_air_Poseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_F_LinearLayers.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F LinearLayers : Ty.t)
        : Ty.t :=
      Ty.apply
        (Ty.path "p3_poseidon2_air::air::Poseidon2Air")
        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
        [ F; LinearLayers ].
    
    (*
        fn width(&self) -> usize {
            num_cols::<WIDTH, SBOX_DEGREE, SBOX_REGISTERS, HALF_FULL_ROUNDS, PARTIAL_ROUNDS>()
        }
    *)
    Definition width
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F LinearLayers : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS F LinearLayers in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_function (|
              "p3_poseidon2_air::columns::num_cols",
              [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ],
              []
            |),
            []
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F LinearLayers : Ty.t),
      M.IsTraitInstance
        "p3_air::air::BaseAir"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS F LinearLayers)
        (* Instance *)
        [
          ("width",
            InstanceField.Method
              (width
                WIDTH
                SBOX_DEGREE
                SBOX_REGISTERS
                HALF_FULL_ROUNDS
                PARTIAL_ROUNDS
                F
                LinearLayers))
        ].
  End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_where_core_marker_Sync_LinearLayers_F_for_p3_poseidon2_air_air_Poseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_F_LinearLayers.
  
  (*
  pub(crate) fn eval<
      AB: AirBuilder,
      LinearLayers: GenericPoseidon2LinearLayers<AB::Expr, WIDTH>,
      const WIDTH: usize,
      const SBOX_DEGREE: u64,
      const SBOX_REGISTERS: usize,
      const HALF_FULL_ROUNDS: usize,
      const PARTIAL_ROUNDS: usize,
  >(
      air: &Poseidon2Air<
          AB::F,
          LinearLayers,
          WIDTH,
          SBOX_DEGREE,
          SBOX_REGISTERS,
          HALF_FULL_ROUNDS,
          PARTIAL_ROUNDS,
      >,
      builder: &mut AB,
      local: &Poseidon2Cols<
          AB::Var,
          WIDTH,
          SBOX_DEGREE,
          SBOX_REGISTERS,
          HALF_FULL_ROUNDS,
          PARTIAL_ROUNDS,
      >,
  ) {
      let mut state: [_; WIDTH] = local.inputs.map(|x| x.into());
  
      LinearLayers::external_linear_layer(&mut state);
  
      for round in 0..HALF_FULL_ROUNDS {
          eval_full_round::<_, LinearLayers, WIDTH, SBOX_DEGREE, SBOX_REGISTERS>(
              &mut state,
              &local.beginning_full_rounds[round],
              &air.constants.beginning_full_round_constants[round],
              builder,
          );
      }
  
      for round in 0..PARTIAL_ROUNDS {
          eval_partial_round::<_, LinearLayers, WIDTH, SBOX_DEGREE, SBOX_REGISTERS>(
              &mut state,
              &local.partial_rounds[round],
              &air.constants.partial_round_constants[round],
              builder,
          );
      }
  
      for round in 0..HALF_FULL_ROUNDS {
          eval_full_round::<_, LinearLayers, WIDTH, SBOX_DEGREE, SBOX_REGISTERS>(
              &mut state,
              &local.ending_full_rounds[round],
              &air.constants.ending_full_round_constants[round],
              builder,
          );
      }
  }
  *)
  Definition eval (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ],
        [ AB; LinearLayers ],
        [ air; builder; local ] =>
      ltac:(M.monadic
        (let air := M.alloc (| air |) in
        let builder := M.alloc (| builder |) in
        let local := M.alloc (| local |) in
        M.read (|
          let~ state :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "array")
                    [ WIDTH ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "array")
                  [ WIDTH ]
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "array")
                    [ WIDTH ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                  "map",
                  [],
                  [
                    Ty.function
                      [ Ty.tuple [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ]
                      (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr");
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                  ]
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| local |) |),
                      "p3_poseidon2_air::columns::Poseidon2Cols",
                      "inputs"
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ]
                                    (Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr")
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ],
                                        "into",
                                        [],
                                        []
                                      |),
                                      [ M.read (| x |) ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_poseidon2::generic::GenericPoseidon2LinearLayers",
                  LinearLayers,
                  [ WIDTH ],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                  "external_linear_layer",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, state |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", HALF_FULL_ROUNDS) ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let round := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_function (|
                                            "p3_poseidon2_air::air::eval_full_round",
                                            [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS ],
                                            [ AB; LinearLayers ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, state |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_array_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| local |) |),
                                                      "p3_poseidon2_air::columns::Poseidon2Cols",
                                                      "beginning_full_rounds"
                                                    |),
                                                    M.read (| round |)
                                                  |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_array_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| air |) |),
                                                        "p3_poseidon2_air::air::Poseidon2Air",
                                                        "constants"
                                                      |),
                                                      "p3_poseidon2_air::constants::RoundConstants",
                                                      "beginning_full_round_constants"
                                                    |),
                                                    M.read (| round |)
                                                  |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| builder |) |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", PARTIAL_ROUNDS) ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let round := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_function (|
                                            "p3_poseidon2_air::air::eval_partial_round",
                                            [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS ],
                                            [ AB; LinearLayers ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, state |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_array_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| local |) |),
                                                      "p3_poseidon2_air::columns::Poseidon2Cols",
                                                      "partial_rounds"
                                                    |),
                                                    M.read (| round |)
                                                  |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_array_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| air |) |),
                                                        "p3_poseidon2_air::air::Poseidon2Air",
                                                        "constants"
                                                      |),
                                                      "p3_poseidon2_air::constants::RoundConstants",
                                                      "partial_round_constants"
                                                    |),
                                                    M.read (| round |)
                                                  |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| builder |) |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", HALF_FULL_ROUNDS) ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let round := M.copy (| γ0_0 |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_function (|
                                          "p3_poseidon2_air::air::eval_full_round",
                                          [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS ],
                                          [ AB; LinearLayers ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, state |) |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| local |) |),
                                                    "p3_poseidon2_air::columns::Poseidon2Cols",
                                                    "ending_full_rounds"
                                                  |),
                                                  M.read (| round |)
                                                |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| air |) |),
                                                      "p3_poseidon2_air::air::Poseidon2Air",
                                                      "constants"
                                                    |),
                                                    "p3_poseidon2_air::constants::RoundConstants",
                                                    "ending_full_round_constants"
                                                  |),
                                                  M.read (| round |)
                                                |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| builder |) |)
                                          |)
                                        ]
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_eval : M.IsFunction.C "p3_poseidon2_air::air::eval" eval.
  Admitted.
  Global Typeclasses Opaque eval.
  
  Module Impl_p3_air_air_Air_where_p3_air_air_AirBuilder_AB_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_for_p3_poseidon2_air_air_Poseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_associated_in_trait_p3_air_air_AirBuilder___AB_F_LinearLayers.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (AB LinearLayers : Ty.t)
        : Ty.t :=
      Ty.apply
        (Ty.path "p3_poseidon2_air::air::Poseidon2Air")
        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"; LinearLayers ].
    
    (*
        fn eval(&self, builder: &mut AB) {
            let main = builder.main();
            let local = main.row_slice(0);
            let local = ( *local).borrow();
    
            eval::<_, _, WIDTH, SBOX_DEGREE, SBOX_REGISTERS, HALF_FULL_ROUNDS, PARTIAL_ROUNDS>(
                self, builder, local,
            );
        }
    *)
    Definition eval
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (AB LinearLayers : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS AB LinearLayers in
      match ε, τ, α with
      | [], [], [ self; builder ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let builder := M.alloc (| builder |) in
          M.read (|
            let~ main :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                  M.get_trait_method (| "p3_air::air::AirBuilder", AB, [], [], "main", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
                |)
              |) in
            let~ local :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_matrix::Matrix"
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                      "{{synthetic}}'2"
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.associated_in_trait
                    "p3_matrix::Matrix"
                    []
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                    "{{synthetic}}'2",
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    "row_slice",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, main |); Value.Integer IntegerKind.Usize 0 ]
                |)
              |) in
            let~ local :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                          [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ],
                  M.get_trait_method (|
                    "core::borrow::Borrow",
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    [],
                    [
                      Ty.apply
                        (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ],
                    "borrow",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.associated_in_trait
                              "p3_matrix::Matrix"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                              (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                              "{{synthetic}}'2",
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, local |) ]
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (|
                    "p3_poseidon2_air::air::eval",
                    [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ],
                    [ AB; LinearLayers ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local |) |) |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (AB LinearLayers : Ty.t),
      M.IsTraitInstance
        "p3_air::air::Air"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ AB ]
        (Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS AB LinearLayers)
        (* Instance *)
        [
          ("eval",
            InstanceField.Method
              (eval
                WIDTH
                SBOX_DEGREE
                SBOX_REGISTERS
                HALF_FULL_ROUNDS
                PARTIAL_ROUNDS
                AB
                LinearLayers))
        ].
  End Impl_p3_air_air_Air_where_p3_air_air_AirBuilder_AB_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_for_p3_poseidon2_air_air_Poseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_associated_in_trait_p3_air_air_AirBuilder___AB_F_LinearLayers.
  
  (*
  fn eval_full_round<
      AB: AirBuilder,
      LinearLayers: GenericPoseidon2LinearLayers<AB::Expr, WIDTH>,
      const WIDTH: usize,
      const SBOX_DEGREE: u64,
      const SBOX_REGISTERS: usize,
  >(
      state: &mut [AB::Expr; WIDTH],
      full_round: &FullRound<AB::Var, WIDTH, SBOX_DEGREE, SBOX_REGISTERS>,
      round_constants: &[AB::F; WIDTH],
      builder: &mut AB,
  ) {
      for (i, (s, r)) in state.iter_mut().zip(round_constants.iter()).enumerate() {
          *s += *r;
          eval_sbox(&full_round.sbox[i], s, builder);
      }
      LinearLayers::external_linear_layer(state);
      for (state_i, post_i) in state.iter_mut().zip(full_round.post) {
          builder.assert_eq(state_i.clone(), post_i);
          *state_i = post_i.into();
      }
  }
  *)
  Definition eval_full_round (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS ],
        [ AB; LinearLayers ],
        [ state; full_round; round_constants; builder ] =>
      ltac:(M.monadic
        (let state := M.alloc (| state |) in
        let full_round := M.alloc (| full_round |) in
        let round_constants := M.alloc (| round_constants |) in
        let builder := M.alloc (| builder |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::IterMut")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ];
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ]
                          ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::IterMut")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ];
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ]
                            ]
                        ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ];
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::IterMut")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ];
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ]
                            ],
                          [],
                          [],
                          "enumerate",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ];
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::slice::iter::IterMut")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                              [],
                              [],
                              "zip",
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ]
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                  "iter_mut",
                                  [],
                                  []
                                |),
                                [
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| state |) |)
                                    |))
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                                    ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| round_constants |) |)
                                    |))
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr"
                                                ];
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "F"
                                                ]
                                            ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr"
                                              ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "F"
                                              ]
                                          ]
                                      ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                    let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                    let i := M.copy (| γ1_0 |) in
                                    let γ2_0 := M.SubPointer.get_tuple_field (| γ1_1, 0 |) in
                                    let γ2_1 := M.SubPointer.get_tuple_field (| γ1_1, 1 |) in
                                    let s := M.copy (| γ2_0 |) in
                                    let r := M.copy (| γ2_1 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "core::ops::arith::AddAssign",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr",
                                            [],
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "F"
                                            ],
                                            "add_assign",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| s |) |)
                                            |);
                                            M.read (| M.deref (| M.read (| r |) |) |)
                                          ]
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_function (|
                                            "p3_poseidon2_air::air::eval_sbox",
                                            [ SBOX_DEGREE; SBOX_REGISTERS ],
                                            [ AB ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_array_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| full_round |) |),
                                                      "p3_poseidon2_air::columns::FullRound",
                                                      "sbox"
                                                    |),
                                                    M.read (| i |)
                                                  |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| s |) |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| builder |) |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_poseidon2::generic::GenericPoseidon2LinearLayers",
                  LinearLayers,
                  [ WIDTH ],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                  "external_linear_layer",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |) ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::IterMut")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ];
                      Ty.apply
                        (Ty.path "core::array::iter::IntoIter")
                        [ WIDTH ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::zip::Zip")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::IterMut")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ];
                        Ty.apply
                          (Ty.path "core::array::iter::IntoIter")
                          [ WIDTH ]
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::IterMut")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ];
                          Ty.apply
                            (Ty.path "core::array::iter::IntoIter")
                            [ WIDTH ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::IterMut")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        [],
                        [],
                        "zip",
                        [],
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ WIDTH ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::slice::iter::IterMut")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "iter_mut",
                            [],
                            []
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |))
                          ]
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| full_round |) |),
                            "p3_poseidon2_air::columns::FullRound",
                            "post"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ];
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::IterMut")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ];
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ WIDTH ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                  let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                  let state_i := M.copy (| γ1_0 |) in
                                  let post_i := M.copy (| γ1_1 |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_trait_method (|
                                          "p3_air::air::AirBuilder",
                                          AB,
                                          [],
                                          [],
                                          "assert_eq",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr";
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| builder |) |)
                                          |);
                                          M.call_closure (|
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr",
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr",
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| state_i |) |)
                                              |)
                                            ]
                                          |);
                                          M.read (| post_i |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      M.write (|
                                        M.deref (| M.read (| state_i |) |),
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr",
                                          M.get_trait_method (|
                                            "core::convert::Into",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var",
                                            [],
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr"
                                            ],
                                            "into",
                                            [],
                                            []
                                          |),
                                          [ M.read (| post_i |) ]
                                        |)
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_eval_full_round :
    M.IsFunction.C "p3_poseidon2_air::air::eval_full_round" eval_full_round.
  Admitted.
  Global Typeclasses Opaque eval_full_round.
  
  (*
  fn eval_partial_round<
      AB: AirBuilder,
      LinearLayers: GenericPoseidon2LinearLayers<AB::Expr, WIDTH>,
      const WIDTH: usize,
      const SBOX_DEGREE: u64,
      const SBOX_REGISTERS: usize,
  >(
      state: &mut [AB::Expr; WIDTH],
      partial_round: &PartialRound<AB::Var, WIDTH, SBOX_DEGREE, SBOX_REGISTERS>,
      round_constant: &AB::F,
      builder: &mut AB,
  ) {
      state[0] += *round_constant;
      eval_sbox(&partial_round.sbox, &mut state[0], builder);
  
      builder.assert_eq(state[0].clone(), partial_round.post_sbox);
      state[0] = partial_round.post_sbox.into();
  
      LinearLayers::internal_linear_layer(state);
  }
  *)
  Definition eval_partial_round (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS ],
        [ AB; LinearLayers ],
        [ state; partial_round; round_constant; builder ] =>
      ltac:(M.monadic
        (let state := M.alloc (| state |) in
        let partial_round := M.alloc (| partial_round |) in
        let round_constant := M.alloc (| round_constant |) in
        let builder := M.alloc (| builder |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::ops::arith::AddAssign",
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  [],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                  "add_assign",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| state |) |),
                      Value.Integer IntegerKind.Usize 0
                    |)
                  |);
                  M.read (| M.deref (| M.read (| round_constant |) |) |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_poseidon2_air::air::eval_sbox",
                  [ SBOX_DEGREE; SBOX_REGISTERS ],
                  [ AB ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| partial_round |) |),
                          "p3_poseidon2_air::columns::PartialRound",
                          "sbox"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| state |) |),
                          Value.Integer IntegerKind.Usize 0
                        |)
                      |)
                    |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_air::air::AirBuilder",
                  AB,
                  [],
                  [],
                  "assert_eq",
                  [],
                  [
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| state |) |),
                          Value.Integer IntegerKind.Usize 0
                        |)
                      |)
                    ]
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| partial_round |) |),
                      "p3_poseidon2_air::columns::PartialRound",
                      "post_sbox"
                    |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| state |) |),
                  Value.Integer IntegerKind.Usize 0
                |),
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::convert::Into",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "into",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| partial_round |) |),
                        "p3_poseidon2_air::columns::PartialRound",
                        "post_sbox"
                      |)
                    |)
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_poseidon2::generic::GenericPoseidon2LinearLayers",
                  LinearLayers,
                  [ WIDTH ],
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                  "internal_linear_layer",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |) ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_eval_partial_round :
    M.IsFunction.C "p3_poseidon2_air::air::eval_partial_round" eval_partial_round.
  Admitted.
  Global Typeclasses Opaque eval_partial_round.
  
  (*
  fn eval_sbox<AB, const DEGREE: u64, const REGISTERS: usize>(
      sbox: &SBox<AB::Var, DEGREE, REGISTERS>,
      x: &mut AB::Expr,
      builder: &mut AB,
  ) where
      AB: AirBuilder,
  {
      *x = match (DEGREE, REGISTERS) {
          (3, 0) => x.cube(),
          (5, 0) => x.exp_const_u64::<5>(),
          (7, 0) => x.exp_const_u64::<7>(),
          (5, 1) => {
              let committed_x3 = sbox.0[0].into();
              let x2 = x.square();
              builder.assert_eq(committed_x3.clone(), x2.clone() * x.clone());
              committed_x3 * x2
          }
          (7, 1) => {
              let committed_x3 = sbox.0[0].into();
              builder.assert_eq(committed_x3.clone(), x.cube());
              committed_x3.square() * x.clone()
          }
          (11, 2) => {
              let committed_x3 = sbox.0[0].into();
              let committed_x9 = sbox.0[1].into();
              let x2 = x.square();
              builder.assert_eq(committed_x3.clone(), x2.clone() * x.clone());
              builder.assert_eq(committed_x9.clone(), committed_x3.cube());
              committed_x9 * x2
          }
          _ => panic!(
              "Unexpected (DEGREE, REGISTERS) of ({}, {})",
              DEGREE, REGISTERS
          ),
      }
  }
  *)
  Definition eval_sbox (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ DEGREE; REGISTERS ], [ AB ], [ sbox; x; builder ] =>
      ltac:(M.monadic
        (let sbox := M.alloc (| sbox |) in
        let x := M.alloc (| x |) in
        let builder := M.alloc (| builder |) in
        M.write (|
          M.deref (| M.read (| x |) |),
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
              M.alloc (| Value.Tuple [ DEGREE; REGISTERS ] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ0_0 |),
                        Value.Integer IntegerKind.U64 3
                      |) in
                    let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ0_1 |),
                        Value.Integer IntegerKind.Usize 0
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "p3_field::field::PrimeCharacteristicRing",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          [],
                          [],
                          "cube",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ0_0 |),
                        Value.Integer IntegerKind.U64 5
                      |) in
                    let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ0_1 |),
                        Value.Integer IntegerKind.Usize 0
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "p3_field::field::PrimeCharacteristicRing",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          [],
                          [],
                          "exp_const_u64",
                          [ Value.Integer IntegerKind.U64 5 ],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ0_0 |),
                        Value.Integer IntegerKind.U64 7
                      |) in
                    let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ0_1 |),
                        Value.Integer IntegerKind.Usize 0
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "p3_field::field::PrimeCharacteristicRing",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          [],
                          [],
                          "exp_const_u64",
                          [ Value.Integer IntegerKind.U64 7 ],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ0_0 |),
                        Value.Integer IntegerKind.U64 5
                      |) in
                    let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ0_1 |),
                        Value.Integer IntegerKind.Usize 1
                      |) in
                    let~ committed_x3 :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "into",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_tuple_field (|
                                  M.deref (| M.read (| sbox |) |),
                                  "p3_poseidon2_air::columns::SBox",
                                  0
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ x2 :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "p3_field::field::PrimeCharacteristicRing",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "square",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "assert_eq",
                            [],
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                            ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, committed_x3 |) ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Mul",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "mul",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, x2 |) ]
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          "mul",
                          [],
                          []
                        |),
                        [ M.read (| committed_x3 |); M.read (| x2 |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ0_0 |),
                        Value.Integer IntegerKind.U64 7
                      |) in
                    let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ0_1 |),
                        Value.Integer IntegerKind.Usize 1
                      |) in
                    let~ committed_x3 :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "into",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_tuple_field (|
                                  M.deref (| M.read (| sbox |) |),
                                  "p3_poseidon2_air::columns::SBox",
                                  0
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "assert_eq",
                            [],
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                            ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, committed_x3 |) ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "p3_field::field::PrimeCharacteristicRing",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "cube",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              [],
                              [],
                              "square",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, committed_x3 |) ]
                          |);
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ0_0 |),
                        Value.Integer IntegerKind.U64 11
                      |) in
                    let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ0_1 |),
                        Value.Integer IntegerKind.Usize 2
                      |) in
                    let~ committed_x3 :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "into",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_tuple_field (|
                                  M.deref (| M.read (| sbox |) |),
                                  "p3_poseidon2_air::columns::SBox",
                                  0
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ committed_x9 :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "into",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_tuple_field (|
                                  M.deref (| M.read (| sbox |) |),
                                  "p3_poseidon2_air::columns::SBox",
                                  0
                                |),
                                Value.Integer IntegerKind.Usize 1
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ x2 :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "p3_field::field::PrimeCharacteristicRing",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "square",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "assert_eq",
                            [],
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                            ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, committed_x3 |) ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Mul",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "mul",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, x2 |) ]
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "assert_eq",
                            [],
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                            ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, committed_x9 |) ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "p3_field::field::PrimeCharacteristicRing",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "cube",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, committed_x3 |) ]
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          "mul",
                          [],
                          []
                        |),
                        [ M.read (| committed_x9 |); M.read (| x2 |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                [
                                  Value.Integer IntegerKind.Usize 3;
                                  Value.Integer IntegerKind.Usize 2
                                ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [
                                            mk_str (| "Unexpected (DEGREE, REGISTERS) of (" |);
                                            mk_str (| ", " |);
                                            mk_str (| ")" |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [],
                                                [ Ty.path "u64" ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (| DEGREE |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [],
                                                [ Ty.path "usize" ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (| REGISTERS |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)))
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_eval_sbox :
    M.IsFunction.C "p3_poseidon2_air::air::eval_sbox" eval_sbox.
  Admitted.
  Global Typeclasses Opaque eval_sbox.
End air.
