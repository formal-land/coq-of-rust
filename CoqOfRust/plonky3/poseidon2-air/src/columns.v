(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module columns.
  (* StructRecord
    {
      name := "Poseidon2Cols";
      const_params :=
        [ "WIDTH"; "SBOX_DEGREE"; "SBOX_REGISTERS"; "HALF_FULL_ROUNDS"; "PARTIAL_ROUNDS" ];
      ty_params := [ "T" ];
      fields :=
        [
          ("export", T);
          ("inputs", Ty.apply (Ty.path "array") [ WIDTH ] [ T ]);
          ("beginning_full_rounds",
            Ty.apply
              (Ty.path "array")
              [ HALF_FULL_ROUNDS ]
              [
                Ty.apply
                  (Ty.path "p3_poseidon2_air::columns::FullRound")
                  [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS ]
                  [ T ]
              ]);
          ("partial_rounds",
            Ty.apply
              (Ty.path "array")
              [ PARTIAL_ROUNDS ]
              [
                Ty.apply
                  (Ty.path "p3_poseidon2_air::columns::PartialRound")
                  [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS ]
                  [ T ]
              ]);
          ("ending_full_rounds",
            Ty.apply
              (Ty.path "array")
              [ HALF_FULL_ROUNDS ]
              [
                Ty.apply
                  (Ty.path "p3_poseidon2_air::columns::FullRound")
                  [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS ]
                  [ T ]
              ])
        ];
    } *)
  
  (* StructRecord
    {
      name := "FullRound";
      const_params := [ "WIDTH"; "SBOX_DEGREE"; "SBOX_REGISTERS" ];
      ty_params := [ "T" ];
      fields :=
        [
          ("sbox",
            Ty.apply
              (Ty.path "array")
              [ WIDTH ]
              [
                Ty.apply
                  (Ty.path "p3_poseidon2_air::columns::SBox")
                  [ SBOX_DEGREE; SBOX_REGISTERS ]
                  [ T ]
              ]);
          ("post", Ty.apply (Ty.path "array") [ WIDTH ] [ T ])
        ];
    } *)
  
  (* StructRecord
    {
      name := "PartialRound";
      const_params := [ "WIDTH"; "SBOX_DEGREE"; "SBOX_REGISTERS" ];
      ty_params := [ "T" ];
      fields :=
        [
          ("sbox",
            Ty.apply
              (Ty.path "p3_poseidon2_air::columns::SBox")
              [ SBOX_DEGREE; SBOX_REGISTERS ]
              [ T ]);
          ("post_sbox", T)
        ];
    } *)
  
  (* StructTuple
    {
      name := "SBox";
      const_params := [ "DEGREE"; "REGISTERS" ];
      ty_params := [ "T" ];
      fields := [ Ty.apply (Ty.path "array") [ REGISTERS ] [ T ] ];
    } *)
  
  (*
  pub const fn num_cols<
      const WIDTH: usize,
      const SBOX_DEGREE: u64,
      const SBOX_REGISTERS: usize,
      const HALF_FULL_ROUNDS: usize,
      const PARTIAL_ROUNDS: usize,
  >() -> usize {
      size_of::<Poseidon2Cols<u8, WIDTH, SBOX_DEGREE, SBOX_REGISTERS, HALF_FULL_ROUNDS, PARTIAL_ROUNDS>>(
      )
  }
  *)
  Definition num_cols (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ], [], [] =>
      ltac:(M.monadic
        (M.call_closure (|
          Ty.path "usize",
          M.get_function (|
            "core::mem::size_of",
            [],
            [
              Ty.apply
                (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
                [ Ty.path "u8" ]
            ]
          |),
          []
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_num_cols :
    M.IsFunction.C "p3_poseidon2_air::columns::num_cols" num_cols.
  Admitted.
  Global Typeclasses Opaque num_cols.
  
  (*
  pub const fn make_col_map<
      const WIDTH: usize,
      const SBOX_DEGREE: u64,
      const SBOX_REGISTERS: usize,
      const HALF_FULL_ROUNDS: usize,
      const PARTIAL_ROUNDS: usize,
  >() -> Poseidon2Cols<usize, WIDTH, SBOX_DEGREE, SBOX_REGISTERS, HALF_FULL_ROUNDS, PARTIAL_ROUNDS> {
      todo!()
      // let indices_arr = indices_arr::<
      //     { num_cols::<WIDTH, SBOX_DEGREE, SBOX_REGISTERS, HALF_FULL_ROUNDS, PARTIAL_ROUNDS>() },
      // >();
      // unsafe {
      //     transmute::<
      //         [usize;
      //             num_cols::<WIDTH, SBOX_DEGREE, SBOX_REGISTERS, HALF_FULL_ROUNDS, PARTIAL_ROUNDS>()],
      //         Poseidon2Cols<
      //             usize,
      //             WIDTH,
      //             SBOX_DEGREE,
      //             SBOX_REGISTERS,
      //             HALF_FULL_ROUNDS,
      //             PARTIAL_ROUNDS,
      //         >,
      //     >(indices_arr)
      // }
  }
  *)
  Definition make_col_map (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ], [], [] =>
      ltac:(M.monadic
        (M.never_to_any (|
          M.call_closure (|
            Ty.path "never",
            M.get_function (| "core::panicking::panic", [], [] |),
            [ mk_str (| "not yet implemented" |) ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_make_col_map :
    M.IsFunction.C "p3_poseidon2_air::columns::make_col_map" make_col_map.
  Admitted.
  Global Typeclasses Opaque make_col_map.
  
  Module Impl_core_borrow_Borrow_p3_poseidon2_air_columns_Poseidon2Cols_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_T_for_slice_T.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (T : Ty.t)
        : Ty.t :=
      Ty.apply (Ty.path "slice") [] [ T ].
    
    (*
        fn borrow(
            &self,
        ) -> &Poseidon2Cols<T, WIDTH, SBOX_DEGREE, SBOX_REGISTERS, HALF_FULL_ROUNDS, PARTIAL_ROUNDS>
        {
            // debug_assert_eq!(self.len(), NUM_COLS);
            let (prefix, shorts, suffix) = unsafe {
                self.align_to::<Poseidon2Cols<
                    T,
                    WIDTH,
                    SBOX_DEGREE,
                    SBOX_REGISTERS,
                    HALF_FULL_ROUNDS,
                    PARTIAL_ROUNDS,
                >>()
            };
            debug_assert!(prefix.is_empty(), "Alignment should match");
            debug_assert!(suffix.is_empty(), "Alignment should match");
            debug_assert_eq!(shorts.len(), 1);
            &shorts[0]
        }
    *)
    Definition borrow
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
                        [ T ]
                    ]
                ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                                [
                                  WIDTH;
                                  SBOX_DEGREE;
                                  SBOX_REGISTERS;
                                  HALF_FULL_ROUNDS;
                                  PARTIAL_ROUNDS
                                ]
                                [ T ]
                            ]
                        ];
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                    ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ T ],
                    "align_to",
                    [],
                    [
                      Ty.apply
                        (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
                        [ T ]
                    ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                    let prefix := M.copy (| γ0_0 |) in
                    let shorts := M.copy (| γ0_1 |) in
                    let suffix := M.copy (| γ0_2 |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ T ],
                                                    "is_empty",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| prefix |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.call_closure (|
                                              Ty.path "never",
                                              M.get_function (|
                                                "core::panicking::panic_fmt",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_const",
                                                    [ Value.Integer IntegerKind.Usize 1 ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (|
                                                                  "Alignment should match"
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ T ],
                                                    "is_empty",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| suffix |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.call_closure (|
                                              Ty.path "never",
                                              M.get_function (|
                                                "core::panicking::panic_fmt",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_const",
                                                    [ Value.Integer IntegerKind.Usize 1 ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (|
                                                                  "Alignment should match"
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (|
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_poseidon2_air::columns::Poseidon2Cols")
                                                      [
                                                        WIDTH;
                                                        SBOX_DEGREE;
                                                        SBOX_REGISTERS;
                                                        HALF_FULL_ROUNDS;
                                                        PARTIAL_ROUNDS
                                                      ]
                                                      [ T ]
                                                  ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| shorts |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (| Value.Integer IntegerKind.Usize 1 |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val := M.copy (| γ0_0 |) in
                                        let right_val := M.copy (| γ0_1 |) in
                                        M.match_operator (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      let~ kind :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.path "core::panicking::AssertKind"
                                                            ] :=
                                                        M.alloc (|
                                                          Value.StructTuple
                                                            "core::panicking::AssertKind::Eq"
                                                            []
                                                        |) in
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "never",
                                                          M.get_function (|
                                                            "core::panicking::assert_failed",
                                                            [],
                                                            [ Ty.path "usize"; Ty.path "usize" ]
                                                          |),
                                                          [
                                                            M.read (| kind |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            Value.StructTuple
                                                              "core::option::Option::None"
                                                              []
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    M.alloc (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| shorts |) |),
                              Value.Integer IntegerKind.Usize 0
                            |)
                          |)
                        |)
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (T : Ty.t),
      M.IsTraitInstance
        "core::borrow::Borrow"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
            [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
            [ T ]
        ]
        (Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS T)
        (* Instance *)
        [
          ("borrow",
            InstanceField.Method
              (borrow WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS T))
        ].
  End Impl_core_borrow_Borrow_p3_poseidon2_air_columns_Poseidon2Cols_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_T_for_slice_T.
  
  Module Impl_core_borrow_BorrowMut_p3_poseidon2_air_columns_Poseidon2Cols_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_T_for_slice_T.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (T : Ty.t)
        : Ty.t :=
      Ty.apply (Ty.path "slice") [] [ T ].
    
    (*
        fn borrow_mut(
            &mut self,
        ) -> &mut Poseidon2Cols<T, WIDTH, SBOX_DEGREE, SBOX_REGISTERS, HALF_FULL_ROUNDS, PARTIAL_ROUNDS>
        {
            // debug_assert_eq!(self.len(), NUM_COLS);
            let (prefix, shorts, suffix) = unsafe {
                self.align_to_mut::<Poseidon2Cols<
                    T,
                    WIDTH,
                    SBOX_DEGREE,
                    SBOX_REGISTERS,
                    HALF_FULL_ROUNDS,
                    PARTIAL_ROUNDS,
                >>()
            };
            debug_assert!(prefix.is_empty(), "Alignment should match");
            debug_assert!(suffix.is_empty(), "Alignment should match");
            debug_assert_eq!(shorts.len(), 1);
            &mut shorts[0]
        }
    *)
    Definition borrow_mut
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.read (|
                M.match_operator (|
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                            [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
                            [ T ]
                        ]
                    ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                                    [
                                      WIDTH;
                                      SBOX_DEGREE;
                                      SBOX_REGISTERS;
                                      HALF_FULL_ROUNDS;
                                      PARTIAL_ROUNDS
                                    ]
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "align_to_mut",
                        [],
                        [
                          Ty.apply
                            (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                            [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
                            [ T ]
                        ]
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let prefix := M.copy (| γ0_0 |) in
                        let shorts := M.copy (| γ0_1 |) in
                        let suffix := M.copy (| γ0_2 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_associated_function (|
                                                        Ty.apply (Ty.path "slice") [] [ T ],
                                                        "is_empty",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| prefix |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::panic_fmt",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::Arguments",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::Arguments",
                                                        "new_const",
                                                        [ Value.Integer IntegerKind.Usize 1 ],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    mk_str (|
                                                                      "Alignment should match"
                                                                    |)
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_associated_function (|
                                                        Ty.apply (Ty.path "slice") [] [ T ],
                                                        "is_empty",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| suffix |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::panic_fmt",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::Arguments",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::Arguments",
                                                        "new_const",
                                                        [ Value.Integer IntegerKind.Usize 1 ],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    mk_str (|
                                                                      "Alignment should match"
                                                                    |)
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_poseidon2_air::columns::Poseidon2Cols")
                                                          [
                                                            WIDTH;
                                                            SBOX_DEGREE;
                                                            SBOX_REGISTERS;
                                                            HALF_FULL_ROUNDS;
                                                            PARTIAL_ROUNDS
                                                          ]
                                                          [ T ]
                                                      ],
                                                    "len",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| shorts |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (| Value.Integer IntegerKind.Usize 1 |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.eq,
                                                              [
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [ Ty.path "usize"; Ty.path "usize" ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| shorts |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (T : Ty.t),
      M.IsTraitInstance
        "core::borrow::BorrowMut"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
            [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
            [ T ]
        ]
        (Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS T)
        (* Instance *)
        [
          ("borrow_mut",
            InstanceField.Method
              (borrow_mut WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS T))
        ].
  End Impl_core_borrow_BorrowMut_p3_poseidon2_air_columns_Poseidon2Cols_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_T_for_slice_T.
End columns.
