(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module constants.
  (* StructRecord
    {
      name := "RoundConstants";
      const_params := [ "WIDTH"; "HALF_FULL_ROUNDS"; "PARTIAL_ROUNDS" ];
      ty_params := [ "F" ];
      fields :=
        [
          ("beginning_full_round_constants",
            Ty.apply
              (Ty.path "array")
              [ HALF_FULL_ROUNDS ]
              [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ] ]);
          ("partial_round_constants", Ty.apply (Ty.path "array") [ PARTIAL_ROUNDS ] [ F ]);
          ("ending_full_round_constants",
            Ty.apply
              (Ty.path "array")
              [ HALF_FULL_ROUNDS ]
              [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ] ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_p3_poseidon2_air_constants_RoundConstants_WIDTH_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_F.
    Definition Self (WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t) (F : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_poseidon2_air::constants::RoundConstants")
        [ WIDTH; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
        [ F ].
    
    (* Debug *)
    Definition fmt
        (WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS F in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "RoundConstants" |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| mk_str (| "beginning_full_round_constants" |) |)
              |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_poseidon2_air::constants::RoundConstants",
                        "beginning_full_round_constants"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "partial_round_constants" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_poseidon2_air::constants::RoundConstants",
                        "partial_round_constants"
                      |)
                    |)
                  |)
                |));
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| mk_str (| "ending_full_round_constants" |) |)
              |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_poseidon2_air::constants::RoundConstants",
                            "ending_full_round_constants"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t) (F : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS F)
        (* Instance *)
        [ ("fmt", InstanceField.Method (fmt WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS F)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_p3_poseidon2_air_constants_RoundConstants_WIDTH_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_F.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_Field_F_for_p3_poseidon2_air_constants_RoundConstants_WIDTH_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_F.
    Definition Self (WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t) (F : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_poseidon2_air::constants::RoundConstants")
        [ WIDTH; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
        [ F ].
    
    (* Clone *)
    Definition clone
        (WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_poseidon2_air::constants::RoundConstants"
            [
              ("beginning_full_round_constants",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ HALF_FULL_ROUNDS ]
                    [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ] ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "array")
                      [ HALF_FULL_ROUNDS ]
                      [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ] ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_poseidon2_air::constants::RoundConstants",
                            "beginning_full_round_constants"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("partial_round_constants",
                M.call_closure (|
                  Ty.apply (Ty.path "array") [ PARTIAL_ROUNDS ] [ F ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "array") [ PARTIAL_ROUNDS ] [ F ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_poseidon2_air::constants::RoundConstants",
                            "partial_round_constants"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("ending_full_round_constants",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ HALF_FULL_ROUNDS ]
                    [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ] ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "array")
                      [ HALF_FULL_ROUNDS ]
                      [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ] ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_poseidon2_air::constants::RoundConstants",
                            "ending_full_round_constants"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t) (F : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS F)
        (* Instance *)
        [ ("clone", InstanceField.Method (clone WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS F)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_Field_F_for_p3_poseidon2_air_constants_RoundConstants_WIDTH_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_F.
  
  Module Impl_p3_poseidon2_air_constants_RoundConstants_WIDTH_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_F.
    Definition Self (WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t) (F : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_poseidon2_air::constants::RoundConstants")
        [ WIDTH; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
        [ F ].
    
    (*
        pub const fn new(
            beginning_full_round_constants: [[F; WIDTH]; HALF_FULL_ROUNDS],
            partial_round_constants: [F; PARTIAL_ROUNDS],
            ending_full_round_constants: [[F; WIDTH]; HALF_FULL_ROUNDS],
        ) -> Self {
            Self {
                beginning_full_round_constants,
                partial_round_constants,
                ending_full_round_constants,
            }
        }
    *)
    Definition new
        (WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS F in
      match ε, τ, α with
      | [],
          [],
          [ beginning_full_round_constants; partial_round_constants; ending_full_round_constants
          ] =>
        ltac:(M.monadic
          (let beginning_full_round_constants := M.alloc (| beginning_full_round_constants |) in
          let partial_round_constants := M.alloc (| partial_round_constants |) in
          let ending_full_round_constants := M.alloc (| ending_full_round_constants |) in
          Value.StructRecord
            "p3_poseidon2_air::constants::RoundConstants"
            [
              ("beginning_full_round_constants", M.read (| beginning_full_round_constants |));
              ("partial_round_constants", M.read (| partial_round_constants |));
              ("ending_full_round_constants", M.read (| ending_full_round_constants |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t) (F : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS F)
        "new"
        (new WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS F).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn from_rng<R: Rng>(rng: &mut R) -> Self
        where
            StandardUniform: Distribution<F> + Distribution<[F; WIDTH]>,
        {
            Self {
                beginning_full_round_constants: core::array::from_fn(|_| rng.sample(StandardUniform)),
                partial_round_constants: core::array::from_fn(|_| rng.sample(StandardUniform)),
                ending_full_round_constants: core::array::from_fn(|_| rng.sample(StandardUniform)),
            }
        }
    *)
    Definition from_rng
        (WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS F in
      match ε, τ, α with
      | [], [ R ], [ rng ] =>
        ltac:(M.monadic
          (let rng := M.alloc (| rng |) in
          Value.StructRecord
            "p3_poseidon2_air::constants::RoundConstants"
            [
              ("beginning_full_round_constants",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ HALF_FULL_ROUNDS ]
                    [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ] ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ HALF_FULL_ROUNDS ],
                    [
                      Ty.apply (Ty.path "array") [ WIDTH ] [ F ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply (Ty.path "array") [ WIDTH ] [ F ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply (Ty.path "array") [ WIDTH ] [ F ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.apply (Ty.path "array") [ WIDTH ] [ F ],
                                        M.get_trait_method (|
                                          "rand::rng::Rng",
                                          R,
                                          [],
                                          [],
                                          "sample",
                                          [],
                                          [
                                            Ty.apply (Ty.path "array") [ WIDTH ] [ F ];
                                            Ty.path "rand::distr::StandardUniform"
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| rng |) |)
                                          |);
                                          Value.StructTuple "rand::distr::StandardUniform" []
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |));
              ("partial_round_constants",
                M.call_closure (|
                  Ty.apply (Ty.path "array") [ PARTIAL_ROUNDS ] [ F ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ PARTIAL_ROUNDS ],
                    [ F; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] F ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] F ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        F,
                                        M.get_trait_method (|
                                          "rand::rng::Rng",
                                          R,
                                          [],
                                          [],
                                          "sample",
                                          [],
                                          [ F; Ty.path "rand::distr::StandardUniform" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| rng |) |)
                                          |);
                                          Value.StructTuple "rand::distr::StandardUniform" []
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |));
              ("ending_full_round_constants",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ HALF_FULL_ROUNDS ]
                    [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ] ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ HALF_FULL_ROUNDS ],
                    [
                      Ty.apply (Ty.path "array") [ WIDTH ] [ F ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply (Ty.path "array") [ WIDTH ] [ F ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply (Ty.path "array") [ WIDTH ] [ F ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.apply (Ty.path "array") [ WIDTH ] [ F ],
                                        M.get_trait_method (|
                                          "rand::rng::Rng",
                                          R,
                                          [],
                                          [],
                                          "sample",
                                          [],
                                          [
                                            Ty.apply (Ty.path "array") [ WIDTH ] [ F ];
                                            Ty.path "rand::distr::StandardUniform"
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| rng |) |)
                                          |);
                                          Value.StructTuple "rand::distr::StandardUniform" []
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_from_rng :
      forall (WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t) (F : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS F)
        "from_rng"
        (from_rng WIDTH HALF_FULL_ROUNDS PARTIAL_ROUNDS F).
    Admitted.
    Global Typeclasses Opaque from_rng.
  End Impl_p3_poseidon2_air_constants_RoundConstants_WIDTH_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_F.
End constants.
