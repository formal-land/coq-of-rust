(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module vectorized.
  (* StructRecord
    {
      name := "VectorizedPoseidon2Cols";
      const_params :=
        [
          "WIDTH";
          "SBOX_DEGREE";
          "SBOX_REGISTERS";
          "HALF_FULL_ROUNDS";
          "PARTIAL_ROUNDS";
          "VECTOR_LEN"
        ];
      ty_params := [ "T" ];
      fields :=
        [
          ("cols",
            Ty.apply
              (Ty.path "array")
              [ VECTOR_LEN ]
              [
                Ty.apply
                  (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                  [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
                  [ T ]
              ])
        ];
    } *)
  
  Module Impl_core_borrow_Borrow_p3_poseidon2_air_vectorized_VectorizedPoseidon2Cols_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_T_for_slice_T.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (T : Ty.t)
        : Ty.t :=
      Ty.apply (Ty.path "slice") [] [ T ].
    
    (*
        fn borrow(
            &self,
        ) -> &VectorizedPoseidon2Cols<
            T,
            WIDTH,
            SBOX_DEGREE,
            SBOX_REGISTERS,
            HALF_FULL_ROUNDS,
            PARTIAL_ROUNDS,
            VECTOR_LEN,
        > {
            // debug_assert_eq!(self.len(), NUM_COLS);
            let (prefix, shorts, suffix) = unsafe {
                self.align_to::<VectorizedPoseidon2Cols<
                    T,
                    WIDTH,
                    SBOX_DEGREE,
                    SBOX_REGISTERS,
                    HALF_FULL_ROUNDS,
                    PARTIAL_ROUNDS,
                    VECTOR_LEN,
                >>()
            };
            debug_assert!(prefix.is_empty(), "Alignment should match");
            debug_assert!(suffix.is_empty(), "Alignment should match");
            debug_assert_eq!(shorts.len(), 1);
            &shorts[0]
        }
    *)
    Definition borrow
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Cols")
                        [
                          WIDTH;
                          SBOX_DEGREE;
                          SBOX_REGISTERS;
                          HALF_FULL_ROUNDS;
                          PARTIAL_ROUNDS;
                          VECTOR_LEN
                        ]
                        [ T ]
                    ]
                ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Cols")
                                [
                                  WIDTH;
                                  SBOX_DEGREE;
                                  SBOX_REGISTERS;
                                  HALF_FULL_ROUNDS;
                                  PARTIAL_ROUNDS;
                                  VECTOR_LEN
                                ]
                                [ T ]
                            ]
                        ];
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                    ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ T ],
                    "align_to",
                    [],
                    [
                      Ty.apply
                        (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Cols")
                        [
                          WIDTH;
                          SBOX_DEGREE;
                          SBOX_REGISTERS;
                          HALF_FULL_ROUNDS;
                          PARTIAL_ROUNDS;
                          VECTOR_LEN
                        ]
                        [ T ]
                    ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                    let prefix := M.copy (| γ0_0 |) in
                    let shorts := M.copy (| γ0_1 |) in
                    let suffix := M.copy (| γ0_2 |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ T ],
                                                    "is_empty",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| prefix |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.call_closure (|
                                              Ty.path "never",
                                              M.get_function (|
                                                "core::panicking::panic_fmt",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_const",
                                                    [ Value.Integer IntegerKind.Usize 1 ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (|
                                                                  "Alignment should match"
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ T ],
                                                    "is_empty",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| suffix |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.call_closure (|
                                              Ty.path "never",
                                              M.get_function (|
                                                "core::panicking::panic_fmt",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_const",
                                                    [ Value.Integer IntegerKind.Usize 1 ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (|
                                                                  "Alignment should match"
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (|
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_poseidon2_air::vectorized::VectorizedPoseidon2Cols")
                                                      [
                                                        WIDTH;
                                                        SBOX_DEGREE;
                                                        SBOX_REGISTERS;
                                                        HALF_FULL_ROUNDS;
                                                        PARTIAL_ROUNDS;
                                                        VECTOR_LEN
                                                      ]
                                                      [ T ]
                                                  ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| shorts |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (| Value.Integer IntegerKind.Usize 1 |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val := M.copy (| γ0_0 |) in
                                        let right_val := M.copy (| γ0_1 |) in
                                        M.match_operator (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      let~ kind :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.path "core::panicking::AssertKind"
                                                            ] :=
                                                        M.alloc (|
                                                          Value.StructTuple
                                                            "core::panicking::AssertKind::Eq"
                                                            []
                                                        |) in
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "never",
                                                          M.get_function (|
                                                            "core::panicking::assert_failed",
                                                            [],
                                                            [ Ty.path "usize"; Ty.path "usize" ]
                                                          |),
                                                          [
                                                            M.read (| kind |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            Value.StructTuple
                                                              "core::option::Option::None"
                                                              []
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    M.alloc (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| shorts |) |),
                              Value.Integer IntegerKind.Usize 0
                            |)
                          |)
                        |)
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (T : Ty.t),
      M.IsTraitInstance
        "core::borrow::Borrow"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Cols")
            [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS; VECTOR_LEN ]
            [ T ]
        ]
        (Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN T)
        (* Instance *)
        [
          ("borrow",
            InstanceField.Method
              (borrow
                WIDTH
                SBOX_DEGREE
                SBOX_REGISTERS
                HALF_FULL_ROUNDS
                PARTIAL_ROUNDS
                VECTOR_LEN
                T))
        ].
  End Impl_core_borrow_Borrow_p3_poseidon2_air_vectorized_VectorizedPoseidon2Cols_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_T_for_slice_T.
  
  Module Impl_core_borrow_BorrowMut_p3_poseidon2_air_vectorized_VectorizedPoseidon2Cols_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_T_for_slice_T.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (T : Ty.t)
        : Ty.t :=
      Ty.apply (Ty.path "slice") [] [ T ].
    
    (*
        fn borrow_mut(
            &mut self,
        ) -> &mut VectorizedPoseidon2Cols<
            T,
            WIDTH,
            SBOX_DEGREE,
            SBOX_REGISTERS,
            HALF_FULL_ROUNDS,
            PARTIAL_ROUNDS,
            VECTOR_LEN,
        > {
            // debug_assert_eq!(self.len(), NUM_COLS);
            let (prefix, shorts, suffix) = unsafe {
                self.align_to_mut::<VectorizedPoseidon2Cols<
                    T,
                    WIDTH,
                    SBOX_DEGREE,
                    SBOX_REGISTERS,
                    HALF_FULL_ROUNDS,
                    PARTIAL_ROUNDS,
                    VECTOR_LEN,
                >>()
            };
            debug_assert!(prefix.is_empty(), "Alignment should match");
            debug_assert!(suffix.is_empty(), "Alignment should match");
            debug_assert_eq!(shorts.len(), 1);
            &mut shorts[0]
        }
    *)
    Definition borrow_mut
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.read (|
                M.match_operator (|
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Cols")
                            [
                              WIDTH;
                              SBOX_DEGREE;
                              SBOX_REGISTERS;
                              HALF_FULL_ROUNDS;
                              PARTIAL_ROUNDS;
                              VECTOR_LEN
                            ]
                            [ T ]
                        ]
                    ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_poseidon2_air::vectorized::VectorizedPoseidon2Cols")
                                    [
                                      WIDTH;
                                      SBOX_DEGREE;
                                      SBOX_REGISTERS;
                                      HALF_FULL_ROUNDS;
                                      PARTIAL_ROUNDS;
                                      VECTOR_LEN
                                    ]
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "align_to_mut",
                        [],
                        [
                          Ty.apply
                            (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Cols")
                            [
                              WIDTH;
                              SBOX_DEGREE;
                              SBOX_REGISTERS;
                              HALF_FULL_ROUNDS;
                              PARTIAL_ROUNDS;
                              VECTOR_LEN
                            ]
                            [ T ]
                        ]
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let prefix := M.copy (| γ0_0 |) in
                        let shorts := M.copy (| γ0_1 |) in
                        let suffix := M.copy (| γ0_2 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_associated_function (|
                                                        Ty.apply (Ty.path "slice") [] [ T ],
                                                        "is_empty",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| prefix |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::panic_fmt",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::Arguments",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::Arguments",
                                                        "new_const",
                                                        [ Value.Integer IntegerKind.Usize 1 ],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    mk_str (|
                                                                      "Alignment should match"
                                                                    |)
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_associated_function (|
                                                        Ty.apply (Ty.path "slice") [] [ T ],
                                                        "is_empty",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| suffix |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::panic_fmt",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::Arguments",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::Arguments",
                                                        "new_const",
                                                        [ Value.Integer IntegerKind.Usize 1 ],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    mk_str (|
                                                                      "Alignment should match"
                                                                    |)
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_poseidon2_air::vectorized::VectorizedPoseidon2Cols")
                                                          [
                                                            WIDTH;
                                                            SBOX_DEGREE;
                                                            SBOX_REGISTERS;
                                                            HALF_FULL_ROUNDS;
                                                            PARTIAL_ROUNDS;
                                                            VECTOR_LEN
                                                          ]
                                                          [ T ]
                                                      ],
                                                    "len",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| shorts |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (| Value.Integer IntegerKind.Usize 1 |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.eq,
                                                              [
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [ Ty.path "usize"; Ty.path "usize" ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| shorts |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (T : Ty.t),
      M.IsTraitInstance
        "core::borrow::BorrowMut"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Cols")
            [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS; VECTOR_LEN ]
            [ T ]
        ]
        (Self WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN T)
        (* Instance *)
        [
          ("borrow_mut",
            InstanceField.Method
              (borrow_mut
                WIDTH
                SBOX_DEGREE
                SBOX_REGISTERS
                HALF_FULL_ROUNDS
                PARTIAL_ROUNDS
                VECTOR_LEN
                T))
        ].
  End Impl_core_borrow_BorrowMut_p3_poseidon2_air_vectorized_VectorizedPoseidon2Cols_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_T_for_slice_T.
  
  (* StructRecord
    {
      name := "VectorizedPoseidon2Air";
      const_params :=
        [
          "WIDTH";
          "SBOX_DEGREE";
          "SBOX_REGISTERS";
          "HALF_FULL_ROUNDS";
          "PARTIAL_ROUNDS";
          "VECTOR_LEN"
        ];
      ty_params := [ "F"; "LinearLayers" ];
      fields :=
        [
          ("air",
            Ty.apply
              (Ty.path "p3_poseidon2_air::air::Poseidon2Air")
              [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
              [ F; LinearLayers ])
        ];
    } *)
  
  Module Impl_p3_poseidon2_air_vectorized_VectorizedPoseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_F_LinearLayers.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F LinearLayers : Ty.t)
        : Ty.t :=
      Ty.apply
        (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Air")
        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS; VECTOR_LEN ]
        [ F; LinearLayers ].
    
    (*
        pub const fn new(
            constants: RoundConstants<F, WIDTH, HALF_FULL_ROUNDS, PARTIAL_ROUNDS>,
        ) -> Self {
            Self {
                air: Poseidon2Air::new(constants),
            }
        }
    *)
    Definition new
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F LinearLayers : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          F
          LinearLayers in
      match ε, τ, α with
      | [], [], [ constants ] =>
        ltac:(M.monadic
          (let constants := M.alloc (| constants |) in
          Value.StructRecord
            "p3_poseidon2_air::vectorized::VectorizedPoseidon2Air"
            [
              ("air",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_poseidon2_air::air::Poseidon2Air")
                    [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
                    [ F; LinearLayers ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_poseidon2_air::air::Poseidon2Air")
                      [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
                      [ F; LinearLayers ],
                    "new",
                    [],
                    []
                  |),
                  [ M.read (| constants |) ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F LinearLayers : Ty.t),
      M.IsAssociatedFunction.C
        (Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          F
          LinearLayers)
        "new"
        (new
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          F
          LinearLayers).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn generate_vectorized_trace_rows(
            &self,
            num_hashes: usize,
            extra_capacity_bits: usize,
        ) -> RowMajorMatrix<F>
        where
            F: PrimeField,
            LinearLayers: GenericPoseidon2LinearLayers<F, WIDTH>,
            StandardUniform: Distribution<[F; WIDTH]>,
        {
            let mut rng = SmallRng::seed_from_u64(1);
            let inputs = (0..num_hashes).map(|_| rng.random()).collect();
            generate_vectorized_trace_rows::<
                _,
                LinearLayers,
                WIDTH,
                SBOX_DEGREE,
                SBOX_REGISTERS,
                HALF_FULL_ROUNDS,
                PARTIAL_ROUNDS,
                VECTOR_LEN,
            >(inputs, &self.air.constants, extra_capacity_bits)
        }
    *)
    Definition generate_vectorized_trace_rows
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F LinearLayers : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          F
          LinearLayers in
      match ε, τ, α with
      | [], [], [ self; num_hashes; extra_capacity_bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let num_hashes := M.alloc (| num_hashes |) in
          let extra_capacity_bits := M.alloc (| extra_capacity_bits |) in
          M.read (|
            let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "rand::rngs::small::SmallRng",
                  M.get_trait_method (|
                    "rand_core::SeedableRng",
                    Ty.path "rand::rngs::small::SmallRng",
                    [],
                    [],
                    "seed_from_u64",
                    [],
                    []
                  |),
                  [ Value.Integer IntegerKind.U64 1 ]
                |)
              |) in
            let~ inputs :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ]; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ]; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.apply (Ty.path "array") [ WIDTH ] [ F ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ]; Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize" ] ]
                            (Ty.apply (Ty.path "array") [ WIDTH ] [ F ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.apply (Ty.path "array") [ WIDTH ] [ F ];
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize" ] ]
                            (Ty.apply (Ty.path "array") [ WIDTH ] [ F ])
                        ]
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_", M.read (| num_hashes |))
                          ];
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                          (Ty.apply (Ty.path "array") [ WIDTH ] [ F ])
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Ty.apply (Ty.path "array") [ WIDTH ] [ F ],
                                            M.get_trait_method (|
                                              "rand::rng::Rng",
                                              Ty.path "rand::rngs::small::SmallRng",
                                              [],
                                              [],
                                              "random",
                                              [],
                                              [ Ty.apply (Ty.path "array") [ WIDTH ] [ F ] ]
                                            |),
                                            [ M.borrow (| Pointer.Kind.MutRef, rng |) ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_function (|
                  "p3_poseidon2_air::generation::generate_vectorized_trace_rows",
                  [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS; VECTOR_LEN
                  ],
                  [ F; LinearLayers ]
                |),
                [
                  M.read (| inputs |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_poseidon2_air::vectorized::VectorizedPoseidon2Air",
                            "air"
                          |),
                          "p3_poseidon2_air::air::Poseidon2Air",
                          "constants"
                        |)
                      |)
                    |)
                  |);
                  M.read (| extra_capacity_bits |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_generate_vectorized_trace_rows :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F LinearLayers : Ty.t),
      M.IsAssociatedFunction.C
        (Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          F
          LinearLayers)
        "generate_vectorized_trace_rows"
        (generate_vectorized_trace_rows
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          F
          LinearLayers).
    Admitted.
    Global Typeclasses Opaque generate_vectorized_trace_rows.
  End Impl_p3_poseidon2_air_vectorized_VectorizedPoseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_F_LinearLayers.
  
  Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_where_core_marker_Sync_LinearLayers_F_for_p3_poseidon2_air_vectorized_VectorizedPoseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_F_LinearLayers.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F LinearLayers : Ty.t)
        : Ty.t :=
      Ty.apply
        (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Air")
        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS; VECTOR_LEN ]
        [ F; LinearLayers ].
    
    (*
        fn width(&self) -> usize {
            self.air.width() * VECTOR_LEN
        }
    *)
    Definition width
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F LinearLayers : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          F
          LinearLayers in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            BinOp.Wrap.mul,
            [
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "p3_air::air::BaseAir",
                  Ty.apply
                    (Ty.path "p3_poseidon2_air::air::Poseidon2Air")
                    [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
                    [ F; LinearLayers ],
                  [],
                  [ F ],
                  "width",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_poseidon2_air::vectorized::VectorizedPoseidon2Air",
                      "air"
                    |)
                  |)
                ]
              |);
              VECTOR_LEN
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F LinearLayers : Ty.t),
      M.IsTraitInstance
        "p3_air::air::BaseAir"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          F
          LinearLayers)
        (* Instance *)
        [
          ("width",
            InstanceField.Method
              (width
                WIDTH
                SBOX_DEGREE
                SBOX_REGISTERS
                HALF_FULL_ROUNDS
                PARTIAL_ROUNDS
                VECTOR_LEN
                F
                LinearLayers))
        ].
  End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_where_core_marker_Sync_LinearLayers_F_for_p3_poseidon2_air_vectorized_VectorizedPoseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_F_LinearLayers.
  
  Module Impl_p3_air_air_Air_where_p3_air_air_AirBuilder_AB_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_for_p3_poseidon2_air_vectorized_VectorizedPoseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_associated_in_trait_p3_air_air_AirBuilder___AB_F_LinearLayers.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (AB LinearLayers : Ty.t)
        : Ty.t :=
      Ty.apply
        (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Air")
        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS; VECTOR_LEN ]
        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"; LinearLayers ].
    
    (*
        fn eval(&self, builder: &mut AB) {
            let main = builder.main();
            let local = main.row_slice(0);
            let local: &VectorizedPoseidon2Cols<
                _,
                WIDTH,
                SBOX_DEGREE,
                SBOX_REGISTERS,
                HALF_FULL_ROUNDS,
                PARTIAL_ROUNDS,
                VECTOR_LEN,
            > = ( *local).borrow();
            for perm in &local.cols {
                eval(&self.air, builder, perm);
            }
        }
    *)
    Definition eval
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (AB LinearLayers : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          AB
          LinearLayers in
      match ε, τ, α with
      | [], [], [ self; builder ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let builder := M.alloc (| builder |) in
          M.read (|
            let~ main :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                  M.get_trait_method (| "p3_air::air::AirBuilder", AB, [], [], "main", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
                |)
              |) in
            let~ local :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_matrix::Matrix"
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                      "{{synthetic}}'2"
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.associated_in_trait
                    "p3_matrix::Matrix"
                    []
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                    "{{synthetic}}'2",
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    "row_slice",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, main |); Value.Integer IntegerKind.Usize 0 ]
                |)
              |) in
            let~ local :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Cols")
                          [
                            WIDTH;
                            SBOX_DEGREE;
                            SBOX_REGISTERS;
                            HALF_FULL_ROUNDS;
                            PARTIAL_ROUNDS;
                            VECTOR_LEN
                          ]
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ]
                  ] :=
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Cols")
                            [
                              WIDTH;
                              SBOX_DEGREE;
                              SBOX_REGISTERS;
                              HALF_FULL_ROUNDS;
                              PARTIAL_ROUNDS;
                              VECTOR_LEN
                            ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Cols")
                            [
                              WIDTH;
                              SBOX_DEGREE;
                              SBOX_REGISTERS;
                              HALF_FULL_ROUNDS;
                              PARTIAL_ROUNDS;
                              VECTOR_LEN
                            ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.associated_in_trait
                                  "p3_matrix::Matrix"
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                                  (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                                  "{{synthetic}}'2",
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, local |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              |) in
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                          [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ VECTOR_LEN ]
                            [
                              Ty.apply
                                (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                                [
                                  WIDTH;
                                  SBOX_DEGREE;
                                  SBOX_REGISTERS;
                                  HALF_FULL_ROUNDS;
                                  PARTIAL_ROUNDS
                                ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ]
                        ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local |) |),
                          "p3_poseidon2_air::vectorized::VectorizedPoseidon2Cols",
                          "cols"
                        |)
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                                            [
                                              WIDTH;
                                              SBOX_DEGREE;
                                              SBOX_REGISTERS;
                                              HALF_FULL_ROUNDS;
                                              PARTIAL_ROUNDS
                                            ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2_air::columns::Poseidon2Cols")
                                          [
                                            WIDTH;
                                            SBOX_DEGREE;
                                            SBOX_REGISTERS;
                                            HALF_FULL_ROUNDS;
                                            PARTIAL_ROUNDS
                                          ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let perm := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_function (|
                                            "p3_poseidon2_air::air::eval",
                                            [
                                              WIDTH;
                                              SBOX_DEGREE;
                                              SBOX_REGISTERS;
                                              HALF_FULL_ROUNDS;
                                              PARTIAL_ROUNDS
                                            ],
                                            [ AB; LinearLayers ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "p3_poseidon2_air::vectorized::VectorizedPoseidon2Air",
                                                    "air"
                                                  |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| builder |) |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| perm |) |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (AB LinearLayers : Ty.t),
      M.IsTraitInstance
        "p3_air::air::Air"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ AB ]
        (Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          AB
          LinearLayers)
        (* Instance *)
        [
          ("eval",
            InstanceField.Method
              (eval
                WIDTH
                SBOX_DEGREE
                SBOX_REGISTERS
                HALF_FULL_ROUNDS
                PARTIAL_ROUNDS
                VECTOR_LEN
                AB
                LinearLayers))
        ].
  End Impl_p3_air_air_Air_where_p3_air_air_AirBuilder_AB_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_for_p3_poseidon2_air_vectorized_VectorizedPoseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_associated_in_trait_p3_air_air_AirBuilder___AB_F_LinearLayers.
End vectorized.
