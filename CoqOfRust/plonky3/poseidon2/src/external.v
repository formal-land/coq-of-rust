(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module external.
  (*
  fn apply_hl_mat4<R>(x: &mut [R; 4])
  where
      R: PrimeCharacteristicRing,
  {
      let t0 = x[0].clone() + x[1].clone();
      let t1 = x[2].clone() + x[3].clone();
      let t2 = x[1].clone() + x[1].clone() + t1.clone();
      let t3 = x[3].clone() + x[3].clone() + t0.clone();
      let t4 = t1.double().double() + t3.clone();
      let t5 = t0.double().double() + t2.clone();
      let t6 = t3 + t5.clone();
      let t7 = t2 + t4.clone();
      x[0] = t6;
      x[1] = t5;
      x[2] = t7;
      x[3] = t4;
  }
  *)
  Definition apply_hl_mat4 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ R ], [ x ] =>
      ltac:(M.monadic
        (let x := M.alloc (| x |) in
        M.read (|
          let~ t0 : Ty.apply (Ty.path "*") [] [ R ] :=
            M.alloc (|
              M.call_closure (|
                R,
                M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                [
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| x |) |),
                          Value.Integer IntegerKind.Usize 0
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| x |) |),
                          Value.Integer IntegerKind.Usize 1
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          let~ t1 : Ty.apply (Ty.path "*") [] [ R ] :=
            M.alloc (|
              M.call_closure (|
                R,
                M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                [
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| x |) |),
                          Value.Integer IntegerKind.Usize 2
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| x |) |),
                          Value.Integer IntegerKind.Usize 3
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          let~ t2 : Ty.apply (Ty.path "*") [] [ R ] :=
            M.alloc (|
              M.call_closure (|
                R,
                M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                [
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                    [
                      M.call_closure (|
                        R,
                        M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| x |) |),
                              Value.Integer IntegerKind.Usize 1
                            |)
                          |)
                        ]
                      |);
                      M.call_closure (|
                        R,
                        M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| x |) |),
                              Value.Integer IntegerKind.Usize 1
                            |)
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, t1 |) ]
                  |)
                ]
              |)
            |) in
          let~ t3 : Ty.apply (Ty.path "*") [] [ R ] :=
            M.alloc (|
              M.call_closure (|
                R,
                M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                [
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                    [
                      M.call_closure (|
                        R,
                        M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| x |) |),
                              Value.Integer IntegerKind.Usize 3
                            |)
                          |)
                        ]
                      |);
                      M.call_closure (|
                        R,
                        M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| x |) |),
                              Value.Integer IntegerKind.Usize 3
                            |)
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, t0 |) ]
                  |)
                ]
              |)
            |) in
          let~ t4 : Ty.apply (Ty.path "*") [] [ R ] :=
            M.alloc (|
              M.call_closure (|
                R,
                M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                [
                  M.call_closure (|
                    R,
                    M.get_trait_method (|
                      "p3_field::field::PrimeCharacteristicRing",
                      R,
                      [],
                      [],
                      "double",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            R,
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              R,
                              [],
                              [],
                              "double",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, t1 |) ]
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, t3 |) ]
                  |)
                ]
              |)
            |) in
          let~ t5 : Ty.apply (Ty.path "*") [] [ R ] :=
            M.alloc (|
              M.call_closure (|
                R,
                M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                [
                  M.call_closure (|
                    R,
                    M.get_trait_method (|
                      "p3_field::field::PrimeCharacteristicRing",
                      R,
                      [],
                      [],
                      "double",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            R,
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              R,
                              [],
                              [],
                              "double",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, t0 |) ]
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, t2 |) ]
                  |)
                ]
              |)
            |) in
          let~ t6 : Ty.apply (Ty.path "*") [] [ R ] :=
            M.alloc (|
              M.call_closure (|
                R,
                M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                [
                  M.read (| t3 |);
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, t5 |) ]
                  |)
                ]
              |)
            |) in
          let~ t7 : Ty.apply (Ty.path "*") [] [ R ] :=
            M.alloc (|
              M.call_closure (|
                R,
                M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                [
                  M.read (| t2 |);
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, t4 |) ]
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| x |) |),
                  Value.Integer IntegerKind.Usize 0
                |),
                M.read (| t6 |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| x |) |),
                  Value.Integer IntegerKind.Usize 1
                |),
                M.read (| t5 |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| x |) |),
                  Value.Integer IntegerKind.Usize 2
                |),
                M.read (| t7 |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| x |) |),
                  Value.Integer IntegerKind.Usize 3
                |),
                M.read (| t4 |)
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_apply_hl_mat4 :
    M.IsFunction.C "p3_poseidon2::external::apply_hl_mat4" apply_hl_mat4.
  Admitted.
  Global Typeclasses Opaque apply_hl_mat4.
  
  (*
  fn apply_mat4<R>(x: &mut [R; 4])
  where
      R: PrimeCharacteristicRing,
  {
      let t01 = x[0].clone() + x[1].clone();
      let t23 = x[2].clone() + x[3].clone();
      let t0123 = t01.clone() + t23.clone();
      let t01123 = t0123.clone() + x[1].clone();
      let t01233 = t0123 + x[3].clone();
      // The order here is important. Need to overwrite x[0] and x[2] after x[1] and x[3].
      x[3] = t01233.clone() + x[0].double(); // 3*x[0] + x[1] + x[2] + 2*x[3]
      x[1] = t01123.clone() + x[2].double(); // x[0] + 2*x[1] + 3*x[2] + x[3]
      x[0] = t01123 + t01; // 2*x[0] + 3*x[1] + x[2] + x[3]
      x[2] = t01233 + t23; // x[0] + x[1] + 2*x[2] + 3*x[3]
  }
  *)
  Definition apply_mat4 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ R ], [ x ] =>
      ltac:(M.monadic
        (let x := M.alloc (| x |) in
        M.read (|
          let~ t01 : Ty.apply (Ty.path "*") [] [ R ] :=
            M.alloc (|
              M.call_closure (|
                R,
                M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                [
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| x |) |),
                          Value.Integer IntegerKind.Usize 0
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| x |) |),
                          Value.Integer IntegerKind.Usize 1
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          let~ t23 : Ty.apply (Ty.path "*") [] [ R ] :=
            M.alloc (|
              M.call_closure (|
                R,
                M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                [
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| x |) |),
                          Value.Integer IntegerKind.Usize 2
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| x |) |),
                          Value.Integer IntegerKind.Usize 3
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          let~ t0123 : Ty.apply (Ty.path "*") [] [ R ] :=
            M.alloc (|
              M.call_closure (|
                R,
                M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                [
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, t01 |) ]
                  |);
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, t23 |) ]
                  |)
                ]
              |)
            |) in
          let~ t01123 : Ty.apply (Ty.path "*") [] [ R ] :=
            M.alloc (|
              M.call_closure (|
                R,
                M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                [
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, t0123 |) ]
                  |);
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| x |) |),
                          Value.Integer IntegerKind.Usize 1
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          let~ t01233 : Ty.apply (Ty.path "*") [] [ R ] :=
            M.alloc (|
              M.call_closure (|
                R,
                M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                [
                  M.read (| t0123 |);
                  M.call_closure (|
                    R,
                    M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| x |) |),
                          Value.Integer IntegerKind.Usize 3
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| x |) |),
                  Value.Integer IntegerKind.Usize 3
                |),
                M.call_closure (|
                  R,
                  M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                  [
                    M.call_closure (|
                      R,
                      M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, t01233 |) ]
                    |);
                    M.call_closure (|
                      R,
                      M.get_trait_method (|
                        "p3_field::field::PrimeCharacteristicRing",
                        R,
                        [],
                        [],
                        "double",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| x |) |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| x |) |),
                  Value.Integer IntegerKind.Usize 1
                |),
                M.call_closure (|
                  R,
                  M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                  [
                    M.call_closure (|
                      R,
                      M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, t01123 |) ]
                    |);
                    M.call_closure (|
                      R,
                      M.get_trait_method (|
                        "p3_field::field::PrimeCharacteristicRing",
                        R,
                        [],
                        [],
                        "double",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| x |) |),
                            Value.Integer IntegerKind.Usize 2
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| x |) |),
                  Value.Integer IntegerKind.Usize 0
                |),
                M.call_closure (|
                  R,
                  M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                  [ M.read (| t01123 |); M.read (| t01 |) ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.deref (| M.read (| x |) |),
                  Value.Integer IntegerKind.Usize 2
                |),
                M.call_closure (|
                  R,
                  M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
                  [ M.read (| t01233 |); M.read (| t23 |) ]
                |)
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_apply_mat4 :
    M.IsFunction.C "p3_poseidon2::external::apply_mat4" apply_mat4.
  Admitted.
  Global Typeclasses Opaque apply_mat4.
  
  (* StructTuple
    {
      name := "HLMDSMat4";
      const_params := [];
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_clone_Clone_for_p3_poseidon2_external_HLMDSMat4.
    Definition Self : Ty.t := Ty.path "p3_poseidon2::external::HLMDSMat4".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "p3_poseidon2::external::HLMDSMat4" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_p3_poseidon2_external_HLMDSMat4.
  
  Module Impl_core_default_Default_for_p3_poseidon2_external_HLMDSMat4.
    Definition Self : Ty.t := Ty.path "p3_poseidon2::external::HLMDSMat4".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] => ltac:(M.monadic (Value.StructTuple "p3_poseidon2::external::HLMDSMat4" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_p3_poseidon2_external_HLMDSMat4.
  
  Module Impl_p3_symmetric_permutation_Permutation_where_p3_field_field_PrimeCharacteristicRing_R_array_Usize_4_R_for_p3_poseidon2_external_HLMDSMat4.
    Definition Self (R : Ty.t) : Ty.t := Ty.path "p3_poseidon2::external::HLMDSMat4".
    
    (*
        fn permute_mut(&self, input: &mut [R; 4]) {
            apply_hl_mat4(input)
        }
    *)
    Definition permute_mut (R : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self R in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.tuple [],
            M.get_function (| "p3_poseidon2::external::apply_hl_mat4", [], [ R ] |),
            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (R : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ R ] ]
        (Self R)
        (* Instance *) [ ("permute_mut", InstanceField.Method (permute_mut R)) ].
  End Impl_p3_symmetric_permutation_Permutation_where_p3_field_field_PrimeCharacteristicRing_R_array_Usize_4_R_for_p3_poseidon2_external_HLMDSMat4.
  
  Module Impl_p3_mds_MdsPermutation_where_p3_field_field_PrimeCharacteristicRing_R_Usize_4_R_for_p3_poseidon2_external_HLMDSMat4.
    Definition Self (R : Ty.t) : Ty.t := Ty.path "p3_poseidon2::external::HLMDSMat4".
    
    Axiom Implements :
      forall (R : Ty.t),
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 4 ]
        (* Trait polymorphic types *) [ R ]
        (Self R)
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_where_p3_field_field_PrimeCharacteristicRing_R_Usize_4_R_for_p3_poseidon2_external_HLMDSMat4.
  
  (* StructTuple
    {
      name := "MDSMat4";
      const_params := [];
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_clone_Clone_for_p3_poseidon2_external_MDSMat4.
    Definition Self : Ty.t := Ty.path "p3_poseidon2::external::MDSMat4".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "p3_poseidon2::external::MDSMat4" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_p3_poseidon2_external_MDSMat4.
  
  Module Impl_core_default_Default_for_p3_poseidon2_external_MDSMat4.
    Definition Self : Ty.t := Ty.path "p3_poseidon2::external::MDSMat4".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] => ltac:(M.monadic (Value.StructTuple "p3_poseidon2::external::MDSMat4" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_p3_poseidon2_external_MDSMat4.
  
  Module Impl_p3_symmetric_permutation_Permutation_where_p3_field_field_PrimeCharacteristicRing_R_array_Usize_4_R_for_p3_poseidon2_external_MDSMat4.
    Definition Self (R : Ty.t) : Ty.t := Ty.path "p3_poseidon2::external::MDSMat4".
    
    (*
        fn permute_mut(&self, input: &mut [R; 4]) {
            apply_mat4(input)
        }
    *)
    Definition permute_mut (R : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self R in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.tuple [],
            M.get_function (| "p3_poseidon2::external::apply_mat4", [], [ R ] |),
            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| input |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (R : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ R ] ]
        (Self R)
        (* Instance *) [ ("permute_mut", InstanceField.Method (permute_mut R)) ].
  End Impl_p3_symmetric_permutation_Permutation_where_p3_field_field_PrimeCharacteristicRing_R_array_Usize_4_R_for_p3_poseidon2_external_MDSMat4.
  
  Module Impl_p3_mds_MdsPermutation_where_p3_field_field_PrimeCharacteristicRing_R_Usize_4_R_for_p3_poseidon2_external_MDSMat4.
    Definition Self (R : Ty.t) : Ty.t := Ty.path "p3_poseidon2::external::MDSMat4".
    
    Axiom Implements :
      forall (R : Ty.t),
      M.IsTraitInstance
        "p3_mds::MdsPermutation"
        (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 4 ]
        (* Trait polymorphic types *) [ R ]
        (Self R)
        (* Instance *) [].
  End Impl_p3_mds_MdsPermutation_where_p3_field_field_PrimeCharacteristicRing_R_Usize_4_R_for_p3_poseidon2_external_MDSMat4.
  
  (*
  pub fn mds_light_permutation<
      R: PrimeCharacteristicRing,
      MdsPerm4: MdsPermutation<R, 4>,
      const WIDTH: usize,
  >(
      state: &mut [R; WIDTH],
      mdsmat: &MdsPerm4,
  ) {
      match WIDTH {
          2 => {
              let sum = state[0].clone() + state[1].clone();
              state[0] += sum.clone();
              state[1] += sum;
          }
  
          3 => {
              let sum = state[0].clone() + state[1].clone() + state[2].clone();
              state[0] += sum.clone();
              state[1] += sum.clone();
              state[2] += sum;
          }
  
          4 | 8 | 12 | 16 | 20 | 24 => {
              // First, we apply M_4 to each consecutive four elements of the state.
              // In Appendix B's terminology, this replaces each x_i with x_i'.
              for chunk in state.chunks_exact_mut(4) {
                  mdsmat.permute_mut(chunk.try_into().unwrap());
              }
              // Now, we apply the outer circulant matrix (to compute the y_i values).
  
              // We first precompute the four sums of every four elements.
              let sums: [R; 4] = core::array::from_fn(|k| {
                  (0..WIDTH)
                      .step_by(4)
                      .map(|j| state[j + k].clone())
                      .sum::<R>()
              });
  
              // The formula for each y_i involves 2x_i' term and x_j' terms for each j that equals i mod 4.
              // In other words, we can add a single copy of x_i' to the appropriate one of our precomputed sums
              state
                  .iter_mut()
                  .enumerate()
                  .for_each(|(i, elem)| *elem += sums[i % 4].clone());
          }
  
          _ => {
              panic!("Unsupported width");
          }
      }
  }
  *)
  Definition mds_light_permutation (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ WIDTH ], [ R; MdsPerm4 ], [ state; mdsmat ] =>
      ltac:(M.monadic
        (let state := M.alloc (| state |) in
        let mdsmat := M.alloc (| mdsmat |) in
        M.read (|
          M.match_operator (|
            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
            M.alloc (| WIDTH |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.Usize 2
                    |) in
                  let~ sum : Ty.apply (Ty.path "*") [] [ R ] :=
                    M.alloc (|
                      M.call_closure (|
                        R,
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          R,
                          [],
                          [ R ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            R,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              R,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| state |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            R,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              R,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| state |) |),
                                  Value.Integer IntegerKind.Usize 1
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "core::ops::arith::AddAssign",
                          R,
                          [],
                          [ R ],
                          "add_assign",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| state |) |),
                              Value.Integer IntegerKind.Usize 0
                            |)
                          |);
                          M.call_closure (|
                            R,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              R,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, sum |) ]
                          |)
                        ]
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "core::ops::arith::AddAssign",
                          R,
                          [],
                          [ R ],
                          "add_assign",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| state |) |),
                              Value.Integer IntegerKind.Usize 1
                            |)
                          |);
                          M.read (| sum |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.Usize 3
                    |) in
                  let~ sum : Ty.apply (Ty.path "*") [] [ R ] :=
                    M.alloc (|
                      M.call_closure (|
                        R,
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          R,
                          [],
                          [ R ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            R,
                            M.get_trait_method (|
                              "core::ops::arith::Add",
                              R,
                              [],
                              [ R ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                R,
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  R,
                                  [],
                                  [],
                                  "clone",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| state |) |),
                                      Value.Integer IntegerKind.Usize 0
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                R,
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  R,
                                  [],
                                  [],
                                  "clone",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| state |) |),
                                      Value.Integer IntegerKind.Usize 1
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |);
                          M.call_closure (|
                            R,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              R,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| state |) |),
                                  Value.Integer IntegerKind.Usize 2
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "core::ops::arith::AddAssign",
                          R,
                          [],
                          [ R ],
                          "add_assign",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| state |) |),
                              Value.Integer IntegerKind.Usize 0
                            |)
                          |);
                          M.call_closure (|
                            R,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              R,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, sum |) ]
                          |)
                        ]
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "core::ops::arith::AddAssign",
                          R,
                          [],
                          [ R ],
                          "add_assign",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| state |) |),
                              Value.Integer IntegerKind.Usize 1
                            |)
                          |);
                          M.call_closure (|
                            R,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              R,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, sum |) ]
                          |)
                        ]
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "core::ops::arith::AddAssign",
                          R,
                          [],
                          [ R ],
                          "add_assign",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| state |) |),
                              Value.Integer IntegerKind.Usize 2
                            |)
                          |);
                          M.read (| sum |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)));
              fun γ =>
                ltac:(M.monadic
                  (M.find_or_pattern (Ty.tuple []) (|
                    γ,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 4
                            |) in
                          Value.Tuple []));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 8
                            |) in
                          Value.Tuple []));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 12
                            |) in
                          Value.Tuple []));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 16
                            |) in
                          Value.Tuple []));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 20
                            |) in
                          Value.Tuple []));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 24
                            |) in
                          Value.Tuple []))
                    ],
                    fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [] =>
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.use
                                (M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::ChunksExactMut")
                                        []
                                        [ R ],
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::ChunksExactMut")
                                          []
                                          [ R ],
                                        [],
                                        [],
                                        "into_iter",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::slice::iter::ChunksExactMut")
                                            []
                                            [ R ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ R ],
                                            "chunks_exact_mut",
                                            [],
                                            []
                                          |),
                                          [
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| state |) |)
                                              |));
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let iter := M.copy (| γ |) in
                                        M.loop (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          ltac:(M.monadic
                                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ R ] ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::slice::iter::ChunksExactMut")
                                                        []
                                                        [ R ],
                                                      [],
                                                      [],
                                                      "next",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.borrow (| Pointer.Kind.MutRef, iter |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let _ :=
                                                        M.is_struct_tuple (|
                                                          γ,
                                                          "core::option::Option::None"
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (| M.break (||) |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::option::Option::Some",
                                                          0
                                                        |) in
                                                      let chunk := M.copy (| γ0_0 |) in
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.tuple [],
                                                            M.get_trait_method (|
                                                              "p3_symmetric::permutation::Permutation",
                                                              MdsPerm4,
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      4
                                                                  ]
                                                                  [ R ]
                                                              ],
                                                              "permute_mut",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| mdsmat |) |)
                                                              |);
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&mut")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          4
                                                                      ]
                                                                      [ R ]
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                4
                                                                            ]
                                                                            [ R ]
                                                                        ];
                                                                      Ty.path
                                                                        "core::array::TryFromSliceError"
                                                                    ],
                                                                  "unwrap",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  4
                                                                              ]
                                                                              [ R ]
                                                                          ];
                                                                        Ty.path
                                                                          "core::array::TryFromSliceError"
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::convert::TryInto",
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [ R ]
                                                                        ],
                                                                      [],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  4
                                                                              ]
                                                                              [ R ]
                                                                          ]
                                                                      ],
                                                                      "try_into",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.deref (|
                                                                          M.read (| chunk |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                        |)))
                                  ]
                                |)) in
                            let~ sums :
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [ R ]
                                  ] :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [ R ],
                                  M.get_function (|
                                    "core::array::from_fn",
                                    [ Value.Integer IntegerKind.Usize 4 ],
                                    [ R; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] R ]
                                  |),
                                  [
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.apply
                                                  (Ty.path "*")
                                                  []
                                                  [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] R
                                                  ],
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let k := M.copy (| γ |) in
                                                      M.call_closure (|
                                                        R,
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::map::Map")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::step_by::StepBy")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ]
                                                                ];
                                                              Ty.function
                                                                [ Ty.tuple [ Ty.path "usize" ] ]
                                                                R
                                                            ],
                                                          [],
                                                          [],
                                                          "sum",
                                                          [],
                                                          [ R ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::map::Map")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::step_by::StepBy")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::ops::range::Range")
                                                                      []
                                                                      [ Ty.path "usize" ]
                                                                  ];
                                                                Ty.function
                                                                  [ Ty.tuple [ Ty.path "usize" ] ]
                                                                  R
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::step_by::StepBy")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ]
                                                                ],
                                                              [],
                                                              [],
                                                              "map",
                                                              [],
                                                              [
                                                                R;
                                                                Ty.function
                                                                  [ Ty.tuple [ Ty.path "usize" ] ]
                                                                  R
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::step_by::StepBy")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::ops::range::Range")
                                                                      []
                                                                      [ Ty.path "usize" ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  [],
                                                                  [],
                                                                  "step_by",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  Value.StructRecord
                                                                    "core::ops::range::Range"
                                                                    [
                                                                      ("start",
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          0);
                                                                      ("end_", WIDTH)
                                                                    ];
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      ltac:(M.monadic
                                                                        (M.match_operator (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ]
                                                                                ]
                                                                                R
                                                                            ],
                                                                          M.alloc (| α0 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let j :=
                                                                                  M.copy (| γ |) in
                                                                                M.call_closure (|
                                                                                  R,
                                                                                  M.get_trait_method (|
                                                                                    "core::clone::Clone",
                                                                                    R,
                                                                                    [],
                                                                                    [],
                                                                                    "clone",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.SubPointer.get_array_field (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            state
                                                                                          |)
                                                                                        |),
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "usize",
                                                                                          BinOp.Wrap.add,
                                                                                          [
                                                                                            M.read (|
                                                                                              j
                                                                                            |);
                                                                                            M.read (|
                                                                                              k
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                    | _ =>
                                                                      M.impossible
                                                                        "wrong number of arguments"
                                                                    end))
                                                            ]
                                                          |)
                                                        ]
                                                      |)))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |)
                              |) in
                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      []
                                      [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ R ] ],
                                    [],
                                    [],
                                    "for_each",
                                    [],
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply (Ty.path "&mut") [] [ R ]
                                                ]
                                            ]
                                        ]
                                        (Ty.tuple [])
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                        []
                                        [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ R ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ R ],
                                        [],
                                        [],
                                        "enumerate",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ R ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ R ],
                                            "iter_mut",
                                            [],
                                            []
                                          |),
                                          [
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| state |) |)
                                              |))
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.apply
                                                  (Ty.path "*")
                                                  []
                                                  [
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply (Ty.path "&mut") [] [ R ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.tuple [])
                                                  ],
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                      let γ0_1 :=
                                                        M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                      let i := M.copy (| γ0_0 |) in
                                                      let elem := M.copy (| γ0_1 |) in
                                                      M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_trait_method (|
                                                          "core::ops::arith::AddAssign",
                                                          R,
                                                          [],
                                                          [ R ],
                                                          "add_assign",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (| M.read (| elem |) |)
                                                          |);
                                                          M.call_closure (|
                                                            R,
                                                            M.get_trait_method (|
                                                              "core::clone::Clone",
                                                              R,
                                                              [],
                                                              [],
                                                              "clone",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.SubPointer.get_array_field (|
                                                                  sums,
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    BinOp.Wrap.rem,
                                                                    [
                                                                      M.read (| i |);
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        4
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        | _ => M.impossible "wrong number of arguments"
                        end)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        Ty.path "never",
                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              [ Value.Integer IntegerKind.Usize 1 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (| Value.Array [ mk_str (| "Unsupported width" |) ] |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_mds_light_permutation :
    M.IsFunction.C "p3_poseidon2::external::mds_light_permutation" mds_light_permutation.
  Admitted.
  Global Typeclasses Opaque mds_light_permutation.
  
  (* StructRecord
    {
      name := "ExternalLayerConstants";
      const_params := [ "WIDTH" ];
      ty_params := [ "T" ];
      fields :=
        [
          ("initial",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ]; Ty.path "alloc::alloc::Global" ]);
          ("terminal",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ]; Ty.path "alloc::alloc::Global" ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_p3_poseidon2_external_ExternalLayerConstants_WIDTH_T.
    Definition Self (WIDTH : Value.t) (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_poseidon2::external::ExternalLayerConstants") [ WIDTH ] [ T ].
    
    (* Debug *)
    Definition fmt
        (WIDTH : Value.t)
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH T in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "ExternalLayerConstants" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "initial" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_poseidon2::external::ExternalLayerConstants",
                        "initial"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "terminal" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_poseidon2::external::ExternalLayerConstants",
                            "terminal"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH : Value.t) (T : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH T)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt WIDTH T)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_p3_poseidon2_external_ExternalLayerConstants_WIDTH_T.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_p3_poseidon2_external_ExternalLayerConstants_WIDTH_T.
    Definition Self (WIDTH : Value.t) (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_poseidon2::external::ExternalLayerConstants") [ WIDTH ] [ T ].
    
    (* Clone *)
    Definition clone
        (WIDTH : Value.t)
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_poseidon2::external::ExternalLayerConstants"
            [
              ("initial",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ]; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ]; Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_poseidon2::external::ExternalLayerConstants",
                            "initial"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("terminal",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ]; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ]; Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_poseidon2::external::ExternalLayerConstants",
                            "terminal"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH : Value.t) (T : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH T)
        (* Instance *) [ ("clone", InstanceField.Method (clone WIDTH T)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_T_for_p3_poseidon2_external_ExternalLayerConstants_WIDTH_T.
  
  Module Impl_p3_poseidon2_external_ExternalLayerConstants_WIDTH_T.
    Definition Self (WIDTH : Value.t) (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_poseidon2::external::ExternalLayerConstants") [ WIDTH ] [ T ].
    
    (*
        pub fn new(initial: Vec<[T; WIDTH]>, terminal: Vec<[T; WIDTH]>) -> Self {
            assert_eq!(
                initial.len(),
                terminal.len(),
                "The number of initial and terminal external rounds should be equal."
            );
            Self { initial, terminal }
        }
    *)
    Definition new
        (WIDTH : Value.t)
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH T in
      match ε, τ, α with
      | [], [], [ initial; terminal ] =>
        ltac:(M.monadic
          (let initial := M.alloc (| initial |) in
          let terminal := M.alloc (| terminal |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply (Ty.path "array") [ WIDTH ] [ T ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, initial |) ]
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply (Ty.path "array") [ WIDTH ] [ T ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, terminal |) ]
                          |)
                        |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "usize"; Ty.path "usize" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [
                                              M.call_closure (|
                                                Ty.path "core::fmt::Arguments",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::Arguments",
                                                  "new_const",
                                                  [ Value.Integer IntegerKind.Usize 1 ],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Value.Array
                                                            [
                                                              mk_str (|
                                                                "The number of initial and terminal external rounds should be equal."
                                                              |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            M.alloc (|
              Value.StructRecord
                "p3_poseidon2::external::ExternalLayerConstants"
                [ ("initial", M.read (| initial |)); ("terminal", M.read (| terminal |)) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (WIDTH : Value.t) (T : Ty.t),
      M.IsAssociatedFunction.C (Self WIDTH T) "new" (new WIDTH T).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn new_from_rng<R: Rng>(external_round_number: usize, rng: &mut R) -> Self
        where
            StandardUniform: Distribution<[T; WIDTH]>,
        {
            let half_f = external_round_number / 2;
            assert_eq!(
                2 * half_f,
                external_round_number,
                "The total number of external rounds should be even"
            );
            let initial_constants = rng.sample_iter(StandardUniform).take(half_f).collect();
            let terminal_constants = rng.sample_iter(StandardUniform).take(half_f).collect();
    
            Self::new(initial_constants, terminal_constants)
        }
    *)
    Definition new_from_rng
        (WIDTH : Value.t)
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH T in
      match ε, τ, α with
      | [], [ R ], [ external_round_number; rng ] =>
        ltac:(M.monadic
          (let external_round_number := M.alloc (| external_round_number |) in
          let rng := M.alloc (| rng |) in
          M.read (|
            let~ half_f : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.div,
                  [ M.read (| external_round_number |); Value.Integer IntegerKind.Usize 2 ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.mul,
                            [ Value.Integer IntegerKind.Usize 2; M.read (| half_f |) ]
                          |)
                        |)
                      |);
                      M.borrow (| Pointer.Kind.Ref, external_round_number |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "usize"; Ty.path "usize" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [
                                              M.call_closure (|
                                                Ty.path "core::fmt::Arguments",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::Arguments",
                                                  "new_const",
                                                  [ Value.Integer IntegerKind.Usize 1 ],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Value.Array
                                                            [
                                                              mk_str (|
                                                                "The total number of external rounds should be even"
                                                              |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            let~ initial_constants :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ]; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ]; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::take::Take")
                      []
                      [
                        Ty.apply
                          (Ty.path "rand::distr::distribution::Iter")
                          []
                          [
                            Ty.path "rand::distr::StandardUniform";
                            Ty.apply (Ty.path "&mut") [] [ R ];
                            Ty.apply (Ty.path "array") [ WIDTH ] [ T ]
                          ]
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ]; Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::take::Take")
                        []
                        [
                          Ty.apply
                            (Ty.path "rand::distr::distribution::Iter")
                            []
                            [
                              Ty.path "rand::distr::StandardUniform";
                              Ty.apply (Ty.path "&mut") [] [ R ];
                              Ty.apply (Ty.path "array") [ WIDTH ] [ T ]
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "rand::distr::distribution::Iter")
                          []
                          [
                            Ty.path "rand::distr::StandardUniform";
                            Ty.apply (Ty.path "&mut") [] [ R ];
                            Ty.apply (Ty.path "array") [ WIDTH ] [ T ]
                          ],
                        [],
                        [],
                        "take",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "rand::distr::distribution::Iter")
                            []
                            [
                              Ty.path "rand::distr::StandardUniform";
                              Ty.apply (Ty.path "&mut") [] [ R ];
                              Ty.apply (Ty.path "array") [ WIDTH ] [ T ]
                            ],
                          M.get_trait_method (|
                            "rand::rng::Rng",
                            Ty.apply (Ty.path "&mut") [] [ R ],
                            [],
                            [],
                            "sample_iter",
                            [],
                            [
                              Ty.apply (Ty.path "array") [ WIDTH ] [ T ];
                              Ty.path "rand::distr::StandardUniform"
                            ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| rng |) |) |);
                            Value.StructTuple "rand::distr::StandardUniform" []
                          ]
                        |);
                        M.read (| half_f |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ terminal_constants :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ]; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ]; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::take::Take")
                      []
                      [
                        Ty.apply
                          (Ty.path "rand::distr::distribution::Iter")
                          []
                          [
                            Ty.path "rand::distr::StandardUniform";
                            Ty.apply (Ty.path "&mut") [] [ R ];
                            Ty.apply (Ty.path "array") [ WIDTH ] [ T ]
                          ]
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ]; Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::take::Take")
                        []
                        [
                          Ty.apply
                            (Ty.path "rand::distr::distribution::Iter")
                            []
                            [
                              Ty.path "rand::distr::StandardUniform";
                              Ty.apply (Ty.path "&mut") [] [ R ];
                              Ty.apply (Ty.path "array") [ WIDTH ] [ T ]
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "rand::distr::distribution::Iter")
                          []
                          [
                            Ty.path "rand::distr::StandardUniform";
                            Ty.apply (Ty.path "&mut") [] [ R ];
                            Ty.apply (Ty.path "array") [ WIDTH ] [ T ]
                          ],
                        [],
                        [],
                        "take",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "rand::distr::distribution::Iter")
                            []
                            [
                              Ty.path "rand::distr::StandardUniform";
                              Ty.apply (Ty.path "&mut") [] [ R ];
                              Ty.apply (Ty.path "array") [ WIDTH ] [ T ]
                            ],
                          M.get_trait_method (|
                            "rand::rng::Rng",
                            Ty.apply (Ty.path "&mut") [] [ R ],
                            [],
                            [],
                            "sample_iter",
                            [],
                            [
                              Ty.apply (Ty.path "array") [ WIDTH ] [ T ];
                              Ty.path "rand::distr::StandardUniform"
                            ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| rng |) |) |);
                            Value.StructTuple "rand::distr::StandardUniform" []
                          ]
                        |);
                        M.read (| half_f |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "p3_poseidon2::external::ExternalLayerConstants") [ WIDTH ] [ T ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_poseidon2::external::ExternalLayerConstants")
                    [ WIDTH ]
                    [ T ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| initial_constants |); M.read (| terminal_constants |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_from_rng :
      forall (WIDTH : Value.t) (T : Ty.t),
      M.IsAssociatedFunction.C (Self WIDTH T) "new_from_rng" (new_from_rng WIDTH T).
    Admitted.
    Global Typeclasses Opaque new_from_rng.
    
    (*
        pub fn new_from_saved_array<U, const N: usize>(
            [initial, terminal]: [[[U; WIDTH]; N]; 2],
            conversion_fn: fn([U; WIDTH]) -> [T; WIDTH],
        ) -> Self
        where
            T: Clone,
        {
            let initial_consts = initial.map(conversion_fn).to_vec();
            let terminal_consts = terminal.map(conversion_fn).to_vec();
            Self::new(initial_consts, terminal_consts)
        }
    *)
    Definition new_from_saved_array
        (WIDTH : Value.t)
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH T in
      match ε, τ, α with
      | [ N ], [ U ], [ β0; conversion_fn ] =>
        ltac:(M.monadic
          (let β0 := M.alloc (| β0 |) in
          let conversion_fn := M.alloc (| conversion_fn |) in
          M.match_operator (|
            Ty.apply
              (Ty.path "*")
              []
              [ Ty.apply (Ty.path "p3_poseidon2::external::ExternalLayerConstants") [ WIDTH ] [ T ]
              ],
            β0,
            [
              fun γ =>
                ltac:(M.monadic
                  (let _ := is_constant_or_break_match (| M.read (| γ |), UnsupportedLiteral |) in
                  M.read (|
                    let~ initial_consts :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply (Ty.path "array") [ WIDTH ] [ T ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply (Ty.path "array") [ WIDTH ] [ T ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ] ],
                            "to_vec",
                            [],
                            []
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ N ]
                                      [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ] ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ N ]
                                        [ Ty.apply (Ty.path "array") [ WIDTH ] [ U ] ],
                                      "map",
                                      [],
                                      [
                                        Ty.function
                                          [ Ty.apply (Ty.path "array") [ WIDTH ] [ U ] ]
                                          (Ty.apply (Ty.path "array") [ WIDTH ] [ T ]);
                                        Ty.apply (Ty.path "array") [ WIDTH ] [ T ]
                                      ]
                                    |),
                                    [ M.read (| initial |); M.read (| conversion_fn |) ]
                                  |)
                                |)
                              |))
                          ]
                        |)
                      |) in
                    let~ terminal_consts :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply (Ty.path "array") [ WIDTH ] [ T ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply (Ty.path "array") [ WIDTH ] [ T ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ] ],
                            "to_vec",
                            [],
                            []
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ N ]
                                      [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ] ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ N ]
                                        [ Ty.apply (Ty.path "array") [ WIDTH ] [ U ] ],
                                      "map",
                                      [],
                                      [
                                        Ty.function
                                          [ Ty.apply (Ty.path "array") [ WIDTH ] [ U ] ]
                                          (Ty.apply (Ty.path "array") [ WIDTH ] [ T ]);
                                        Ty.apply (Ty.path "array") [ WIDTH ] [ T ]
                                      ]
                                    |),
                                    [ M.read (| terminal |); M.read (| conversion_fn |) ]
                                  |)
                                |)
                              |))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_poseidon2::external::ExternalLayerConstants")
                          [ WIDTH ]
                          [ T ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "p3_poseidon2::external::ExternalLayerConstants")
                            [ WIDTH ]
                            [ T ],
                          "new",
                          [],
                          []
                        |),
                        [ M.read (| initial_consts |); M.read (| terminal_consts |) ]
                      |)
                    |)
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_from_saved_array :
      forall (WIDTH : Value.t) (T : Ty.t),
      M.IsAssociatedFunction.C (Self WIDTH T) "new_from_saved_array" (new_from_saved_array WIDTH T).
    Admitted.
    Global Typeclasses Opaque new_from_saved_array.
    
    (*
        pub const fn get_initial_constants(&self) -> &Vec<[T; WIDTH]> {
            &self.initial
        }
    *)
    Definition get_initial_constants
        (WIDTH : Value.t)
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_poseidon2::external::ExternalLayerConstants",
                  "initial"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_get_initial_constants :
      forall (WIDTH : Value.t) (T : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH T)
        "get_initial_constants"
        (get_initial_constants WIDTH T).
    Admitted.
    Global Typeclasses Opaque get_initial_constants.
    
    (*
        pub const fn get_terminal_constants(&self) -> &Vec<[T; WIDTH]> {
            &self.terminal
        }
    *)
    Definition get_terminal_constants
        (WIDTH : Value.t)
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_poseidon2::external::ExternalLayerConstants",
                  "terminal"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_get_terminal_constants :
      forall (WIDTH : Value.t) (T : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH T)
        "get_terminal_constants"
        (get_terminal_constants WIDTH T).
    Admitted.
    Global Typeclasses Opaque get_terminal_constants.
  End Impl_p3_poseidon2_external_ExternalLayerConstants_WIDTH_T.
  
  (* Trait *)
  (* Empty module 'ExternalLayerConstructor' *)
  
  (* Trait *)
  (* Empty module 'ExternalLayer' *)
  
  (*
  pub fn external_terminal_permute_state<
      R: PrimeCharacteristicRing,
      CT: Copy, // Whatever type the constants are stored as.
      MdsPerm4: MdsPermutation<R, 4>,
      const WIDTH: usize,
  >(
      state: &mut [R; WIDTH],
      terminal_external_constants: &[[CT; WIDTH]],
      add_rc_and_sbox: fn(&mut R, CT),
      mat4: &MdsPerm4,
  ) {
      for elem in terminal_external_constants {
          state
              .iter_mut()
              .zip(elem.iter())
              .for_each(|(s, &rc)| add_rc_and_sbox(s, rc));
          mds_light_permutation(state, mat4);
      }
  }
  *)
  Definition external_terminal_permute_state
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [ WIDTH ],
        [ R; CT; MdsPerm4 ],
        [ state; terminal_external_constants; add_rc_and_sbox; mat4 ] =>
      ltac:(M.monadic
        (let state := M.alloc (| state |) in
        let terminal_external_constants := M.alloc (| terminal_external_constants |) in
        let add_rc_and_sbox := M.alloc (| add_rc_and_sbox |) in
        let mat4 := M.alloc (| mat4 |) in
        M.read (|
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    []
                    [ Ty.apply (Ty.path "array") [ WIDTH ] [ CT ] ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "array") [ WIDTH ] [ CT ] ]
                      ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [ M.read (| terminal_external_constants |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ WIDTH ] [ CT ] ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.apply (Ty.path "array") [ WIDTH ] [ CT ] ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let elem := M.copy (| γ0_0 |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::zip::Zip")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [ R ];
                                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ CT ]
                                            ],
                                          [],
                                          [],
                                          "for_each",
                                          [],
                                          [
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply (Ty.path "&mut") [] [ R ];
                                                        Ty.apply (Ty.path "&") [] [ CT ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.tuple [])
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::zip::Zip")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::IterMut")
                                                  []
                                                  [ R ];
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ CT ]
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [ R ],
                                              [],
                                              [],
                                              "zip",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ CT ]
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::IterMut")
                                                  []
                                                  [ R ],
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ R ],
                                                  "iter_mut",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  (* Unsize *)
                                                  M.pointer_coercion
                                                    (M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.deref (| M.read (| state |) |)
                                                    |))
                                                ]
                                              |);
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ CT ],
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ CT ],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  (* Unsize *)
                                                  M.pointer_coercion
                                                    (M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| elem |) |)
                                                    |))
                                                ]
                                              |)
                                            ]
                                          |);
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      Ty.apply
                                                        (Ty.path "*")
                                                        []
                                                        [
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [ R ];
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ CT ]
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.tuple [])
                                                        ],
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                0
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                1
                                                              |) in
                                                            let s := M.copy (| γ0_0 |) in
                                                            let γ0_1 := M.read (| γ0_1 |) in
                                                            let rc := M.copy (| γ0_1 |) in
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.read (| add_rc_and_sbox |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (| M.read (| s |) |)
                                                                |);
                                                                M.read (| rc |)
                                                              ]
                                                            |)))
                                                      ]
                                                    |)))
                                                | _ => M.impossible "wrong number of arguments"
                                                end))
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_function (|
                                          "p3_poseidon2::external::mds_light_permutation",
                                          [ WIDTH ],
                                          [ R; MdsPerm4 ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| state |) |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| mat4 |) |)
                                          |)
                                        ]
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_external_terminal_permute_state :
    M.IsFunction.C
      "p3_poseidon2::external::external_terminal_permute_state"
      external_terminal_permute_state.
  Admitted.
  Global Typeclasses Opaque external_terminal_permute_state.
  
  (*
  pub fn external_initial_permute_state<
      R: PrimeCharacteristicRing,
      CT: Copy, // Whatever type the constants are stored as.
      MdsPerm4: MdsPermutation<R, 4>,
      const WIDTH: usize,
  >(
      state: &mut [R; WIDTH],
      initial_external_constants: &[[CT; WIDTH]],
      add_rc_and_sbox: fn(&mut R, CT),
      mat4: &MdsPerm4,
  ) {
      mds_light_permutation(state, mat4);
      // After the initial mds_light_permutation, the remaining layers are identical
      // to the terminal permutation simply with different constants.
      external_terminal_permute_state(state, initial_external_constants, add_rc_and_sbox, mat4)
  }
  *)
  Definition external_initial_permute_state
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [ WIDTH ],
        [ R; CT; MdsPerm4 ],
        [ state; initial_external_constants; add_rc_and_sbox; mat4 ] =>
      ltac:(M.monadic
        (let state := M.alloc (| state |) in
        let initial_external_constants := M.alloc (| initial_external_constants |) in
        let add_rc_and_sbox := M.alloc (| add_rc_and_sbox |) in
        let mat4 := M.alloc (| mat4 |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_poseidon2::external::mds_light_permutation",
                  [ WIDTH ],
                  [ R; MdsPerm4 ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| mat4 |) |) |)
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.tuple [],
              M.get_function (|
                "p3_poseidon2::external::external_terminal_permute_state",
                [ WIDTH ],
                [ R; CT; MdsPerm4 ]
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.read (| initial_external_constants |) |)
                |);
                M.read (| add_rc_and_sbox |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| mat4 |) |) |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_external_initial_permute_state :
    M.IsFunction.C
      "p3_poseidon2::external::external_initial_permute_state"
      external_initial_permute_state.
  Admitted.
  Global Typeclasses Opaque external_initial_permute_state.
End external.
