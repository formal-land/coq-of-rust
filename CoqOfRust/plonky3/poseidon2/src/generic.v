(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module generic.
  (*
  pub fn add_rc_and_sbox_generic<F: Field, A: Algebra<F> + InjectiveMonomial<D>, const D: u64>(
      val: &mut A,
      rc: F,
  ) {
      *val += rc;
      *val = val.injective_exp_n();
  }
  *)
  Definition add_rc_and_sbox_generic (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ D ], [ F; A ], [ val; rc ] =>
      ltac:(M.monadic
        (let val := M.alloc (| val |) in
        let rc := M.alloc (| rc |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::ops::arith::AddAssign",
                  A,
                  [],
                  [ F ],
                  "add_assign",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| val |) |) |);
                  M.read (| rc |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.deref (| M.read (| val |) |),
                M.call_closure (|
                  A,
                  M.get_trait_method (|
                    "p3_field::field::InjectiveMonomial",
                    A,
                    [ D ],
                    [],
                    "injective_exp_n",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| val |) |) |) ]
                |)
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_add_rc_and_sbox_generic :
    M.IsFunction.C "p3_poseidon2::generic::add_rc_and_sbox_generic" add_rc_and_sbox_generic.
  Admitted.
  Global Typeclasses Opaque add_rc_and_sbox_generic.
  
  (* Trait *)
  Module GenericPoseidon2LinearLayers.
    Definition external_linear_layer
        (WIDTH : Value.t)
        (R Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ state ] =>
        ltac:(M.monadic
          (let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (|
                    "p3_poseidon2::external::mds_light_permutation",
                    [ WIDTH ],
                    [ R; Ty.path "p3_poseidon2::external::MDSMat4" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (| Value.StructTuple "p3_poseidon2::external::MDSMat4" [] |)
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_external_linear_layer :
      forall (WIDTH : Value.t) (R : Ty.t),
      M.IsProvidedMethod
        "p3_poseidon2::generic::GenericPoseidon2LinearLayers"
        "external_linear_layer"
        (external_linear_layer WIDTH R).
  End GenericPoseidon2LinearLayers.
End generic.
