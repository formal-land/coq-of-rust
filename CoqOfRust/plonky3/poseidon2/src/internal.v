(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module internal.
  (* Trait *)
  (* Empty module 'InternalLayerConstructor' *)
  
  (*
  pub fn matmul_internal<F: Field, A: Algebra<F>, const WIDTH: usize>(
      state: &mut [A; WIDTH],
      mat_internal_diag_m_1: [F; WIDTH],
  ) {
      let sum: A = A::sum_array::<WIDTH>(state);
      for i in 0..WIDTH {
          state[i] *= mat_internal_diag_m_1[i];
          state[i] += sum.clone();
      }
  }
  *)
  Definition matmul_internal (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ WIDTH ], [ F; A ], [ state; mat_internal_diag_m_1 ] =>
      ltac:(M.monadic
        (let state := M.alloc (| state |) in
        let mat_internal_diag_m_1 := M.alloc (| mat_internal_diag_m_1 |) in
        M.read (|
          let~ sum : Ty.apply (Ty.path "*") [] [ A ] :=
            M.alloc (|
              M.call_closure (|
                A,
                M.get_trait_method (|
                  "p3_field::field::PrimeCharacteristicRing",
                  A,
                  [],
                  [],
                  "sum_array",
                  [ WIDTH ],
                  []
                |),
                [
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| state |) |) |))
                ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", WIDTH) ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let i := M.copy (| γ0_0 |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_trait_method (|
                                          "core::ops::arith::MulAssign",
                                          A,
                                          [],
                                          [ F ],
                                          "mul_assign",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| state |) |),
                                              M.read (| i |)
                                            |)
                                          |);
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              mat_internal_diag_m_1,
                                              M.read (| i |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_trait_method (|
                                          "core::ops::arith::AddAssign",
                                          A,
                                          [],
                                          [ A ],
                                          "add_assign",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| state |) |),
                                              M.read (| i |)
                                            |)
                                          |);
                                          M.call_closure (|
                                            A,
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              A,
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, sum |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_matmul_internal :
    M.IsFunction.C "p3_poseidon2::internal::matmul_internal" matmul_internal.
  Admitted.
  Global Typeclasses Opaque matmul_internal.
  
  (* Trait *)
  (* Empty module 'InternalLayer' *)
  
  (*
  pub fn internal_permute_state<
      F: Field,
      A: Algebra<F> + InjectiveMonomial<D>,
      const WIDTH: usize,
      const D: u64,
  >(
      state: &mut [A; WIDTH],
      diffusion_mat: fn(&mut [A; WIDTH]),
      internal_constants: &[F],
  ) {
      for elem in internal_constants {
          add_rc_and_sbox_generic(&mut state[0], *elem);
          diffusion_mat(state);
      }
  }
  *)
  Definition internal_permute_state (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ WIDTH; D ], [ F; A ], [ state; diffusion_mat; internal_constants ] =>
      ltac:(M.monadic
        (let state := M.alloc (| state |) in
        let diffusion_mat := M.alloc (| diffusion_mat |) in
        let internal_constants := M.alloc (| internal_constants |) in
        M.read (|
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [ M.read (| internal_constants |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ F ] ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let elem := M.copy (| γ0_0 |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_function (|
                                          "p3_poseidon2::generic::add_rc_and_sbox_generic",
                                          [ D ],
                                          [ F; A ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_array_field (|
                                                  M.deref (| M.read (| state |) |),
                                                  Value.Integer IntegerKind.Usize 0
                                                |)
                                              |)
                                            |)
                                          |);
                                          M.read (| M.deref (| M.read (| elem |) |) |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.read (| diffusion_mat |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| state |) |)
                                          |)
                                        ]
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_internal_permute_state :
    M.IsFunction.C "p3_poseidon2::internal::internal_permute_state" internal_permute_state.
  Admitted.
  Global Typeclasses Opaque internal_permute_state.
End internal.
