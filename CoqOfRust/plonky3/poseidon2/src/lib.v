(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition value_SUPPORTED_WIDTHS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  ltac:(M.monadic
    (M.alloc (|
      Value.Array
        [
          Value.Integer IntegerKind.Usize 2;
          Value.Integer IntegerKind.Usize 3;
          Value.Integer IntegerKind.Usize 4;
          Value.Integer IntegerKind.Usize 8;
          Value.Integer IntegerKind.Usize 12;
          Value.Integer IntegerKind.Usize 16;
          Value.Integer IntegerKind.Usize 20;
          Value.Integer IntegerKind.Usize 24
        ]
    |))).

Global Instance Instance_IsConstant_value_SUPPORTED_WIDTHS :
  M.IsFunction.C "p3_poseidon2::SUPPORTED_WIDTHS" value_SUPPORTED_WIDTHS.
Admitted.
Global Typeclasses Opaque value_SUPPORTED_WIDTHS.

(* StructRecord
  {
    name := "Poseidon2";
    const_params := [ "WIDTH"; "D" ];
    ty_params := [ "F"; "ExternalPerm"; "InternalPerm" ];
    fields :=
      [
        ("external_layer", ExternalPerm);
        ("internal_layer", InternalPerm);
        ("_phantom", Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ])
      ];
  } *)

Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_ExternalPerm_where_core_clone_Clone_InternalPerm_for_p3_poseidon2_Poseidon2_WIDTH_D_F_ExternalPerm_InternalPerm.
  Definition Self (WIDTH D : Value.t) (F ExternalPerm InternalPerm : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "p3_poseidon2::Poseidon2") [ WIDTH; D ] [ F; ExternalPerm; InternalPerm ].
  
  (* Clone *)
  Definition clone
      (WIDTH D : Value.t)
      (F ExternalPerm InternalPerm : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    let Self : Ty.t := Self WIDTH D F ExternalPerm InternalPerm in
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        Value.StructRecord
          "p3_poseidon2::Poseidon2"
          [
            ("external_layer",
              M.call_closure (|
                ExternalPerm,
                M.get_trait_method (|
                  "core::clone::Clone",
                  ExternalPerm,
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_poseidon2::Poseidon2",
                          "external_layer"
                        |)
                      |)
                    |)
                  |)
                ]
              |));
            ("internal_layer",
              M.call_closure (|
                InternalPerm,
                M.get_trait_method (|
                  "core::clone::Clone",
                  InternalPerm,
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_poseidon2::Poseidon2",
                          "internal_layer"
                        |)
                      |)
                    |)
                  |)
                ]
              |));
            ("_phantom",
              M.call_closure (|
                Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_poseidon2::Poseidon2",
                          "_phantom"
                        |)
                      |)
                    |)
                  |)
                ]
              |))
          ]))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    forall (WIDTH D : Value.t) (F ExternalPerm InternalPerm : Ty.t),
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      (Self WIDTH D F ExternalPerm InternalPerm)
      (* Instance *)
      [ ("clone", InstanceField.Method (clone WIDTH D F ExternalPerm InternalPerm)) ].
End Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_ExternalPerm_where_core_clone_Clone_InternalPerm_for_p3_poseidon2_Poseidon2_WIDTH_D_F_ExternalPerm_InternalPerm.

Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_ExternalPerm_where_core_fmt_Debug_InternalPerm_for_p3_poseidon2_Poseidon2_WIDTH_D_F_ExternalPerm_InternalPerm.
  Definition Self (WIDTH D : Value.t) (F ExternalPerm InternalPerm : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "p3_poseidon2::Poseidon2") [ WIDTH; D ] [ F; ExternalPerm; InternalPerm ].
  
  (* Debug *)
  Definition fmt
      (WIDTH D : Value.t)
      (F ExternalPerm InternalPerm : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    let Self : Ty.t := Self WIDTH D F ExternalPerm InternalPerm in
    match ε, τ, α with
    | [], [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; Ty.path "core::fmt::Error" ],
          M.get_associated_function (|
            Ty.path "core::fmt::Formatter",
            "debug_struct_field3_finish",
            [],
            []
          |),
          [
            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Poseidon2" |) |) |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "external_layer" |) |) |);
            (* Unsize *)
            M.pointer_coercion
              (M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_poseidon2::Poseidon2",
                      "external_layer"
                    |)
                  |)
                |)
              |));
            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "internal_layer" |) |) |);
            (* Unsize *)
            M.pointer_coercion
              (M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_poseidon2::Poseidon2",
                      "internal_layer"
                    |)
                  |)
                |)
              |));
            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_phantom" |) |) |);
            (* Unsize *)
            M.pointer_coercion
              (M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_poseidon2::Poseidon2",
                          "_phantom"
                        |)
                      |)
                    |)
                  |)
                |)
              |))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    forall (WIDTH D : Value.t) (F ExternalPerm InternalPerm : Ty.t),
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      (Self WIDTH D F ExternalPerm InternalPerm)
      (* Instance *) [ ("fmt", InstanceField.Method (fmt WIDTH D F ExternalPerm InternalPerm)) ].
End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_ExternalPerm_where_core_fmt_Debug_InternalPerm_for_p3_poseidon2_Poseidon2_WIDTH_D_F_ExternalPerm_InternalPerm.

Module Impl_p3_poseidon2_Poseidon2_WIDTH_D_F_ExternalPerm_InternalPerm.
  Definition Self (WIDTH D : Value.t) (F ExternalPerm InternalPerm : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "p3_poseidon2::Poseidon2") [ WIDTH; D ] [ F; ExternalPerm; InternalPerm ].
  
  (*
      pub fn new(
          external_constants: ExternalLayerConstants<F, WIDTH>,
          internal_constants: Vec<F>,
      ) -> Self {
          assert!(SUPPORTED_WIDTHS.contains(&WIDTH));
          let external_layer = ExternalPerm::new_from_constants(external_constants);
          let internal_layer = InternalPerm::new_from_constants(internal_constants);
  
          Self {
              external_layer,
              internal_layer,
              _phantom: PhantomData,
          }
      }
  *)
  Definition new
      (WIDTH D : Value.t)
      (F ExternalPerm InternalPerm : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    let Self : Ty.t := Self WIDTH D F ExternalPerm InternalPerm in
    match ε, τ, α with
    | [], [], [ external_constants; internal_constants ] =>
      ltac:(M.monadic
        (let external_constants := M.alloc (| external_constants |) in
        let internal_constants := M.alloc (| internal_constants |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          UnOp.not (|
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                                "contains",
                                [],
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.borrow (|
                                    Pointer.Kind.Ref,
                                    get_constant (|
                                      "p3_poseidon2::SUPPORTED_WIDTHS",
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [ Ty.path "usize" ]
                                    |)
                                  |));
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.borrow (| Pointer.Kind.Ref, M.alloc (| WIDTH |) |) |)
                                |)
                              ]
                            |)
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic", [], [] |),
                          [ mk_str (| "assertion failed: SUPPORTED_WIDTHS.contains(&WIDTH)" |) ]
                        |)
                      |)
                    |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |) in
          let~ external_layer : Ty.apply (Ty.path "*") [] [ ExternalPerm ] :=
            M.alloc (|
              M.call_closure (|
                ExternalPerm,
                M.get_trait_method (|
                  "p3_poseidon2::external::ExternalLayerConstructor",
                  ExternalPerm,
                  [ WIDTH ],
                  [ F ],
                  "new_from_constants",
                  [],
                  []
                |),
                [ M.read (| external_constants |) ]
              |)
            |) in
          let~ internal_layer : Ty.apply (Ty.path "*") [] [ InternalPerm ] :=
            M.alloc (|
              M.call_closure (|
                InternalPerm,
                M.get_trait_method (|
                  "p3_poseidon2::internal::InternalLayerConstructor",
                  InternalPerm,
                  [],
                  [ F ],
                  "new_from_constants",
                  [],
                  []
                |),
                [ M.read (| internal_constants |) ]
              |)
            |) in
          M.alloc (|
            Value.StructRecord
              "p3_poseidon2::Poseidon2"
              [
                ("external_layer", M.read (| external_layer |));
                ("internal_layer", M.read (| internal_layer |));
                ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
              ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance AssociatedFunction_new :
    forall (WIDTH D : Value.t) (F ExternalPerm InternalPerm : Ty.t),
    M.IsAssociatedFunction.C
      (Self WIDTH D F ExternalPerm InternalPerm)
      "new"
      (new WIDTH D F ExternalPerm InternalPerm).
  Admitted.
  Global Typeclasses Opaque new.
  
  (*
      pub fn new_from_rng<R: Rng>(rounds_f: usize, rounds_p: usize, rng: &mut R) -> Self
      where
          StandardUniform: Distribution<F> + Distribution<[F; WIDTH]>,
      {
          let external_constants = ExternalLayerConstants::new_from_rng(rounds_f, rng);
          let internal_constants = rng.sample_iter(StandardUniform).take(rounds_p).collect();
  
          Self::new(external_constants, internal_constants)
      }
  *)
  Definition new_from_rng
      (WIDTH D : Value.t)
      (F ExternalPerm InternalPerm : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    let Self : Ty.t := Self WIDTH D F ExternalPerm InternalPerm in
    match ε, τ, α with
    | [], [ R ], [ rounds_f; rounds_p; rng ] =>
      ltac:(M.monadic
        (let rounds_f := M.alloc (| rounds_f |) in
        let rounds_p := M.alloc (| rounds_p |) in
        let rng := M.alloc (| rng |) in
        M.read (|
          let~ external_constants :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_poseidon2::external::ExternalLayerConstants")
                    [ WIDTH ]
                    [ F ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "p3_poseidon2::external::ExternalLayerConstants") [ WIDTH ] [ F ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_poseidon2::external::ExternalLayerConstants")
                    [ WIDTH ]
                    [ F ],
                  "new_from_rng",
                  [],
                  [ R ]
                |),
                [
                  M.read (| rounds_f |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| rng |) |) |)
                ]
              |)
            |) in
          let~ internal_constants :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::take::Take")
                    []
                    [
                      Ty.apply
                        (Ty.path "rand::distr::distribution::Iter")
                        []
                        [
                          Ty.path "rand::distr::StandardUniform";
                          Ty.apply (Ty.path "&mut") [] [ R ];
                          F
                        ]
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::take::Take")
                      []
                      [
                        Ty.apply
                          (Ty.path "rand::distr::distribution::Iter")
                          []
                          [
                            Ty.path "rand::distr::StandardUniform";
                            Ty.apply (Ty.path "&mut") [] [ R ];
                            F
                          ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "rand::distr::distribution::Iter")
                        []
                        [
                          Ty.path "rand::distr::StandardUniform";
                          Ty.apply (Ty.path "&mut") [] [ R ];
                          F
                        ],
                      [],
                      [],
                      "take",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "rand::distr::distribution::Iter")
                          []
                          [
                            Ty.path "rand::distr::StandardUniform";
                            Ty.apply (Ty.path "&mut") [] [ R ];
                            F
                          ],
                        M.get_trait_method (|
                          "rand::rng::Rng",
                          Ty.apply (Ty.path "&mut") [] [ R ],
                          [],
                          [],
                          "sample_iter",
                          [],
                          [ F; Ty.path "rand::distr::StandardUniform" ]
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| rng |) |) |);
                          Value.StructTuple "rand::distr::StandardUniform" []
                        ]
                      |);
                      M.read (| rounds_p |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "p3_poseidon2::Poseidon2")
                [ WIDTH; D ]
                [ F; ExternalPerm; InternalPerm ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "p3_poseidon2::Poseidon2")
                  [ WIDTH; D ]
                  [ F; ExternalPerm; InternalPerm ],
                "new",
                [],
                []
              |),
              [ M.read (| external_constants |); M.read (| internal_constants |) ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance AssociatedFunction_new_from_rng :
    forall (WIDTH D : Value.t) (F ExternalPerm InternalPerm : Ty.t),
    M.IsAssociatedFunction.C
      (Self WIDTH D F ExternalPerm InternalPerm)
      "new_from_rng"
      (new_from_rng WIDTH D F ExternalPerm InternalPerm).
  Admitted.
  Global Typeclasses Opaque new_from_rng.
  (*
      pub fn new_from_rng_128<R: Rng>(rng: &mut R) -> Self
      where
          StandardUniform: Distribution<F> + Distribution<[F; WIDTH]>,
      {
          let round_numbers = poseidon2_round_numbers_128::<F>(WIDTH, D);
          let (rounds_f, rounds_p) =
              round_numbers.unwrap_or_else(|_| panic!("{}", round_numbers.unwrap_err()));
          Self::new_from_rng(rounds_f, rounds_p, rng)
      }
  *)
  Definition new_from_rng_128
      (WIDTH D : Value.t)
      (F ExternalPerm InternalPerm : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    let Self : Ty.t := Self WIDTH D F ExternalPerm InternalPerm in
    match ε, τ, α with
    | [], [ R ], [ rng ] =>
      ltac:(M.monadic
        (let rng := M.alloc (| rng |) in
        M.read (|
          let~ round_numbers :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                  ],
                M.get_function (|
                  "p3_poseidon2::round_numbers::poseidon2_round_numbers_128",
                  [],
                  [ F ]
                |),
                [ WIDTH; D ]
              |)
            |) in
          M.match_operator (|
            Ty.apply
              (Ty.path "*")
              []
              [
                Ty.apply
                  (Ty.path "p3_poseidon2::Poseidon2")
                  [ WIDTH; D ]
                  [ F; ExternalPerm; InternalPerm ]
              ],
            M.alloc (|
              M.call_closure (|
                Ty.tuple [ Ty.path "usize"; Ty.path "usize" ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                    ],
                  "unwrap_or_else",
                  [],
                  [
                    Ty.function
                      [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ] ]
                      (Ty.tuple [ Ty.path "usize"; Ty.path "usize" ])
                  ]
                |),
                [
                  M.read (| round_numbers |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ] ]
                                    (Ty.tuple [ Ty.path "usize"; Ty.path "usize" ])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.read (|
                                          (* Unimplemented parent_kind *)
                                          M.alloc (| Value.Tuple [] |)
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.tuple
                                                            [ Ty.path "usize"; Ty.path "usize" ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "str" ]
                                                        ],
                                                      "unwrap_err",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| round_numbers |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                  let rounds_f := M.copy (| γ0_0 |) in
                  let rounds_p := M.copy (| γ0_1 |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_poseidon2::Poseidon2")
                        [ WIDTH; D ]
                        [ F; ExternalPerm; InternalPerm ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "p3_poseidon2::Poseidon2")
                          [ WIDTH; D ]
                          [ F; ExternalPerm; InternalPerm ],
                        "new_from_rng",
                        [],
                        [ R ]
                      |),
                      [
                        M.read (| rounds_f |);
                        M.read (| rounds_p |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| rng |) |) |)
                      ]
                    |)
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance AssociatedFunction_new_from_rng_128 :
    forall (WIDTH D : Value.t) (F ExternalPerm InternalPerm : Ty.t),
    M.IsAssociatedFunction.C
      (Self WIDTH D F ExternalPerm InternalPerm)
      "new_from_rng_128"
      (new_from_rng_128 WIDTH D F ExternalPerm InternalPerm).
  Admitted.
  Global Typeclasses Opaque new_from_rng_128.
End Impl_p3_poseidon2_Poseidon2_WIDTH_D_F_ExternalPerm_InternalPerm.


Module Impl_p3_symmetric_permutation_Permutation_where_p3_field_field_PrimeField_F_where_p3_field_field_InjectiveMonomial_F_where_p3_field_field_Algebra_A_F_where_core_marker_Sync_A_where_p3_field_field_InjectiveMonomial_A_where_p3_poseidon2_external_ExternalLayer_ExternalPerm_A_where_p3_poseidon2_internal_InternalLayer_InternalPerm_A_array_WIDTH_A_for_p3_poseidon2_Poseidon2_WIDTH_D_F_ExternalPerm_InternalPerm.
  Definition Self (WIDTH D : Value.t) (F A ExternalPerm InternalPerm : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "p3_poseidon2::Poseidon2") [ WIDTH; D ] [ F; ExternalPerm; InternalPerm ].
  
  (*
      fn permute_mut(&self, state: &mut [A; WIDTH]) {
          self.external_layer.permute_state_initial(state);
          self.internal_layer.permute_state(state);
          self.external_layer.permute_state_terminal(state);
      }
  *)
  Definition permute_mut
      (WIDTH D : Value.t)
      (F A ExternalPerm InternalPerm : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    let Self : Ty.t := Self WIDTH D F A ExternalPerm InternalPerm in
    match ε, τ, α with
    | [], [], [ self; state ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let state := M.alloc (| state |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_poseidon2::external::ExternalLayer",
                  ExternalPerm,
                  [ WIDTH; D ],
                  [ A ],
                  "permute_state_initial",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_poseidon2::Poseidon2",
                      "external_layer"
                    |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_poseidon2::internal::InternalLayer",
                  InternalPerm,
                  [ WIDTH; D ],
                  [ A ],
                  "permute_state",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_poseidon2::Poseidon2",
                      "internal_layer"
                    |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_poseidon2::external::ExternalLayer",
                  ExternalPerm,
                  [ WIDTH; D ],
                  [ A ],
                  "permute_state_terminal",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_poseidon2::Poseidon2",
                      "external_layer"
                    |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    forall (WIDTH D : Value.t) (F A ExternalPerm InternalPerm : Ty.t),
    M.IsTraitInstance
      "p3_symmetric::permutation::Permutation"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) [ Ty.apply (Ty.path "array") [ WIDTH ] [ A ] ]
      (Self WIDTH D F A ExternalPerm InternalPerm)
      (* Instance *)
      [ ("permute_mut", InstanceField.Method (permute_mut WIDTH D F A ExternalPerm InternalPerm)) ].
End Impl_p3_symmetric_permutation_Permutation_where_p3_field_field_PrimeField_F_where_p3_field_field_InjectiveMonomial_F_where_p3_field_field_Algebra_A_F_where_core_marker_Sync_A_where_p3_field_field_InjectiveMonomial_A_where_p3_poseidon2_external_ExternalLayer_ExternalPerm_A_where_p3_poseidon2_internal_InternalLayer_InternalPerm_A_array_WIDTH_A_for_p3_poseidon2_Poseidon2_WIDTH_D_F_ExternalPerm_InternalPerm.

Module Impl_p3_symmetric_permutation_CryptographicPermutation_where_p3_field_field_PrimeField_F_where_p3_field_field_InjectiveMonomial_F_where_p3_field_field_Algebra_A_F_where_core_marker_Sync_A_where_p3_field_field_InjectiveMonomial_A_where_p3_poseidon2_external_ExternalLayer_ExternalPerm_A_where_p3_poseidon2_internal_InternalLayer_InternalPerm_A_array_WIDTH_A_for_p3_poseidon2_Poseidon2_WIDTH_D_F_ExternalPerm_InternalPerm.
  Definition Self (WIDTH D : Value.t) (F A ExternalPerm InternalPerm : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "p3_poseidon2::Poseidon2") [ WIDTH; D ] [ F; ExternalPerm; InternalPerm ].
  
  Axiom Implements :
    forall (WIDTH D : Value.t) (F A ExternalPerm InternalPerm : Ty.t),
    M.IsTraitInstance
      "p3_symmetric::permutation::CryptographicPermutation"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) [ Ty.apply (Ty.path "array") [ WIDTH ] [ A ] ]
      (Self WIDTH D F A ExternalPerm InternalPerm)
      (* Instance *) [].
End Impl_p3_symmetric_permutation_CryptographicPermutation_where_p3_field_field_PrimeField_F_where_p3_field_field_InjectiveMonomial_F_where_p3_field_field_Algebra_A_F_where_core_marker_Sync_A_where_p3_field_field_InjectiveMonomial_A_where_p3_poseidon2_external_ExternalLayer_ExternalPerm_A_where_p3_poseidon2_internal_InternalLayer_InternalPerm_A_array_WIDTH_A_for_p3_poseidon2_Poseidon2_WIDTH_D_F_ExternalPerm_InternalPerm.
