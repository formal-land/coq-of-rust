(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module rescue.
  (* StructRecord
    {
      name := "Rescue";
      const_params := [ "WIDTH"; "ALPHA" ];
      ty_params := [ "F"; "Mds" ];
      fields :=
        [
          ("num_rounds", Ty.path "usize");
          ("mds", Mds);
          ("round_constants",
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ])
        ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_Mds_for_p3_rescue_rescue_Rescue_WIDTH_ALPHA_F_Mds.
    Definition Self (WIDTH ALPHA : Value.t) (F Mds : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_rescue::rescue::Rescue") [ WIDTH; ALPHA ] [ F; Mds ].
    
    (* Clone *)
    Definition clone
        (WIDTH ALPHA : Value.t)
        (F Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH ALPHA F Mds in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_rescue::rescue::Rescue"
            [
              ("num_rounds",
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "usize",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_rescue::rescue::Rescue",
                            "num_rounds"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("mds",
                M.call_closure (|
                  Mds,
                  M.get_trait_method (| "core::clone::Clone", Mds, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_rescue::rescue::Rescue",
                            "mds"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("round_constants",
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_rescue::rescue::Rescue",
                            "round_constants"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH ALPHA : Value.t) (F Mds : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH ALPHA F Mds)
        (* Instance *) [ ("clone", InstanceField.Method (clone WIDTH ALPHA F Mds)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_Mds_for_p3_rescue_rescue_Rescue_WIDTH_ALPHA_F_Mds.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_Mds_for_p3_rescue_rescue_Rescue_WIDTH_ALPHA_F_Mds.
    Definition Self (WIDTH ALPHA : Value.t) (F Mds : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_rescue::rescue::Rescue") [ WIDTH; ALPHA ] [ F; Mds ].
    
    (* Debug *)
    Definition fmt
        (WIDTH ALPHA : Value.t)
        (F Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH ALPHA F Mds in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rescue" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "num_rounds" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_rescue::rescue::Rescue",
                        "num_rounds"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "mds" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_rescue::rescue::Rescue",
                        "mds"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "round_constants" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_rescue::rescue::Rescue",
                            "round_constants"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH ALPHA : Value.t) (F Mds : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH ALPHA F Mds)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt WIDTH ALPHA F Mds)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_Mds_for_p3_rescue_rescue_Rescue_WIDTH_ALPHA_F_Mds.
  
  Module Impl_p3_rescue_rescue_Rescue_WIDTH_ALPHA_F_Mds.
    Definition Self (WIDTH ALPHA : Value.t) (F Mds : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_rescue::rescue::Rescue") [ WIDTH; ALPHA ] [ F; Mds ].
    
    (*
        pub const fn new(num_rounds: usize, round_constants: Vec<F>, mds: Mds) -> Self {
            Self {
                num_rounds,
                mds,
                round_constants,
            }
        }
    *)
    Definition new
        (WIDTH ALPHA : Value.t)
        (F Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH ALPHA F Mds in
      match ε, τ, α with
      | [], [], [ num_rounds; round_constants; mds ] =>
        ltac:(M.monadic
          (let num_rounds := M.alloc (| num_rounds |) in
          let round_constants := M.alloc (| round_constants |) in
          let mds := M.alloc (| mds |) in
          Value.StructRecord
            "p3_rescue::rescue::Rescue"
            [
              ("num_rounds", M.read (| num_rounds |));
              ("mds", M.read (| mds |));
              ("round_constants", M.read (| round_constants |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (WIDTH ALPHA : Value.t) (F Mds : Ty.t),
      M.IsAssociatedFunction.C (Self WIDTH ALPHA F Mds) "new" (new WIDTH ALPHA F Mds).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn num_rounds(capacity: usize, sec_level: usize) -> usize {
            let rate = (WIDTH - capacity) as u64;
            // This iterator produces pairs (dcon, v) increasing by a fixed
            // amount (determined by the formula in the paper) each iteration,
            // together with the value log2(binomial(v + dcon, v)). These values
            // are fed into `find` which picks the first that exceed the desired
            // security level.
            let rnds = (1..)
                .scan((2, rate), |(dcon, v), r| {
                    let log2_bin = log2_binom( *v + *dcon, *v);
    
                    // ALPHA is a prime > 2, so ALPHA + 1 is even, hence this
                    // division is exact.
                    *dcon += WIDTH as u64 * (ALPHA + 1) / 2;
                    *v += WIDTH as u64;
    
                    Some((r, log2_bin))
                })
                .find(|(_r, log2_bin)| 2.0 * log2_bin > sec_level as f32)
                .unwrap(); // Guaranteed to succeed for suff. large (dcon,v).
            let rnds = rnds.0;
    
            // The paper mandates a minimum of 5 rounds and adds a 50%
            // safety margin: ceil(1.5 * max{5, rnds})
            (3 * rnds.max(5_usize)).div_ceil(2)
        }
    *)
    Definition num_rounds
        (WIDTH ALPHA : Value.t)
        (F Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH ALPHA F Mds in
      match ε, τ, α with
      | [], [], [ capacity; sec_level ] =>
        ltac:(M.monadic
          (let capacity := M.alloc (| capacity |) in
          let sec_level := M.alloc (| sec_level |) in
          M.read (|
            let~ rate : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.cast
                  (Ty.path "u64")
                  (M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [ WIDTH; M.read (| capacity |) ]
                  |))
              |) in
            let~ rnds : Ty.apply (Ty.path "*") [] [ Ty.tuple [ Ty.path "usize"; Ty.path "f32" ] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.path "usize"; Ty.path "f32" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.tuple [ Ty.path "usize"; Ty.path "f32" ] ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.tuple [ Ty.path "usize"; Ty.path "f32" ] ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::scan::Scan")
                          []
                          [
                            Ty.apply (Ty.path "core::ops::range::RangeFrom") [] [ Ty.path "usize" ];
                            Ty.tuple [ Ty.path "u64"; Ty.path "u64" ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.tuple [ Ty.path "u64"; Ty.path "u64" ] ];
                                    Ty.path "usize"
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.tuple [ Ty.path "usize"; Ty.path "f32" ] ])
                          ],
                        [],
                        [],
                        "find",
                        [],
                        [
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.tuple [ Ty.path "usize"; Ty.path "f32" ] ]
                                ]
                            ]
                            (Ty.path "bool")
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::scan::Scan")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::RangeFrom")
                                    []
                                    [ Ty.path "usize" ];
                                  Ty.tuple [ Ty.path "u64"; Ty.path "u64" ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [ Ty.tuple [ Ty.path "u64"; Ty.path "u64" ] ];
                                          Ty.path "usize"
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.tuple [ Ty.path "usize"; Ty.path "f32" ] ])
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeFrom")
                                  []
                                  [ Ty.path "usize" ],
                                [],
                                [],
                                "scan",
                                [],
                                [
                                  Ty.tuple [ Ty.path "u64"; Ty.path "u64" ];
                                  Ty.tuple [ Ty.path "usize"; Ty.path "f32" ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [ Ty.tuple [ Ty.path "u64"; Ty.path "u64" ] ];
                                          Ty.path "usize"
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.tuple [ Ty.path "usize"; Ty.path "f32" ] ])
                                ]
                              |),
                              [
                                Value.StructRecord
                                  "core::ops::range::RangeFrom"
                                  [ ("start", Value.Integer IntegerKind.Usize 1) ];
                                Value.Tuple [ Value.Integer IntegerKind.U64 2; M.read (| rate |) ];
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0; α1 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u64"; Ty.path "u64" ]
                                                          ];
                                                        Ty.path "usize"
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ Ty.tuple [ Ty.path "usize"; Ty.path "f32" ] ])
                                              ],
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ := M.read (| γ |) in
                                                  let γ1_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ1_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let dcon := M.alloc (| γ1_0 |) in
                                                  let v := M.alloc (| γ1_1 |) in
                                                  M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&mut")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [ Ty.path "u64"; Ty.path "u64"
                                                                      ]
                                                                  ];
                                                                Ty.path "usize"
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.tuple
                                                                [ Ty.path "usize"; Ty.path "f32" ]
                                                            ])
                                                      ],
                                                    M.alloc (| α1 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let r := M.copy (| γ |) in
                                                          M.read (|
                                                            let~ log2_bin :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.path "f32" ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.path "f32",
                                                                  M.get_function (|
                                                                    "p3_rescue::util::log2_binom",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "u64",
                                                                      BinOp.Wrap.add,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| v |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| dcon |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.read (|
                                                                      M.deref (| M.read (| v |) |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.alloc (|
                                                                let β :=
                                                                  M.deref (| M.read (| dcon |) |) in
                                                                M.write (|
                                                                  β,
                                                                  M.call_closure (|
                                                                    Ty.path "u64",
                                                                    BinOp.Wrap.add,
                                                                    [
                                                                      M.read (| β |);
                                                                      M.call_closure (|
                                                                        Ty.path "u64",
                                                                        BinOp.Wrap.div,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "u64",
                                                                            BinOp.Wrap.mul,
                                                                            [
                                                                              M.cast
                                                                                (Ty.path "u64")
                                                                                WIDTH;
                                                                              M.call_closure (|
                                                                                Ty.path "u64",
                                                                                BinOp.Wrap.add,
                                                                                [
                                                                                  ALPHA;
                                                                                  Value.Integer
                                                                                    IntegerKind.U64
                                                                                    1
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          Value.Integer
                                                                            IntegerKind.U64
                                                                            2
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.alloc (|
                                                                let β :=
                                                                  M.deref (| M.read (| v |) |) in
                                                                M.write (|
                                                                  β,
                                                                  M.call_closure (|
                                                                    Ty.path "u64",
                                                                    BinOp.Wrap.add,
                                                                    [
                                                                      M.read (| β |);
                                                                      M.cast (Ty.path "u64") WIDTH
                                                                    ]
                                                                  |)
                                                                |)
                                                              |) in
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::option::Option::Some"
                                                                [
                                                                  Value.Tuple
                                                                    [
                                                                      M.read (| r |);
                                                                      M.read (| log2_bin |)
                                                                    ]
                                                                ]
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          |)
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.tuple [ Ty.path "usize"; Ty.path "f32" ] ]
                                              ]
                                          ]
                                          (Ty.path "bool")
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ := M.read (| γ |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let _r := M.alloc (| γ1_0 |) in
                                          let log2_bin := M.alloc (| γ1_1 |) in
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.gt,
                                            [
                                              M.call_closure (|
                                                Ty.path "f32",
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  Ty.path "f32",
                                                  [],
                                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "f32" ] ],
                                                  "mul",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (| UnsupportedLiteral |);
                                                  M.read (| log2_bin |)
                                                ]
                                              |);
                                              M.cast (Ty.path "f32") (M.read (| sec_level |))
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            let~ rnds : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.copy (| M.SubPointer.get_tuple_field (| rnds, 0 |) |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (| Ty.path "usize", "div_ceil", [], [] |),
                [
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [
                      Value.Integer IntegerKind.Usize 3;
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "core::cmp::Ord",
                          Ty.path "usize",
                          [],
                          [],
                          "max",
                          [],
                          []
                        |),
                        [ M.read (| rnds |); Value.Integer IntegerKind.Usize 5 ]
                      |)
                    ]
                  |);
                  Value.Integer IntegerKind.Usize 2
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_num_rounds :
      forall (WIDTH ALPHA : Value.t) (F Mds : Ty.t),
      M.IsAssociatedFunction.C (Self WIDTH ALPHA F Mds) "num_rounds" (num_rounds WIDTH ALPHA F Mds).
    Admitted.
    Global Typeclasses Opaque num_rounds.
    
    (*
        pub fn get_round_constants_from_rng<R: Rng>(num_rounds: usize, rng: &mut R) -> Vec<F>
        where
            StandardUniform: Distribution<F>,
        {
            let num_constants = 2 * WIDTH * num_rounds;
            rng.sample_iter(StandardUniform)
                .take(num_constants)
                .collect()
        }
    *)
    Definition get_round_constants_from_rng
        (WIDTH ALPHA : Value.t)
        (F Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH ALPHA F Mds in
      match ε, τ, α with
      | [], [ R ], [ num_rounds; rng ] =>
        ltac:(M.monadic
          (let num_rounds := M.alloc (| num_rounds |) in
          let rng := M.alloc (| rng |) in
          M.read (|
            let~ num_constants : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.mul,
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.mul,
                      [ Value.Integer IntegerKind.Usize 2; WIDTH ]
                    |);
                    M.read (| num_rounds |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::take::Take")
                    []
                    [
                      Ty.apply
                        (Ty.path "rand::distr::distribution::Iter")
                        []
                        [
                          Ty.path "rand::distr::StandardUniform";
                          Ty.apply (Ty.path "&mut") [] [ R ];
                          F
                        ]
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::take::Take")
                      []
                      [
                        Ty.apply
                          (Ty.path "rand::distr::distribution::Iter")
                          []
                          [
                            Ty.path "rand::distr::StandardUniform";
                            Ty.apply (Ty.path "&mut") [] [ R ];
                            F
                          ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "rand::distr::distribution::Iter")
                        []
                        [
                          Ty.path "rand::distr::StandardUniform";
                          Ty.apply (Ty.path "&mut") [] [ R ];
                          F
                        ],
                      [],
                      [],
                      "take",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "rand::distr::distribution::Iter")
                          []
                          [
                            Ty.path "rand::distr::StandardUniform";
                            Ty.apply (Ty.path "&mut") [] [ R ];
                            F
                          ],
                        M.get_trait_method (|
                          "rand::rng::Rng",
                          Ty.apply (Ty.path "&mut") [] [ R ],
                          [],
                          [],
                          "sample_iter",
                          [],
                          [ F; Ty.path "rand::distr::StandardUniform" ]
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| rng |) |) |);
                          Value.StructTuple "rand::distr::StandardUniform" []
                        ]
                      |);
                      M.read (| num_constants |)
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_get_round_constants_from_rng :
      forall (WIDTH ALPHA : Value.t) (F Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH ALPHA F Mds)
        "get_round_constants_from_rng"
        (get_round_constants_from_rng WIDTH ALPHA F Mds).
    Admitted.
    Global Typeclasses Opaque get_round_constants_from_rng.
    
    (*
        fn get_round_constants_rescue_prime(
            num_rounds: usize,
            capacity: usize,
            sec_level: usize,
        ) -> Vec<F>
        where
            F: PrimeField64,
        {
            let num_constants = 2 * WIDTH * num_rounds;
            let bytes_per_constant = F::bits().div_ceil(8) + 1;
            let num_bytes = bytes_per_constant * num_constants;
    
            let seed_string = format!(
                "Rescue-XLIX({},{},{},{})",
                F::ORDER_U64,
                WIDTH,
                capacity,
                sec_level,
            );
            let byte_string = shake256_hash(seed_string.as_bytes(), num_bytes);
    
            byte_string
                .iter()
                .chunks(bytes_per_constant)
                .into_iter()
                .map(|chunk| {
                    let integer = chunk
                        .collect_vec()
                        .iter()
                        .rev()
                        .fold(0, |acc, &byte| (acc << 8) + *byte as u64);
                    F::from_u64(integer)
                })
                .collect()
        }
    *)
    Definition get_round_constants_rescue_prime
        (WIDTH ALPHA : Value.t)
        (F Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH ALPHA F Mds in
      match ε, τ, α with
      | [], [], [ num_rounds; capacity; sec_level ] =>
        ltac:(M.monadic
          (let num_rounds := M.alloc (| num_rounds |) in
          let capacity := M.alloc (| capacity |) in
          let sec_level := M.alloc (| sec_level |) in
          M.read (|
            let~ num_constants : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.mul,
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.mul,
                      [ Value.Integer IntegerKind.Usize 2; WIDTH ]
                    |);
                    M.read (| num_rounds |)
                  ]
                |)
              |) in
            let~ bytes_per_constant : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.add,
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (| Ty.path "usize", "div_ceil", [], [] |),
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_trait_method (|
                            "p3_field::field::Field",
                            F,
                            [],
                            [],
                            "bits",
                            [],
                            []
                          |),
                          []
                        |);
                        Value.Integer IntegerKind.Usize 8
                      ]
                    |);
                    Value.Integer IntegerKind.Usize 1
                  ]
                |)
              |) in
            let~ num_bytes : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.mul,
                  [ M.read (| bytes_per_constant |); M.read (| num_constants |) ]
                |)
              |) in
            let~ seed_string : Ty.apply (Ty.path "*") [] [ Ty.path "alloc::string::String" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "alloc::string::String",
                  M.get_function (|
                    "core::hint::must_use",
                    [],
                    [ Ty.path "alloc::string::String" ]
                  |),
                  [
                    M.read (|
                      let~ res : Ty.apply (Ty.path "*") [] [ Ty.path "alloc::string::String" ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "alloc::string::String",
                            M.get_function (| "alloc::fmt::format", [], [] |),
                            [
                              M.call_closure (|
                                Ty.path "core::fmt::Arguments",
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_v1",
                                  [
                                    Value.Integer IntegerKind.Usize 5;
                                    Value.Integer IntegerKind.Usize 4
                                  ],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Value.Array
                                            [
                                              mk_str (| "Rescue-XLIX(" |);
                                              mk_str (| "," |);
                                              mk_str (| "," |);
                                              mk_str (| "," |);
                                              mk_str (| ")" |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Value.Array
                                            [
                                              M.call_closure (|
                                                Ty.path "core::fmt::rt::Argument",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  "new_display",
                                                  [],
                                                  [ Ty.path "u64" ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        get_constant (|
                                                          "p3_field::field::PrimeField64::ORDER_U64",
                                                          Ty.path "u64"
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                Ty.path "core::fmt::rt::Argument",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  "new_display",
                                                  [],
                                                  [ Ty.path "usize" ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (| WIDTH |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                Ty.path "core::fmt::rt::Argument",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  "new_display",
                                                  [],
                                                  [ Ty.path "usize" ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.Ref, capacity |)
                                                    |)
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                Ty.path "core::fmt::rt::Argument",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  "new_display",
                                                  [],
                                                  [ Ty.path "usize" ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.Ref, sec_level |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      res
                    |)
                  ]
                |)
              |) in
            let~ byte_string :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                  M.get_function (| "p3_rescue::util::shake256_hash", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                          M.get_associated_function (|
                            Ty.path "alloc::string::String",
                            "as_bytes",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, seed_string |) ]
                        |)
                      |)
                    |);
                    M.read (| num_bytes |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "itertools::groupbylazy::Chunks")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ] ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "itertools::groupbylazy::Chunk")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ] ]
                            ]
                        ]
                        F
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "itertools::groupbylazy::Chunks")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ] ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "itertools::groupbylazy::Chunk")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ]
                                  ]
                              ]
                          ]
                          F
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "itertools::groupbylazy::Chunks")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ] ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        F;
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "itertools::groupbylazy::Chunk")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ]
                                  ]
                              ]
                          ]
                          F
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "itertools::groupbylazy::Chunks")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ] ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "itertools::groupbylazy::IntoChunks")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ] ]
                            ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "itertools::groupbylazy::IntoChunks")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ]
                                  ],
                                M.get_trait_method (|
                                  "itertools::Itertools",
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                                  [],
                                  [],
                                  "chunks",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.path "u8" ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, byte_string |) ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.read (| bytes_per_constant |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "itertools::groupbylazy::Chunk")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Ty.path "u8" ]
                                                ]
                                            ]
                                        ]
                                        F
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let chunk := M.copy (| γ |) in
                                        M.read (|
                                          let~ integer :
                                              Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "u64",
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::rev::Rev")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ]
                                                        ]
                                                    ],
                                                  [],
                                                  [],
                                                  "fold",
                                                  [],
                                                  [
                                                    Ty.path "u64";
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "u64";
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "u8" ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.path "u64")
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::rev::Rev")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "u8" ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ]
                                                        ],
                                                      [],
                                                      [],
                                                      "rev",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "u8" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "u8" ]
                                                            ],
                                                          "iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "u8" ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "u8" ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [ Ty.path "u8" ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "itertools::Itertools",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "itertools::groupbylazy::Chunk")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::Iter")
                                                                                []
                                                                                [ Ty.path "u8" ]
                                                                            ],
                                                                          [],
                                                                          [],
                                                                          "collect_vec",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [ M.read (| chunk |) ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.U64 0;
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0; α1 ] =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path "u64";
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [ Ty.path "u8" ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                    (Ty.path "u64")
                                                                ],
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let acc := M.copy (| γ |) in
                                                                    M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "u64";
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "u8"
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.path "u64")
                                                                        ],
                                                                      M.alloc (| α1 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ :=
                                                                              M.read (| γ |) in
                                                                            let byte :=
                                                                              M.copy (| γ |) in
                                                                            M.call_closure (|
                                                                              Ty.path "u64",
                                                                              BinOp.Wrap.add,
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.path "u64",
                                                                                  BinOp.Wrap.shl,
                                                                                  [
                                                                                    M.read (|
                                                                                      acc
                                                                                    |);
                                                                                    Value.Integer
                                                                                      IntegerKind.I32
                                                                                      8
                                                                                  ]
                                                                                |);
                                                                                M.cast
                                                                                  (Ty.path "u64")
                                                                                  (M.read (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        byte
                                                                                      |)
                                                                                    |)
                                                                                  |))
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)))
                                                        | _ =>
                                                          M.impossible "wrong number of arguments"
                                                        end))
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              F,
                                              M.get_trait_method (|
                                                "p3_field::field::PrimeCharacteristicRing",
                                                F,
                                                [],
                                                [],
                                                "from_u64",
                                                [],
                                                []
                                              |),
                                              [ M.read (| integer |) ]
                                            |)
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_get_round_constants_rescue_prime :
      forall (WIDTH ALPHA : Value.t) (F Mds : Ty.t),
      M.IsAssociatedFunction.C
        (Self WIDTH ALPHA F Mds)
        "get_round_constants_rescue_prime"
        (get_round_constants_rescue_prime WIDTH ALPHA F Mds).
    Admitted.
    Global Typeclasses Opaque get_round_constants_rescue_prime.
  End Impl_p3_rescue_rescue_Rescue_WIDTH_ALPHA_F_Mds.
  
  Module Impl_p3_symmetric_permutation_Permutation_where_p3_field_field_PrimeField_F_where_p3_field_field_PermutationMonomial_F_where_p3_field_field_Algebra_A_F_where_p3_field_field_PermutationMonomial_A_where_p3_mds_MdsPermutation_Mds_A_array_WIDTH_A_for_p3_rescue_rescue_Rescue_WIDTH_ALPHA_F_Mds.
    Definition Self (WIDTH ALPHA : Value.t) (F A Mds : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_rescue::rescue::Rescue") [ WIDTH; ALPHA ] [ F; Mds ].
    
    (*
        fn permute_mut(&self, state: &mut [A; WIDTH]) {
            for round in 0..self.num_rounds {
                // S-box
                state.iter_mut().for_each(|x| *x = x.injective_exp_n());
    
                // MDS
                self.mds.permute_mut(state);
    
                // Constants
                for (state_item, &round_constant) in state
                    .iter_mut()
                    .zip(&self.round_constants[round * WIDTH * 2..])
                {
                    *state_item += round_constant;
                }
    
                // Inverse S-box
                state.iter_mut().for_each(|x| *x = x.injective_exp_root_n());
    
                // MDS
                self.mds.permute_mut(state);
    
                // Constants
                for (state_item, &round_constant) in state
                    .iter_mut()
                    .zip(&self.round_constants[round * WIDTH * 2 + WIDTH..])
                {
                    *state_item += round_constant;
                }
            }
        }
    *)
    Definition permute_mut
        (WIDTH ALPHA : Value.t)
        (F A Mds : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH ALPHA F A Mds in
      match ε, τ, α with
      | [], [], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_",
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "p3_rescue::rescue::Rescue",
                                "num_rounds"
                              |)
                            |))
                        ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let round := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [ A ],
                                            [],
                                            [],
                                            "for_each",
                                            [],
                                            [
                                              Ty.function
                                                [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ A ] ] ]
                                                (Ty.tuple [])
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [ A ],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ A ],
                                                "iter_mut",
                                                [],
                                                []
                                              |),
                                              [
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (| M.read (| state |) |)
                                                  |))
                                              ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    ltac:(M.monadic
                                                      (M.match_operator (|
                                                        Ty.apply
                                                          (Ty.path "*")
                                                          []
                                                          [
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [ A ]
                                                                  ]
                                                              ]
                                                              (Ty.tuple [])
                                                          ],
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.write (|
                                                                M.deref (| M.read (| x |) |),
                                                                M.call_closure (|
                                                                  A,
                                                                  M.get_trait_method (|
                                                                    "p3_field::field::InjectiveMonomial",
                                                                    A,
                                                                    [ ALPHA ],
                                                                    [],
                                                                    "injective_exp_n",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (| M.read (| x |) |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)))
                                                        ]
                                                      |)))
                                                  | _ => M.impossible "wrong number of arguments"
                                                  end))
                                          ]
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "p3_symmetric::permutation::Permutation",
                                            Mds,
                                            [],
                                            [ Ty.apply (Ty.path "array") [ WIDTH ] [ A ] ],
                                            "permute_mut",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "p3_rescue::rescue::Rescue",
                                                "mds"
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| state |) |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.use
                                        (M.match_operator (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::IterMut")
                                                    []
                                                    [ A ];
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ F ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::collect::IntoIterator",
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [ A ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ F ]
                                                  ],
                                                [],
                                                [],
                                                "into_iter",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::zip::Zip")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::IterMut")
                                                        []
                                                        [ A ];
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ F ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [ A ],
                                                    [],
                                                    [],
                                                    "zip",
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::IterMut")
                                                        []
                                                        [ A ],
                                                      M.get_associated_function (|
                                                        Ty.apply (Ty.path "slice") [] [ A ],
                                                        "iter_mut",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        (* Unsize *)
                                                        M.pointer_coercion
                                                          (M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (| M.read (| state |) |)
                                                          |))
                                                      ]
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [ F; Ty.path "alloc::alloc::Global" ],
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::ops::range::RangeFrom")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ],
                                                            "index",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| self |) |),
                                                                "p3_rescue::rescue::Rescue",
                                                                "round_constants"
                                                              |)
                                                            |);
                                                            Value.StructRecord
                                                              "core::ops::range::RangeFrom"
                                                              [
                                                                ("start",
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    BinOp.Wrap.mul,
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.mul,
                                                                        [ M.read (| round |); WIDTH
                                                                        ]
                                                                      |);
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        2
                                                                    ]
                                                                  |))
                                                              ]
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let iter := M.copy (| γ |) in
                                                M.loop (|
                                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                  ltac:(M.monadic
                                                    (let~ _ :
                                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                      M.match_operator (|
                                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [ A ];
                                                                    Ty.apply (Ty.path "&") [] [ F ]
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::zip::Zip")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    []
                                                                    [ A ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [ F ]
                                                                ],
                                                              [],
                                                              [],
                                                              "next",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    iter
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.is_struct_tuple (|
                                                                  γ,
                                                                  "core::option::Option::None"
                                                                |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (| M.break (||) |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::option::Option::Some",
                                                                  0
                                                                |) in
                                                              let γ1_0 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ0_0,
                                                                  0
                                                                |) in
                                                              let γ1_1 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ0_0,
                                                                  1
                                                                |) in
                                                              let state_item := M.copy (| γ1_0 |) in
                                                              let γ1_1 := M.read (| γ1_1 |) in
                                                              let round_constant :=
                                                                M.copy (| γ1_1 |) in
                                                              let~ _ :
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [ Ty.tuple [] ] :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.tuple [],
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::AddAssign",
                                                                      A,
                                                                      [],
                                                                      [ F ],
                                                                      "add_assign",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.deref (|
                                                                          M.read (| state_item |)
                                                                        |)
                                                                      |);
                                                                      M.read (| round_constant |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                                |)))
                                          ]
                                        |)) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [ A ],
                                            [],
                                            [],
                                            "for_each",
                                            [],
                                            [
                                              Ty.function
                                                [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ A ] ] ]
                                                (Ty.tuple [])
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [ A ],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ A ],
                                                "iter_mut",
                                                [],
                                                []
                                              |),
                                              [
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (| M.read (| state |) |)
                                                  |))
                                              ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    ltac:(M.monadic
                                                      (M.match_operator (|
                                                        Ty.apply
                                                          (Ty.path "*")
                                                          []
                                                          [
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [ A ]
                                                                  ]
                                                              ]
                                                              (Ty.tuple [])
                                                          ],
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.write (|
                                                                M.deref (| M.read (| x |) |),
                                                                M.call_closure (|
                                                                  A,
                                                                  M.get_trait_method (|
                                                                    "p3_field::field::PermutationMonomial",
                                                                    A,
                                                                    [ ALPHA ],
                                                                    [],
                                                                    "injective_exp_root_n",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (| M.read (| x |) |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)))
                                                        ]
                                                      |)))
                                                  | _ => M.impossible "wrong number of arguments"
                                                  end))
                                          ]
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "p3_symmetric::permutation::Permutation",
                                            Mds,
                                            [],
                                            [ Ty.apply (Ty.path "array") [ WIDTH ] [ A ] ],
                                            "permute_mut",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "p3_rescue::rescue::Rescue",
                                                "mds"
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| state |) |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.use
                                      (M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::zip::Zip")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::IterMut")
                                                  []
                                                  [ A ];
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ F ]
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::IterMut")
                                                    []
                                                    [ A ];
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ F ]
                                                ],
                                              [],
                                              [],
                                              "into_iter",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [ A ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ F ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::IterMut")
                                                    []
                                                    [ A ],
                                                  [],
                                                  [],
                                                  "zip",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [ A ],
                                                    M.get_associated_function (|
                                                      Ty.apply (Ty.path "slice") [] [ A ],
                                                      "iter_mut",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.deref (| M.read (| state |) |)
                                                        |))
                                                    ]
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                        M.get_trait_method (|
                                                          "core::ops::index::Index",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ F; Ty.path "alloc::alloc::Global" ],
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::range::RangeFrom")
                                                              []
                                                              [ Ty.path "usize" ]
                                                          ],
                                                          "index",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| self |) |),
                                                              "p3_rescue::rescue::Rescue",
                                                              "round_constants"
                                                            |)
                                                          |);
                                                          Value.StructRecord
                                                            "core::ops::range::RangeFrom"
                                                            [
                                                              ("start",
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.add,
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.mul,
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.mul,
                                                                          [
                                                                            M.read (| round |);
                                                                            WIDTH
                                                                          ]
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          2
                                                                      ]
                                                                    |);
                                                                    WIDTH
                                                                  ]
                                                                |))
                                                            ]
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let iter := M.copy (| γ |) in
                                              M.loop (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                ltac:(M.monadic
                                                  (let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.match_operator (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [ A ];
                                                                  Ty.apply (Ty.path "&") [] [ F ]
                                                                ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::zip::Zip")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [ A ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [ F ]
                                                              ],
                                                            [],
                                                            [],
                                                            "next",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  iter
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "core::option::Option::None"
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let γ1_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                0
                                                              |) in
                                                            let γ1_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                1
                                                              |) in
                                                            let state_item := M.copy (| γ1_0 |) in
                                                            let γ1_1 := M.read (| γ1_1 |) in
                                                            let round_constant :=
                                                              M.copy (| γ1_1 |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::AddAssign",
                                                                    A,
                                                                    [],
                                                                    [ F ],
                                                                    "add_assign",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.read (| state_item |)
                                                                      |)
                                                                    |);
                                                                    M.read (| round_constant |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                              |)))
                                        ]
                                      |))))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH ALPHA : Value.t) (F A Mds : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::permutation::Permutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "array") [ WIDTH ] [ A ] ]
        (Self WIDTH ALPHA F A Mds)
        (* Instance *) [ ("permute_mut", InstanceField.Method (permute_mut WIDTH ALPHA F A Mds)) ].
  End Impl_p3_symmetric_permutation_Permutation_where_p3_field_field_PrimeField_F_where_p3_field_field_PermutationMonomial_F_where_p3_field_field_Algebra_A_F_where_p3_field_field_PermutationMonomial_A_where_p3_mds_MdsPermutation_Mds_A_array_WIDTH_A_for_p3_rescue_rescue_Rescue_WIDTH_ALPHA_F_Mds.
  
  Module Impl_p3_symmetric_permutation_CryptographicPermutation_where_p3_field_field_PrimeField_F_where_p3_field_field_PermutationMonomial_F_where_p3_field_field_Algebra_A_F_where_p3_field_field_PermutationMonomial_A_where_p3_mds_MdsPermutation_Mds_A_array_WIDTH_A_for_p3_rescue_rescue_Rescue_WIDTH_ALPHA_F_Mds.
    Definition Self (WIDTH ALPHA : Value.t) (F A Mds : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_rescue::rescue::Rescue") [ WIDTH; ALPHA ] [ F; Mds ].
    
    Axiom Implements :
      forall (WIDTH ALPHA : Value.t) (F A Mds : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::permutation::CryptographicPermutation"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "array") [ WIDTH ] [ A ] ]
        (Self WIDTH ALPHA F A Mds)
        (* Instance *) [].
  End Impl_p3_symmetric_permutation_CryptographicPermutation_where_p3_field_field_PrimeField_F_where_p3_field_field_PermutationMonomial_F_where_p3_field_field_Algebra_A_F_where_p3_field_field_PermutationMonomial_A_where_p3_mds_MdsPermutation_Mds_A_array_WIDTH_A_for_p3_rescue_rescue_Rescue_WIDTH_ALPHA_F_Mds.
End rescue.
