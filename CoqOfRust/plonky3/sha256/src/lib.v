(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition value_H256_256 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  ltac:(M.monadic
    (M.alloc (|
      Value.Array
        [
          Value.Integer IntegerKind.U32 1779033703;
          Value.Integer IntegerKind.U32 3144134277;
          Value.Integer IntegerKind.U32 1013904242;
          Value.Integer IntegerKind.U32 2773480762;
          Value.Integer IntegerKind.U32 1359893119;
          Value.Integer IntegerKind.U32 2600822924;
          Value.Integer IntegerKind.U32 528734635;
          Value.Integer IntegerKind.U32 1541459225
        ]
    |))).

Global Instance Instance_IsConstant_value_H256_256 :
  M.IsFunction.C "p3_sha256::H256_256" value_H256_256.
Admitted.
Global Typeclasses Opaque value_H256_256.

(* StructTuple
  {
    name := "Sha256";
    const_params := [];
    ty_params := [];
    fields := [];
  } *)

Module Impl_core_marker_Copy_for_p3_sha256_Sha256.
  Definition Self : Ty.t := Ty.path "p3_sha256::Sha256".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_Copy_for_p3_sha256_Sha256.

Module Impl_core_clone_Clone_for_p3_sha256_Sha256.
  Definition Self : Ty.t := Ty.path "p3_sha256::Sha256".
  
  (* Clone *)
  Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.read (| M.deref (| M.read (| self |) |) |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_p3_sha256_Sha256.

Module Impl_core_fmt_Debug_for_p3_sha256_Sha256.
  Definition Self : Ty.t := Ty.path "p3_sha256::Sha256".
  
  (* Debug *)
  Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; Ty.path "core::fmt::Error" ],
          M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
          [
            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Sha256" |) |) |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_p3_sha256_Sha256.

Module Impl_p3_symmetric_hasher_CryptographicHasher_u8_array_Usize_32_u8_for_p3_sha256_Sha256.
  Definition Self : Ty.t := Ty.path "p3_sha256::Sha256".
  
  (*
      fn hash_iter<I>(&self, input: I) -> [u8; 32]
      where
          I: IntoIterator<Item = u8>,
      {
          const BUFLEN: usize = 512; // Tweakable parameter; determined by experiment
          let mut hasher = sha2::Sha256::new();
          p3_util::apply_to_chunks::<BUFLEN, _, _>(input, |buf| hasher.update(buf));
          hasher.finalize().into()
      }
  *)
  Definition hash_iter (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ _ as I ], [ self; input ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let input := M.alloc (| input |) in
        M.read (|
          let~ hasher :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "digest::core_api::wrapper::CoreWrapper")
                    []
                    [
                      Ty.apply
                        (Ty.path "digest::core_api::ct_variable::CtVariableCoreWrapper")
                        []
                        [
                          Ty.path "sha2::core_api::Sha256VarCore";
                          Ty.apply
                            (Ty.path "typenum::uint::UInt")
                            []
                            [
                              Ty.apply
                                (Ty.path "typenum::uint::UInt")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "typenum::uint::UInt")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "typenum::uint::UInt")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "typenum::uint::UInt")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "typenum::uint::UInt")
                                                []
                                                [
                                                  Ty.path "typenum::uint::UTerm";
                                                  Ty.path "typenum::bit::B1"
                                                ];
                                              Ty.path "typenum::bit::B0"
                                            ];
                                          Ty.path "typenum::bit::B0"
                                        ];
                                      Ty.path "typenum::bit::B0"
                                    ];
                                  Ty.path "typenum::bit::B0"
                                ];
                              Ty.path "typenum::bit::B0"
                            ];
                          Ty.path "sha2::OidSha256"
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "digest::core_api::wrapper::CoreWrapper")
                  []
                  [
                    Ty.apply
                      (Ty.path "digest::core_api::ct_variable::CtVariableCoreWrapper")
                      []
                      [
                        Ty.path "sha2::core_api::Sha256VarCore";
                        Ty.apply
                          (Ty.path "typenum::uint::UInt")
                          []
                          [
                            Ty.apply
                              (Ty.path "typenum::uint::UInt")
                              []
                              [
                                Ty.apply
                                  (Ty.path "typenum::uint::UInt")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "typenum::uint::UInt")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "typenum::uint::UInt")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "typenum::uint::UInt")
                                              []
                                              [
                                                Ty.path "typenum::uint::UTerm";
                                                Ty.path "typenum::bit::B1"
                                              ];
                                            Ty.path "typenum::bit::B0"
                                          ];
                                        Ty.path "typenum::bit::B0"
                                      ];
                                    Ty.path "typenum::bit::B0"
                                  ];
                                Ty.path "typenum::bit::B0"
                              ];
                            Ty.path "typenum::bit::B0"
                          ];
                        Ty.path "sha2::OidSha256"
                      ]
                  ],
                M.get_trait_method (|
                  "digest::digest::Digest",
                  Ty.apply
                    (Ty.path "digest::core_api::wrapper::CoreWrapper")
                    []
                    [
                      Ty.apply
                        (Ty.path "digest::core_api::ct_variable::CtVariableCoreWrapper")
                        []
                        [
                          Ty.path "sha2::core_api::Sha256VarCore";
                          Ty.apply
                            (Ty.path "typenum::uint::UInt")
                            []
                            [
                              Ty.apply
                                (Ty.path "typenum::uint::UInt")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "typenum::uint::UInt")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "typenum::uint::UInt")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "typenum::uint::UInt")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "typenum::uint::UInt")
                                                []
                                                [
                                                  Ty.path "typenum::uint::UTerm";
                                                  Ty.path "typenum::bit::B1"
                                                ];
                                              Ty.path "typenum::bit::B0"
                                            ];
                                          Ty.path "typenum::bit::B0"
                                        ];
                                      Ty.path "typenum::bit::B0"
                                    ];
                                  Ty.path "typenum::bit::B0"
                                ];
                              Ty.path "typenum::bit::B0"
                            ];
                          Ty.path "sha2::OidSha256"
                        ]
                    ],
                  [],
                  [],
                  "new",
                  [],
                  []
                |),
                []
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_util::apply_to_chunks",
                  [ Value.Integer IntegerKind.Usize 512 ],
                  [
                    I;
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.read (| input |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let buf := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "digest::digest::Digest",
                                        Ty.apply
                                          (Ty.path "digest::core_api::wrapper::CoreWrapper")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "digest::core_api::ct_variable::CtVariableCoreWrapper")
                                              []
                                              [
                                                Ty.path "sha2::core_api::Sha256VarCore";
                                                Ty.apply
                                                  (Ty.path "typenum::uint::UInt")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "typenum::uint::UInt")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "typenum::uint::UInt")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "typenum::uint::UInt")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "typenum::uint::UInt")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "typenum::uint::UInt")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "typenum::uint::UTerm";
                                                                        Ty.path "typenum::bit::B1"
                                                                      ];
                                                                    Ty.path "typenum::bit::B0"
                                                                  ];
                                                                Ty.path "typenum::bit::B0"
                                                              ];
                                                            Ty.path "typenum::bit::B0"
                                                          ];
                                                        Ty.path "typenum::bit::B0"
                                                      ];
                                                    Ty.path "typenum::bit::B0"
                                                  ];
                                                Ty.path "sha2::OidSha256"
                                              ]
                                          ],
                                        [],
                                        [],
                                        "update",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                        ]
                                      |),
                                      [ M.borrow (| Pointer.Kind.MutRef, hasher |); M.read (| buf |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ],
              M.get_trait_method (|
                "core::convert::Into",
                Ty.apply
                  (Ty.path "generic_array::GenericArray")
                  []
                  [
                    Ty.path "u8";
                    Ty.apply
                      (Ty.path "typenum::uint::UInt")
                      []
                      [
                        Ty.apply
                          (Ty.path "typenum::uint::UInt")
                          []
                          [
                            Ty.apply
                              (Ty.path "typenum::uint::UInt")
                              []
                              [
                                Ty.apply
                                  (Ty.path "typenum::uint::UInt")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "typenum::uint::UInt")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "typenum::uint::UInt")
                                          []
                                          [
                                            Ty.path "typenum::uint::UTerm";
                                            Ty.path "typenum::bit::B1"
                                          ];
                                        Ty.path "typenum::bit::B0"
                                      ];
                                    Ty.path "typenum::bit::B0"
                                  ];
                                Ty.path "typenum::bit::B0"
                              ];
                            Ty.path "typenum::bit::B0"
                          ];
                        Ty.path "typenum::bit::B0"
                      ]
                  ],
                [],
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
                ],
                "into",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "generic_array::GenericArray")
                    []
                    [
                      Ty.path "u8";
                      Ty.apply
                        (Ty.path "typenum::uint::UInt")
                        []
                        [
                          Ty.apply
                            (Ty.path "typenum::uint::UInt")
                            []
                            [
                              Ty.apply
                                (Ty.path "typenum::uint::UInt")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "typenum::uint::UInt")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "typenum::uint::UInt")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "typenum::uint::UInt")
                                            []
                                            [
                                              Ty.path "typenum::uint::UTerm";
                                              Ty.path "typenum::bit::B1"
                                            ];
                                          Ty.path "typenum::bit::B0"
                                        ];
                                      Ty.path "typenum::bit::B0"
                                    ];
                                  Ty.path "typenum::bit::B0"
                                ];
                              Ty.path "typenum::bit::B0"
                            ];
                          Ty.path "typenum::bit::B0"
                        ]
                    ],
                  M.get_trait_method (|
                    "digest::digest::Digest",
                    Ty.apply
                      (Ty.path "digest::core_api::wrapper::CoreWrapper")
                      []
                      [
                        Ty.apply
                          (Ty.path "digest::core_api::ct_variable::CtVariableCoreWrapper")
                          []
                          [
                            Ty.path "sha2::core_api::Sha256VarCore";
                            Ty.apply
                              (Ty.path "typenum::uint::UInt")
                              []
                              [
                                Ty.apply
                                  (Ty.path "typenum::uint::UInt")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "typenum::uint::UInt")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "typenum::uint::UInt")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "typenum::uint::UInt")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "typenum::uint::UInt")
                                                  []
                                                  [
                                                    Ty.path "typenum::uint::UTerm";
                                                    Ty.path "typenum::bit::B1"
                                                  ];
                                                Ty.path "typenum::bit::B0"
                                              ];
                                            Ty.path "typenum::bit::B0"
                                          ];
                                        Ty.path "typenum::bit::B0"
                                      ];
                                    Ty.path "typenum::bit::B0"
                                  ];
                                Ty.path "typenum::bit::B0"
                              ];
                            Ty.path "sha2::OidSha256"
                          ]
                      ],
                    [],
                    [],
                    "finalize",
                    [],
                    []
                  |),
                  [ M.read (| hasher |) ]
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  (*
      fn hash_iter_slices<'a, I>(&self, input: I) -> [u8; 32]
      where
          I: IntoIterator<Item = &'a [u8]>,
      {
          let mut hasher = sha2::Sha256::new();
          for chunk in input {
              hasher.update(chunk);
          }
          hasher.finalize().into()
      }
  *)
  Definition hash_iter_slices (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ _ as I ], [ self; input ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let input := M.alloc (| input |) in
        M.read (|
          let~ hasher :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "digest::core_api::wrapper::CoreWrapper")
                    []
                    [
                      Ty.apply
                        (Ty.path "digest::core_api::ct_variable::CtVariableCoreWrapper")
                        []
                        [
                          Ty.path "sha2::core_api::Sha256VarCore";
                          Ty.apply
                            (Ty.path "typenum::uint::UInt")
                            []
                            [
                              Ty.apply
                                (Ty.path "typenum::uint::UInt")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "typenum::uint::UInt")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "typenum::uint::UInt")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "typenum::uint::UInt")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "typenum::uint::UInt")
                                                []
                                                [
                                                  Ty.path "typenum::uint::UTerm";
                                                  Ty.path "typenum::bit::B1"
                                                ];
                                              Ty.path "typenum::bit::B0"
                                            ];
                                          Ty.path "typenum::bit::B0"
                                        ];
                                      Ty.path "typenum::bit::B0"
                                    ];
                                  Ty.path "typenum::bit::B0"
                                ];
                              Ty.path "typenum::bit::B0"
                            ];
                          Ty.path "sha2::OidSha256"
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "digest::core_api::wrapper::CoreWrapper")
                  []
                  [
                    Ty.apply
                      (Ty.path "digest::core_api::ct_variable::CtVariableCoreWrapper")
                      []
                      [
                        Ty.path "sha2::core_api::Sha256VarCore";
                        Ty.apply
                          (Ty.path "typenum::uint::UInt")
                          []
                          [
                            Ty.apply
                              (Ty.path "typenum::uint::UInt")
                              []
                              [
                                Ty.apply
                                  (Ty.path "typenum::uint::UInt")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "typenum::uint::UInt")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "typenum::uint::UInt")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "typenum::uint::UInt")
                                              []
                                              [
                                                Ty.path "typenum::uint::UTerm";
                                                Ty.path "typenum::bit::B1"
                                              ];
                                            Ty.path "typenum::bit::B0"
                                          ];
                                        Ty.path "typenum::bit::B0"
                                      ];
                                    Ty.path "typenum::bit::B0"
                                  ];
                                Ty.path "typenum::bit::B0"
                              ];
                            Ty.path "typenum::bit::B0"
                          ];
                        Ty.path "sha2::OidSha256"
                      ]
                  ],
                M.get_trait_method (|
                  "digest::digest::Digest",
                  Ty.apply
                    (Ty.path "digest::core_api::wrapper::CoreWrapper")
                    []
                    [
                      Ty.apply
                        (Ty.path "digest::core_api::ct_variable::CtVariableCoreWrapper")
                        []
                        [
                          Ty.path "sha2::core_api::Sha256VarCore";
                          Ty.apply
                            (Ty.path "typenum::uint::UInt")
                            []
                            [
                              Ty.apply
                                (Ty.path "typenum::uint::UInt")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "typenum::uint::UInt")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "typenum::uint::UInt")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "typenum::uint::UInt")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "typenum::uint::UInt")
                                                []
                                                [
                                                  Ty.path "typenum::uint::UTerm";
                                                  Ty.path "typenum::bit::B1"
                                                ];
                                              Ty.path "typenum::bit::B0"
                                            ];
                                          Ty.path "typenum::bit::B0"
                                        ];
                                      Ty.path "typenum::bit::B0"
                                    ];
                                  Ty.path "typenum::bit::B0"
                                ];
                              Ty.path "typenum::bit::B0"
                            ];
                          Ty.path "sha2::OidSha256"
                        ]
                    ],
                  [],
                  [],
                  "new",
                  [],
                  []
                |),
                []
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter",
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      I,
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| input |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.associated_in_trait
                                      "core::iter::traits::collect::IntoIterator"
                                      []
                                      []
                                      I
                                      "IntoIter",
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let chunk := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "digest::digest::Digest",
                                            Ty.apply
                                              (Ty.path "digest::core_api::wrapper::CoreWrapper")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "digest::core_api::ct_variable::CtVariableCoreWrapper")
                                                  []
                                                  [
                                                    Ty.path "sha2::core_api::Sha256VarCore";
                                                    Ty.apply
                                                      (Ty.path "typenum::uint::UInt")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "typenum::uint::UInt")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "typenum::uint::UInt")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "typenum::uint::UInt")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "typenum::uint::UInt")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "typenum::uint::UInt")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "typenum::uint::UTerm";
                                                                            Ty.path
                                                                              "typenum::bit::B1"
                                                                          ];
                                                                        Ty.path "typenum::bit::B0"
                                                                      ];
                                                                    Ty.path "typenum::bit::B0"
                                                                  ];
                                                                Ty.path "typenum::bit::B0"
                                                              ];
                                                            Ty.path "typenum::bit::B0"
                                                          ];
                                                        Ty.path "typenum::bit::B0"
                                                      ];
                                                    Ty.path "sha2::OidSha256"
                                                  ]
                                              ],
                                            [],
                                            [],
                                            "update",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                            ]
                                          |),
                                          [
                                            M.borrow (| Pointer.Kind.MutRef, hasher |);
                                            M.read (| chunk |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          M.alloc (|
            M.call_closure (|
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ],
              M.get_trait_method (|
                "core::convert::Into",
                Ty.apply
                  (Ty.path "generic_array::GenericArray")
                  []
                  [
                    Ty.path "u8";
                    Ty.apply
                      (Ty.path "typenum::uint::UInt")
                      []
                      [
                        Ty.apply
                          (Ty.path "typenum::uint::UInt")
                          []
                          [
                            Ty.apply
                              (Ty.path "typenum::uint::UInt")
                              []
                              [
                                Ty.apply
                                  (Ty.path "typenum::uint::UInt")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "typenum::uint::UInt")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "typenum::uint::UInt")
                                          []
                                          [
                                            Ty.path "typenum::uint::UTerm";
                                            Ty.path "typenum::bit::B1"
                                          ];
                                        Ty.path "typenum::bit::B0"
                                      ];
                                    Ty.path "typenum::bit::B0"
                                  ];
                                Ty.path "typenum::bit::B0"
                              ];
                            Ty.path "typenum::bit::B0"
                          ];
                        Ty.path "typenum::bit::B0"
                      ]
                  ],
                [],
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
                ],
                "into",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "generic_array::GenericArray")
                    []
                    [
                      Ty.path "u8";
                      Ty.apply
                        (Ty.path "typenum::uint::UInt")
                        []
                        [
                          Ty.apply
                            (Ty.path "typenum::uint::UInt")
                            []
                            [
                              Ty.apply
                                (Ty.path "typenum::uint::UInt")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "typenum::uint::UInt")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "typenum::uint::UInt")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "typenum::uint::UInt")
                                            []
                                            [
                                              Ty.path "typenum::uint::UTerm";
                                              Ty.path "typenum::bit::B1"
                                            ];
                                          Ty.path "typenum::bit::B0"
                                        ];
                                      Ty.path "typenum::bit::B0"
                                    ];
                                  Ty.path "typenum::bit::B0"
                                ];
                              Ty.path "typenum::bit::B0"
                            ];
                          Ty.path "typenum::bit::B0"
                        ]
                    ],
                  M.get_trait_method (|
                    "digest::digest::Digest",
                    Ty.apply
                      (Ty.path "digest::core_api::wrapper::CoreWrapper")
                      []
                      [
                        Ty.apply
                          (Ty.path "digest::core_api::ct_variable::CtVariableCoreWrapper")
                          []
                          [
                            Ty.path "sha2::core_api::Sha256VarCore";
                            Ty.apply
                              (Ty.path "typenum::uint::UInt")
                              []
                              [
                                Ty.apply
                                  (Ty.path "typenum::uint::UInt")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "typenum::uint::UInt")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "typenum::uint::UInt")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "typenum::uint::UInt")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "typenum::uint::UInt")
                                                  []
                                                  [
                                                    Ty.path "typenum::uint::UTerm";
                                                    Ty.path "typenum::bit::B1"
                                                  ];
                                                Ty.path "typenum::bit::B0"
                                              ];
                                            Ty.path "typenum::bit::B0"
                                          ];
                                        Ty.path "typenum::bit::B0"
                                      ];
                                    Ty.path "typenum::bit::B0"
                                  ];
                                Ty.path "typenum::bit::B0"
                              ];
                            Ty.path "sha2::OidSha256"
                          ]
                      ],
                    [],
                    [],
                    "finalize",
                    [],
                    []
                  |),
                  [ M.read (| hasher |) ]
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "p3_symmetric::hasher::CryptographicHasher"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *)
      [
        Ty.path "u8";
        Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
      ]
      Self
      (* Instance *)
      [
        ("hash_iter", InstanceField.Method hash_iter);
        ("hash_iter_slices", InstanceField.Method hash_iter_slices)
      ].
End Impl_p3_symmetric_hasher_CryptographicHasher_u8_array_Usize_32_u8_for_p3_sha256_Sha256.

(* StructTuple
  {
    name := "Sha256Compress";
    const_params := [];
    ty_params := [];
    fields := [];
  } *)

Module Impl_core_marker_Copy_for_p3_sha256_Sha256Compress.
  Definition Self : Ty.t := Ty.path "p3_sha256::Sha256Compress".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_Copy_for_p3_sha256_Sha256Compress.

Module Impl_core_clone_Clone_for_p3_sha256_Sha256Compress.
  Definition Self : Ty.t := Ty.path "p3_sha256::Sha256Compress".
  
  (* Clone *)
  Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.read (| M.deref (| M.read (| self |) |) |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_p3_sha256_Sha256Compress.

Module Impl_core_fmt_Debug_for_p3_sha256_Sha256Compress.
  Definition Self : Ty.t := Ty.path "p3_sha256::Sha256Compress".
  
  (* Debug *)
  Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; Ty.path "core::fmt::Error" ],
          M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
          [
            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Sha256Compress" |) |) |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_p3_sha256_Sha256Compress.

Module Impl_p3_symmetric_compression_PseudoCompressionFunction_Usize_2_array_Usize_32_u8_for_p3_sha256_Sha256Compress.
  Definition Self : Ty.t := Ty.path "p3_sha256::Sha256Compress".
  
  (*
      fn compress(&self, input: [[u8; 32]; 2]) -> [u8; 32] {
          let mut state = H256_256;
          // GenericArray<u8, U64> has same memory layout as [u8; 64]
          let block: GenericArray<u8, U64> = unsafe { core::mem::transmute(input) };
          sha2::compress256(&mut state, &[block]);
  
          let mut output = [0u8; 32];
          for (chunk, word) in output.chunks_exact_mut(4).zip(state) {
              chunk.copy_from_slice(&word.to_be_bytes());
          }
          output
      }
  *)
  Definition compress (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; input ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let input := M.alloc (| input |) in
        M.read (|
          let~ state :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ Ty.path "u32" ]
                ] :=
            M.copy (|
              get_constant (|
                "p3_sha256::H256_256",
                Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ Ty.path "u32" ]
              |)
            |) in
          let~ block :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "generic_array::GenericArray")
                    []
                    [
                      Ty.path "u8";
                      Ty.apply
                        (Ty.path "typenum::uint::UInt")
                        []
                        [
                          Ty.apply
                            (Ty.path "typenum::uint::UInt")
                            []
                            [
                              Ty.apply
                                (Ty.path "typenum::uint::UInt")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "typenum::uint::UInt")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "typenum::uint::UInt")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "typenum::uint::UInt")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "typenum::uint::UInt")
                                                []
                                                [
                                                  Ty.path "typenum::uint::UTerm";
                                                  Ty.path "typenum::bit::B1"
                                                ];
                                              Ty.path "typenum::bit::B0"
                                            ];
                                          Ty.path "typenum::bit::B0"
                                        ];
                                      Ty.path "typenum::bit::B0"
                                    ];
                                  Ty.path "typenum::bit::B0"
                                ];
                              Ty.path "typenum::bit::B0"
                            ];
                          Ty.path "typenum::bit::B0"
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "generic_array::GenericArray")
                  []
                  [
                    Ty.path "u8";
                    Ty.apply
                      (Ty.path "typenum::uint::UInt")
                      []
                      [
                        Ty.apply
                          (Ty.path "typenum::uint::UInt")
                          []
                          [
                            Ty.apply
                              (Ty.path "typenum::uint::UInt")
                              []
                              [
                                Ty.apply
                                  (Ty.path "typenum::uint::UInt")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "typenum::uint::UInt")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "typenum::uint::UInt")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "typenum::uint::UInt")
                                              []
                                              [
                                                Ty.path "typenum::uint::UTerm";
                                                Ty.path "typenum::bit::B1"
                                              ];
                                            Ty.path "typenum::bit::B0"
                                          ];
                                        Ty.path "typenum::bit::B0"
                                      ];
                                    Ty.path "typenum::bit::B0"
                                  ];
                                Ty.path "typenum::bit::B0"
                              ];
                            Ty.path "typenum::bit::B0"
                          ];
                        Ty.path "typenum::bit::B0"
                      ]
                  ],
                M.get_function (|
                  "core::intrinsics::transmute",
                  [],
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [ Ty.path "u8" ]
                      ];
                    Ty.apply
                      (Ty.path "generic_array::GenericArray")
                      []
                      [
                        Ty.path "u8";
                        Ty.apply
                          (Ty.path "typenum::uint::UInt")
                          []
                          [
                            Ty.apply
                              (Ty.path "typenum::uint::UInt")
                              []
                              [
                                Ty.apply
                                  (Ty.path "typenum::uint::UInt")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "typenum::uint::UInt")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "typenum::uint::UInt")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "typenum::uint::UInt")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "typenum::uint::UInt")
                                                  []
                                                  [
                                                    Ty.path "typenum::uint::UTerm";
                                                    Ty.path "typenum::bit::B1"
                                                  ];
                                                Ty.path "typenum::bit::B0"
                                              ];
                                            Ty.path "typenum::bit::B0"
                                          ];
                                        Ty.path "typenum::bit::B0"
                                      ];
                                    Ty.path "typenum::bit::B0"
                                  ];
                                Ty.path "typenum::bit::B0"
                              ];
                            Ty.path "typenum::bit::B0"
                          ]
                      ]
                  ]
                |),
                [ M.read (| input |) ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "sha2::sha256::compress256", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, state |) |)
                  |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (| Value.Array [ M.read (| block |) ] |)
                        |)
                      |)
                    |))
                ]
              |)
            |) in
          let~ output :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
                ] :=
            M.alloc (|
              repeat (| Value.Integer IntegerKind.U8 0, Value.Integer IntegerKind.Usize 32 |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::zip::Zip")
                      []
                      [
                        Ty.apply (Ty.path "core::slice::iter::ChunksExactMut") [] [ Ty.path "u8" ];
                        Ty.apply
                          (Ty.path "core::array::iter::IntoIter")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [ Ty.path "u32" ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::ChunksExactMut")
                            []
                            [ Ty.path "u8" ];
                          Ty.apply
                            (Ty.path "core::array::iter::IntoIter")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ Ty.path "u32" ]
                        ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::ChunksExactMut")
                              []
                              [ Ty.path "u8" ];
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [ Ty.path "u32" ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::ChunksExactMut")
                            []
                            [ Ty.path "u8" ],
                          [],
                          [],
                          "zip",
                          [],
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [ Ty.path "u32" ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::ChunksExactMut")
                              []
                              [ Ty.path "u8" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                              "chunks_exact_mut",
                              [],
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (M.borrow (| Pointer.Kind.MutRef, output |));
                              Value.Integer IntegerKind.Usize 4
                            ]
                          |);
                          M.read (| state |)
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                                          Ty.path "u32"
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::ChunksExactMut")
                                          []
                                          [ Ty.path "u8" ];
                                        Ty.apply
                                          (Ty.path "core::array::iter::IntoIter")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [ Ty.path "u32" ]
                                      ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                    let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                    let chunk := M.copy (| γ1_0 |) in
                                    let word := M.copy (| γ1_1 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                            "copy_from_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| chunk |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 4 ]
                                                          [ Ty.path "u8" ],
                                                        M.get_associated_function (|
                                                          Ty.path "u32",
                                                          "to_be_bytes",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| word |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          output
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "p3_symmetric::compression::PseudoCompressionFunction"
      (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 2 ]
      (* Trait polymorphic types *)
      [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ] ]
      Self
      (* Instance *) [ ("compress", InstanceField.Method compress) ].
End Impl_p3_symmetric_compression_PseudoCompressionFunction_Usize_2_array_Usize_32_u8_for_p3_sha256_Sha256Compress.

Module Impl_p3_symmetric_compression_CompressionFunction_Usize_2_array_Usize_32_u8_for_p3_sha256_Sha256Compress.
  Definition Self : Ty.t := Ty.path "p3_sha256::Sha256Compress".
  
  Axiom Implements :
    M.IsTraitInstance
      "p3_symmetric::compression::CompressionFunction"
      (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 2 ]
      (* Trait polymorphic types *)
      [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ] ]
      Self
      (* Instance *) [].
End Impl_p3_symmetric_compression_CompressionFunction_Usize_2_array_Usize_32_u8_for_p3_sha256_Sha256Compress.
