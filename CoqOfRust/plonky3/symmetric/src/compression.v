(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module compression.
  (* Trait *)
  (* Empty module 'PseudoCompressionFunction' *)
  
  (* Trait *)
  (* Empty module 'CompressionFunction' *)
  
  (* StructRecord
    {
      name := "TruncatedPermutation";
      const_params := [ "N"; "CHUNK"; "WIDTH" ];
      ty_params := [ "InnerP" ];
      fields := [ ("inner_permutation", InnerP) ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_InnerP_for_p3_symmetric_compression_TruncatedPermutation_N_CHUNK_WIDTH_InnerP.
    Definition Self (N CHUNK WIDTH : Value.t) (InnerP : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
        [ N; CHUNK; WIDTH ]
        [ InnerP ].
    
    (* Clone *)
    Definition clone
        (N CHUNK WIDTH : Value.t)
        (InnerP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N CHUNK WIDTH InnerP in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_symmetric::compression::TruncatedPermutation"
            [
              ("inner_permutation",
                M.call_closure (|
                  InnerP,
                  M.get_trait_method (| "core::clone::Clone", InnerP, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::compression::TruncatedPermutation",
                            "inner_permutation"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N CHUNK WIDTH : Value.t) (InnerP : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self N CHUNK WIDTH InnerP)
        (* Instance *) [ ("clone", InstanceField.Method (clone N CHUNK WIDTH InnerP)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_InnerP_for_p3_symmetric_compression_TruncatedPermutation_N_CHUNK_WIDTH_InnerP.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_InnerP_for_p3_symmetric_compression_TruncatedPermutation_N_CHUNK_WIDTH_InnerP.
    Definition Self (N CHUNK WIDTH : Value.t) (InnerP : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
        [ N; CHUNK; WIDTH ]
        [ InnerP ].
    
    (* Debug *)
    Definition fmt
        (N CHUNK WIDTH : Value.t)
        (InnerP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N CHUNK WIDTH InnerP in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field1_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "TruncatedPermutation" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner_permutation" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::compression::TruncatedPermutation",
                            "inner_permutation"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N CHUNK WIDTH : Value.t) (InnerP : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self N CHUNK WIDTH InnerP)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt N CHUNK WIDTH InnerP)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_InnerP_for_p3_symmetric_compression_TruncatedPermutation_N_CHUNK_WIDTH_InnerP.
  
  Module Impl_p3_symmetric_compression_TruncatedPermutation_N_CHUNK_WIDTH_InnerP.
    Definition Self (N CHUNK WIDTH : Value.t) (InnerP : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
        [ N; CHUNK; WIDTH ]
        [ InnerP ].
    
    (*
        pub const fn new(inner_permutation: InnerP) -> Self {
            Self { inner_permutation }
        }
    *)
    Definition new
        (N CHUNK WIDTH : Value.t)
        (InnerP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N CHUNK WIDTH InnerP in
      match ε, τ, α with
      | [], [], [ inner_permutation ] =>
        ltac:(M.monadic
          (let inner_permutation := M.alloc (| inner_permutation |) in
          Value.StructRecord
            "p3_symmetric::compression::TruncatedPermutation"
            [ ("inner_permutation", M.read (| inner_permutation |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (N CHUNK WIDTH : Value.t) (InnerP : Ty.t),
      M.IsAssociatedFunction.C (Self N CHUNK WIDTH InnerP) "new" (new N CHUNK WIDTH InnerP).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_p3_symmetric_compression_TruncatedPermutation_N_CHUNK_WIDTH_InnerP.
  
  Module Impl_p3_symmetric_compression_PseudoCompressionFunction_where_core_marker_Copy_T_where_core_default_Default_T_where_p3_symmetric_permutation_CryptographicPermutation_InnerP_array_WIDTH_T_N_array_CHUNK_T_for_p3_symmetric_compression_TruncatedPermutation_N_CHUNK_WIDTH_InnerP.
    Definition Self (N CHUNK WIDTH : Value.t) (T InnerP : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
        [ N; CHUNK; WIDTH ]
        [ InnerP ].
    
    (*
        fn compress(&self, input: [[T; CHUNK]; N]) -> [T; CHUNK] {
            debug_assert!(CHUNK * N <= WIDTH);
            let mut pre = [T::default(); WIDTH];
            for i in 0..N {
                pre[i * CHUNK..(i + 1) * CHUNK].copy_from_slice(&input[i]);
            }
            let post = self.inner_permutation.permute(pre);
            post[..CHUNK].try_into().unwrap()
        }
    *)
    Definition compress
        (N CHUNK WIDTH : Value.t)
        (T InnerP : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N CHUNK WIDTH T InnerP in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.le,
                                          [
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.mul,
                                              [ CHUNK; N ]
                                            |);
                                            WIDTH
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic", [], [] |),
                                      [ mk_str (| "assertion failed: CHUNK * N <= WIDTH" |) ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ pre : Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ] ] :=
              M.alloc (|
                repeat (|
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::default::Default", T, [], [], "default", [], [] |),
                    []
                  |),
                  WIDTH
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", N) ]
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let i := M.copy (| γ0_0 |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [] [ T ],
                                              "copy_from_slice",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                                    M.get_trait_method (|
                                                      "core::ops::index::IndexMut",
                                                      Ty.apply (Ty.path "array") [ WIDTH ] [ T ],
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ],
                                                      "index_mut",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (| Pointer.Kind.MutRef, pre |);
                                                      Value.StructRecord
                                                        "core::ops::range::Range"
                                                        [
                                                          ("start",
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.mul,
                                                              [ M.read (| i |); CHUNK ]
                                                            |));
                                                          ("end_",
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.mul,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.add,
                                                                  [
                                                                    M.read (| i |);
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                |);
                                                                CHUNK
                                                              ]
                                                            |))
                                                        ]
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              (* Unsize *)
                                              M.pointer_coercion
                                                (M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.SubPointer.get_array_field (|
                                                        input,
                                                        M.read (| i |)
                                                      |)
                                                    |)
                                                  |)
                                                |))
                                            ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            let~ post : Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "array") [ WIDTH ] [ T ],
                  M.get_trait_method (|
                    "p3_symmetric::permutation::Permutation",
                    InnerP,
                    [],
                    [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ] ],
                    "permute",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_symmetric::compression::TruncatedPermutation",
                        "inner_permutation"
                      |)
                    |);
                    M.read (| pre |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "array") [ CHUNK ] [ T ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply (Ty.path "array") [ CHUNK ] [ T ];
                      Ty.path "core::array::TryFromSliceError"
                    ],
                  "unwrap",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply (Ty.path "array") [ CHUNK ] [ T ];
                        Ty.path "core::array::TryFromSliceError"
                      ],
                    M.get_trait_method (|
                      "core::convert::TryInto",
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                      [],
                      [ Ty.apply (Ty.path "array") [ CHUNK ] [ T ] ],
                      "try_into",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            M.get_trait_method (|
                              "core::ops::index::Index",
                              Ty.apply (Ty.path "array") [ WIDTH ] [ T ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeTo")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                              "index",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, post |);
                              Value.StructRecord "core::ops::range::RangeTo" [ ("end_", CHUNK) ]
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N CHUNK WIDTH : Value.t) (T InnerP : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::compression::PseudoCompressionFunction"
        (* Trait polymorphic consts *) [ N ]
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "array") [ CHUNK ] [ T ] ]
        (Self N CHUNK WIDTH T InnerP)
        (* Instance *) [ ("compress", InstanceField.Method (compress N CHUNK WIDTH T InnerP)) ].
  End Impl_p3_symmetric_compression_PseudoCompressionFunction_where_core_marker_Copy_T_where_core_default_Default_T_where_p3_symmetric_permutation_CryptographicPermutation_InnerP_array_WIDTH_T_N_array_CHUNK_T_for_p3_symmetric_compression_TruncatedPermutation_N_CHUNK_WIDTH_InnerP.
  
  (* StructRecord
    {
      name := "CompressionFunctionFromHasher";
      const_params := [ "N"; "CHUNK" ];
      ty_params := [ "H" ];
      fields := [ ("hasher", H) ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_H_for_p3_symmetric_compression_CompressionFunctionFromHasher_N_CHUNK_H.
    Definition Self (N CHUNK : Value.t) (H : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
        [ N; CHUNK ]
        [ H ].
    
    (* Clone *)
    Definition clone
        (N CHUNK : Value.t)
        (H : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N CHUNK H in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_symmetric::compression::CompressionFunctionFromHasher"
            [
              ("hasher",
                M.call_closure (|
                  H,
                  M.get_trait_method (| "core::clone::Clone", H, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::compression::CompressionFunctionFromHasher",
                            "hasher"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N CHUNK : Value.t) (H : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self N CHUNK H)
        (* Instance *) [ ("clone", InstanceField.Method (clone N CHUNK H)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_H_for_p3_symmetric_compression_CompressionFunctionFromHasher_N_CHUNK_H.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_H_for_p3_symmetric_compression_CompressionFunctionFromHasher_N_CHUNK_H.
    Definition Self (N CHUNK : Value.t) (H : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
        [ N; CHUNK ]
        [ H ].
    
    (* Debug *)
    Definition fmt
        (N CHUNK : Value.t)
        (H : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N CHUNK H in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field1_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| mk_str (| "CompressionFunctionFromHasher" |) |)
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "hasher" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::compression::CompressionFunctionFromHasher",
                            "hasher"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N CHUNK : Value.t) (H : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self N CHUNK H)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt N CHUNK H)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_H_for_p3_symmetric_compression_CompressionFunctionFromHasher_N_CHUNK_H.
  
  Module Impl_p3_symmetric_compression_CompressionFunctionFromHasher_N_CHUNK_H.
    Definition Self (N CHUNK : Value.t) (H : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
        [ N; CHUNK ]
        [ H ].
    
    (*
        pub const fn new(hasher: H) -> Self {
            Self { hasher }
        }
    *)
    Definition new
        (N CHUNK : Value.t)
        (H : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N CHUNK H in
      match ε, τ, α with
      | [], [], [ hasher ] =>
        ltac:(M.monadic
          (let hasher := M.alloc (| hasher |) in
          Value.StructRecord
            "p3_symmetric::compression::CompressionFunctionFromHasher"
            [ ("hasher", M.read (| hasher |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (N CHUNK : Value.t) (H : Ty.t),
      M.IsAssociatedFunction.C (Self N CHUNK H) "new" (new N CHUNK H).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_p3_symmetric_compression_CompressionFunctionFromHasher_N_CHUNK_H.
  
  Module Impl_p3_symmetric_compression_PseudoCompressionFunction_where_core_clone_Clone_T_where_p3_symmetric_hasher_CryptographicHasher_H_T_array_CHUNK_T_N_array_CHUNK_T_for_p3_symmetric_compression_CompressionFunctionFromHasher_N_CHUNK_H.
    Definition Self (N CHUNK : Value.t) (T H : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
        [ N; CHUNK ]
        [ H ].
    
    (*
        fn compress(&self, input: [[T; CHUNK]; N]) -> [T; CHUNK] {
            self.hasher.hash_iter(input.into_iter().flatten())
        }
    *)
    Definition compress
        (N CHUNK : Value.t)
        (T H : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N CHUNK T H in
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply (Ty.path "array") [ CHUNK ] [ T ],
            M.get_trait_method (|
              "p3_symmetric::hasher::CryptographicHasher",
              H,
              [],
              [ T; Ty.apply (Ty.path "array") [ CHUNK ] [ T ] ],
              "hash_iter",
              [],
              [
                Ty.apply
                  (Ty.path "core::iter::adapters::flatten::Flatten")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::array::iter::IntoIter")
                      [ N ]
                      [ Ty.apply (Ty.path "array") [ CHUNK ] [ T ] ]
                  ]
              ]
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_symmetric::compression::CompressionFunctionFromHasher",
                  "hasher"
                |)
              |);
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::flatten::Flatten")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::array::iter::IntoIter")
                      [ N ]
                      [ Ty.apply (Ty.path "array") [ CHUNK ] [ T ] ]
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::array::iter::IntoIter")
                    [ N ]
                    [ Ty.apply (Ty.path "array") [ CHUNK ] [ T ] ],
                  [],
                  [],
                  "flatten",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::array::iter::IntoIter")
                      [ N ]
                      [ Ty.apply (Ty.path "array") [ CHUNK ] [ T ] ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "array")
                        [ N ]
                        [ Ty.apply (Ty.path "array") [ CHUNK ] [ T ] ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| input |) ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N CHUNK : Value.t) (T H : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::compression::PseudoCompressionFunction"
        (* Trait polymorphic consts *) [ N ]
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "array") [ CHUNK ] [ T ] ]
        (Self N CHUNK T H)
        (* Instance *) [ ("compress", InstanceField.Method (compress N CHUNK T H)) ].
  End Impl_p3_symmetric_compression_PseudoCompressionFunction_where_core_clone_Clone_T_where_p3_symmetric_hasher_CryptographicHasher_H_T_array_CHUNK_T_N_array_CHUNK_T_for_p3_symmetric_compression_CompressionFunctionFromHasher_N_CHUNK_H.
  
  Module Impl_p3_symmetric_compression_CompressionFunction_where_core_clone_Clone_T_where_p3_symmetric_hasher_CryptographicHasher_H_T_array_CHUNK_T_N_array_CHUNK_T_for_p3_symmetric_compression_CompressionFunctionFromHasher_N_CHUNK_H.
    Definition Self (N CHUNK : Value.t) (T H : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
        [ N; CHUNK ]
        [ H ].
    
    Axiom Implements :
      forall (N CHUNK : Value.t) (T H : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::compression::CompressionFunction"
        (* Trait polymorphic consts *) [ N ]
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "array") [ CHUNK ] [ T ] ]
        (Self N CHUNK T H)
        (* Instance *) [].
  End Impl_p3_symmetric_compression_CompressionFunction_where_core_clone_Clone_T_where_p3_symmetric_hasher_CryptographicHasher_H_T_array_CHUNK_T_N_array_CHUNK_T_for_p3_symmetric_compression_CompressionFunctionFromHasher_N_CHUNK_H.
End compression.
