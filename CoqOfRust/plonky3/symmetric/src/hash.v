(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module hash.
  (* StructRecord
    {
      name := "Hash";
      const_params := [ "DIGEST_ELEMS" ];
      ty_params := [ "F"; "W" ];
      fields :=
        [
          ("value", Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ]);
          ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ])
        ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
    Definition Self (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ].
    
    (* Clone *)
    Definition clone
        (DIGEST_ELEMS : Value.t)
        (F W : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS F W in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_symmetric::hash::Hash"
            [
              ("value",
                M.call_closure (|
                  Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::hash::Hash",
                            "value"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("_marker",
                M.call_closure (|
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::hash::Hash",
                            "_marker"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (F W : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self DIGEST_ELEMS F W)
        (* Instance *) [ ("clone", InstanceField.Method (clone DIGEST_ELEMS F W)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_F_where_core_marker_Copy_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
    Definition Self (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ].
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (F W : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self DIGEST_ELEMS F W)
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_F_where_core_marker_Copy_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
    Definition Self (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ].
    
    (* Debug *)
    Definition fmt
        (DIGEST_ELEMS : Value.t)
        (F W : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS F W in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Hash" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "value" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_symmetric::hash::Hash",
                        "value"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_marker" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::hash::Hash",
                            "_marker"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (F W : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self DIGEST_ELEMS F W)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt DIGEST_ELEMS F W)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
  
  Module Impl_core_marker_StructuralPartialEq_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
    Definition Self (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ].
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (F W : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self DIGEST_ELEMS F W)
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_where_core_cmp_PartialEq_W_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
    Definition Self (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ].
    
    (* PartialEq *)
    Definition eq
        (DIGEST_ELEMS : Value.t)
        (F W : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS F W in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ],
                [],
                [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ] ],
                "eq",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "p3_symmetric::hash::Hash",
                    "value"
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "p3_symmetric::hash::Hash",
                    "value"
                  |)
                |)
              ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                  [],
                  [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ] ],
                  "eq",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_symmetric::hash::Hash",
                      "_marker"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "p3_symmetric::hash::Hash",
                      "_marker"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (F W : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ] ]
        (Self DIGEST_ELEMS F W)
        (* Instance *) [ ("eq", InstanceField.Method (eq DIGEST_ELEMS F W)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_where_core_cmp_PartialEq_W_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
  
  Module Impl_core_cmp_Eq_where_core_cmp_Eq_F_where_core_cmp_Eq_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
    Definition Self (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ].
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (DIGEST_ELEMS : Value.t)
        (F W : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS F W in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (F W : Ty.t),
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self DIGEST_ELEMS F W)
        (* Instance *)
        [
          ("assert_receiver_is_total_eq",
            InstanceField.Method (assert_receiver_is_total_eq DIGEST_ELEMS F W))
        ].
  End Impl_core_cmp_Eq_where_core_cmp_Eq_F_where_core_cmp_Eq_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
  
  Module underscore.
    Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_array_DIGEST_ELEMS_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
      Definition Self (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ].
      
      (* Serialize *)
      Definition serialize
          (DIGEST_ELEMS : Value.t)
          (F W : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self DIGEST_ELEMS F W in
        match ε, τ, α with
        | [], [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let __serializer := M.alloc (| __serializer |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ __serde_state :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct"
                        ] :=
                    M.copy (|
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct"
                          ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "Hash" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.cast (Ty.path "usize") (Value.Bool false);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ] ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "value" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_symmetric::hash::Hash",
                                        "value"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ] ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "_marker" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_symmetric::hash::Hash",
                                        "_marker"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.get_trait_method (|
                        "serde::ser::SerializeStruct",
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        [],
                        [],
                        "end",
                        [],
                        []
                      |),
                      [ M.read (| __serde_state |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (DIGEST_ELEMS : Value.t) (F W : Ty.t),
        M.IsTraitInstance
          "serde::ser::Serialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self DIGEST_ELEMS F W)
          (* Instance *) [ ("serialize", InstanceField.Method (serialize DIGEST_ELEMS F W)) ].
    End Impl_serde_ser_Serialize_where_serde_ser_Serialize_array_DIGEST_ELEMS_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
    Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_array_DIGEST_ELEMS_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
      Definition Self (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ].
      
      (* Deserialize *)
      Definition deserialize
          (DIGEST_ELEMS : Value.t)
          (F W : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self DIGEST_ELEMS F W in
        match ε, τ, α with
        | [], [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __deserializer |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ];
                  Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                ],
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                [],
                "deserialize_struct",
                [],
                [
                  Ty.apply
                    (Ty.path "p3_symmetric::hash::_'1::deserialize::__Visitor")
                    [ DIGEST_ELEMS ]
                    [ F; W ]
                ]
              |),
              [
                M.read (| __deserializer |);
                mk_str (| "Hash" |);
                M.read (|
                  get_constant (|
                    "p3_symmetric::hash::_'1::deserialize::FIELDS",
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ]
                  |)
                |);
                Value.StructRecord
                  "p3_symmetric::hash::_'1::deserialize::__Visitor"
                  [
                    ("marker", Value.StructTuple "core::marker::PhantomData" []);
                    ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (DIGEST_ELEMS : Value.t) (F W : Ty.t),
        M.IsTraitInstance
          "serde::de::Deserialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self DIGEST_ELEMS F W)
          (* Instance *) [ ("deserialize", InstanceField.Method (deserialize DIGEST_ELEMS F W)) ].
    End Impl_serde_de_Deserialize_where_serde_de_Deserialize_array_DIGEST_ELEMS_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
  End underscore.
  
  
  Module Impl_core_convert_From_array_DIGEST_ELEMS_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
    Definition Self (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ].
    
    (*
        fn from(value: [W; DIGEST_ELEMS]) -> Self {
            Self {
                value,
                _marker: PhantomData,
            }
        }
    *)
    Definition from
        (DIGEST_ELEMS : Value.t)
        (F W : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS F W in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructRecord
            "p3_symmetric::hash::Hash"
            [
              ("value", M.read (| value |));
              ("_marker", Value.StructTuple "core::marker::PhantomData" [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (F W : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ] ]
        (Self DIGEST_ELEMS F W)
        (* Instance *) [ ("from", InstanceField.Method (from DIGEST_ELEMS F W)) ].
  End Impl_core_convert_From_array_DIGEST_ELEMS_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
  
  Module Impl_core_convert_From_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W_for_array_DIGEST_ELEMS_W.
    Definition Self (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ].
    
    (*
        fn from(value: Hash<F, W, DIGEST_ELEMS>) -> [W; DIGEST_ELEMS] {
            value.value
        }
    *)
    Definition from
        (DIGEST_ELEMS : Value.t)
        (F W : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS F W in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.read (|
            M.SubPointer.get_struct_record_field (| value, "p3_symmetric::hash::Hash", "value" |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (F W : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ] ]
        (Self DIGEST_ELEMS F W)
        (* Instance *) [ ("from", InstanceField.Method (from DIGEST_ELEMS F W)) ].
  End Impl_core_convert_From_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W_for_array_DIGEST_ELEMS_W.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_W_array_DIGEST_ELEMS_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
    Definition Self (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ].
    
    (*
        fn eq(&self, other: &[W; DIGEST_ELEMS]) -> bool {
            self.value == *other
        }
    *)
    Definition eq
        (DIGEST_ELEMS : Value.t)
        (F W : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS F W in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (|
              "core::cmp::PartialEq",
              Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ],
              [],
              [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ] ],
              "eq",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_symmetric::hash::Hash",
                  "value"
                |)
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (F W : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ] ]
        (Self DIGEST_ELEMS F W)
        (* Instance *) [ ("eq", InstanceField.Method (eq DIGEST_ELEMS F W)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_W_array_DIGEST_ELEMS_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
  
  Module Impl_core_iter_traits_collect_IntoIterator_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
    Definition Self (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ].
    
    (*     type Item = W; *)
    Definition _Item (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t := W.
    
    (*     type IntoIter = core::array::IntoIter<W, DIGEST_ELEMS>; *)
    Definition _IntoIter (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "core::array::iter::IntoIter") [ DIGEST_ELEMS ] [ W ].
    
    (*
        fn into_iter(self) -> Self::IntoIter {
            self.value.into_iter()
        }
    *)
    Definition into_iter
        (DIGEST_ELEMS : Value.t)
        (F W : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS F W in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::array::iter::IntoIter") [ DIGEST_ELEMS ] [ W ],
            M.get_trait_method (|
              "core::iter::traits::collect::IntoIterator",
              Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ],
              [],
              [],
              "into_iter",
              [],
              []
            |),
            [
              M.read (|
                M.SubPointer.get_struct_record_field (| self, "p3_symmetric::hash::Hash", "value" |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (F W : Ty.t),
      M.IsTraitInstance
        "core::iter::traits::collect::IntoIterator"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self DIGEST_ELEMS F W)
        (* Instance *)
        [
          ("Item", InstanceField.Ty (_Item DIGEST_ELEMS F W));
          ("IntoIter", InstanceField.Ty (_IntoIter DIGEST_ELEMS F W));
          ("into_iter", InstanceField.Method (into_iter DIGEST_ELEMS F W))
        ].
  End Impl_core_iter_traits_collect_IntoIterator_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
  
  Module Impl_core_borrow_Borrow_array_DIGEST_ELEMS_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
    Definition Self (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ].
    
    (*
        fn borrow(&self) -> &[W; DIGEST_ELEMS] {
            &self.value
        }
    *)
    Definition borrow
        (DIGEST_ELEMS : Value.t)
        (F W : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS F W in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_symmetric::hash::Hash",
                  "value"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (F W : Ty.t),
      M.IsTraitInstance
        "core::borrow::Borrow"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ] ]
        (Self DIGEST_ELEMS F W)
        (* Instance *) [ ("borrow", InstanceField.Method (borrow DIGEST_ELEMS F W)) ].
  End Impl_core_borrow_Borrow_array_DIGEST_ELEMS_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
  
  Module Impl_core_convert_AsRef_array_DIGEST_ELEMS_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
    Definition Self (DIGEST_ELEMS : Value.t) (F W : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ DIGEST_ELEMS ] [ F; W ].
    
    (*
        fn as_ref(&self) -> &[W; DIGEST_ELEMS] {
            &self.value
        }
    *)
    Definition as_ref
        (DIGEST_ELEMS : Value.t)
        (F W : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DIGEST_ELEMS F W in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_symmetric::hash::Hash",
                  "value"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DIGEST_ELEMS : Value.t) (F W : Ty.t),
      M.IsTraitInstance
        "core::convert::AsRef"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "array") [ DIGEST_ELEMS ] [ W ] ]
        (Self DIGEST_ELEMS F W)
        (* Instance *) [ ("as_ref", InstanceField.Method (as_ref DIGEST_ELEMS F W)) ].
  End Impl_core_convert_AsRef_array_DIGEST_ELEMS_W_for_p3_symmetric_hash_Hash_DIGEST_ELEMS_F_W.
End hash.
