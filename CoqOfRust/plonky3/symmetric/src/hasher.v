(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module hasher.
  (* Trait *)
  Module CryptographicHasher.
    Definition hash_iter_slices
        (Item Out Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ _ as I ], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Out,
            M.get_trait_method (|
              "p3_symmetric::hasher::CryptographicHasher",
              Self,
              [],
              [ Item; Out ],
              "hash_iter",
              [],
              [
                Ty.apply
                  (Ty.path "core::iter::adapters::cloned::Cloned")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::flatten::Flatten")
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::collect::IntoIterator"
                          []
                          []
                          I
                          "IntoIter"
                      ]
                  ]
              ]
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::cloned::Cloned")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::flatten::Flatten")
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::collect::IntoIterator"
                          []
                          []
                          I
                          "IntoIter"
                      ]
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::flatten::Flatten")
                    []
                    [
                      Ty.associated_in_trait
                        "core::iter::traits::collect::IntoIterator"
                        []
                        []
                        I
                        "IntoIter"
                    ],
                  [],
                  [],
                  "cloned",
                  [],
                  [ Item ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::flatten::Flatten")
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::collect::IntoIterator"
                          []
                          []
                          I
                          "IntoIter"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.associated_in_trait
                        "core::iter::traits::collect::IntoIterator"
                        []
                        []
                        I
                        "IntoIter",
                      [],
                      [],
                      "flatten",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.associated_in_trait
                          "core::iter::traits::collect::IntoIterator"
                          []
                          []
                          I
                          "IntoIter",
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          I,
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [ M.read (| input |) ]
                      |)
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_hash_iter_slices :
      forall (Item Out : Ty.t),
      M.IsProvidedMethod
        "p3_symmetric::hasher::CryptographicHasher"
        "hash_iter_slices"
        (hash_iter_slices Item Out).
    Definition hash_slice
        (Item Out Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Out,
            M.get_trait_method (|
              "p3_symmetric::hasher::CryptographicHasher",
              Self,
              [],
              [ Item; Out ],
              "hash_iter_slices",
              [],
              [
                Ty.apply
                  (Ty.path "core::iter::sources::once::Once")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Item ] ] ]
              ]
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::sources::once::Once")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Item ] ] ],
                M.get_function (|
                  "core::iter::sources::once::once",
                  [],
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Item ] ] ]
                |),
                [ M.read (| input |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_hash_slice :
      forall (Item Out : Ty.t),
      M.IsProvidedMethod
        "p3_symmetric::hasher::CryptographicHasher"
        "hash_slice"
        (hash_slice Item Out).
    Definition hash_item
        (Item Out Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Out,
            M.get_trait_method (|
              "p3_symmetric::hasher::CryptographicHasher",
              Self,
              [],
              [ Item; Out ],
              "hash_slice",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (| Value.Array [ M.read (| input |) ] |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_hash_item :
      forall (Item Out : Ty.t),
      M.IsProvidedMethod
        "p3_symmetric::hasher::CryptographicHasher"
        "hash_item"
        (hash_item Item Out).
  End CryptographicHasher.
End hasher.
