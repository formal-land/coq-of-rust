(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module permutation.
  (* Trait *)
  Module Permutation.
    Definition permute (T Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_symmetric::permutation::Permutation",
                    Self,
                    [],
                    [ T ],
                    "permute_mut",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (| M.borrow (| Pointer.Kind.MutRef, input |) |)
                    |)
                  ]
                |)
              |) in
            input
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_permute :
      forall (T : Ty.t),
      M.IsProvidedMethod "p3_symmetric::permutation::Permutation" "permute" (permute T).
  End Permutation.
  
  (* Trait *)
  (* Empty module 'CryptographicPermutation' *)
End permutation.
