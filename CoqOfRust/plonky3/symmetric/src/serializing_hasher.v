(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module serializing_hasher.
  (* StructRecord
    {
      name := "SerializingHasher32";
      const_params := [];
      ty_params := [ "Inner" ];
      fields := [ ("inner", Inner) ];
    } *)
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher32_Inner.
    Definition Self (Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32") [] [ Inner ].
    
    Axiom Implements :
      forall (Inner : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Inner)
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher32_Inner.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher32_Inner.
    Definition Self (Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32") [] [ Inner ].
    
    (* Clone *)
    Definition clone (Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_symmetric::serializing_hasher::SerializingHasher32"
            [
              ("inner",
                M.call_closure (|
                  Inner,
                  M.get_trait_method (| "core::clone::Clone", Inner, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::serializing_hasher::SerializingHasher32",
                            "inner"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Inner : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Inner)
        (* Instance *) [ ("clone", InstanceField.Method (clone Inner)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher32_Inner.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher32_Inner.
    Definition Self (Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32") [] [ Inner ].
    
    (* Debug *)
    Definition fmt (Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Inner in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field1_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "SerializingHasher32" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::serializing_hasher::SerializingHasher32",
                            "inner"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Inner : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Inner)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt Inner)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher32_Inner.
  
  (* StructRecord
    {
      name := "SerializingHasher32To64";
      const_params := [];
      ty_params := [ "Inner" ];
      fields := [ ("inner", Inner) ];
    } *)
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher32To64_Inner.
    Definition Self (Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64") [] [ Inner ].
    
    Axiom Implements :
      forall (Inner : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Inner)
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher32To64_Inner.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher32To64_Inner.
    Definition Self (Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64") [] [ Inner ].
    
    (* Clone *)
    Definition clone (Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_symmetric::serializing_hasher::SerializingHasher32To64"
            [
              ("inner",
                M.call_closure (|
                  Inner,
                  M.get_trait_method (| "core::clone::Clone", Inner, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::serializing_hasher::SerializingHasher32To64",
                            "inner"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Inner : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Inner)
        (* Instance *) [ ("clone", InstanceField.Method (clone Inner)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher32To64_Inner.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher32To64_Inner.
    Definition Self (Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64") [] [ Inner ].
    
    (* Debug *)
    Definition fmt (Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Inner in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field1_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "SerializingHasher32To64" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::serializing_hasher::SerializingHasher32To64",
                            "inner"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Inner : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Inner)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt Inner)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher32To64_Inner.
  
  (* StructRecord
    {
      name := "SerializingHasher64";
      const_params := [];
      ty_params := [ "Inner" ];
      fields := [ ("inner", Inner) ];
    } *)
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher64_Inner.
    Definition Self (Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher64") [] [ Inner ].
    
    Axiom Implements :
      forall (Inner : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Inner)
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher64_Inner.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher64_Inner.
    Definition Self (Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher64") [] [ Inner ].
    
    (* Clone *)
    Definition clone (Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_symmetric::serializing_hasher::SerializingHasher64"
            [
              ("inner",
                M.call_closure (|
                  Inner,
                  M.get_trait_method (| "core::clone::Clone", Inner, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::serializing_hasher::SerializingHasher64",
                            "inner"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Inner : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Inner)
        (* Instance *) [ ("clone", InstanceField.Method (clone Inner)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher64_Inner.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher64_Inner.
    Definition Self (Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher64") [] [ Inner ].
    
    (* Debug *)
    Definition fmt (Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Inner in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field1_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "SerializingHasher64" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::serializing_hasher::SerializingHasher64",
                            "inner"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Inner : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Inner)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt Inner)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_Inner_for_p3_symmetric_serializing_hasher_SerializingHasher64_Inner.
  
  Module Impl_p3_symmetric_serializing_hasher_SerializingHasher32_Inner.
    Definition Self (Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32") [] [ Inner ].
    
    (*
        pub const fn new(inner: Inner) -> Self {
            Self { inner }
        }
    *)
    Definition new (Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Inner in
      match ε, τ, α with
      | [], [], [ inner ] =>
        ltac:(M.monadic
          (let inner := M.alloc (| inner |) in
          Value.StructRecord
            "p3_symmetric::serializing_hasher::SerializingHasher32"
            [ ("inner", M.read (| inner |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (Inner : Ty.t),
      M.IsAssociatedFunction.C (Self Inner) "new" (new Inner).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_p3_symmetric_serializing_hasher_SerializingHasher32_Inner.
  
  Module Impl_p3_symmetric_serializing_hasher_SerializingHasher32To64_Inner.
    Definition Self (Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64") [] [ Inner ].
    
    (*
        pub const fn new(inner: Inner) -> Self {
            Self { inner }
        }
    *)
    Definition new (Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Inner in
      match ε, τ, α with
      | [], [], [ inner ] =>
        ltac:(M.monadic
          (let inner := M.alloc (| inner |) in
          Value.StructRecord
            "p3_symmetric::serializing_hasher::SerializingHasher32To64"
            [ ("inner", M.read (| inner |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (Inner : Ty.t),
      M.IsAssociatedFunction.C (Self Inner) "new" (new Inner).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_p3_symmetric_serializing_hasher_SerializingHasher32To64_Inner.
  
  Module Impl_p3_symmetric_serializing_hasher_SerializingHasher64_Inner.
    Definition Self (Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher64") [] [ Inner ].
    
    (*
        pub const fn new(inner: Inner) -> Self {
            Self { inner }
        }
    *)
    Definition new (Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Inner in
      match ε, τ, α with
      | [], [], [ inner ] =>
        ltac:(M.monadic
          (let inner := M.alloc (| inner |) in
          Value.StructRecord
            "p3_symmetric::serializing_hasher::SerializingHasher64"
            [ ("inner", M.read (| inner |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (Inner : Ty.t),
      M.IsAssociatedFunction.C (Self Inner) "new" (new Inner).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_p3_symmetric_serializing_hasher_SerializingHasher64_Inner.
  
  Module Impl_p3_symmetric_hasher_CryptographicHasher_where_p3_field_field_PrimeField32_F_where_p3_symmetric_hasher_CryptographicHasher_Inner_u8_array_Usize_32_u8_F_array_Usize_32_u8_for_p3_symmetric_serializing_hasher_SerializingHasher32_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32") [] [ Inner ].
    
    (*
        fn hash_iter<I>(&self, input: I) -> [u8; 32]
        where
            I: IntoIterator<Item = F>,
        {
            self.inner.hash_iter(
                input
                    .into_iter()
                    .flat_map(|x| x.to_unique_u32().to_le_bytes()),
            )
        }
    *)
    Definition hash_iter
        (F Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F Inner in
      match ε, τ, α with
      | [], [ _ as I ], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ],
            M.get_trait_method (|
              "p3_symmetric::hasher::CryptographicHasher",
              Inner,
              [],
              [
                Ty.path "u8";
                Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
              ],
              "hash_iter",
              [],
              [
                Ty.apply
                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                  []
                  [
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter";
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [ Ty.path "u8" ];
                    Ty.function
                      [ Ty.tuple [ F ] ]
                      (Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [ Ty.path "u8" ])
                  ]
              ]
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_symmetric::serializing_hasher::SerializingHasher32",
                  "inner"
                |)
              |);
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                  []
                  [
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter";
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [ Ty.path "u8" ];
                    Ty.function
                      [ Ty.tuple [ F ] ]
                      (Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [ Ty.path "u8" ])
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.associated_in_trait
                    "core::iter::traits::collect::IntoIterator"
                    []
                    []
                    I
                    "IntoIter",
                  [],
                  [],
                  "flat_map",
                  [],
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [ Ty.path "u8" ];
                    Ty.function
                      [ Ty.tuple [ F ] ]
                      (Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [ Ty.path "u8" ])
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter",
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      I,
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| input |) ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [ Ty.tuple [ F ] ]
                                    (Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [ Ty.path "u8" ])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [ Ty.path "u8" ],
                                      M.get_associated_function (|
                                        Ty.path "u32",
                                        "to_le_bytes",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.path "u32",
                                          M.get_trait_method (|
                                            "p3_field::field::PrimeField32",
                                            F,
                                            [],
                                            [],
                                            "to_unique_u32",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, x |) ]
                                        |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F Inner : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::hasher::CryptographicHasher"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ F; Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ] ]
        (Self F Inner)
        (* Instance *) [ ("hash_iter", InstanceField.Method (hash_iter F Inner)) ].
  End Impl_p3_symmetric_hasher_CryptographicHasher_where_p3_field_field_PrimeField32_F_where_p3_symmetric_hasher_CryptographicHasher_Inner_u8_array_Usize_32_u8_F_array_Usize_32_u8_for_p3_symmetric_serializing_hasher_SerializingHasher32_Inner.
  
  Module Impl_p3_symmetric_hasher_CryptographicHasher_where_p3_field_packed_PackedValue_P_where_p3_field_field_PrimeField32_associated_in_trait_p3_field_packed_PackedValue___P_Value_where_p3_field_packed_PackedValue_PW_where_p3_symmetric_hasher_CryptographicHasher_Inner_PW_array_Usize_8_PW_P_array_Usize_8_PW_for_p3_symmetric_serializing_hasher_SerializingHasher32_Inner.
    Definition Self (P PW Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32") [] [ Inner ].
    
    (*
        fn hash_iter<I>(&self, input: I) -> [PW; 8]
        where
            I: IntoIterator<Item = P>,
        {
            self.inner.hash_iter(
                input
                    .into_iter()
                    .map(|x| PW::from_fn(|i| x.as_slice()[i].to_unique_u32())),
            )
        }
    *)
    Definition hash_iter
        (P PW Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self P PW Inner in
      match ε, τ, α with
      | [], [ _ as I ], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ PW ],
            M.get_trait_method (|
              "p3_symmetric::hasher::CryptographicHasher",
              Inner,
              [],
              [ PW; Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ PW ] ],
              "hash_iter",
              [],
              [
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter";
                    Ty.function [ Ty.tuple [ P ] ] PW
                  ]
              ]
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_symmetric::serializing_hasher::SerializingHasher32",
                  "inner"
                |)
              |);
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter";
                    Ty.function [ Ty.tuple [ P ] ] PW
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.associated_in_trait
                    "core::iter::traits::collect::IntoIterator"
                    []
                    []
                    I
                    "IntoIter",
                  [],
                  [],
                  "map",
                  [],
                  [ PW; Ty.function [ Ty.tuple [ P ] ] PW ]
                |),
                [
                  M.call_closure (|
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter",
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      I,
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| input |) ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.function [ Ty.tuple [ P ] ] PW ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    M.call_closure (|
                                      PW,
                                      M.get_trait_method (|
                                        "p3_field::packed::PackedValue",
                                        PW,
                                        [],
                                        [],
                                        "from_fn",
                                        [],
                                        [
                                          Ty.function
                                            [ Ty.tuple [ Ty.path "usize" ] ]
                                            (Ty.path "u32")
                                        ]
                                      |),
                                      [
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                                          (Ty.path "u32")
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let i := M.copy (| γ |) in
                                                          M.call_closure (|
                                                            Ty.path "u32",
                                                            M.get_trait_method (|
                                                              "p3_field::field::PrimeField32",
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                P
                                                                "Value",
                                                              [],
                                                              [],
                                                              "to_unique_u32",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.SubPointer.get_array_field (|
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_field::packed::PackedValue"
                                                                                []
                                                                                []
                                                                                P
                                                                                "Value"
                                                                            ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "p3_field::packed::PackedValue",
                                                                        P,
                                                                        [],
                                                                        [],
                                                                        "as_slice",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          x
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  M.read (| i |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (P PW Inner : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::hasher::CryptographicHasher"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ P; Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ PW ] ]
        (Self P PW Inner)
        (* Instance *) [ ("hash_iter", InstanceField.Method (hash_iter P PW Inner)) ].
  End Impl_p3_symmetric_hasher_CryptographicHasher_where_p3_field_packed_PackedValue_P_where_p3_field_field_PrimeField32_associated_in_trait_p3_field_packed_PackedValue___P_Value_where_p3_field_packed_PackedValue_PW_where_p3_symmetric_hasher_CryptographicHasher_Inner_PW_array_Usize_8_PW_P_array_Usize_8_PW_for_p3_symmetric_serializing_hasher_SerializingHasher32_Inner.
  
  Module Impl_p3_symmetric_hasher_CryptographicHasher_where_p3_field_packed_PackedValue_P_where_p3_field_field_PrimeField32_associated_in_trait_p3_field_packed_PackedValue___P_Value_where_p3_field_packed_PackedValue_PW_where_p3_symmetric_hasher_CryptographicHasher_Inner_PW_array_Usize_4_PW_P_array_Usize_4_PW_for_p3_symmetric_serializing_hasher_SerializingHasher32To64_Inner.
    Definition Self (P PW Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64") [] [ Inner ].
    
    (*
        fn hash_iter<I>(&self, input: I) -> [PW; 4]
        where
            I: IntoIterator<Item = P>,
        {
            assert_eq!(P::WIDTH, PW::WIDTH);
            let mut input = input.into_iter();
            self.inner.hash_iter(iter::from_fn(
                #[inline]
                || {
                    let a = input.next();
                    let b = input.next();
                    if let (Some(a), Some(b)) = (a, b) {
                        let ab = PW::from_fn(|i| {
                            let a_i = a.as_slice()[i].to_unique_u64();
                            let b_i = b.as_slice()[i].to_unique_u64();
                            a_i | (b_i << 32)
                        });
                        Some(ab)
                    } else {
                        a.map(|a| PW::from_fn(|i| a.as_slice()[i].to_unique_u64()))
                    }
                },
            ))
        }
    *)
    Definition hash_iter
        (P PW Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self P PW Inner in
      match ε, τ, α with
      | [], [ _ as I ], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        get_constant (| "p3_field::packed::PackedValue::WIDTH", Ty.path "usize" |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        get_constant (| "p3_field::packed::PackedValue::WIDTH", Ty.path "usize" |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "usize"; Ty.path "usize" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple "core::option::Option::None" []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            let~ input :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter"
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.associated_in_trait
                    "core::iter::traits::collect::IntoIterator"
                    []
                    []
                    I
                    "IntoIter",
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    I,
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [ M.read (| input |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ PW ],
                M.get_trait_method (|
                  "p3_symmetric::hasher::CryptographicHasher",
                  Inner,
                  [],
                  [ PW; Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ PW ] ],
                  "hash_iter",
                  [],
                  [
                    Ty.apply
                      (Ty.path "core::iter::sources::from_fn::FromFn")
                      []
                      [
                        Ty.function
                          [ Ty.tuple [] ]
                          (Ty.apply (Ty.path "core::option::Option") [] [ PW ])
                      ]
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_symmetric::serializing_hasher::SerializingHasher32To64",
                      "inner"
                    |)
                  |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::sources::from_fn::FromFn")
                      []
                      [
                        Ty.function
                          [ Ty.tuple [] ]
                          (Ty.apply (Ty.path "core::option::Option") [] [ PW ])
                      ],
                    M.get_function (|
                      "core::iter::sources::from_fn::from_fn",
                      [],
                      [
                        PW;
                        Ty.function
                          [ Ty.tuple [] ]
                          (Ty.apply (Ty.path "core::option::Option") [] [ PW ])
                      ]
                    |),
                    [
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply (Ty.path "core::option::Option") [] [ PW ])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.read (|
                                          let~ a :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.apply (Ty.path "core::option::Option") [] [ P ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply (Ty.path "core::option::Option") [] [ P ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.associated_in_trait
                                                    "core::iter::traits::collect::IntoIterator"
                                                    []
                                                    []
                                                    I
                                                    "IntoIter",
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.MutRef, input |) ]
                                              |)
                                            |) in
                                          let~ b :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.apply (Ty.path "core::option::Option") [] [ P ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply (Ty.path "core::option::Option") [] [ P ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.associated_in_trait
                                                    "core::iter::traits::collect::IntoIterator"
                                                    []
                                                    []
                                                    I
                                                    "IntoIter",
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.MutRef, input |) ]
                                              |)
                                            |) in
                                          M.match_operator (|
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.apply (Ty.path "core::option::Option") [] [ PW ]
                                              ],
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.alloc (|
                                                      Value.Tuple [ M.read (| a |); M.read (| b |) ]
                                                    |) in
                                                  let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let γ1_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ0_0,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let a := M.copy (| γ1_0 |) in
                                                  let γ1_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ0_1,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let b := M.copy (| γ1_0 |) in
                                                  let~ ab : Ty.apply (Ty.path "*") [] [ PW ] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        PW,
                                                        M.get_trait_method (|
                                                          "p3_field::packed::PackedValue",
                                                          PW,
                                                          [],
                                                          [],
                                                          "from_fn",
                                                          [],
                                                          [
                                                            Ty.function
                                                              [ Ty.tuple [ Ty.path "usize" ] ]
                                                              (Ty.path "u64")
                                                          ]
                                                        |),
                                                        [
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [ Ty.path "usize" ]
                                                                            ]
                                                                            (Ty.path "u64")
                                                                        ],
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let i :=
                                                                              M.copy (| γ |) in
                                                                            M.read (|
                                                                              let~ a_i :
                                                                                  Ty.apply
                                                                                    (Ty.path "*")
                                                                                    []
                                                                                    [ Ty.path "u64"
                                                                                    ] :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.path "u64",
                                                                                    M.get_trait_method (|
                                                                                      "p3_field::field::PrimeField64",
                                                                                      Ty.associated_in_trait
                                                                                        "p3_field::packed::PackedValue"
                                                                                        []
                                                                                        []
                                                                                        P
                                                                                        "Value",
                                                                                      [],
                                                                                      [],
                                                                                      "to_unique_u64",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.SubPointer.get_array_field (|
                                                                                          M.deref (|
                                                                                            M.call_closure (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "slice")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "p3_field::packed::PackedValue"
                                                                                                        []
                                                                                                        []
                                                                                                        P
                                                                                                        "Value"
                                                                                                    ]
                                                                                                ],
                                                                                              M.get_trait_method (|
                                                                                                "p3_field::packed::PackedValue",
                                                                                                P,
                                                                                                [],
                                                                                                [],
                                                                                                "as_slice",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  a
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |),
                                                                                          M.read (|
                                                                                            i
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              let~ b_i :
                                                                                  Ty.apply
                                                                                    (Ty.path "*")
                                                                                    []
                                                                                    [ Ty.path "u64"
                                                                                    ] :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.path "u64",
                                                                                    M.get_trait_method (|
                                                                                      "p3_field::field::PrimeField64",
                                                                                      Ty.associated_in_trait
                                                                                        "p3_field::packed::PackedValue"
                                                                                        []
                                                                                        []
                                                                                        P
                                                                                        "Value",
                                                                                      [],
                                                                                      [],
                                                                                      "to_unique_u64",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.SubPointer.get_array_field (|
                                                                                          M.deref (|
                                                                                            M.call_closure (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "slice")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "p3_field::packed::PackedValue"
                                                                                                        []
                                                                                                        []
                                                                                                        P
                                                                                                        "Value"
                                                                                                    ]
                                                                                                ],
                                                                                              M.get_trait_method (|
                                                                                                "p3_field::packed::PackedValue",
                                                                                                P,
                                                                                                [],
                                                                                                [],
                                                                                                "as_slice",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  b
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |),
                                                                                          M.read (|
                                                                                            i
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  Ty.path "u64",
                                                                                  BinOp.Wrap.bit_or,
                                                                                  [
                                                                                    M.read (|
                                                                                      a_i
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      Ty.path "u64",
                                                                                      BinOp.Wrap.shl,
                                                                                      [
                                                                                        M.read (|
                                                                                          b_i
                                                                                        |);
                                                                                        Value.Integer
                                                                                          IntegerKind.I32
                                                                                          32
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "core::option::Option::Some"
                                                      [ M.read (| ab |) ]
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.alloc (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ PW ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ P ],
                                                        "map",
                                                        [],
                                                        [ PW; Ty.function [ Ty.tuple [ P ] ] PW ]
                                                      |),
                                                      [
                                                        M.read (| a |);
                                                        M.closure
                                                          (fun γ =>
                                                            ltac:(M.monadic
                                                              match γ with
                                                              | [ α0 ] =>
                                                                ltac:(M.monadic
                                                                  (M.match_operator (|
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [
                                                                        Ty.function
                                                                          [ Ty.tuple [ P ] ]
                                                                          PW
                                                                      ],
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let a :=
                                                                            M.copy (| γ |) in
                                                                          M.call_closure (|
                                                                            PW,
                                                                            M.get_trait_method (|
                                                                              "p3_field::packed::PackedValue",
                                                                              PW,
                                                                              [],
                                                                              [],
                                                                              "from_fn",
                                                                              [],
                                                                              [
                                                                                Ty.function
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ]
                                                                                  ]
                                                                                  (Ty.path "u64")
                                                                              ]
                                                                            |),
                                                                            [
                                                                              M.closure
                                                                                (fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    match γ with
                                                                                    | [ α0 ] =>
                                                                                      ltac:(M.monadic
                                                                                        (M.match_operator (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "*")
                                                                                            []
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize"
                                                                                                    ]
                                                                                                ]
                                                                                                (Ty.path
                                                                                                  "u64")
                                                                                            ],
                                                                                          M.alloc (|
                                                                                            α0
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      i :=
                                                                                                  M.copy (|
                                                                                                    γ
                                                                                                  |) in
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "u64",
                                                                                                  M.get_trait_method (|
                                                                                                    "p3_field::field::PrimeField64",
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_field::packed::PackedValue"
                                                                                                      []
                                                                                                      []
                                                                                                      P
                                                                                                      "Value",
                                                                                                    [],
                                                                                                    [],
                                                                                                    "to_unique_u64",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.SubPointer.get_array_field (|
                                                                                                        M.deref (|
                                                                                                          M.call_closure (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "slice")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.associated_in_trait
                                                                                                                      "p3_field::packed::PackedValue"
                                                                                                                      []
                                                                                                                      []
                                                                                                                      P
                                                                                                                      "Value"
                                                                                                                  ]
                                                                                                              ],
                                                                                                            M.get_trait_method (|
                                                                                                              "p3_field::packed::PackedValue",
                                                                                                              P,
                                                                                                              [],
                                                                                                              [],
                                                                                                              "as_slice",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                a
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        |),
                                                                                                        M.read (|
                                                                                                          i
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)))
                                                                                          ]
                                                                                        |)))
                                                                                    | _ =>
                                                                                      M.impossible
                                                                                        "wrong number of arguments"
                                                                                    end))
                                                                            ]
                                                                          |)))
                                                                    ]
                                                                  |)))
                                                              | _ =>
                                                                M.impossible
                                                                  "wrong number of arguments"
                                                              end))
                                                      ]
                                                    |)
                                                  |)))
                                            ]
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (P PW Inner : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::hasher::CryptographicHasher"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ P; Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ PW ] ]
        (Self P PW Inner)
        (* Instance *) [ ("hash_iter", InstanceField.Method (hash_iter P PW Inner)) ].
  End Impl_p3_symmetric_hasher_CryptographicHasher_where_p3_field_packed_PackedValue_P_where_p3_field_field_PrimeField32_associated_in_trait_p3_field_packed_PackedValue___P_Value_where_p3_field_packed_PackedValue_PW_where_p3_symmetric_hasher_CryptographicHasher_Inner_PW_array_Usize_4_PW_P_array_Usize_4_PW_for_p3_symmetric_serializing_hasher_SerializingHasher32To64_Inner.
  
  Module Impl_p3_symmetric_hasher_CryptographicHasher_where_p3_field_field_PrimeField64_F_where_p3_symmetric_hasher_CryptographicHasher_Inner_u8_array_Usize_32_u8_F_array_Usize_32_u8_for_p3_symmetric_serializing_hasher_SerializingHasher64_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher64") [] [ Inner ].
    
    (*
        fn hash_iter<I>(&self, input: I) -> [u8; 32]
        where
            I: IntoIterator<Item = F>,
        {
            self.inner.hash_iter(
                input
                    .into_iter()
                    .flat_map(|x| x.to_unique_u64().to_le_bytes()),
            )
        }
    *)
    Definition hash_iter
        (F Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F Inner in
      match ε, τ, α with
      | [], [ _ as I ], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ],
            M.get_trait_method (|
              "p3_symmetric::hasher::CryptographicHasher",
              Inner,
              [],
              [
                Ty.path "u8";
                Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
              ],
              "hash_iter",
              [],
              [
                Ty.apply
                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                  []
                  [
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter";
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [ Ty.path "u8" ];
                    Ty.function
                      [ Ty.tuple [ F ] ]
                      (Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [ Ty.path "u8" ])
                  ]
              ]
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_symmetric::serializing_hasher::SerializingHasher64",
                  "inner"
                |)
              |);
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                  []
                  [
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter";
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [ Ty.path "u8" ];
                    Ty.function
                      [ Ty.tuple [ F ] ]
                      (Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [ Ty.path "u8" ])
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.associated_in_trait
                    "core::iter::traits::collect::IntoIterator"
                    []
                    []
                    I
                    "IntoIter",
                  [],
                  [],
                  "flat_map",
                  [],
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [ Ty.path "u8" ];
                    Ty.function
                      [ Ty.tuple [ F ] ]
                      (Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [ Ty.path "u8" ])
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter",
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      I,
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| input |) ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [ Ty.tuple [ F ] ]
                                    (Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 8 ]
                                      [ Ty.path "u8" ])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [ Ty.path "u8" ],
                                      M.get_associated_function (|
                                        Ty.path "u64",
                                        "to_le_bytes",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.path "u64",
                                          M.get_trait_method (|
                                            "p3_field::field::PrimeField64",
                                            F,
                                            [],
                                            [],
                                            "to_unique_u64",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, x |) ]
                                        |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F Inner : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::hasher::CryptographicHasher"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ F; Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ] ]
        (Self F Inner)
        (* Instance *) [ ("hash_iter", InstanceField.Method (hash_iter F Inner)) ].
  End Impl_p3_symmetric_hasher_CryptographicHasher_where_p3_field_field_PrimeField64_F_where_p3_symmetric_hasher_CryptographicHasher_Inner_u8_array_Usize_32_u8_F_array_Usize_32_u8_for_p3_symmetric_serializing_hasher_SerializingHasher64_Inner.
  
  Module Impl_p3_symmetric_hasher_CryptographicHasher_where_p3_field_packed_PackedValue_P_where_p3_field_field_PrimeField64_associated_in_trait_p3_field_packed_PackedValue___P_Value_where_p3_field_packed_PackedValue_PW_where_p3_symmetric_hasher_CryptographicHasher_Inner_PW_array_Usize_4_PW_P_array_Usize_4_PW_for_p3_symmetric_serializing_hasher_SerializingHasher64_Inner.
    Definition Self (P PW Inner : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher64") [] [ Inner ].
    
    (*
        fn hash_iter<I>(&self, input: I) -> [PW; 4]
        where
            I: IntoIterator<Item = P>,
        {
            self.inner.hash_iter(
                input
                    .into_iter()
                    .map(|x| PW::from_fn(|i| x.as_slice()[i].to_unique_u64())),
            )
        }
    *)
    Definition hash_iter
        (P PW Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self P PW Inner in
      match ε, τ, α with
      | [], [ _ as I ], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ PW ],
            M.get_trait_method (|
              "p3_symmetric::hasher::CryptographicHasher",
              Inner,
              [],
              [ PW; Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ PW ] ],
              "hash_iter",
              [],
              [
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter";
                    Ty.function [ Ty.tuple [ P ] ] PW
                  ]
              ]
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_symmetric::serializing_hasher::SerializingHasher64",
                  "inner"
                |)
              |);
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter";
                    Ty.function [ Ty.tuple [ P ] ] PW
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.associated_in_trait
                    "core::iter::traits::collect::IntoIterator"
                    []
                    []
                    I
                    "IntoIter",
                  [],
                  [],
                  "map",
                  [],
                  [ PW; Ty.function [ Ty.tuple [ P ] ] PW ]
                |),
                [
                  M.call_closure (|
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter",
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      I,
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| input |) ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.function [ Ty.tuple [ P ] ] PW ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    M.call_closure (|
                                      PW,
                                      M.get_trait_method (|
                                        "p3_field::packed::PackedValue",
                                        PW,
                                        [],
                                        [],
                                        "from_fn",
                                        [],
                                        [
                                          Ty.function
                                            [ Ty.tuple [ Ty.path "usize" ] ]
                                            (Ty.path "u64")
                                        ]
                                      |),
                                      [
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                                          (Ty.path "u64")
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let i := M.copy (| γ |) in
                                                          M.call_closure (|
                                                            Ty.path "u64",
                                                            M.get_trait_method (|
                                                              "p3_field::field::PrimeField64",
                                                              Ty.associated_in_trait
                                                                "p3_field::packed::PackedValue"
                                                                []
                                                                []
                                                                P
                                                                "Value",
                                                              [],
                                                              [],
                                                              "to_unique_u64",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.SubPointer.get_array_field (|
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_field::packed::PackedValue"
                                                                                []
                                                                                []
                                                                                P
                                                                                "Value"
                                                                            ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "p3_field::packed::PackedValue",
                                                                        P,
                                                                        [],
                                                                        [],
                                                                        "as_slice",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          x
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  M.read (| i |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (P PW Inner : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::hasher::CryptographicHasher"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ P; Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ PW ] ]
        (Self P PW Inner)
        (* Instance *) [ ("hash_iter", InstanceField.Method (hash_iter P PW Inner)) ].
  End Impl_p3_symmetric_hasher_CryptographicHasher_where_p3_field_packed_PackedValue_P_where_p3_field_field_PrimeField64_associated_in_trait_p3_field_packed_PackedValue___P_Value_where_p3_field_packed_PackedValue_PW_where_p3_symmetric_hasher_CryptographicHasher_Inner_PW_array_Usize_4_PW_P_array_Usize_4_PW_for_p3_symmetric_serializing_hasher_SerializingHasher64_Inner.
End serializing_hasher.
