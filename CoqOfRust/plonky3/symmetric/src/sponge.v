(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module sponge.
  (* StructRecord
    {
      name := "PaddingFreeSponge";
      const_params := [ "WIDTH"; "RATE"; "OUT" ];
      ty_params := [ "P" ];
      fields := [ ("permutation", P) ];
    } *)
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_P_for_p3_symmetric_sponge_PaddingFreeSponge_WIDTH_RATE_OUT_P.
    Definition Self (WIDTH RATE OUT : Value.t) (P : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::sponge::PaddingFreeSponge") [ WIDTH; RATE; OUT ] [ P ].
    
    Axiom Implements :
      forall (WIDTH RATE OUT : Value.t) (P : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH RATE OUT P)
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_P_for_p3_symmetric_sponge_PaddingFreeSponge_WIDTH_RATE_OUT_P.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_P_for_p3_symmetric_sponge_PaddingFreeSponge_WIDTH_RATE_OUT_P.
    Definition Self (WIDTH RATE OUT : Value.t) (P : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::sponge::PaddingFreeSponge") [ WIDTH; RATE; OUT ] [ P ].
    
    (* Clone *)
    Definition clone
        (WIDTH RATE OUT : Value.t)
        (P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE OUT P in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_symmetric::sponge::PaddingFreeSponge"
            [
              ("permutation",
                M.call_closure (|
                  P,
                  M.get_trait_method (| "core::clone::Clone", P, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::sponge::PaddingFreeSponge",
                            "permutation"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH RATE OUT : Value.t) (P : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH RATE OUT P)
        (* Instance *) [ ("clone", InstanceField.Method (clone WIDTH RATE OUT P)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_P_for_p3_symmetric_sponge_PaddingFreeSponge_WIDTH_RATE_OUT_P.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_P_for_p3_symmetric_sponge_PaddingFreeSponge_WIDTH_RATE_OUT_P.
    Definition Self (WIDTH RATE OUT : Value.t) (P : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::sponge::PaddingFreeSponge") [ WIDTH; RATE; OUT ] [ P ].
    
    (* Debug *)
    Definition fmt
        (WIDTH RATE OUT : Value.t)
        (P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE OUT P in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field1_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "PaddingFreeSponge" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "permutation" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::sponge::PaddingFreeSponge",
                            "permutation"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH RATE OUT : Value.t) (P : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH RATE OUT P)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt WIDTH RATE OUT P)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_P_for_p3_symmetric_sponge_PaddingFreeSponge_WIDTH_RATE_OUT_P.
  
  Module Impl_p3_symmetric_sponge_PaddingFreeSponge_WIDTH_RATE_OUT_P.
    Definition Self (WIDTH RATE OUT : Value.t) (P : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::sponge::PaddingFreeSponge") [ WIDTH; RATE; OUT ] [ P ].
    
    (*
        pub const fn new(permutation: P) -> Self {
            Self { permutation }
        }
    *)
    Definition new
        (WIDTH RATE OUT : Value.t)
        (P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE OUT P in
      match ε, τ, α with
      | [], [], [ permutation ] =>
        ltac:(M.monadic
          (let permutation := M.alloc (| permutation |) in
          Value.StructRecord
            "p3_symmetric::sponge::PaddingFreeSponge"
            [ ("permutation", M.read (| permutation |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (WIDTH RATE OUT : Value.t) (P : Ty.t),
      M.IsAssociatedFunction.C (Self WIDTH RATE OUT P) "new" (new WIDTH RATE OUT P).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_p3_symmetric_sponge_PaddingFreeSponge_WIDTH_RATE_OUT_P.
  
  Module Impl_p3_symmetric_hasher_CryptographicHasher_where_core_default_Default_T_where_core_marker_Copy_T_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_T_T_array_OUT_T_for_p3_symmetric_sponge_PaddingFreeSponge_WIDTH_RATE_OUT_P.
    Definition Self (WIDTH RATE OUT : Value.t) (T P : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_symmetric::sponge::PaddingFreeSponge") [ WIDTH; RATE; OUT ] [ P ].
    
    (*
        fn hash_iter<I>(&self, input: I) -> [T; OUT]
        where
            I: IntoIterator<Item = T>,
        {
            // static_assert(RATE < WIDTH)
            let mut state = [T::default(); WIDTH];
            let mut input = input.into_iter();
    
            // Itertools' chunks() is more convenient, but seems to add more overhead,
            // hence the more manual loop.
            'outer: loop {
                for i in 0..RATE {
                    if let Some(x) = input.next() {
                        state[i] = x;
                    } else {
                        if i != 0 {
                            self.permutation.permute_mut(&mut state);
                        }
                        break 'outer;
                    }
                }
                self.permutation.permute_mut(&mut state);
            }
    
            state[..OUT].try_into().unwrap()
        }
    *)
    Definition hash_iter
        (WIDTH RATE OUT : Value.t)
        (T P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE OUT T P in
      match ε, τ, α with
      | [], [ _ as I ], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ state : Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ] ] :=
              M.alloc (|
                repeat (|
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::default::Default", T, [], [], "default", [], [] |),
                    []
                  |),
                  WIDTH
                |)
              |) in
            let~ input :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter"
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.associated_in_trait
                    "core::iter::traits::collect::IntoIterator"
                    []
                    []
                    I
                    "IntoIter",
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    I,
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [ M.read (| input |) ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.loop (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                ltac:(M.monadic
                  (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.use
                      (M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              Value.StructRecord
                                "core::ops::range::Range"
                                [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", RATE) ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                ltac:(M.monadic
                                  (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| γ0_0 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ T ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.associated_in_trait
                                                              "core::iter::traits::collect::IntoIterator"
                                                              []
                                                              []
                                                              I
                                                              "IntoIter",
                                                            [],
                                                            [],
                                                            "next",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              input
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::option::Option::Some",
                                                        0
                                                      |) in
                                                    let x := M.copy (| γ0_0 |) in
                                                    let~ _ :
                                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                      M.alloc (|
                                                        M.write (|
                                                          M.SubPointer.get_array_field (|
                                                            state,
                                                            M.read (| i |)
                                                          |),
                                                          M.read (| x |)
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ _ :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.tuple [] ] :=
                                                            M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.tuple [] ],
                                                              M.alloc (| Value.Tuple [] |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ :=
                                                                      M.use
                                                                        (M.alloc (|
                                                                          M.call_closure (|
                                                                            Ty.path "bool",
                                                                            BinOp.ne,
                                                                            [
                                                                              M.read (| i |);
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0
                                                                            ]
                                                                          |)
                                                                        |)) in
                                                                    let _ :=
                                                                      is_constant_or_break_match (|
                                                                        M.read (| γ |),
                                                                        Value.Bool true
                                                                      |) in
                                                                    let~ _ :
                                                                        Ty.apply
                                                                          (Ty.path "*")
                                                                          []
                                                                          [ Ty.tuple [] ] :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.tuple [],
                                                                          M.get_trait_method (|
                                                                            "p3_symmetric::permutation::Permutation",
                                                                            P,
                                                                            [],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "array")
                                                                                [ WIDTH ]
                                                                                [ T ]
                                                                            ],
                                                                            "permute_mut",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.deref (|
                                                                                  M.read (| self |)
                                                                                |),
                                                                                "p3_symmetric::sponge::PaddingFreeSponge",
                                                                                "permutation"
                                                                              |)
                                                                            |);
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  state
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.break (||)
                                                        |)
                                                      |)
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "p3_symmetric::permutation::Permutation",
                          P,
                          [],
                          [ Ty.apply (Ty.path "array") [ WIDTH ] [ T ] ],
                          "permute_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_symmetric::sponge::PaddingFreeSponge",
                              "permutation"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (| M.borrow (| Pointer.Kind.MutRef, state |) |)
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)))
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "array") [ OUT ] [ T ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply (Ty.path "array") [ OUT ] [ T ];
                      Ty.path "core::array::TryFromSliceError"
                    ],
                  "unwrap",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply (Ty.path "array") [ OUT ] [ T ];
                        Ty.path "core::array::TryFromSliceError"
                      ],
                    M.get_trait_method (|
                      "core::convert::TryInto",
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                      [],
                      [ Ty.apply (Ty.path "array") [ OUT ] [ T ] ],
                      "try_into",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            M.get_trait_method (|
                              "core::ops::index::Index",
                              Ty.apply (Ty.path "array") [ WIDTH ] [ T ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeTo")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                              "index",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, state |);
                              Value.StructRecord "core::ops::range::RangeTo" [ ("end_", OUT) ]
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH RATE OUT : Value.t) (T P : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::hasher::CryptographicHasher"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T; Ty.apply (Ty.path "array") [ OUT ] [ T ] ]
        (Self WIDTH RATE OUT T P)
        (* Instance *) [ ("hash_iter", InstanceField.Method (hash_iter WIDTH RATE OUT T P)) ].
  End Impl_p3_symmetric_hasher_CryptographicHasher_where_core_default_Default_T_where_core_marker_Copy_T_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_T_T_array_OUT_T_for_p3_symmetric_sponge_PaddingFreeSponge_WIDTH_RATE_OUT_P.
  
  (* StructRecord
    {
      name := "MultiField32PaddingFreeSponge";
      const_params := [ "WIDTH"; "RATE"; "OUT" ];
      ty_params := [ "F"; "PF"; "P" ];
      fields :=
        [
          ("permutation", P);
          ("num_f_elms", Ty.path "usize");
          ("_phantom", Ty.apply (Ty.path "core::marker::PhantomData") [] [ Ty.tuple [ F; PF ] ])
        ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_PF_where_core_clone_Clone_P_for_p3_symmetric_sponge_MultiField32PaddingFreeSponge_WIDTH_RATE_OUT_F_PF_P.
    Definition Self (WIDTH RATE OUT : Value.t) (F PF P : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_symmetric::sponge::MultiField32PaddingFreeSponge")
        [ WIDTH; RATE; OUT ]
        [ F; PF; P ].
    
    (* Clone *)
    Definition clone
        (WIDTH RATE OUT : Value.t)
        (F PF P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE OUT F PF P in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_symmetric::sponge::MultiField32PaddingFreeSponge"
            [
              ("permutation",
                M.call_closure (|
                  P,
                  M.get_trait_method (| "core::clone::Clone", P, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::sponge::MultiField32PaddingFreeSponge",
                            "permutation"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("num_f_elms",
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "usize",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::sponge::MultiField32PaddingFreeSponge",
                            "num_f_elms"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("_phantom",
                M.call_closure (|
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ Ty.tuple [ F; PF ] ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "core::marker::PhantomData") [] [ Ty.tuple [ F; PF ] ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::sponge::MultiField32PaddingFreeSponge",
                            "_phantom"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH RATE OUT : Value.t) (F PF P : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH RATE OUT F PF P)
        (* Instance *) [ ("clone", InstanceField.Method (clone WIDTH RATE OUT F PF P)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_PF_where_core_clone_Clone_P_for_p3_symmetric_sponge_MultiField32PaddingFreeSponge_WIDTH_RATE_OUT_F_PF_P.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_PF_where_core_fmt_Debug_P_for_p3_symmetric_sponge_MultiField32PaddingFreeSponge_WIDTH_RATE_OUT_F_PF_P.
    Definition Self (WIDTH RATE OUT : Value.t) (F PF P : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_symmetric::sponge::MultiField32PaddingFreeSponge")
        [ WIDTH; RATE; OUT ]
        [ F; PF; P ].
    
    (* Debug *)
    Definition fmt
        (WIDTH RATE OUT : Value.t)
        (F PF P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE OUT F PF P in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| mk_str (| "MultiField32PaddingFreeSponge" |) |)
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "permutation" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_symmetric::sponge::MultiField32PaddingFreeSponge",
                        "permutation"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "num_f_elms" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_symmetric::sponge::MultiField32PaddingFreeSponge",
                        "num_f_elms"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_phantom" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_symmetric::sponge::MultiField32PaddingFreeSponge",
                            "_phantom"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH RATE OUT : Value.t) (F PF P : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH RATE OUT F PF P)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt WIDTH RATE OUT F PF P)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_PF_where_core_fmt_Debug_P_for_p3_symmetric_sponge_MultiField32PaddingFreeSponge_WIDTH_RATE_OUT_F_PF_P.
  
  Module Impl_p3_symmetric_sponge_MultiField32PaddingFreeSponge_WIDTH_RATE_OUT_F_PF_P.
    Definition Self (WIDTH RATE OUT : Value.t) (F PF P : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_symmetric::sponge::MultiField32PaddingFreeSponge")
        [ WIDTH; RATE; OUT ]
        [ F; PF; P ].
    
    (*
        pub fn new(permutation: P) -> Result<Self, String> {
            if F::order() >= PF::order() {
                return Err(String::from("F::order() must be less than PF::order()"));
            }
    
            let num_f_elms = PF::bits() / F::bits();
            Ok(Self {
                permutation,
                num_f_elms,
                _phantom: PhantomData,
            })
        }
    *)
    Definition new
        (WIDTH RATE OUT : Value.t)
        (F PF P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE OUT F PF P in
      match ε, τ, α with
      | [], [], [ permutation ] =>
        ltac:(M.monadic
          (let permutation := M.alloc (| permutation |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "p3_symmetric::sponge::MultiField32PaddingFreeSponge")
                  [ WIDTH; RATE; OUT ]
                  [ F; PF; P ];
                Ty.path "alloc::string::String"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.path "num_bigint::biguint::BigUint",
                                    [],
                                    [ Ty.path "num_bigint::biguint::BigUint" ],
                                    "ge",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "num_bigint::biguint::BigUint",
                                          M.get_trait_method (|
                                            "p3_field::field::Field",
                                            F,
                                            [],
                                            [],
                                            "order",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "num_bigint::biguint::BigUint",
                                          M.get_trait_method (|
                                            "p3_field::field::Field",
                                            PF,
                                            [],
                                            [],
                                            "order",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        Ty.path "alloc::string::String",
                                        M.get_trait_method (|
                                          "core::convert::From",
                                          Ty.path "alloc::string::String",
                                          [],
                                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                          "from",
                                          [],
                                          []
                                        |),
                                        [ mk_str (| "F::order() must be less than PF::order()" |) ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ num_f_elms : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.div,
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_trait_method (|
                            "p3_field::field::Field",
                            PF,
                            [],
                            [],
                            "bits",
                            [],
                            []
                          |),
                          []
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_trait_method (|
                            "p3_field::field::Field",
                            F,
                            [],
                            [],
                            "bits",
                            [],
                            []
                          |),
                          []
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      Value.StructRecord
                        "p3_symmetric::sponge::MultiField32PaddingFreeSponge"
                        [
                          ("permutation", M.read (| permutation |));
                          ("num_f_elms", M.read (| num_f_elms |));
                          ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (WIDTH RATE OUT : Value.t) (F PF P : Ty.t),
      M.IsAssociatedFunction.C (Self WIDTH RATE OUT F PF P) "new" (new WIDTH RATE OUT F PF P).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_p3_symmetric_sponge_MultiField32PaddingFreeSponge_WIDTH_RATE_OUT_F_PF_P.
  
  Module Impl_p3_symmetric_hasher_CryptographicHasher_where_p3_field_field_PrimeField32_F_where_p3_field_field_PrimeField_PF_where_core_default_Default_PF_where_core_marker_Copy_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_F_array_OUT_PF_for_p3_symmetric_sponge_MultiField32PaddingFreeSponge_WIDTH_RATE_OUT_F_PF_P.
    Definition Self (WIDTH RATE OUT : Value.t) (F PF P : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_symmetric::sponge::MultiField32PaddingFreeSponge")
        [ WIDTH; RATE; OUT ]
        [ F; PF; P ].
    
    (*
        fn hash_iter<I>(&self, input: I) -> [PF; OUT]
        where
            I: IntoIterator<Item = F>,
        {
            let mut state = [PF::default(); WIDTH];
            for block_chunk in &input.into_iter().chunks(RATE) {
                for (chunk_id, chunk) in (&block_chunk.chunks(self.num_f_elms))
                    .into_iter()
                    .enumerate()
                {
                    state[chunk_id] = reduce_32(&chunk.collect_vec());
                }
                state = self.permutation.permute(state);
            }
    
            state[..OUT].try_into().unwrap()
        }
    *)
    Definition hash_iter
        (WIDTH RATE OUT : Value.t)
        (F PF P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE OUT F PF P in
      match ε, τ, α with
      | [], [ _ as I ], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.read (|
            let~ state :
                Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "array") [ WIDTH ] [ PF ] ] :=
              M.alloc (|
                repeat (|
                  M.call_closure (|
                    PF,
                    M.get_trait_method (|
                      "core::default::Default",
                      PF,
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |),
                  WIDTH
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "itertools::groupbylazy::Chunks")
                        []
                        [
                          Ty.associated_in_trait
                            "core::iter::traits::collect::IntoIterator"
                            []
                            []
                            I
                            "IntoIter"
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "itertools::groupbylazy::IntoChunks")
                              []
                              [
                                Ty.associated_in_trait
                                  "core::iter::traits::collect::IntoIterator"
                                  []
                                  []
                                  I
                                  "IntoIter"
                              ]
                          ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "itertools::groupbylazy::IntoChunks")
                                []
                                [
                                  Ty.associated_in_trait
                                    "core::iter::traits::collect::IntoIterator"
                                    []
                                    []
                                    I
                                    "IntoIter"
                                ],
                              M.get_trait_method (|
                                "itertools::Itertools",
                                Ty.associated_in_trait
                                  "core::iter::traits::collect::IntoIterator"
                                  []
                                  []
                                  I
                                  "IntoIter",
                                [],
                                [],
                                "chunks",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait
                                    "core::iter::traits::collect::IntoIterator"
                                    []
                                    []
                                    I
                                    "IntoIter",
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    I,
                                    [],
                                    [],
                                    "into_iter",
                                    [],
                                    []
                                  |),
                                  [ M.read (| input |) ]
                                |);
                                RATE
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "itertools::groupbylazy::Chunk")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "core::iter::traits::collect::IntoIterator"
                                              []
                                              []
                                              I
                                              "IntoIter"
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "itertools::groupbylazy::Chunks")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "core::iter::traits::collect::IntoIterator"
                                            []
                                            []
                                            I
                                            "IntoIter"
                                        ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let block_chunk := M.copy (| γ0_0 |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.use
                                          (M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "itertools::groupbylazy::Chunks")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "itertools::groupbylazy::Chunk")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "core::iter::traits::collect::IntoIterator"
                                                              []
                                                              []
                                                              I
                                                              "IntoIter"
                                                          ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::enumerate::Enumerate")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "itertools::groupbylazy::Chunks")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "itertools::groupbylazy::Chunk")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "core::iter::traits::collect::IntoIterator"
                                                                []
                                                                []
                                                                I
                                                                "IntoIter"
                                                            ]
                                                        ]
                                                    ],
                                                  [],
                                                  [],
                                                  "into_iter",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "itertools::groupbylazy::Chunks")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "itertools::groupbylazy::Chunk")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "core::iter::traits::collect::IntoIterator"
                                                                  []
                                                                  []
                                                                  I
                                                                  "IntoIter"
                                                              ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "itertools::groupbylazy::Chunks")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "itertools::groupbylazy::Chunk")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "core::iter::traits::collect::IntoIterator"
                                                                []
                                                                []
                                                                I
                                                                "IntoIter"
                                                            ]
                                                        ],
                                                      [],
                                                      [],
                                                      "enumerate",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "itertools::groupbylazy::Chunks")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "itertools::groupbylazy::Chunk")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "core::iter::traits::collect::IntoIterator"
                                                                  []
                                                                  []
                                                                  I
                                                                  "IntoIter"
                                                              ]
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "itertools::groupbylazy::IntoChunks")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "itertools::groupbylazy::Chunk")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "core::iter::traits::collect::IntoIterator"
                                                                        []
                                                                        []
                                                                        I
                                                                        "IntoIter"
                                                                    ]
                                                                ]
                                                            ],
                                                          [],
                                                          [],
                                                          "into_iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "itertools::groupbylazy::IntoChunks")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "itertools::groupbylazy::Chunk")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "core::iter::traits::collect::IntoIterator"
                                                                              []
                                                                              []
                                                                              I
                                                                              "IntoIter"
                                                                          ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "itertools::Itertools",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "itertools::groupbylazy::Chunk")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "core::iter::traits::collect::IntoIterator"
                                                                            []
                                                                            []
                                                                            I
                                                                            "IntoIter"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "chunks",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| block_chunk |);
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| self |)
                                                                          |),
                                                                          "p3_symmetric::sponge::MultiField32PaddingFreeSponge",
                                                                          "num_f_elms"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter := M.copy (| γ |) in
                                                  M.loop (|
                                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                    ltac:(M.monadic
                                                      (let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.match_operator (|
                                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "itertools::groupbylazy::Chunk")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "itertools::groupbylazy::Chunk")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "core::iter::traits::collect::IntoIterator"
                                                                                []
                                                                                []
                                                                                I
                                                                                "IntoIter"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::enumerate::Enumerate")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "itertools::groupbylazy::Chunks")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "itertools::groupbylazy::Chunk")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "core::iter::traits::collect::IntoIterator"
                                                                              []
                                                                              []
                                                                              I
                                                                              "IntoIter"
                                                                          ]
                                                                      ]
                                                                  ],
                                                                [],
                                                                [],
                                                                "next",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      iter
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let _ :=
                                                                  M.is_struct_tuple (|
                                                                    γ,
                                                                    "core::option::Option::None"
                                                                  |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (| M.break (||) |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::option::Option::Some",
                                                                    0
                                                                  |) in
                                                                let γ1_0 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ0_0,
                                                                    0
                                                                  |) in
                                                                let γ1_1 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ0_0,
                                                                    1
                                                                  |) in
                                                                let chunk_id := M.copy (| γ1_0 |) in
                                                                let chunk := M.copy (| γ1_1 |) in
                                                                let~ _ :
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [ Ty.tuple [] ] :=
                                                                  M.alloc (|
                                                                    M.write (|
                                                                      M.SubPointer.get_array_field (|
                                                                        state,
                                                                        M.read (| chunk_id |)
                                                                      |),
                                                                      M.call_closure (|
                                                                        PF,
                                                                        M.get_function (|
                                                                          "p3_field::helpers::reduce_32",
                                                                          [],
                                                                          [ F; PF ]
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      []
                                                                                      [ F ]
                                                                                  ],
                                                                                M.get_trait_method (|
                                                                                  "core::ops::deref::Deref",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      F;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [],
                                                                                  [],
                                                                                  "deref",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                F;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            M.get_trait_method (|
                                                                                              "itertools::Itertools",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "itertools::groupbylazy::Chunk")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "itertools::groupbylazy::Chunk")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "core::iter::traits::collect::IntoIterator"
                                                                                                        []
                                                                                                        []
                                                                                                        I
                                                                                                        "IntoIter"
                                                                                                    ]
                                                                                                ],
                                                                                              [],
                                                                                              [],
                                                                                              "collect_vec",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                chunk
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                  |)))
                                            ]
                                          |)) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.write (|
                                            state,
                                            M.call_closure (|
                                              Ty.apply (Ty.path "array") [ WIDTH ] [ PF ],
                                              M.get_trait_method (|
                                                "p3_symmetric::permutation::Permutation",
                                                P,
                                                [],
                                                [ Ty.apply (Ty.path "array") [ WIDTH ] [ PF ] ],
                                                "permute",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "p3_symmetric::sponge::MultiField32PaddingFreeSponge",
                                                    "permutation"
                                                  |)
                                                |);
                                                M.read (| state |)
                                              ]
                                            |)
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "array") [ OUT ] [ PF ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply (Ty.path "array") [ OUT ] [ PF ];
                      Ty.path "core::array::TryFromSliceError"
                    ],
                  "unwrap",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply (Ty.path "array") [ OUT ] [ PF ];
                        Ty.path "core::array::TryFromSliceError"
                      ],
                    M.get_trait_method (|
                      "core::convert::TryInto",
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ PF ] ],
                      [],
                      [ Ty.apply (Ty.path "array") [ OUT ] [ PF ] ],
                      "try_into",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ PF ] ],
                            M.get_trait_method (|
                              "core::ops::index::Index",
                              Ty.apply (Ty.path "array") [ WIDTH ] [ PF ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeTo")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                              "index",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, state |);
                              Value.StructRecord "core::ops::range::RangeTo" [ ("end_", OUT) ]
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH RATE OUT : Value.t) (F PF P : Ty.t),
      M.IsTraitInstance
        "p3_symmetric::hasher::CryptographicHasher"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F; Ty.apply (Ty.path "array") [ OUT ] [ PF ] ]
        (Self WIDTH RATE OUT F PF P)
        (* Instance *) [ ("hash_iter", InstanceField.Method (hash_iter WIDTH RATE OUT F PF P)) ].
  End Impl_p3_symmetric_hasher_CryptographicHasher_where_p3_field_field_PrimeField32_F_where_p3_field_field_PrimeField_PF_where_core_default_Default_PF_where_core_marker_Copy_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_F_array_OUT_PF_for_p3_symmetric_sponge_MultiField32PaddingFreeSponge_WIDTH_RATE_OUT_F_PF_P.
End sponge.
