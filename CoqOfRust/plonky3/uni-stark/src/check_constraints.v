(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module check_constraints.
  (* #[instrument(name = "check constraints", skip_all)] *)
  Definition check_constraints (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; A ], [ air; main; public_values ] =>
      ltac:(M.monadic
        (let air := M.alloc (| air |) in
        let main := M.alloc (| main |) in
        let public_values := M.alloc (| public_values |) in
        M.catch_return (Ty.tuple []) (|
          ltac:(M.monadic
            (M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] := M.alloc (| Value.Tuple [] |) in
              let __tracing_attr_span := M.copy (| Value.DeclaredButUndefined |) in
              let __tracing_attr_guard := M.copy (| Value.DeclaredButUndefined |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.path "tracing_core::metadata::Level",
                                      [],
                                      [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                      "le",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_associated_constant (|
                                          Ty.path "tracing_core::metadata::Level",
                                          "INFO",
                                          Ty.path "tracing_core::metadata::Level"
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "tracing::level_filters::STATIC_MAX_LEVEL",
                                          Ty.path "tracing_core::metadata::LevelFilter"
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "INFO",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing_core::metadata::LevelFilter",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                "current",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic (Value.Bool false))
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_span,
                              M.read (|
                                let~ interest :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [ Ty.path "tracing_core::subscriber::Interest" ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "never",
                                        [],
                                        []
                                      |),
                                      []
                                    |)
                                  |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.path "tracing::span::Span" ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              LogicalOp.and (|
                                                LogicalOp.and (|
                                                  LogicalOp.and (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialOrd",
                                                        Ty.path "tracing_core::metadata::Level",
                                                        [],
                                                        [
                                                          Ty.path
                                                            "tracing_core::metadata::LevelFilter"
                                                        ],
                                                        "le",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_associated_constant (|
                                                            Ty.path "tracing_core::metadata::Level",
                                                            "INFO",
                                                            Ty.path "tracing_core::metadata::Level"
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_constant (|
                                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          |)
                                                        |)
                                                      ]
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "tracing_core::metadata::Level",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          ],
                                                          "le",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_associated_constant (|
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              "INFO",
                                                              Ty.path
                                                                "tracing_core::metadata::Level"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  "current",
                                                                  [],
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.alloc (|
                                                          M.write (|
                                                            interest,
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                "interest",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "p3_uni_stark::check_constraints::check_constraints::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |) in
                                                      M.alloc (|
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              "is_never",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                interest
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)))
                                                |),
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_function (|
                                                      "tracing::__macro_support::__is_enabled",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "p3_uni_stark::check_constraints::check_constraints::__CALLSITE",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (| interest |)
                                                    ]
                                                  |)))
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ meta :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ]
                                              ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "tracing_core::metadata::Metadata" ],
                                              M.get_trait_method (|
                                                "tracing_core::callsite::Callsite",
                                                Ty.path "tracing_core::callsite::DefaultCallsite",
                                                [],
                                                [],
                                                "metadata",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.read (|
                                                      get_constant (|
                                                        "p3_uni_stark::check_constraints::check_constraints::__CALLSITE",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite"
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "tracing::span::Span",
                                            M.get_associated_function (|
                                              Ty.path "tracing::span::Span",
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| meta |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "tracing_core::field::ValueSet",
                                                        M.get_associated_function (|
                                                          Ty.path "tracing_core::field::FieldSet",
                                                          "value_set",
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 0 ]
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::Field"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("tracing_core::field::Value::Trait",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::FieldSet"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata",
                                                                  "fields",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| meta |) |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (| Value.Array [] |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let~ span :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "tracing::span::Span" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing::span::Span",
                                              M.get_function (|
                                                "tracing::__macro_support::__disabled_span",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::metadata::Metadata"
                                                        ],
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        [],
                                                        "metadata",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (|
                                                              get_constant (|
                                                                "p3_uni_stark::check_constraints::check_constraints::__CALLSITE",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::callsite::DefaultCallsite"
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (| Value.Tuple [] |) in
                                        span))
                                  ]
                                |)
                              |)
                            |)
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_guard,
                              M.call_closure (|
                                Ty.path "tracing::span::Entered",
                                M.get_associated_function (|
                                  Ty.path "tracing::span::Span",
                                  "enter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool false |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              let~ __tracing_attr_fake_return :
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.loop (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                        ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      |)
                                    |)
                                  |)
                                |) in
                              M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ height : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "p3_matrix::Matrix",
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ],
                      [],
                      [ F ],
                      "height",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| main |) |) |) ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "for_each",
                      [],
                      [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.tuple []) ]
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_", M.read (| height |))
                        ];
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.tuple []) ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let i := M.copy (| γ |) in
                                        M.read (|
                                          let~ i_next :
                                              Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.rem,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.read (| i |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |);
                                                  M.read (| height |)
                                                ]
                                              |)
                                            |) in
                                          let~ local :
                                              Ty.apply (Ty.path "*") [] [ Ty.associated_unknown ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.associated_unknown,
                                                M.get_trait_method (|
                                                  "p3_matrix::Matrix",
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  [],
                                                  [ F ],
                                                  "row_slice",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| main |) |)
                                                  |);
                                                  M.read (| i |)
                                                ]
                                              |)
                                            |) in
                                          let~ next :
                                              Ty.apply (Ty.path "*") [] [ Ty.associated_unknown ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.associated_unknown,
                                                M.get_trait_method (|
                                                  "p3_matrix::Matrix",
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  [],
                                                  [ F ],
                                                  "row_slice",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| main |) |)
                                                  |);
                                                  M.read (| i_next |)
                                                ]
                                              |)
                                            |) in
                                          let~ main :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::stack::VerticalPair")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                                        []
                                                        [
                                                          F;
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                                        []
                                                        [
                                                          F;
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                        ]
                                                    ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "p3_matrix::stack::VerticalPair")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        F;
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        F;
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                      ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::stack::VerticalPair")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                                        []
                                                        [
                                                          F;
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                                        []
                                                        [
                                                          F;
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                        ]
                                                    ],
                                                  "new",
                                                  [],
                                                  [ F ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        F;
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                                        []
                                                        [
                                                          F;
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                        ],
                                                      "new_row",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ F ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.associated_unknown,
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    local
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |);
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        F;
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                                        []
                                                        [
                                                          F;
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                        ],
                                                      "new_row",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ F ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.associated_unknown,
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    next
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let~ builder :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_uni_stark::check_constraints::DebugConstraintBuilder")
                                                    []
                                                    [ F ]
                                                ] :=
                                            M.alloc (|
                                              Value.StructRecord
                                                "p3_uni_stark::check_constraints::DebugConstraintBuilder"
                                                [
                                                  ("row_index", M.read (| i |));
                                                  ("main", M.read (| main |));
                                                  ("public_values",
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [ F; Ty.path "alloc::alloc::Global" ],
                                                            [],
                                                            [],
                                                            "deref",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.read (| public_values |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |));
                                                  ("is_first_row",
                                                    M.call_closure (|
                                                      F,
                                                      M.get_trait_method (|
                                                        "p3_field::field::PrimeCharacteristicRing",
                                                        F,
                                                        [],
                                                        [],
                                                        "from_bool",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (| i |);
                                                            Value.Integer IntegerKind.Usize 0
                                                          ]
                                                        |)
                                                      ]
                                                    |));
                                                  ("is_last_row",
                                                    M.call_closure (|
                                                      F,
                                                      M.get_trait_method (|
                                                        "p3_field::field::PrimeCharacteristicRing",
                                                        F,
                                                        [],
                                                        [],
                                                        "from_bool",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (| i |);
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.sub,
                                                              [
                                                                M.read (| height |);
                                                                Value.Integer IntegerKind.Usize 1
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |));
                                                  ("is_transition",
                                                    M.call_closure (|
                                                      F,
                                                      M.get_trait_method (|
                                                        "p3_field::field::PrimeCharacteristicRing",
                                                        F,
                                                        [],
                                                        [],
                                                        "from_bool",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.ne,
                                                          [
                                                            M.read (| i |);
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.sub,
                                                              [
                                                                M.read (| height |);
                                                                Value.Integer IntegerKind.Usize 1
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |))
                                                ]
                                            |) in
                                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_trait_method (|
                                                  "p3_air::air::Air",
                                                  A,
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_uni_stark::check_constraints::DebugConstraintBuilder")
                                                      []
                                                      [ F ]
                                                  ],
                                                  "eval",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| air |) |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, builder |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_check_constraints :
    M.IsFunction.C "p3_uni_stark::check_constraints::check_constraints" check_constraints.
  Admitted.
  Global Typeclasses Opaque check_constraints.
  
  (* StructRecord
    {
      name := "DebugConstraintBuilder";
      const_params := [];
      ty_params := [ "F" ];
      fields :=
        [
          ("row_index", Ty.path "usize");
          ("main",
            Ty.apply
              (Ty.path "p3_matrix::stack::VerticalPair")
              []
              [
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ F; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ];
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ F; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ]
              ]);
          ("public_values", Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]);
          ("is_first_row", F);
          ("is_last_row", F);
          ("is_transition", F)
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_p3_uni_stark_check_constraints_DebugConstraintBuilder_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::check_constraints::DebugConstraintBuilder") [] [ F ].
    
    (* Debug *)
    Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let~ names :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 6 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ]
                  ] :=
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Value.Array
                          [
                            mk_str (| "row_index" |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "main" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "public_values" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "is_first_row" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "is_last_row" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "is_transition" |) |)
                            |)
                          ]
                      |)
                    |)
                  |)
                |)
              |) in
            let~ values :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]
                  ] :=
              M.alloc (|
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Value.Array
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::check_constraints::DebugConstraintBuilder",
                                        "row_index"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::check_constraints::DebugConstraintBuilder",
                                        "main"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::check_constraints::DebugConstraintBuilder",
                                        "public_values"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::check_constraints::DebugConstraintBuilder",
                                        "is_first_row"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::check_constraints::DebugConstraintBuilder",
                                        "is_last_row"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "p3_uni_stark::check_constraints::DebugConstraintBuilder",
                                            "is_transition"
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                |))
                            ]
                        |)
                      |)
                    |)
                  |))
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_fields_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| mk_str (| "DebugConstraintBuilder" |) |)
                  |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |));
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_p3_uni_stark_check_constraints_DebugConstraintBuilder_F.
  
  Module Impl_p3_air_air_AirBuilder_where_p3_field_field_Field_F_for_p3_uni_stark_check_constraints_DebugConstraintBuilder_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::check_constraints::DebugConstraintBuilder") [] [ F ].
    
    (*     type F = F; *)
    Definition _F (F : Ty.t) : Ty.t := F.
    
    (*     type Expr = F; *)
    Definition _Expr (F : Ty.t) : Ty.t := F.
    
    (*     type Var = F; *)
    Definition _Var (F : Ty.t) : Ty.t := F.
    
    (*     type M = VerticalPair<RowMajorMatrixView<'a, F>, RowMajorMatrixView<'a, F>>; *)
    Definition _M_ (F : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_matrix::stack::VerticalPair")
        []
        [
          Ty.apply
            (Ty.path "p3_matrix::dense::DenseMatrix")
            []
            [ F; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ];
          Ty.apply
            (Ty.path "p3_matrix::dense::DenseMatrix")
            []
            [ F; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ]
        ].
    
    (*
        fn main(&self) -> Self::M {
            self.main
        }
    *)
    Definition main (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| self |) |),
              "p3_uni_stark::check_constraints::DebugConstraintBuilder",
              "main"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn is_first_row(&self) -> Self::Expr {
            self.is_first_row
        }
    *)
    Definition is_first_row (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| self |) |),
              "p3_uni_stark::check_constraints::DebugConstraintBuilder",
              "is_first_row"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn is_last_row(&self) -> Self::Expr {
            self.is_last_row
        }
    *)
    Definition is_last_row (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| self |) |),
              "p3_uni_stark::check_constraints::DebugConstraintBuilder",
              "is_last_row"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn is_transition_window(&self, size: usize) -> Self::Expr {
            if size == 2 {
                self.is_transition
            } else {
                panic!("only supports a window size of 2")
            }
        }
    *)
    Definition is_transition_window
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; size ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let size := M.alloc (| size |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ F ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [ M.read (| size |); Value.Integer IntegerKind.Usize 2 ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_uni_stark::check_constraints::DebugConstraintBuilder",
                      "is_transition"
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_const",
                                [ Value.Integer IntegerKind.Usize 1 ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [ mk_str (| "only supports a window size of 2" |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn assert_zero<I: Into<Self::Expr>>(&mut self, x: I) {
            assert_eq!(
                x.into(),
                F::ZERO,
                "constraints had nonzero value on row {}",
                self.row_index
            );
        }
    *)
    Definition assert_zero (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [ _ as I ], [ self; x ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let x := M.alloc (| x |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            F,
                            M.get_trait_method (|
                              "core::convert::Into",
                              I,
                              [],
                              [ F ],
                              "into",
                              [],
                              []
                            |),
                            [ M.read (| x |) ]
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", F |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          F,
                                          [],
                                          [ F ],
                                          "eq",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| left_val |) |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| right_val |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ F; F ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [
                                              M.call_closure (|
                                                Ty.path "core::fmt::Arguments",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::Arguments",
                                                  "new_v1",
                                                  [
                                                    Value.Integer IntegerKind.Usize 1;
                                                    Value.Integer IntegerKind.Usize 1
                                                  ],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Value.Array
                                                            [
                                                              mk_str (|
                                                                "constraints had nonzero value on row "
                                                              |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Value.Array
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  "new_display",
                                                                  [],
                                                                  [ Ty.path "usize" ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| self |)
                                                                          |),
                                                                          "p3_uni_stark::check_constraints::DebugConstraintBuilder",
                                                                          "row_index"
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn assert_eq<I1: Into<Self::Expr>, I2: Into<Self::Expr>>(&mut self, x: I1, y: I2) {
            let x = x.into();
            let y = y.into();
            assert_eq!(
                x, y,
                "values didn't match on row {}: {} != {}",
                self.row_index, x, y
            );
        }
    *)
    Definition assert_eq (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [ I1; I2 ], [ self; x; y ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let x := M.alloc (| x |) in
          let y := M.alloc (| y |) in
          M.read (|
            let~ x : Ty.apply (Ty.path "*") [] [ F ] :=
              M.alloc (|
                M.call_closure (|
                  F,
                  M.get_trait_method (| "core::convert::Into", I1, [], [ F ], "into", [], [] |),
                  [ M.read (| x |) ]
                |)
              |) in
            let~ y : Ty.apply (Ty.path "*") [] [ F ] :=
              M.alloc (|
                M.call_closure (|
                  F,
                  M.get_trait_method (| "core::convert::Into", I2, [], [ F ], "into", [], [] |),
                  [ M.read (| y |) ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [ M.borrow (| Pointer.Kind.Ref, x |); M.borrow (| Pointer.Kind.Ref, y |) ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          F,
                                          [],
                                          [ F ],
                                          "eq",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| left_val |) |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| right_val |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ F; F ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [
                                              M.call_closure (|
                                                Ty.path "core::fmt::Arguments",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::Arguments",
                                                  "new_v1",
                                                  [
                                                    Value.Integer IntegerKind.Usize 3;
                                                    Value.Integer IntegerKind.Usize 3
                                                  ],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Value.Array
                                                            [
                                                              mk_str (|
                                                                "values didn't match on row "
                                                              |);
                                                              mk_str (| ": " |);
                                                              mk_str (| " != " |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Value.Array
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  "new_display",
                                                                  [],
                                                                  [ Ty.path "usize" ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| self |)
                                                                          |),
                                                                          "p3_uni_stark::check_constraints::DebugConstraintBuilder",
                                                                          "row_index"
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  "new_display",
                                                                  [],
                                                                  [ F ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        x
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  "new_display",
                                                                  [],
                                                                  [ F ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        y
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "p3_air::air::AirBuilder"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("F", InstanceField.Ty (_F F));
          ("Expr", InstanceField.Ty (_Expr F));
          ("Var", InstanceField.Ty (_Var F));
          ("M_", InstanceField.Ty (_M_ F));
          ("main", InstanceField.Method (main F));
          ("is_first_row", InstanceField.Method (is_first_row F));
          ("is_last_row", InstanceField.Method (is_last_row F));
          ("is_transition_window", InstanceField.Method (is_transition_window F));
          ("assert_zero", InstanceField.Method (assert_zero F));
          ("assert_eq", InstanceField.Method (assert_eq F))
        ].
  End Impl_p3_air_air_AirBuilder_where_p3_field_field_Field_F_for_p3_uni_stark_check_constraints_DebugConstraintBuilder_F.
  
  Module Impl_p3_air_air_AirBuilderWithPublicValues_where_p3_field_field_Field_F_for_p3_uni_stark_check_constraints_DebugConstraintBuilder_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::check_constraints::DebugConstraintBuilder") [] [ F ].
    
    (*     type PublicVar = Self::F; *)
    Definition _PublicVar (F : Ty.t) : Ty.t :=
      Ty.associated_in_trait
        "p3_air::air::AirBuilder"
        []
        []
        (Ty.apply (Ty.path "p3_uni_stark::check_constraints::DebugConstraintBuilder") [] [ F ])
        "F".
    
    (*
        fn public_values(&self) -> &[Self::F] {
            self.public_values
        }
    *)
    Definition public_values (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_uni_stark::check_constraints::DebugConstraintBuilder",
                  "public_values"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "p3_air::air::AirBuilderWithPublicValues"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("PublicVar", InstanceField.Ty (_PublicVar F));
          ("public_values", InstanceField.Method (public_values F))
        ].
  End Impl_p3_air_air_AirBuilderWithPublicValues_where_p3_field_field_Field_F_for_p3_uni_stark_check_constraints_DebugConstraintBuilder_F.
End check_constraints.
