(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module config.
  Axiom PcsError :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "p3_uni_stark::config::PcsError") [] [ SC ]) =
      (Ty.associated_in_trait
        "p3_commit::pcs::Pcs"
        []
        [
          Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenge";
          Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenger"
        ]
        (Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Pcs")
        "Error").
  
  Axiom Domain :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "p3_uni_stark::config::Domain") [] [ SC ]) =
      (Ty.associated_in_trait
        "p3_commit::pcs::Pcs"
        []
        [
          Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenge";
          Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenger"
        ]
        (Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Pcs")
        "Domain").
  
  Axiom Val :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "p3_uni_stark::config::Val") [] [ SC ]) =
      (Ty.associated_in_trait
        "p3_commit::domain::PolynomialSpace"
        []
        []
        (Ty.associated_in_trait
          "p3_commit::pcs::Pcs"
          []
          [
            Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenge";
            Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenger"
          ]
          (Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Pcs")
          "Domain")
        "Val").
  
  Axiom PackedVal :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "p3_uni_stark::config::PackedVal") [] [ SC ]) =
      (Ty.associated_in_trait
        "p3_field::field::Field"
        []
        []
        (Ty.associated_in_trait
          "p3_commit::domain::PolynomialSpace"
          []
          []
          (Ty.associated_in_trait
            "p3_commit::pcs::Pcs"
            []
            [
              Ty.associated_in_trait
                "p3_uni_stark::config::StarkGenericConfig"
                []
                []
                SC
                "Challenge";
              Ty.associated_in_trait
                "p3_uni_stark::config::StarkGenericConfig"
                []
                []
                SC
                "Challenger"
            ]
            (Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Pcs")
            "Domain")
          "Val")
        "Packing").
  
  Axiom PackedChallenge :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "p3_uni_stark::config::PackedChallenge") [] [ SC ]) =
      (Ty.associated_in_trait
        "p3_field::field::ExtensionField"
        []
        [
          Ty.associated_in_trait
            "p3_commit::domain::PolynomialSpace"
            []
            []
            (Ty.associated_in_trait
              "p3_commit::pcs::Pcs"
              []
              [
                Ty.associated_in_trait
                  "p3_uni_stark::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "Challenge";
                Ty.associated_in_trait
                  "p3_uni_stark::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "Challenger"
              ]
              (Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Pcs")
              "Domain")
            "Val"
        ]
        (Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenge")
        "ExtensionPacking").
  
  (* Trait *)
  (* Empty module 'StarkGenericConfig' *)
  
  (* StructRecord
    {
      name := "StarkConfig";
      const_params := [];
      ty_params := [ "Pcs"; "Challenge"; "Challenger" ];
      fields :=
        [
          ("pcs", Pcs);
          ("challenger", Challenger);
          ("_phantom", Ty.apply (Ty.path "core::marker::PhantomData") [] [ Challenge ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_Pcs_where_core_fmt_Debug_Challenge_where_core_fmt_Debug_Challenger_for_p3_uni_stark_config_StarkConfig_Pcs_Challenge_Challenger.
    Definition Self (Pcs Challenge Challenger : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::config::StarkConfig") [] [ Pcs; Challenge; Challenger ].
    
    (* Debug *)
    Definition fmt
        (Pcs Challenge Challenger : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Pcs Challenge Challenger in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "StarkConfig" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "pcs" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_uni_stark::config::StarkConfig",
                        "pcs"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "challenger" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_uni_stark::config::StarkConfig",
                        "challenger"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_phantom" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_uni_stark::config::StarkConfig",
                            "_phantom"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Pcs Challenge Challenger : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Pcs Challenge Challenger)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt Pcs Challenge Challenger)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_Pcs_where_core_fmt_Debug_Challenge_where_core_fmt_Debug_Challenger_for_p3_uni_stark_config_StarkConfig_Pcs_Challenge_Challenger.
  
  Module Impl_p3_uni_stark_config_StarkConfig_Pcs_Challenge_Challenger.
    Definition Self (Pcs Challenge Challenger : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::config::StarkConfig") [] [ Pcs; Challenge; Challenger ].
    
    (*
        pub const fn new(pcs: Pcs, challenger: Challenger) -> Self {
            Self {
                pcs,
                challenger,
                _phantom: PhantomData,
            }
        }
    *)
    Definition new
        (Pcs Challenge Challenger : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Pcs Challenge Challenger in
      match ε, τ, α with
      | [], [], [ pcs; challenger ] =>
        ltac:(M.monadic
          (let pcs := M.alloc (| pcs |) in
          let challenger := M.alloc (| challenger |) in
          Value.StructRecord
            "p3_uni_stark::config::StarkConfig"
            [
              ("pcs", M.read (| pcs |));
              ("challenger", M.read (| challenger |));
              ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (Pcs Challenge Challenger : Ty.t),
      M.IsAssociatedFunction.C (Self Pcs Challenge Challenger) "new" (new Pcs Challenge Challenger).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_p3_uni_stark_config_StarkConfig_Pcs_Challenge_Challenger.
  
  Module Impl_p3_uni_stark_config_StarkGenericConfig_where_p3_field_field_ExtensionField_Challenge_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_where_p3_commit_pcs_Pcs_Pcs_Challenge_Challenger_where_p3_challenger_FieldChallenger_Challenger_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_where_p3_challenger_CanObserve_Challenger_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Commitment_where_p3_challenger_CanSample_Challenger_Challenge_where_core_clone_Clone_Challenger_for_p3_uni_stark_config_StarkConfig_Pcs_Challenge_Challenger.
    Definition Self (Pcs Challenge Challenger : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::config::StarkConfig") [] [ Pcs; Challenge; Challenger ].
    
    (*     type Pcs = Pcs; *)
    Definition _Pcs (Pcs Challenge Challenger : Ty.t) : Ty.t := Pcs.
    
    (*     type Challenge = Challenge; *)
    Definition _Challenge (Pcs Challenge Challenger : Ty.t) : Ty.t := Challenge.
    
    (*     type Challenger = Challenger; *)
    Definition _Challenger (Pcs Challenge Challenger : Ty.t) : Ty.t := Challenger.
    
    (*
        fn pcs(&self) -> &Self::Pcs {
            &self.pcs
        }
    *)
    Definition pcs
        (Pcs Challenge Challenger : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Pcs Challenge Challenger in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_uni_stark::config::StarkConfig",
                  "pcs"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn initialise_challenger(&self) -> Self::Challenger {
            self.challenger.clone()
        }
    *)
    Definition initialise_challenger
        (Pcs Challenge Challenger : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Pcs Challenge Challenger in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Challenger,
            M.get_trait_method (| "core::clone::Clone", Challenger, [], [], "clone", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_uni_stark::config::StarkConfig",
                  "challenger"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Pcs Challenge Challenger : Ty.t),
      M.IsTraitInstance
        "p3_uni_stark::config::StarkGenericConfig"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Pcs Challenge Challenger)
        (* Instance *)
        [
          ("Pcs", InstanceField.Ty (_Pcs Pcs Challenge Challenger));
          ("Challenge", InstanceField.Ty (_Challenge Pcs Challenge Challenger));
          ("Challenger", InstanceField.Ty (_Challenger Pcs Challenge Challenger));
          ("pcs", InstanceField.Method (pcs Pcs Challenge Challenger));
          ("initialise_challenger",
            InstanceField.Method (initialise_challenger Pcs Challenge Challenger))
        ].
  End Impl_p3_uni_stark_config_StarkGenericConfig_where_p3_field_field_ExtensionField_Challenge_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_where_p3_commit_pcs_Pcs_Pcs_Challenge_Challenger_where_p3_challenger_FieldChallenger_Challenger_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Domain_Val_where_p3_challenger_CanObserve_Challenger_associated_in_trait_p3_commit_pcs_Pcs__Challenge_Challenger_Pcs_Commitment_where_p3_challenger_CanSample_Challenger_Challenge_where_core_clone_Clone_Challenger_for_p3_uni_stark_config_StarkConfig_Pcs_Challenge_Challenger.
End config.
