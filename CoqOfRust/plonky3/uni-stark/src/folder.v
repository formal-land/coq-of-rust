(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module folder.
  (* StructRecord
    {
      name := "ProverConstraintFolder";
      const_params := [];
      ty_params := [ "SC" ];
      fields :=
        [
          ("main",
            Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [
                Ty.associated_in_trait
                  "p3_field::field::Field"
                  []
                  []
                  (Ty.associated_in_trait
                    "p3_commit::domain::PolynomialSpace"
                    []
                    []
                    (Ty.associated_in_trait
                      "p3_commit::pcs::Pcs"
                      []
                      [
                        Ty.associated_in_trait
                          "p3_uni_stark::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge";
                        Ty.associated_in_trait
                          "p3_uni_stark::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenger"
                      ]
                      (Ty.associated_in_trait
                        "p3_uni_stark::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Pcs")
                      "Domain")
                    "Val")
                  "Packing";
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_field::field::Field"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val")
                          "Packing"
                      ]
                  ]
              ]);
          ("public_values",
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "p3_uni_stark::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val";
                    Ty.path "alloc::alloc::Global"
                  ]
              ]);
          ("is_first_row",
            Ty.associated_in_trait
              "p3_field::field::Field"
              []
              []
              (Ty.associated_in_trait
                "p3_commit::domain::PolynomialSpace"
                []
                []
                (Ty.associated_in_trait
                  "p3_commit::pcs::Pcs"
                  []
                  [
                    Ty.associated_in_trait
                      "p3_uni_stark::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.associated_in_trait
                      "p3_uni_stark::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenger"
                  ]
                  (Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Pcs")
                  "Domain")
                "Val")
              "Packing");
          ("is_last_row",
            Ty.associated_in_trait
              "p3_field::field::Field"
              []
              []
              (Ty.associated_in_trait
                "p3_commit::domain::PolynomialSpace"
                []
                []
                (Ty.associated_in_trait
                  "p3_commit::pcs::Pcs"
                  []
                  [
                    Ty.associated_in_trait
                      "p3_uni_stark::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.associated_in_trait
                      "p3_uni_stark::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenger"
                  ]
                  (Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Pcs")
                  "Domain")
                "Val")
              "Packing");
          ("is_transition",
            Ty.associated_in_trait
              "p3_field::field::Field"
              []
              []
              (Ty.associated_in_trait
                "p3_commit::domain::PolynomialSpace"
                []
                []
                (Ty.associated_in_trait
                  "p3_commit::pcs::Pcs"
                  []
                  [
                    Ty.associated_in_trait
                      "p3_uni_stark::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.associated_in_trait
                      "p3_uni_stark::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenger"
                  ]
                  (Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Pcs")
                  "Domain")
                "Val")
              "Packing");
          ("alpha_powers",
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "slice")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_uni_stark::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge"
                  ]
              ]);
          ("decomposed_alpha_powers",
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "slice")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
              ]);
          ("accumulator",
            Ty.associated_in_trait
              "p3_field::field::ExtensionField"
              []
              [
                Ty.associated_in_trait
                  "p3_commit::domain::PolynomialSpace"
                  []
                  []
                  (Ty.associated_in_trait
                    "p3_commit::pcs::Pcs"
                    []
                    [
                      Ty.associated_in_trait
                        "p3_uni_stark::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenge";
                      Ty.associated_in_trait
                        "p3_uni_stark::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenger"
                    ]
                    (Ty.associated_in_trait
                      "p3_uni_stark::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Pcs")
                    "Domain")
                  "Val"
              ]
              (Ty.associated_in_trait
                "p3_uni_stark::config::StarkGenericConfig"
                []
                []
                SC
                "Challenge")
              "ExtensionPacking");
          ("constraint_index", Ty.path "usize")
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_SC_where_p3_uni_stark_config_StarkGenericConfig_SC_where_core_fmt_Debug_associated_in_trait_p3_uni_stark_config_StarkGenericConfig___SC_Challenge_for_p3_uni_stark_folder_ProverConstraintFolder_SC.
    Definition Self (SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::folder::ProverConstraintFolder") [] [ SC ].
    
    (* Debug *)
    Definition fmt (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let~ names :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 9 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ]
                  ] :=
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Value.Array
                          [
                            mk_str (| "main" |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "public_values" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "is_first_row" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "is_last_row" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "is_transition" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "alpha_powers" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "decomposed_alpha_powers" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "accumulator" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "constraint_index" |) |)
                            |)
                          ]
                      |)
                    |)
                  |)
                |)
              |) in
            let~ values :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]
                  ] :=
              M.alloc (|
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Value.Array
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::folder::ProverConstraintFolder",
                                        "main"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::folder::ProverConstraintFolder",
                                        "public_values"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::folder::ProverConstraintFolder",
                                        "is_first_row"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::folder::ProverConstraintFolder",
                                        "is_last_row"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::folder::ProverConstraintFolder",
                                        "is_transition"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::folder::ProverConstraintFolder",
                                        "alpha_powers"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::folder::ProverConstraintFolder",
                                        "decomposed_alpha_powers"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::folder::ProverConstraintFolder",
                                        "accumulator"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "p3_uni_stark::folder::ProverConstraintFolder",
                                            "constraint_index"
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                |))
                            ]
                        |)
                      |)
                    |)
                  |))
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_fields_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| mk_str (| "ProverConstraintFolder" |) |)
                  |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |));
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (SC : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self SC)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt SC)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_SC_where_p3_uni_stark_config_StarkGenericConfig_SC_where_core_fmt_Debug_associated_in_trait_p3_uni_stark_config_StarkGenericConfig___SC_Challenge_for_p3_uni_stark_folder_ProverConstraintFolder_SC.
  
  Axiom ViewPair :
    forall (T : Ty.t),
    (Ty.apply (Ty.path "p3_uni_stark::folder::ViewPair") [] [ T ]) =
      (Ty.apply
        (Ty.path "p3_matrix::stack::VerticalPair")
        []
        [
          Ty.apply
            (Ty.path "p3_matrix::dense::DenseMatrix")
            []
            [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ];
          Ty.apply
            (Ty.path "p3_matrix::dense::DenseMatrix")
            []
            [ T; Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ] ]
        ]).
  
  (* StructRecord
    {
      name := "VerifierConstraintFolder";
      const_params := [];
      ty_params := [ "SC" ];
      fields :=
        [
          ("main",
            Ty.apply
              (Ty.path "p3_matrix::stack::VerticalPair")
              []
              [
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_uni_stark::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge"
                          ]
                      ]
                  ];
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_uni_stark::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge"
                          ]
                      ]
                  ]
              ]);
          ("public_values",
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "p3_uni_stark::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val";
                    Ty.path "alloc::alloc::Global"
                  ]
              ]);
          ("is_first_row",
            Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenge");
          ("is_last_row",
            Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenge");
          ("is_transition",
            Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenge");
          ("alpha",
            Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenge");
          ("accumulator",
            Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenge")
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_SC_where_p3_uni_stark_config_StarkGenericConfig_SC_where_core_fmt_Debug_associated_in_trait_p3_uni_stark_config_StarkGenericConfig___SC_Challenge_where_core_fmt_Debug_associated_in_trait_p3_uni_stark_config_StarkGenericConfig___SC_Challenge_where_core_fmt_Debug_associated_in_trait_p3_uni_stark_config_StarkGenericConfig___SC_Challenge_where_core_fmt_Debug_associated_in_trait_p3_uni_stark_config_StarkGenericConfig___SC_Challenge_where_core_fmt_Debug_associated_in_trait_p3_uni_stark_config_StarkGenericConfig___SC_Challenge_where_core_fmt_Debug_associated_in_trait_p3_uni_stark_config_StarkGenericConfig___SC_Challenge_for_p3_uni_stark_folder_VerifierConstraintFolder_SC.
    Definition Self (SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::folder::VerifierConstraintFolder") [] [ SC ].
    
    (* Debug *)
    Definition fmt (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let~ names :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 7 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ]
                  ] :=
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Value.Array
                          [
                            mk_str (| "main" |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "public_values" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "is_first_row" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "is_last_row" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "is_transition" |) |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "alpha" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "accumulator" |) |)
                            |)
                          ]
                      |)
                    |)
                  |)
                |)
              |) in
            let~ values :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]
                  ] :=
              M.alloc (|
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Value.Array
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::folder::VerifierConstraintFolder",
                                        "main"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::folder::VerifierConstraintFolder",
                                        "public_values"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::folder::VerifierConstraintFolder",
                                        "is_first_row"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::folder::VerifierConstraintFolder",
                                        "is_last_row"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::folder::VerifierConstraintFolder",
                                        "is_transition"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "p3_uni_stark::folder::VerifierConstraintFolder",
                                        "alpha"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "p3_uni_stark::folder::VerifierConstraintFolder",
                                            "accumulator"
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                |))
                            ]
                        |)
                      |)
                    |)
                  |))
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_fields_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| mk_str (| "VerifierConstraintFolder" |) |)
                  |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |));
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (SC : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self SC)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt SC)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_SC_where_p3_uni_stark_config_StarkGenericConfig_SC_where_core_fmt_Debug_associated_in_trait_p3_uni_stark_config_StarkGenericConfig___SC_Challenge_where_core_fmt_Debug_associated_in_trait_p3_uni_stark_config_StarkGenericConfig___SC_Challenge_where_core_fmt_Debug_associated_in_trait_p3_uni_stark_config_StarkGenericConfig___SC_Challenge_where_core_fmt_Debug_associated_in_trait_p3_uni_stark_config_StarkGenericConfig___SC_Challenge_where_core_fmt_Debug_associated_in_trait_p3_uni_stark_config_StarkGenericConfig___SC_Challenge_where_core_fmt_Debug_associated_in_trait_p3_uni_stark_config_StarkGenericConfig___SC_Challenge_for_p3_uni_stark_folder_VerifierConstraintFolder_SC.
  
  Module Impl_p3_air_air_AirBuilder_where_p3_uni_stark_config_StarkGenericConfig_SC_for_p3_uni_stark_folder_ProverConstraintFolder_SC.
    Definition Self (SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::folder::ProverConstraintFolder") [] [ SC ].
    
    (*     type F = Val<SC>; *)
    Definition _F (SC : Ty.t) : Ty.t :=
      Ty.associated_in_trait
        "p3_commit::domain::PolynomialSpace"
        []
        []
        (Ty.associated_in_trait
          "p3_commit::pcs::Pcs"
          []
          [
            Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenge";
            Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenger"
          ]
          (Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Pcs")
          "Domain")
        "Val".
    
    (*     type Expr = PackedVal<SC>; *)
    Definition _Expr (SC : Ty.t) : Ty.t :=
      Ty.associated_in_trait
        "p3_field::field::Field"
        []
        []
        (Ty.associated_in_trait
          "p3_commit::domain::PolynomialSpace"
          []
          []
          (Ty.associated_in_trait
            "p3_commit::pcs::Pcs"
            []
            [
              Ty.associated_in_trait
                "p3_uni_stark::config::StarkGenericConfig"
                []
                []
                SC
                "Challenge";
              Ty.associated_in_trait
                "p3_uni_stark::config::StarkGenericConfig"
                []
                []
                SC
                "Challenger"
            ]
            (Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Pcs")
            "Domain")
          "Val")
        "Packing".
    
    (*     type Var = PackedVal<SC>; *)
    Definition _Var (SC : Ty.t) : Ty.t :=
      Ty.associated_in_trait
        "p3_field::field::Field"
        []
        []
        (Ty.associated_in_trait
          "p3_commit::domain::PolynomialSpace"
          []
          []
          (Ty.associated_in_trait
            "p3_commit::pcs::Pcs"
            []
            [
              Ty.associated_in_trait
                "p3_uni_stark::config::StarkGenericConfig"
                []
                []
                SC
                "Challenge";
              Ty.associated_in_trait
                "p3_uni_stark::config::StarkGenericConfig"
                []
                []
                SC
                "Challenger"
            ]
            (Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Pcs")
            "Domain")
          "Val")
        "Packing".
    
    (*     type M = RowMajorMatrixView<'a, PackedVal<SC>>; *)
    Definition _M_ (SC : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_matrix::dense::DenseMatrix")
        []
        [
          Ty.associated_in_trait
            "p3_field::field::Field"
            []
            []
            (Ty.associated_in_trait
              "p3_commit::domain::PolynomialSpace"
              []
              []
              (Ty.associated_in_trait
                "p3_commit::pcs::Pcs"
                []
                [
                  Ty.associated_in_trait
                    "p3_uni_stark::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Challenge";
                  Ty.associated_in_trait
                    "p3_uni_stark::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Challenger"
                ]
                (Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Pcs")
                "Domain")
              "Val")
            "Packing";
          Ty.apply
            (Ty.path "&")
            []
            [
              Ty.apply
                (Ty.path "slice")
                []
                [
                  Ty.associated_in_trait
                    "p3_field::field::Field"
                    []
                    []
                    (Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "p3_uni_stark::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val")
                    "Packing"
                ]
            ]
        ].
    
    (*
        fn main(&self) -> Self::M {
            self.main
        }
    *)
    Definition main (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| self |) |),
              "p3_uni_stark::folder::ProverConstraintFolder",
              "main"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn is_first_row(&self) -> Self::Expr {
            self.is_first_row
        }
    *)
    Definition is_first_row (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| self |) |),
              "p3_uni_stark::folder::ProverConstraintFolder",
              "is_first_row"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn is_last_row(&self) -> Self::Expr {
            self.is_last_row
        }
    *)
    Definition is_last_row (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| self |) |),
              "p3_uni_stark::folder::ProverConstraintFolder",
              "is_last_row"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn is_transition_window(&self, size: usize) -> Self::Expr {
            if size == 2 {
                self.is_transition
            } else {
                panic!("uni-stark only supports a window size of 2")
            }
        }
    *)
    Definition is_transition_window
        (SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self; size ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let size := M.alloc (| size |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.associated_in_trait
                    "p3_field::field::Field"
                    []
                    []
                    (Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "p3_uni_stark::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val")
                    "Packing"
                ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [ M.read (| size |); Value.Integer IntegerKind.Usize 2 ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_uni_stark::folder::ProverConstraintFolder",
                      "is_transition"
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_const",
                                [ Value.Integer IntegerKind.Usize 1 ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [
                                            mk_str (|
                                              "uni-stark only supports a window size of 2"
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn assert_zero<I: Into<Self::Expr>>(&mut self, x: I) {
            let x: PackedVal<SC> = x.into();
            let alpha_power = self.alpha_powers[self.constraint_index];
            self.accumulator += Into::<PackedChallenge<SC>>::into(alpha_power) * x;
            self.constraint_index += 1;
        }
    *)
    Definition assert_zero (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [ _ as I ], [ self; x ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let x := M.alloc (| x |) in
          M.read (|
            let~ x :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_field::field::Field"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val")
                      "Packing"
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.associated_in_trait
                    "p3_field::field::Field"
                    []
                    []
                    (Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "p3_uni_stark::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val")
                    "Packing",
                  M.get_trait_method (|
                    "core::convert::Into",
                    I,
                    [],
                    [
                      Ty.associated_in_trait
                        "p3_field::field::Field"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val")
                        "Packing"
                    ],
                    "into",
                    [],
                    []
                  |),
                  [ M.read (| x |) ]
                |)
              |) in
            let~ alpha_power :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_uni_stark::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge"
                  ] :=
              M.copy (|
                M.SubPointer.get_array_field (|
                  M.deref (|
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_uni_stark::folder::ProverConstraintFolder",
                        "alpha_powers"
                      |)
                    |)
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_uni_stark::folder::ProverConstraintFolder",
                      "constraint_index"
                    |)
                  |)
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::arith::AddAssign",
                    Ty.associated_in_trait
                      "p3_field::field::ExtensionField"
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ]
                      (Ty.associated_in_trait
                        "p3_uni_stark::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenge")
                      "ExtensionPacking",
                    [],
                    [
                      Ty.associated_in_trait
                        "p3_field::field::ExtensionField"
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ]
                        (Ty.associated_in_trait
                          "p3_uni_stark::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge")
                        "ExtensionPacking"
                    ],
                    "add_assign",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_uni_stark::folder::ProverConstraintFolder",
                        "accumulator"
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_field::field::ExtensionField"
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ]
                        (Ty.associated_in_trait
                          "p3_uni_stark::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge")
                        "ExtensionPacking",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.associated_in_trait
                          "p3_field::field::ExtensionField"
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_uni_stark::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "p3_uni_stark::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ]
                          (Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge")
                          "ExtensionPacking",
                        [],
                        [
                          Ty.associated_in_trait
                            "p3_field::field::Field"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_uni_stark::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "p3_uni_stark::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val")
                            "Packing"
                        ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_in_trait
                            "p3_field::field::ExtensionField"
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_uni_stark::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "p3_uni_stark::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "p3_uni_stark::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val"
                            ]
                            (Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge")
                            "ExtensionPacking",
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge",
                            [],
                            [
                              Ty.associated_in_trait
                                "p3_field::field::ExtensionField"
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_uni_stark::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "p3_uni_stark::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_uni_stark::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                ]
                                (Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge")
                                "ExtensionPacking"
                            ],
                            "into",
                            [],
                            []
                          |),
                          [ M.read (| alpha_power |) ]
                        |);
                        M.read (| x |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                let β :=
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "p3_uni_stark::folder::ProverConstraintFolder",
                    "constraint_index"
                  |) in
                M.write (|
                  β,
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.add,
                    [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn assert_zeros<const N: usize, I: Into<Self::Expr>>(&mut self, array: [I; N]) {
            let expr_array: [Self::Expr; N] = array.map(Into::into);
            self.accumulator += PackedChallenge::<SC>::from_basis_coefficients_fn(|i| {
                let alpha_powers = &self.decomposed_alpha_powers[i]
                    [self.constraint_index..(self.constraint_index + N)];
                PackedVal::<SC>::packed_linear_combination::<N>(alpha_powers, &expr_array)
            });
            self.constraint_index += N;
        }
    *)
    Definition assert_zeros (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [ N ], [ _ as I ], [ self; array ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let array := M.alloc (| array |) in
          M.read (|
            let~ expr_array :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ N ]
                      [
                        Ty.associated_in_trait
                          "p3_field::field::Field"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val")
                          "Packing"
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ N ]
                    [
                      Ty.associated_in_trait
                        "p3_field::field::Field"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val")
                        "Packing"
                    ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "array") [ N ] [ I ],
                    "map",
                    [],
                    [
                      Ty.function
                        [ I ]
                        (Ty.associated_in_trait
                          "p3_field::field::Field"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val")
                          "Packing");
                      Ty.associated_in_trait
                        "p3_field::field::Field"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val")
                        "Packing"
                    ]
                  |),
                  [
                    M.read (| array |);
                    M.get_trait_method (|
                      "core::convert::Into",
                      I,
                      [],
                      [
                        Ty.associated_in_trait
                          "p3_field::field::Field"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val")
                          "Packing"
                      ],
                      "into",
                      [],
                      []
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::arith::AddAssign",
                    Ty.associated_in_trait
                      "p3_field::field::ExtensionField"
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ]
                      (Ty.associated_in_trait
                        "p3_uni_stark::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenge")
                      "ExtensionPacking",
                    [],
                    [
                      Ty.associated_in_trait
                        "p3_field::field::ExtensionField"
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ]
                        (Ty.associated_in_trait
                          "p3_uni_stark::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge")
                        "ExtensionPacking"
                    ],
                    "add_assign",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_uni_stark::folder::ProverConstraintFolder",
                        "accumulator"
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_field::field::ExtensionField"
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ]
                        (Ty.associated_in_trait
                          "p3_uni_stark::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge")
                        "ExtensionPacking",
                      M.get_trait_method (|
                        "p3_field::field::BasedVectorSpace",
                        Ty.associated_in_trait
                          "p3_field::field::ExtensionField"
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_uni_stark::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "p3_uni_stark::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ]
                          (Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge")
                          "ExtensionPacking",
                        [],
                        [
                          Ty.associated_in_trait
                            "p3_field::field::Field"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_uni_stark::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "p3_uni_stark::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "p3_uni_stark::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val")
                            "Packing"
                        ],
                        "from_basis_coefficients_fn",
                        [],
                        [
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize" ] ]
                            (Ty.associated_in_trait
                              "p3_field::field::Field"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_uni_stark::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "p3_uni_stark::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "p3_uni_stark::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val")
                              "Packing")
                        ]
                      |),
                      [
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                          (Ty.associated_in_trait
                                            "p3_field::field::Field"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_uni_stark::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "p3_uni_stark::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "p3_uni_stark::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val")
                                            "Packing")
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let i := M.copy (| γ |) in
                                          M.read (|
                                            let~ alpha_powers :
                                                Ty.apply
                                                  (Ty.path "*")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_uni_stark::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "p3_uni_stark::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "p3_uni_stark::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val"
                                                          ]
                                                      ]
                                                  ] :=
                                              M.alloc (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_uni_stark::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "p3_uni_stark::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "p3_uni_stark::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val"
                                                            ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::index::Index",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_uni_stark::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "p3_uni_stark::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "p3_uni_stark::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ],
                                                        "index",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_array_field (|
                                                            M.deref (|
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (| M.read (| self |) |),
                                                                  "p3_uni_stark::folder::ProverConstraintFolder",
                                                                  "decomposed_alpha_powers"
                                                                |)
                                                              |)
                                                            |),
                                                            M.read (| i |)
                                                          |)
                                                        |);
                                                        Value.StructRecord
                                                          "core::ops::range::Range"
                                                          [
                                                            ("start",
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (| M.read (| self |) |),
                                                                  "p3_uni_stark::folder::ProverConstraintFolder",
                                                                  "constraint_index"
                                                                |)
                                                              |));
                                                            ("end_",
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.add,
                                                                [
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| self |)
                                                                      |),
                                                                      "p3_uni_stark::folder::ProverConstraintFolder",
                                                                      "constraint_index"
                                                                    |)
                                                                  |);
                                                                  N
                                                                ]
                                                              |))
                                                          ]
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |) in
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.associated_in_trait
                                                  "p3_field::field::Field"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_uni_stark::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "p3_uni_stark::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "p3_uni_stark::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val")
                                                  "Packing",
                                                M.get_trait_method (|
                                                  "p3_field::packed::PackedField",
                                                  Ty.associated_in_trait
                                                    "p3_field::field::Field"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_uni_stark::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "p3_uni_stark::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "p3_uni_stark::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val")
                                                    "Packing",
                                                  [],
                                                  [],
                                                  "packed_linear_combination",
                                                  [ N ],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| alpha_powers |) |)
                                                  |);
                                                  (* Unsize *)
                                                  M.pointer_coercion
                                                    (M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (| Pointer.Kind.Ref, expr_array |)
                                                      |)
                                                    |))
                                                ]
                                              |)
                                            |)
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                let β :=
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "p3_uni_stark::folder::ProverConstraintFolder",
                    "constraint_index"
                  |) in
                M.write (|
                  β,
                  M.call_closure (| Ty.path "usize", BinOp.Wrap.add, [ M.read (| β |); N ] |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (SC : Ty.t),
      M.IsTraitInstance
        "p3_air::air::AirBuilder"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self SC)
        (* Instance *)
        [
          ("F", InstanceField.Ty (_F SC));
          ("Expr", InstanceField.Ty (_Expr SC));
          ("Var", InstanceField.Ty (_Var SC));
          ("M_", InstanceField.Ty (_M_ SC));
          ("main", InstanceField.Method (main SC));
          ("is_first_row", InstanceField.Method (is_first_row SC));
          ("is_last_row", InstanceField.Method (is_last_row SC));
          ("is_transition_window", InstanceField.Method (is_transition_window SC));
          ("assert_zero", InstanceField.Method (assert_zero SC));
          ("assert_zeros", InstanceField.Method (assert_zeros SC))
        ].
  End Impl_p3_air_air_AirBuilder_where_p3_uni_stark_config_StarkGenericConfig_SC_for_p3_uni_stark_folder_ProverConstraintFolder_SC.
  
  Module Impl_p3_air_air_AirBuilderWithPublicValues_where_p3_uni_stark_config_StarkGenericConfig_SC_for_p3_uni_stark_folder_ProverConstraintFolder_SC.
    Definition Self (SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::folder::ProverConstraintFolder") [] [ SC ].
    
    (*     type PublicVar = Self::F; *)
    Definition _PublicVar (SC : Ty.t) : Ty.t :=
      Ty.associated_in_trait
        "p3_air::air::AirBuilder"
        []
        []
        (Ty.apply (Ty.path "p3_uni_stark::folder::ProverConstraintFolder") [] [ SC ])
        "F".
    
    (*
        fn public_values(&self) -> &[Self::F] {
            self.public_values
        }
    *)
    Definition public_values
        (SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ]
                  ],
                M.get_trait_method (|
                  "core::ops::deref::Deref",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val";
                      Ty.path "alloc::alloc::Global"
                    ],
                  [],
                  [],
                  "deref",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_uni_stark::folder::ProverConstraintFolder",
                          "public_values"
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (SC : Ty.t),
      M.IsTraitInstance
        "p3_air::air::AirBuilderWithPublicValues"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self SC)
        (* Instance *)
        [
          ("PublicVar", InstanceField.Ty (_PublicVar SC));
          ("public_values", InstanceField.Method (public_values SC))
        ].
  End Impl_p3_air_air_AirBuilderWithPublicValues_where_p3_uni_stark_config_StarkGenericConfig_SC_for_p3_uni_stark_folder_ProverConstraintFolder_SC.
  
  Module Impl_p3_air_air_AirBuilder_where_p3_uni_stark_config_StarkGenericConfig_SC_for_p3_uni_stark_folder_VerifierConstraintFolder_SC.
    Definition Self (SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::folder::VerifierConstraintFolder") [] [ SC ].
    
    (*     type F = Val<SC>; *)
    Definition _F (SC : Ty.t) : Ty.t :=
      Ty.associated_in_trait
        "p3_commit::domain::PolynomialSpace"
        []
        []
        (Ty.associated_in_trait
          "p3_commit::pcs::Pcs"
          []
          [
            Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenge";
            Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenger"
          ]
          (Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Pcs")
          "Domain")
        "Val".
    
    (*     type Expr = SC::Challenge; *)
    Definition _Expr (SC : Ty.t) : Ty.t :=
      Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenge".
    
    (*     type Var = SC::Challenge; *)
    Definition _Var (SC : Ty.t) : Ty.t :=
      Ty.associated_in_trait "p3_uni_stark::config::StarkGenericConfig" [] [] SC "Challenge".
    
    (*     type M = ViewPair<'a, SC::Challenge>; *)
    Definition _M_ (SC : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_matrix::stack::VerticalPair")
        []
        [
          Ty.apply
            (Ty.path "p3_matrix::dense::DenseMatrix")
            []
            [
              Ty.associated_in_trait
                "p3_uni_stark::config::StarkGenericConfig"
                []
                []
                SC
                "Challenge";
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "slice")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_uni_stark::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenge"
                    ]
                ]
            ];
          Ty.apply
            (Ty.path "p3_matrix::dense::DenseMatrix")
            []
            [
              Ty.associated_in_trait
                "p3_uni_stark::config::StarkGenericConfig"
                []
                []
                SC
                "Challenge";
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "slice")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_uni_stark::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenge"
                    ]
                ]
            ]
        ].
    
    (*
        fn main(&self) -> Self::M {
            self.main
        }
    *)
    Definition main (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| self |) |),
              "p3_uni_stark::folder::VerifierConstraintFolder",
              "main"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn is_first_row(&self) -> Self::Expr {
            self.is_first_row
        }
    *)
    Definition is_first_row (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| self |) |),
              "p3_uni_stark::folder::VerifierConstraintFolder",
              "is_first_row"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn is_last_row(&self) -> Self::Expr {
            self.is_last_row
        }
    *)
    Definition is_last_row (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| self |) |),
              "p3_uni_stark::folder::VerifierConstraintFolder",
              "is_last_row"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn is_transition_window(&self, size: usize) -> Self::Expr {
            if size == 2 {
                self.is_transition
            } else {
                panic!("uni-stark only supports a window size of 2")
            }
        }
    *)
    Definition is_transition_window
        (SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self; size ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let size := M.alloc (| size |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.associated_in_trait
                    "p3_uni_stark::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Challenge"
                ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [ M.read (| size |); Value.Integer IntegerKind.Usize 2 ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_uni_stark::folder::VerifierConstraintFolder",
                      "is_transition"
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_const",
                                [ Value.Integer IntegerKind.Usize 1 ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [
                                            mk_str (|
                                              "uni-stark only supports a window size of 2"
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn assert_zero<I: Into<Self::Expr>>(&mut self, x: I) {
            let x: SC::Challenge = x.into();
            self.accumulator *= self.alpha;
            self.accumulator += x;
        }
    *)
    Definition assert_zero (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [ _ as I ], [ self; x ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let x := M.alloc (| x |) in
          M.read (|
            let~ x :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_uni_stark::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge"
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.associated_in_trait
                    "p3_uni_stark::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Challenge",
                  M.get_trait_method (|
                    "core::convert::Into",
                    I,
                    [],
                    [
                      Ty.associated_in_trait
                        "p3_uni_stark::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenge"
                    ],
                    "into",
                    [],
                    []
                  |),
                  [ M.read (| x |) ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::arith::MulAssign",
                    Ty.associated_in_trait
                      "p3_uni_stark::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge",
                    [],
                    [
                      Ty.associated_in_trait
                        "p3_uni_stark::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenge"
                    ],
                    "mul_assign",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_uni_stark::folder::VerifierConstraintFolder",
                        "accumulator"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_uni_stark::folder::VerifierConstraintFolder",
                        "alpha"
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::arith::AddAssign",
                    Ty.associated_in_trait
                      "p3_uni_stark::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge",
                    [],
                    [
                      Ty.associated_in_trait
                        "p3_uni_stark::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenge"
                    ],
                    "add_assign",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_uni_stark::folder::VerifierConstraintFolder",
                        "accumulator"
                      |)
                    |);
                    M.read (| x |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (SC : Ty.t),
      M.IsTraitInstance
        "p3_air::air::AirBuilder"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self SC)
        (* Instance *)
        [
          ("F", InstanceField.Ty (_F SC));
          ("Expr", InstanceField.Ty (_Expr SC));
          ("Var", InstanceField.Ty (_Var SC));
          ("M_", InstanceField.Ty (_M_ SC));
          ("main", InstanceField.Method (main SC));
          ("is_first_row", InstanceField.Method (is_first_row SC));
          ("is_last_row", InstanceField.Method (is_last_row SC));
          ("is_transition_window", InstanceField.Method (is_transition_window SC));
          ("assert_zero", InstanceField.Method (assert_zero SC))
        ].
  End Impl_p3_air_air_AirBuilder_where_p3_uni_stark_config_StarkGenericConfig_SC_for_p3_uni_stark_folder_VerifierConstraintFolder_SC.
  
  Module Impl_p3_air_air_AirBuilderWithPublicValues_where_p3_uni_stark_config_StarkGenericConfig_SC_for_p3_uni_stark_folder_VerifierConstraintFolder_SC.
    Definition Self (SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::folder::VerifierConstraintFolder") [] [ SC ].
    
    (*     type PublicVar = Self::F; *)
    Definition _PublicVar (SC : Ty.t) : Ty.t :=
      Ty.associated_in_trait
        "p3_air::air::AirBuilder"
        []
        []
        (Ty.apply (Ty.path "p3_uni_stark::folder::VerifierConstraintFolder") [] [ SC ])
        "F".
    
    (*
        fn public_values(&self) -> &[Self::F] {
            self.public_values
        }
    *)
    Definition public_values
        (SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "p3_uni_stark::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ]
                  ],
                M.get_trait_method (|
                  "core::ops::deref::Deref",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "p3_uni_stark::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "p3_uni_stark::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val";
                      Ty.path "alloc::alloc::Global"
                    ],
                  [],
                  [],
                  "deref",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_uni_stark::folder::VerifierConstraintFolder",
                          "public_values"
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (SC : Ty.t),
      M.IsTraitInstance
        "p3_air::air::AirBuilderWithPublicValues"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self SC)
        (* Instance *)
        [
          ("PublicVar", InstanceField.Ty (_PublicVar SC));
          ("public_values", InstanceField.Method (public_values SC))
        ].
  End Impl_p3_air_air_AirBuilderWithPublicValues_where_p3_uni_stark_config_StarkGenericConfig_SC_for_p3_uni_stark_folder_VerifierConstraintFolder_SC.
End folder.
