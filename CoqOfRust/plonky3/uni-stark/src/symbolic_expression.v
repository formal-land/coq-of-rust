(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module symbolic_expression.
  (*
  Enum SymbolicExpression
  {
    const_params := [];
    ty_params := [ "F" ];
    variants :=
      [
        {
          name := "Variable";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "p3_uni_stark::symbolic_variable::SymbolicVariable") [] [ F ] ];
        };
        {
          name := "IsFirstRow";
          item := StructTuple [];
        };
        {
          name := "IsLastRow";
          item := StructTuple [];
        };
        {
          name := "IsTransition";
          item := StructTuple [];
        };
        {
          name := "Constant";
          item := StructTuple [ F ];
        };
        {
          name := "Add";
          item :=
            StructRecord
              [
                ("x",
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]);
                ("y",
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]);
                ("degree_multiple", Ty.path "usize")
              ];
        };
        {
          name := "Sub";
          item :=
            StructRecord
              [
                ("x",
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]);
                ("y",
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]);
                ("degree_multiple", Ty.path "usize")
              ];
        };
        {
          name := "Neg";
          item :=
            StructRecord
              [
                ("x",
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]);
                ("degree_multiple", Ty.path "usize")
              ];
        };
        {
          name := "Mul";
          item :=
            StructRecord
              [
                ("x",
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]);
                ("y",
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]);
                ("degree_multiple", Ty.path "usize")
              ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_SymbolicExpression_Variable :
    M.IsDiscriminant "p3_uni_stark::symbolic_expression::SymbolicExpression::Variable" 0.
  Axiom IsDiscriminant_SymbolicExpression_IsFirstRow :
    M.IsDiscriminant "p3_uni_stark::symbolic_expression::SymbolicExpression::IsFirstRow" 1.
  Axiom IsDiscriminant_SymbolicExpression_IsLastRow :
    M.IsDiscriminant "p3_uni_stark::symbolic_expression::SymbolicExpression::IsLastRow" 2.
  Axiom IsDiscriminant_SymbolicExpression_IsTransition :
    M.IsDiscriminant "p3_uni_stark::symbolic_expression::SymbolicExpression::IsTransition" 3.
  Axiom IsDiscriminant_SymbolicExpression_Constant :
    M.IsDiscriminant "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant" 4.
  Axiom IsDiscriminant_SymbolicExpression_Add :
    M.IsDiscriminant "p3_uni_stark::symbolic_expression::SymbolicExpression::Add" 5.
  Axiom IsDiscriminant_SymbolicExpression_Sub :
    M.IsDiscriminant "p3_uni_stark::symbolic_expression::SymbolicExpression::Sub" 6.
  Axiom IsDiscriminant_SymbolicExpression_Neg :
    M.IsDiscriminant "p3_uni_stark::symbolic_expression::SymbolicExpression::Neg" 7.
  Axiom IsDiscriminant_SymbolicExpression_Mul :
    M.IsDiscriminant "p3_uni_stark::symbolic_expression::SymbolicExpression::Mul" 8.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (* Clone *)
    Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                    []
                    [ F ]
                ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Variable",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Variable"
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "p3_uni_stark::symbolic_variable::SymbolicVariable")
                              []
                              [ F ],
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.apply
                                (Ty.path "p3_uni_stark::symbolic_variable::SymbolicVariable")
                                []
                                [ F ],
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::IsFirstRow"
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::IsFirstRow"
                        []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::IsLastRow"
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::IsLastRow"
                        []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::IsTransition"
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::IsTransition"
                        []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant"
                        [
                          M.call_closure (|
                            F,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              F,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Add",
                        "x"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Add",
                        "y"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Add",
                        "degree_multiple"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      Value.StructRecord
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Add"
                        [
                          ("x",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("y",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |));
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_2 |) |) |)
                              ]
                            |))
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Sub",
                        "x"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Sub",
                        "y"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Sub",
                        "degree_multiple"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      Value.StructRecord
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Sub"
                        [
                          ("x",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("y",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |));
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_2 |) |) |)
                              ]
                            |))
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Neg",
                        "x"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Neg",
                        "degree_multiple"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    M.alloc (|
                      Value.StructRecord
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Neg"
                        [
                          ("x",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |))
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Mul",
                        "x"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Mul",
                        "y"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Mul",
                        "degree_multiple"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      Value.StructRecord
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Mul"
                        [
                          ("x",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("y",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |));
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_2 |) |) |)
                              ]
                            |))
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (* Debug *)
    Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ]
                ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Variable",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Variable" |) |) |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::IsFirstRow"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "IsFirstRow" |) |) |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::IsLastRow"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "IsLastRow" |) |) |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::IsTransition"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "IsTransition" |) |) |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Constant" |) |) |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Add",
                        "x"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Add",
                        "y"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Add",
                        "degree_multiple"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Add" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "x" |) |) |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |));
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "y" |) |) |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |));
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "degree_multiple" |) |)
                          |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_2 |) |)
                            |))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Sub",
                        "x"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Sub",
                        "y"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Sub",
                        "degree_multiple"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Sub" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "x" |) |) |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |));
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "y" |) |) |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |));
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "degree_multiple" |) |)
                          |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_2 |) |)
                            |))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Neg",
                        "x"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Neg",
                        "degree_multiple"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field2_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Neg" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "x" |) |) |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |));
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "degree_multiple" |) |)
                          |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_1 |) |)
                            |))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Mul",
                        "x"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Mul",
                        "y"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Mul",
                        "degree_multiple"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Mul" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "x" |) |) |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |));
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "y" |) |) |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |));
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "degree_multiple" |) |)
                          |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_2 |) |)
                            |))
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*
        pub const fn degree_multiple(&self) -> usize {
            match self {
                Self::Variable(v) => v.degree_multiple(),
                Self::IsFirstRow | Self::IsLastRow => 1,
                Self::IsTransition | Self::Constant(_) => 0,
                Self::Add {
                    degree_multiple, ..
                }
                | Self::Sub {
                    degree_multiple, ..
                }
                | Self::Neg {
                    degree_multiple, ..
                }
                | Self::Mul {
                    degree_multiple, ..
                } => *degree_multiple,
            }
        }
    *)
    Definition degree_multiple
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Variable",
                        0
                      |) in
                    let v := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "p3_uni_stark::symbolic_variable::SymbolicVariable")
                            []
                            [ F ],
                          "degree_multiple",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| v |) |) |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.find_or_pattern (Ty.tuple []) (|
                      γ,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "p3_uni_stark::symbolic_expression::SymbolicExpression::IsFirstRow"
                              |) in
                            Value.Tuple []));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "p3_uni_stark::symbolic_expression::SymbolicExpression::IsLastRow"
                              |) in
                            Value.Tuple []))
                      ],
                      fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [] => ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 1 |)))
                          | _ => M.impossible "wrong number of arguments"
                          end)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.find_or_pattern (Ty.tuple []) (|
                      γ,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "p3_uni_stark::symbolic_expression::SymbolicExpression::IsTransition"
                              |) in
                            Value.Tuple []));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant",
                                0
                              |) in
                            Value.Tuple []))
                      ],
                      fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [] => ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 0 |)))
                          | _ => M.impossible "wrong number of arguments"
                          end)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.find_or_pattern
                      (Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]) (|
                      γ,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "p3_uni_stark::symbolic_expression::SymbolicExpression::Add",
                                "degree_multiple"
                              |) in
                            let degree_multiple := M.alloc (| γ1_0 |) in
                            Value.Tuple [ degree_multiple ]));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "p3_uni_stark::symbolic_expression::SymbolicExpression::Sub",
                                "degree_multiple"
                              |) in
                            let degree_multiple := M.alloc (| γ1_0 |) in
                            Value.Tuple [ degree_multiple ]));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "p3_uni_stark::symbolic_expression::SymbolicExpression::Neg",
                                "degree_multiple"
                              |) in
                            let degree_multiple := M.alloc (| γ1_0 |) in
                            Value.Tuple [ degree_multiple ]));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "p3_uni_stark::symbolic_expression::SymbolicExpression::Mul",
                                "degree_multiple"
                              |) in
                            let degree_multiple := M.alloc (| γ1_0 |) in
                            Value.Tuple [ degree_multiple ]))
                      ],
                      fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ degree_multiple ] =>
                            ltac:(M.monadic (M.deref (| M.read (| degree_multiple |) |)))
                          | _ => M.impossible "wrong number of arguments"
                          end)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_degree_multiple :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "degree_multiple" (degree_multiple F).
    Admitted.
    Global Typeclasses Opaque degree_multiple.
  End Impl_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_core_default_Default_where_p3_field_field_Field_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*
        fn default() -> Self {
            Self::Constant(F::ZERO)
        }
    *)
    Definition default (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructTuple
            "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant"
            [ M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", F |) |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("default", InstanceField.Method (default F)) ].
  End Impl_core_default_Default_where_p3_field_field_Field_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_core_convert_From_where_p3_field_field_Field_F_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*
        fn from(value: F) -> Self {
            Self::Constant(value)
        }
    *)
    Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructTuple
            "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant"
            [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_p3_field_field_Field_F_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_p3_field_field_PrimeCharacteristicRing_where_p3_field_field_Field_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*     type PrimeSubfield = F::PrimeSubfield; *)
    Definition _PrimeSubfield (F : Ty.t) : Ty.t :=
      Ty.associated_in_trait "p3_field::field::PrimeCharacteristicRing" [] [] F "PrimeSubfield".
    
    (*     const ZERO: Self = Self::Constant(F::ZERO); *)
    (* Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ] *)
    Definition value_ZERO (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      ltac:(M.monadic
        (M.alloc (|
          Value.StructTuple
            "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant"
            [ M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", F |) |) ]
        |))).
    
    (*     const ONE: Self = Self::Constant(F::ONE); *)
    (* Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ] *)
    Definition value_ONE (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      ltac:(M.monadic
        (M.alloc (|
          Value.StructTuple
            "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant"
            [ M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", F |) |) ]
        |))).
    
    (*     const TWO: Self = Self::Constant(F::TWO); *)
    (* Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ] *)
    Definition value_TWO (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      ltac:(M.monadic
        (M.alloc (|
          Value.StructTuple
            "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant"
            [ M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::TWO", F |) |) ]
        |))).
    
    (*     const NEG_ONE: Self = Self::Constant(F::NEG_ONE); *)
    (* Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ] *)
    Definition value_NEG_ONE (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      ltac:(M.monadic
        (M.alloc (|
          Value.StructTuple
            "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant"
            [ M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::NEG_ONE", F |) |)
            ]
        |))).
    
    (*
        fn from_prime_subfield(f: Self::PrimeSubfield) -> Self {
            F::from_prime_subfield(f).into()
        }
    *)
    Definition from_prime_subfield
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ f ] =>
        ltac:(M.monadic
          (let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ],
            M.get_trait_method (|
              "core::convert::Into",
              F,
              [],
              [ Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ]
              ],
              "into",
              [],
              []
            |),
            [
              M.call_closure (|
                F,
                M.get_trait_method (|
                  "p3_field::field::PrimeCharacteristicRing",
                  F,
                  [],
                  [],
                  "from_prime_subfield",
                  [],
                  []
                |),
                [ M.read (| f |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "p3_field::field::PrimeCharacteristicRing"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [
          ("PrimeSubfield", InstanceField.Ty (_PrimeSubfield F));
          ("value_ZERO", InstanceField.Method (value_ZERO F));
          ("value_ONE", InstanceField.Method (value_ONE F));
          ("value_TWO", InstanceField.Method (value_TWO F));
          ("value_NEG_ONE", InstanceField.Method (value_NEG_ONE F));
          ("from_prime_subfield", InstanceField.Method (from_prime_subfield F))
        ].
  End Impl_p3_field_field_PrimeCharacteristicRing_where_p3_field_field_Field_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_p3_field_field_Algebra_where_p3_field_field_Field_F_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "p3_field::field::Algebra"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *) [].
  End Impl_p3_field_field_Algebra_where_p3_field_field_Field_F_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_p3_field_field_Algebra_where_p3_field_field_Field_F_p3_uni_stark_symbolic_variable_SymbolicVariable_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "p3_field::field::Algebra"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_uni_stark::symbolic_variable::SymbolicVariable") [] [ F ] ]
        (Self F)
        (* Instance *) [].
  End Impl_p3_field_field_Algebra_where_p3_field_field_Field_F_p3_uni_stark_symbolic_variable_SymbolicVariable_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_p3_field_field_InjectiveMonomial_where_p3_field_field_Field_F_where_p3_field_field_InjectiveMonomial_F_N_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (N : Value.t) (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    Axiom Implements :
      forall (N : Value.t) (F : Ty.t),
      M.IsTraitInstance
        "p3_field::field::InjectiveMonomial"
        (* Trait polymorphic consts *) [ N ]
        (* Trait polymorphic types *) []
        (Self N F)
        (* Instance *) [].
  End Impl_p3_field_field_InjectiveMonomial_where_p3_field_field_Field_F_where_p3_field_field_InjectiveMonomial_F_N_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_core_ops_arith_Add_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*     type Output = Self; *)
    Definition _Output (F T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*
        fn add(self, rhs: T) -> Self {
            match (self, rhs.into()) {
                (Self::Constant(lhs), Self::Constant(rhs)) => Self::Constant(lhs + rhs),
                (lhs, rhs) => Self::Add {
                    degree_multiple: lhs.degree_multiple().max(rhs.degree_multiple()),
                    x: Rc::new(lhs),
                    y: Rc::new(rhs),
                },
            }
        }
    *)
    Definition add (F T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F T in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                    []
                    [ F ]
                ],
              M.alloc (|
                Value.Tuple
                  [
                    M.read (| self |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      M.get_trait_method (|
                        "core::convert::Into",
                        T,
                        [],
                        [
                          Ty.apply
                            (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                            []
                            [ F ]
                        ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| rhs |) ]
                    |)
                  ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_0,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant",
                        0
                      |) in
                    let lhs := M.copy (| γ1_0 |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_1,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant",
                        0
                      |) in
                    let rhs := M.copy (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant"
                        [
                          M.call_closure (|
                            F,
                            M.get_trait_method (|
                              "core::ops::arith::Add",
                              F,
                              [],
                              [ F ],
                              "add",
                              [],
                              []
                            |),
                            [ M.read (| lhs |); M.read (| rhs |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let lhs := M.copy (| γ0_0 |) in
                    let rhs := M.copy (| γ0_1 |) in
                    M.alloc (|
                      Value.StructRecord
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Add"
                        [
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::cmp::Ord",
                                Ty.path "usize",
                                [],
                                [],
                                "max",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ],
                                    "degree_multiple",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, lhs |) ]
                                |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ],
                                    "degree_multiple",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
                                |)
                              ]
                            |));
                          ("x",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [ M.read (| lhs |) ]
                            |));
                          ("y",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [ M.read (| rhs |) ]
                            |))
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F T : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Add"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self F T)
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output F T)); ("add", InstanceField.Method (add F T)) ].
  End Impl_core_ops_arith_Add_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_core_ops_arith_AddAssign_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*
        fn add_assign(&mut self, rhs: T) {
            *self = self.clone() + rhs.into();
        }
    *)
    Definition add_assign (F T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F T in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                          []
                          [ F ]
                      ],
                      "add",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                          []
                          [ F ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                          []
                          [ F ],
                        M.get_trait_method (|
                          "core::convert::Into",
                          T,
                          [],
                          [
                            Ty.apply
                              (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ],
                          "into",
                          [],
                          []
                        |),
                        [ M.read (| rhs |) ]
                      |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F T : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::AddAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self F T)
        (* Instance *) [ ("add_assign", InstanceField.Method (add_assign F T)) ].
  End Impl_core_ops_arith_AddAssign_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_core_iter_traits_accum_Sum_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*
        fn sum<I: Iterator<Item = T>>(iter: I) -> Self {
            iter.map(Into::into)
                .reduce(|x, y| x + y)
                .unwrap_or(Self::ZERO)
        }
    *)
    Definition sum (F T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F T in
      match ε, τ, α with
      | [], [ _ as I ], [ iter ] =>
        ltac:(M.monadic
          (let iter := M.alloc (| iter |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                    []
                    [ F ]
                ],
              "unwrap_or",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      I;
                      Ty.function
                        [ T ]
                        (Ty.apply
                          (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                          []
                          [ F ])
                    ],
                  [],
                  [],
                  "reduce",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                              []
                              [ F ];
                            Ty.apply
                              (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ]
                      ]
                      (Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ])
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        I;
                        Ty.function
                          [ T ]
                          (Ty.apply
                            (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                            []
                            [ F ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      I,
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply
                          (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                          []
                          [ F ];
                        Ty.function
                          [ T ]
                          (Ty.apply
                            (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                            []
                            [ F ])
                      ]
                    |),
                    [
                      M.read (| iter |);
                      M.get_trait_method (|
                        "core::convert::Into",
                        T,
                        [],
                        [
                          Ty.apply
                            (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                            []
                            [ F ]
                        ],
                        "into",
                        [],
                        []
                      |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0; α1 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path
                                                "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                              []
                                              [ F ])
                                        ],
                                      M.alloc (| α1 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let y := M.copy (| γ |) in
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path
                                                  "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ],
                                              M.get_trait_method (|
                                                "core::ops::arith::Add",
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ]
                                                ],
                                                "add",
                                                [],
                                                []
                                              |),
                                              [ M.read (| x |); M.read (| y |) ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |);
              M.read (|
                get_constant (|
                  "p3_field::field::PrimeCharacteristicRing::ZERO",
                  Ty.apply
                    (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                    []
                    [ F ]
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F T : Ty.t),
      M.IsTraitInstance
        "core::iter::traits::accum::Sum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self F T)
        (* Instance *) [ ("sum", InstanceField.Method (sum F T)) ].
  End Impl_core_iter_traits_accum_Sum_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*     type Output = Self; *)
    Definition _Output (F T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*
        fn sub(self, rhs: T) -> Self {
            match (self, rhs.into()) {
                (Self::Constant(lhs), Self::Constant(rhs)) => Self::Constant(lhs - rhs),
                (lhs, rhs) => Self::Sub {
                    degree_multiple: lhs.degree_multiple().max(rhs.degree_multiple()),
                    x: Rc::new(lhs),
                    y: Rc::new(rhs),
                },
            }
        }
    *)
    Definition sub (F T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F T in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                    []
                    [ F ]
                ],
              M.alloc (|
                Value.Tuple
                  [
                    M.read (| self |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      M.get_trait_method (|
                        "core::convert::Into",
                        T,
                        [],
                        [
                          Ty.apply
                            (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                            []
                            [ F ]
                        ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| rhs |) ]
                    |)
                  ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_0,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant",
                        0
                      |) in
                    let lhs := M.copy (| γ1_0 |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_1,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant",
                        0
                      |) in
                    let rhs := M.copy (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant"
                        [
                          M.call_closure (|
                            F,
                            M.get_trait_method (|
                              "core::ops::arith::Sub",
                              F,
                              [],
                              [ F ],
                              "sub",
                              [],
                              []
                            |),
                            [ M.read (| lhs |); M.read (| rhs |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let lhs := M.copy (| γ0_0 |) in
                    let rhs := M.copy (| γ0_1 |) in
                    M.alloc (|
                      Value.StructRecord
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Sub"
                        [
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::cmp::Ord",
                                Ty.path "usize",
                                [],
                                [],
                                "max",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ],
                                    "degree_multiple",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, lhs |) ]
                                |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ],
                                    "degree_multiple",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
                                |)
                              ]
                            |));
                          ("x",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [ M.read (| lhs |) ]
                            |));
                          ("y",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [ M.read (| rhs |) ]
                            |))
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F T : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Sub"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self F T)
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output F T)); ("sub", InstanceField.Method (sub F T)) ].
  End Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_core_ops_arith_SubAssign_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*
        fn sub_assign(&mut self, rhs: T) {
            *self = self.clone() - rhs.into();
        }
    *)
    Definition sub_assign (F T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F T in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::ops::arith::Sub",
                      Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                          []
                          [ F ]
                      ],
                      "sub",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                          []
                          [ F ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                          []
                          [ F ],
                        M.get_trait_method (|
                          "core::convert::Into",
                          T,
                          [],
                          [
                            Ty.apply
                              (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ],
                          "into",
                          [],
                          []
                        |),
                        [ M.read (| rhs |) ]
                      |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F T : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::SubAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self F T)
        (* Instance *) [ ("sub_assign", InstanceField.Method (sub_assign F T)) ].
  End Impl_core_ops_arith_SubAssign_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_core_ops_arith_Neg_where_p3_field_field_Field_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*     type Output = Self; *)
    Definition _Output (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*
        fn neg(self) -> Self {
            match self {
                Self::Constant(c) => Self::Constant(-c),
                expr => Self::Neg {
                    degree_multiple: expr.degree_multiple(),
                    x: Rc::new(expr),
                },
            }
        }
    *)
    Definition neg (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                    []
                    [ F ]
                ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant",
                        0
                      |) in
                    let c := M.copy (| γ0_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant"
                        [
                          M.call_closure (|
                            F,
                            M.get_trait_method (|
                              "core::ops::arith::Neg",
                              F,
                              [],
                              [],
                              "neg",
                              [],
                              []
                            |),
                            [ M.read (| c |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let expr := M.copy (| γ |) in
                    M.alloc (|
                      Value.StructRecord
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Neg"
                        [
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                  []
                                  [ F ],
                                "degree_multiple",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, expr |) ]
                            |));
                          ("x",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [ M.read (| expr |) ]
                            |))
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Neg"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output F)); ("neg", InstanceField.Method (neg F)) ].
  End Impl_core_ops_arith_Neg_where_p3_field_field_Field_F_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*     type Output = Self; *)
    Definition _Output (F T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*
        fn mul(self, rhs: T) -> Self {
            match (self, rhs.into()) {
                (Self::Constant(lhs), Self::Constant(rhs)) => Self::Constant(lhs * rhs),
                (lhs, rhs) => Self::Mul {
                    degree_multiple: lhs.degree_multiple() + rhs.degree_multiple(),
                    x: Rc::new(lhs),
                    y: Rc::new(rhs),
                },
            }
        }
    *)
    Definition mul (F T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F T in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                    []
                    [ F ]
                ],
              M.alloc (|
                Value.Tuple
                  [
                    M.read (| self |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      M.get_trait_method (|
                        "core::convert::Into",
                        T,
                        [],
                        [
                          Ty.apply
                            (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                            []
                            [ F ]
                        ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| rhs |) ]
                    |)
                  ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_0,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant",
                        0
                      |) in
                    let lhs := M.copy (| γ1_0 |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_1,
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant",
                        0
                      |) in
                    let rhs := M.copy (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Constant"
                        [
                          M.call_closure (|
                            F,
                            M.get_trait_method (|
                              "core::ops::arith::Mul",
                              F,
                              [],
                              [ F ],
                              "mul",
                              [],
                              []
                            |),
                            [ M.read (| lhs |); M.read (| rhs |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let lhs := M.copy (| γ0_0 |) in
                    let rhs := M.copy (| γ0_1 |) in
                    M.alloc (|
                      Value.StructRecord
                        "p3_uni_stark::symbolic_expression::SymbolicExpression::Mul"
                        [
                          ("degree_multiple",
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.add,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ],
                                    "degree_multiple",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, lhs |) ]
                                |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ],
                                    "degree_multiple",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
                                |)
                              ]
                            |));
                          ("x",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [ M.read (| lhs |) ]
                            |));
                          ("y",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [ M.read (| rhs |) ]
                            |))
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F T : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Mul"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self F T)
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output F T)); ("mul", InstanceField.Method (mul F T)) ].
  End Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_core_ops_arith_MulAssign_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*
        fn mul_assign(&mut self, rhs: T) {
            *self = self.clone() * rhs.into();
        }
    *)
    Definition mul_assign (F T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F T in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                      []
                      [ F ],
                    M.get_trait_method (|
                      "core::ops::arith::Mul",
                      Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                          []
                          [ F ]
                      ],
                      "mul",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                          []
                          [ F ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                            []
                            [ F ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                          []
                          [ F ],
                        M.get_trait_method (|
                          "core::convert::Into",
                          T,
                          [],
                          [
                            Ty.apply
                              (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ],
                          "into",
                          [],
                          []
                        |),
                        [ M.read (| rhs |) ]
                      |)
                    ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F T : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::MulAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self F T)
        (* Instance *) [ ("mul_assign", InstanceField.Method (mul_assign F T)) ].
  End Impl_core_ops_arith_MulAssign_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
  
  Module Impl_core_iter_traits_accum_Product_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
    Definition Self (F T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ].
    
    (*
        fn product<I: Iterator<Item = T>>(iter: I) -> Self {
            iter.map(Into::into)
                .reduce(|x, y| x * y)
                .unwrap_or(Self::ONE)
        }
    *)
    Definition product (F T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F T in
      match ε, τ, α with
      | [], [ _ as I ], [ iter ] =>
        ltac:(M.monadic
          (let iter := M.alloc (| iter |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression") [] [ F ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                    []
                    [ F ]
                ],
              "unwrap_or",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                      []
                      [ F ]
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      I;
                      Ty.function
                        [ T ]
                        (Ty.apply
                          (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                          []
                          [ F ])
                    ],
                  [],
                  [],
                  "reduce",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                              []
                              [ F ];
                            Ty.apply
                              (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                              []
                              [ F ]
                          ]
                      ]
                      (Ty.apply
                        (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                        []
                        [ F ])
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        I;
                        Ty.function
                          [ T ]
                          (Ty.apply
                            (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                            []
                            [ F ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      I,
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply
                          (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                          []
                          [ F ];
                        Ty.function
                          [ T ]
                          (Ty.apply
                            (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                            []
                            [ F ])
                      ]
                    |),
                    [
                      M.read (| iter |);
                      M.get_trait_method (|
                        "core::convert::Into",
                        T,
                        [],
                        [
                          Ty.apply
                            (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                            []
                            [ F ]
                        ],
                        "into",
                        [],
                        []
                      |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0; α1 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                            []
                                            [ F ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path
                                        "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                      []
                                      [ F ])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path
                                                "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                              []
                                              [ F ])
                                        ],
                                      M.alloc (| α1 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let y := M.copy (| γ |) in
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path
                                                  "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                                []
                                                [ F ],
                                              M.get_trait_method (|
                                                "core::ops::arith::Mul",
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                                  []
                                                  [ F ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_uni_stark::symbolic_expression::SymbolicExpression")
                                                    []
                                                    [ F ]
                                                ],
                                                "mul",
                                                [],
                                                []
                                              |),
                                              [ M.read (| x |); M.read (| y |) ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |);
              M.read (|
                get_constant (|
                  "p3_field::field::PrimeCharacteristicRing::ONE",
                  Ty.apply
                    (Ty.path "p3_uni_stark::symbolic_expression::SymbolicExpression")
                    []
                    [ F ]
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F T : Ty.t),
      M.IsTraitInstance
        "core::iter::traits::accum::Product"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self F T)
        (* Instance *) [ ("product", InstanceField.Method (product F T)) ].
  End Impl_core_iter_traits_accum_Product_where_p3_field_field_Field_F_where_core_convert_Into_T_p3_uni_stark_symbolic_expression_SymbolicExpression_F_T_for_p3_uni_stark_symbolic_expression_SymbolicExpression_F.
End symbolic_expression.
