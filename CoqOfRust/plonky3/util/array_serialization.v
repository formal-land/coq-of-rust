(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module array_serialization.
  (*
  pub fn serialize<S: Serializer, T: Serialize, const N: usize>(
      data: &[T; N],
      ser: S,
  ) -> Result<S::Ok, S::Error> {
      let mut s = ser.serialize_tuple(N)?;
      for item in data {
          s.serialize_element(item)?;
      }
      s.end()
  }
  *)
  Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ _ as S; T ], [ data; ser ] =>
      ltac:(M.monadic
        (let data := M.alloc (| data |) in
        let ser := M.alloc (| ser |) in
        M.catch_return
          (Ty.apply
            (Ty.path "core::result::Result")
            []
            [
              Ty.associated_in_trait "serde::ser::Serializer" [] [] S "Ok";
              Ty.associated_in_trait "serde::ser::Serializer" [] [] S "Error"
            ]) (|
          ltac:(M.monadic
            (M.read (|
              let~ s :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.associated_in_trait "serde::ser::Serializer" [] [] S "SerializeTuple" ] :=
                M.copy (|
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.associated_in_trait "serde::ser::Serializer" [] [] S "SerializeTuple" ],
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] S "Error"
                              ];
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] S "SerializeTuple"
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                S
                                "SerializeTuple";
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] S "Error"
                            ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  S
                                  "SerializeTuple";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] S "Error"
                              ],
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              S,
                              [],
                              [],
                              "serialize_tuple",
                              [],
                              []
                            |),
                            [ M.read (| ser |); N ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.use
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ N ] [ T ] ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [ M.read (| data |) ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            ltac:(M.monadic
                              (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ T ] ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let item := M.copy (| γ0_0 |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          S
                                                          "Error"
                                                      ];
                                                    Ty.tuple []
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [],
                                                  "branch",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.tuple [];
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          S
                                                          "Error"
                                                      ],
                                                    M.get_trait_method (|
                                                      "serde::ser::SerializeTuple",
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        S
                                                        "SerializeTuple",
                                                      [],
                                                      [],
                                                      "serialize_element",
                                                      [],
                                                      [ T ]
                                                    |),
                                                    [
                                                      M.borrow (| Pointer.Kind.MutRef, s |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| item |) |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "serde::ser::Serializer"
                                                                  []
                                                                  []
                                                                  S
                                                                  "Ok";
                                                                Ty.associated_in_trait
                                                                  "serde::ser::Serializer"
                                                                  []
                                                                  []
                                                                  S
                                                                  "Error"
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "serde::ser::Serializer"
                                                                    []
                                                                    []
                                                                    S
                                                                    "Ok";
                                                                  Ty.associated_in_trait
                                                                    "serde::ser::Serializer"
                                                                    []
                                                                    []
                                                                    S
                                                                    "Error"
                                                                ],
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.associated_in_trait
                                                                      "serde::ser::Serializer"
                                                                      []
                                                                      []
                                                                      S
                                                                      "Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] S "Error"
                    ],
                  M.get_trait_method (|
                    "serde::ser::SerializeTuple",
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] S "SerializeTuple",
                    [],
                    [],
                    "end",
                    [],
                    []
                  |),
                  [ M.read (| s |) ]
                |)
              |)
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_serialize :
    M.IsFunction.C "p3_util::array_serialization::serialize" serialize.
  Admitted.
  Global Typeclasses Opaque serialize.
  
  (* StructTuple
    {
      name := "ArrayVisitor";
      const_params := [ "N" ];
      ty_params := [ "T" ];
      fields := [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ T ] ];
    } *)
  
  Module Impl_serde_de_Visitor_where_serde_de_Deserialize_T_for_p3_util_array_serialization_ArrayVisitor_N_T.
    Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_util::array_serialization::ArrayVisitor") [ N ] [ T ].
    
    (*     type Value = [T; N]; *)
    Definition _Value (N : Value.t) (T : Ty.t) : Ty.t := Ty.apply (Ty.path "array") [ N ] [ T ].
    
    (*
        fn expecting(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            formatter.write_fmt(format_args!("an array of length {}", N))
        }
    *)
    Definition expecting
        (N : Value.t)
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N T in
      match ε, τ, α with
      | [], [], [ self; formatter ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let formatter := M.alloc (| formatter |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_fmt", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| formatter |) |) |);
              M.call_closure (|
                Ty.path "core::fmt::Arguments",
                M.get_associated_function (|
                  Ty.path "core::fmt::Arguments",
                  "new_v1",
                  [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 1 ],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (| Value.Array [ mk_str (| "an array of length " |) ] |)
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Value.Array
                            [
                              M.call_closure (|
                                Ty.path "core::fmt::rt::Argument",
                                M.get_associated_function (|
                                  Ty.path "core::fmt::rt::Argument",
                                  "new_display",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.borrow (| Pointer.Kind.Ref, M.alloc (| N |) |) |)
                                  |)
                                ]
                              |)
                            ]
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
        where
            A: SeqAccess<'de>,
        {
            let mut data = Vec::with_capacity(N);
            for _ in 0..N {
                match seq.next_element()? {
                    Some(val) => data.push(val),
                    None => return Err(serde::de::Error::invalid_length(N, &self)),
                }
            }
            match data.try_into() {
                Ok(arr) => Ok(arr),
                Err(_) => unreachable!(),
            }
        }
    *)
    Definition visit_seq
        (N : Value.t)
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N T in
      match ε, τ, α with
      | [], [ A ], [ self; seq ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let seq := M.alloc (| seq |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.associated_in_trait
                  "serde::de::Visitor"
                  []
                  []
                  (Ty.apply (Ty.path "p3_util::array_serialization::ArrayVisitor") [ N ] [ T ])
                  "Value";
                Ty.associated_in_trait "serde::de::SeqAccess" [] [] A "Error"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ data :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ]
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ],
                        "with_capacity",
                        [],
                        []
                      |),
                      [ N ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.use
                    (M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              []
                              [ Ty.path "usize" ]
                              [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", N) ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              ltac:(M.monadic
                                (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.match_operator (|
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.apply (Ty.path "core::option::Option") [] [ T ]
                                                ],
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.associated_in_trait
                                                            "serde::de::SeqAccess"
                                                            []
                                                            []
                                                            A
                                                            "Error"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ T ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ T ];
                                                        Ty.associated_in_trait
                                                          "serde::de::SeqAccess"
                                                          []
                                                          []
                                                          A
                                                          "Error"
                                                      ],
                                                    [],
                                                    [],
                                                    "branch",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ T ];
                                                          Ty.associated_in_trait
                                                            "serde::de::SeqAccess"
                                                            []
                                                            []
                                                            A
                                                            "Error"
                                                        ],
                                                      M.get_trait_method (|
                                                        "serde::de::SeqAccess",
                                                        A,
                                                        [],
                                                        [],
                                                        "next_element",
                                                        [],
                                                        [ T ]
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.MutRef, seq |) ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [ N ]
                                                                    [ T ];
                                                                  Ty.associated_in_trait
                                                                    "serde::de::SeqAccess"
                                                                    []
                                                                    []
                                                                    A
                                                                    "Error"
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [ N ]
                                                                      [ T ];
                                                                    Ty.associated_in_trait
                                                                      "serde::de::SeqAccess"
                                                                      []
                                                                      []
                                                                      A
                                                                      "Error"
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.associated_in_trait
                                                                        "serde::de::SeqAccess"
                                                                        []
                                                                        []
                                                                        A
                                                                        "Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                [],
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ T; Ty.path "alloc::alloc::Global" ],
                                                        "push",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, data |);
                                                        M.read (| val |)
                                                      ]
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          Value.StructTuple
                                                            "core::result::Result::Err"
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ N ]
                                                                [ T ];
                                                              Ty.associated_in_trait
                                                                "serde::de::SeqAccess"
                                                                []
                                                                []
                                                                A
                                                                "Error"
                                                            ]
                                                            [
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "serde::de::SeqAccess"
                                                                  []
                                                                  []
                                                                  A
                                                                  "Error",
                                                                M.get_trait_method (|
                                                                  "serde::de::Error",
                                                                  Ty.associated_in_trait
                                                                    "serde::de::SeqAccess"
                                                                    []
                                                                    []
                                                                    A
                                                                    "Error",
                                                                  [],
                                                                  [],
                                                                  "invalid_length",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  N;
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          self
                                                                        |)
                                                                      |)
                                                                    |))
                                                                ]
                                                              |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)))
                                            ]
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.match_operator (|
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply (Ty.path "array") [ N ] [ T ];
                          Ty.associated_in_trait "serde::de::SeqAccess" [] [] A "Error"
                        ]
                    ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply (Ty.path "array") [ N ] [ T ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_trait_method (|
                        "core::convert::TryInto",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ],
                        [],
                        [ Ty.apply (Ty.path "array") [ N ] [ T ] ],
                        "try_into",
                        [],
                        []
                      |),
                      [ M.read (| data |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::result::Result::Ok",
                            0
                          |) in
                        let arr := M.copy (| γ0_0 |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            []
                            [
                              Ty.apply (Ty.path "array") [ N ] [ T ];
                              Ty.associated_in_trait "serde::de::SeqAccess" [] [] A "Error"
                            ]
                            [ M.read (| arr |) ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::result::Result::Err",
                            0
                          |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [ mk_str (| "internal error: entered unreachable code" |) ]
                            |)
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N : Value.t) (T : Ty.t),
      M.IsTraitInstance
        "serde::de::Visitor"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self N T)
        (* Instance *)
        [
          ("Value", InstanceField.Ty (_Value N T));
          ("expecting", InstanceField.Method (expecting N T));
          ("visit_seq", InstanceField.Method (visit_seq N T))
        ].
  End Impl_serde_de_Visitor_where_serde_de_Deserialize_T_for_p3_util_array_serialization_ArrayVisitor_N_T.
  
  (*
  pub fn deserialize<'de, D, T, const N: usize>(deserializer: D) -> Result<[T; N], D::Error>
  where
      D: Deserializer<'de>,
      T: Deserialize<'de>,
  {
      deserializer.deserialize_tuple(N, ArrayVisitor::<T, N>(PhantomData))
  }
  *)
  Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ D; T ], [ deserializer ] =>
      ltac:(M.monadic
        (let deserializer := M.alloc (| deserializer |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "core::result::Result")
            []
            [
              Ty.apply (Ty.path "array") [ N ] [ T ];
              Ty.associated_in_trait "serde::de::Deserializer" [] [] D "Error"
            ],
          M.get_trait_method (|
            "serde::de::Deserializer",
            D,
            [],
            [],
            "deserialize_tuple",
            [],
            [ Ty.apply (Ty.path "p3_util::array_serialization::ArrayVisitor") [ N ] [ T ] ]
          |),
          [
            M.read (| deserializer |);
            N;
            Value.StructTuple
              "p3_util::array_serialization::ArrayVisitor"
              [ N ]
              [ T ]
              [ Value.StructTuple "core::marker::PhantomData" [] [ T ] [] ]
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_deserialize :
    M.IsFunction.C "p3_util::array_serialization::deserialize" deserialize.
  Admitted.
  Global Typeclasses Opaque deserialize.
End array_serialization.
