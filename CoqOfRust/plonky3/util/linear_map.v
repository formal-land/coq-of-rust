(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module linear_map.
  (* StructTuple
    {
      name := "LinearMap";
      const_params := [];
      ty_params := [ "K"; "V" ];
      fields :=
        [
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            []
            [ Ty.tuple [ K; V ]; Ty.path "alloc::alloc::Global" ]
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_K_where_core_fmt_Debug_V_for_p3_util_linear_map_LinearMap_K_V.
    Definition Self (K V : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_util::linear_map::LinearMap") [] [ K; V ].
    
    (* Debug *)
    Definition fmt (K V : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self K V in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_tuple_field1_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "LinearMap" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_tuple_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_util::linear_map::LinearMap",
                            0
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (K V : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self K V)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt K V)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_K_where_core_fmt_Debug_V_for_p3_util_linear_map_LinearMap_K_V.
  
  Module Impl_core_default_Default_for_p3_util_linear_map_LinearMap_K_V.
    Definition Self (K V : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_util::linear_map::LinearMap") [] [ K; V ].
    
    (*
        fn default() -> Self {
            Self(Default::default())
        }
    *)
    Definition default (K V : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self K V in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructTuple
            "p3_util::linear_map::LinearMap"
            []
            [ K; V ]
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.tuple [ K; V ]; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::default::Default",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.tuple [ K; V ]; Ty.path "alloc::alloc::Global" ],
                  [],
                  [],
                  "default",
                  [],
                  []
                |),
                []
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (K V : Ty.t),
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self K V)
        (* Instance *) [ ("default", InstanceField.Method (default K V)) ].
  End Impl_core_default_Default_for_p3_util_linear_map_LinearMap_K_V.
  
  Module Impl_p3_util_linear_map_LinearMap_K_V.
    Definition Self (K V : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_util::linear_map::LinearMap") [] [ K; V ].
    
    (*
        pub fn new() -> Self {
            Default::default()
        }
    *)
    Definition new (K V : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self K V in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.call_closure (|
            Ty.apply (Ty.path "p3_util::linear_map::LinearMap") [] [ K; V ],
            M.get_trait_method (|
              "core::default::Default",
              Ty.apply (Ty.path "p3_util::linear_map::LinearMap") [] [ K; V ],
              [],
              [],
              "default",
              [],
              []
            |),
            []
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (K V : Ty.t),
      M.IsAssociatedFunction.C (Self K V) "new" (new K V).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn get(&self, k: &K) -> Option<&V> {
            self.0.iter().find(|(kk, _)| kk == k).map(|(_, v)| v)
        }
    *)
    Definition get (K V : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self K V in
      match ε, τ, α with
      | [], [], [ self; k ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let k := M.alloc (| k |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.apply (Ty.path "&") [] [ V ] ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "&") [] [ Ty.tuple [ K; V ] ] ],
              "map",
              [],
              [
                Ty.apply (Ty.path "&") [] [ V ];
                Ty.function
                  [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.tuple [ K; V ] ] ] ]
                  (Ty.apply (Ty.path "&") [] [ V ])
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.tuple [ K; V ] ] ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.tuple [ K; V ] ],
                  [],
                  [],
                  "find",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.tuple [ K; V ] ] ]
                          ]
                      ]
                      (Ty.path "bool")
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.tuple [ K; V ] ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.tuple [ K; V ] ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.tuple [ K; V ] ] ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.tuple [ K; V ]; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_tuple_field (|
                                      M.deref (| M.read (| self |) |),
                                      "p3_util::linear_map::LinearMap",
                                      0
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [ K; V ] ] ]
                                        ]
                                    ]
                                    (Ty.path "bool")
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.read (| γ |) in
                                    let γ := M.read (| γ |) in
                                    let γ2_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ2_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let kk := M.alloc (| γ2_0 |) in
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply (Ty.path "&") [] [ K ],
                                        [],
                                        [ Ty.apply (Ty.path "&") [] [ K ] ],
                                        "eq",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, kk |);
                                        M.borrow (| Pointer.Kind.Ref, k |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.tuple [ K; V ] ] ] ]
                                (Ty.apply (Ty.path "&") [] [ V ])
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.read (| γ |) in
                                let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let v := M.alloc (| γ1_1 |) in
                                M.read (| v |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_get :
      forall (K V : Ty.t),
      M.IsAssociatedFunction.C (Self K V) "get" (get K V).
    Admitted.
    Global Typeclasses Opaque get.
    
    (*
        pub fn get_mut(&mut self, k: &K) -> Option<&mut V> {
            self.0.iter_mut().find(|(kk, _)| kk == k).map(|(_, v)| v)
        }
    *)
    Definition get_mut (K V : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self K V in
      match ε, τ, α with
      | [], [], [ self; k ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let k := M.alloc (| k |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.apply (Ty.path "&mut") [] [ V ] ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "&mut") [] [ Ty.tuple [ K; V ] ] ],
              "map",
              [],
              [
                Ty.apply (Ty.path "&mut") [] [ V ];
                Ty.function
                  [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ Ty.tuple [ K; V ] ] ] ]
                  (Ty.apply (Ty.path "&mut") [] [ V ])
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "&mut") [] [ Ty.tuple [ K; V ] ] ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.tuple [ K; V ] ],
                  [],
                  [],
                  "find",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "&mut") [] [ Ty.tuple [ K; V ] ] ]
                          ]
                      ]
                      (Ty.path "bool")
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.tuple [ K; V ] ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.tuple [ K; V ] ],
                          "iter_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.tuple [ K; V ] ] ],
                                M.get_trait_method (|
                                  "core::ops::deref::DerefMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.tuple [ K; V ]; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [],
                                  "deref_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_tuple_field (|
                                      M.deref (| M.read (| self |) |),
                                      "p3_util::linear_map::LinearMap",
                                      0
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "&mut") [] [ Ty.tuple [ K; V ] ] ]
                                        ]
                                    ]
                                    (Ty.path "bool")
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.read (| γ |) in
                                    let γ := M.read (| γ |) in
                                    let γ2_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ2_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let kk := M.alloc (| γ2_0 |) in
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply (Ty.path "&") [] [ K ],
                                        [],
                                        [ Ty.apply (Ty.path "&") [] [ K ] ],
                                        "eq",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, kk |);
                                        M.borrow (| Pointer.Kind.Ref, k |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ Ty.tuple [ K; V ] ] ] ]
                                (Ty.apply (Ty.path "&mut") [] [ V ])
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.read (| γ |) in
                                let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let v := M.alloc (| γ1_1 |) in
                                M.read (| v |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_get_mut :
      forall (K V : Ty.t),
      M.IsAssociatedFunction.C (Self K V) "get_mut" (get_mut K V).
    Admitted.
    Global Typeclasses Opaque get_mut.
    
    (*
        pub fn insert(&mut self, k: K, mut v: V) -> Option<V> {
            if let Some(vv) = self.get_mut(&k) {
                mem::swap(&mut v, vv);
                Some(v)
            } else {
                self.0.push((k, v));
                None
            }
        }
    *)
    Definition insert (K V : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self K V in
      match ε, τ, α with
      | [], [], [ self; k; v ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let k := M.alloc (| k |) in
          let v := M.alloc (| v |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "core::option::Option") [] [ V ] ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.apply (Ty.path "&mut") [] [ V ] ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "p3_util::linear_map::LinearMap") [] [ K; V ],
                            "get_mut",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, k |) |)
                            |)
                          ]
                        |)
                      |) in
                    let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let vv := M.copy (| γ0_0 |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_function (| "core::mem::swap", [], [ V ] |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (| M.borrow (| Pointer.Kind.MutRef, v |) |)
                            |);
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| vv |) |) |)
                          ]
                        |)
                      |) in
                    M.alloc (|
                      Value.StructTuple "core::option::Option::Some" [] [ V ] [ M.read (| v |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.tuple [ K; V ]; Ty.path "alloc::alloc::Global" ],
                            "push",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_tuple_field (|
                                M.deref (| M.read (| self |) |),
                                "p3_util::linear_map::LinearMap",
                                0
                              |)
                            |);
                            Value.Tuple [ M.read (| k |); M.read (| v |) ]
                          ]
                        |)
                      |) in
                    M.alloc (| Value.StructTuple "core::option::Option::None" [] [ V ] [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_insert :
      forall (K V : Ty.t),
      M.IsAssociatedFunction.C (Self K V) "insert" (insert K V).
    Admitted.
    Global Typeclasses Opaque insert.
    
    (*
        pub fn get_or_insert_with(&mut self, k: K, f: impl FnOnce() -> V) -> &mut V {
            let existing = self.0.iter().position(|(kk, _)| kk == &k);
            if let Some(idx) = existing {
                &mut self.0[idx].1
            } else {
                self.0.push((k, f()));
                let slot = self.0.last_mut().unwrap();
                &mut slot.1
            }
        }
    *)
    Definition get_or_insert_with
        (K V : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self K V in
      match ε, τ, α with
      | [], [ impl_FnOnce___arrow_V ], [ self; k; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let k := M.alloc (| k |) in
          let f := M.alloc (| f |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.read (|
                let~ existing :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ] ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.tuple [ K; V ] ],
                        [],
                        [],
                        "position",
                        [],
                        [
                          Ty.function
                            [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.tuple [ K; V ] ] ] ]
                            (Ty.path "bool")
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.tuple [ K; V ] ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.tuple [ K; V ] ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.tuple [ K; V ] ] ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Ty.tuple [ K; V ]; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_tuple_field (|
                                            M.deref (| M.read (| self |) |),
                                            "p3_util::linear_map::LinearMap",
                                            0
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [ Ty.apply (Ty.path "&") [] [ Ty.tuple [ K; V ] ] ]
                                          ]
                                          (Ty.path "bool")
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ := M.read (| γ |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let kk := M.alloc (| γ1_0 |) in
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_trait_method (|
                                              "core::cmp::PartialEq",
                                              Ty.apply (Ty.path "&") [] [ K ],
                                              [],
                                              [ Ty.apply (Ty.path "&") [] [ K ] ],
                                              "eq",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.Ref, kk |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (| M.borrow (| Pointer.Kind.Ref, k |) |)
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  |) in
                M.alloc (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.read (|
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "&mut") [] [ V ] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := existing in
                                let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let idx := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.SubPointer.get_tuple_field (|
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [ Ty.tuple [ K; V ] ],
                                                  M.get_trait_method (|
                                                    "core::ops::index::IndexMut",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.tuple [ K; V ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    [ Ty.path "usize" ],
                                                    "index_mut",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        M.deref (| M.read (| self |) |),
                                                        "p3_util::linear_map::LinearMap",
                                                        0
                                                      |)
                                                    |);
                                                    M.read (| idx |)
                                                  ]
                                                |)
                                              |),
                                              1
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Ty.tuple [ K; V ]; Ty.path "alloc::alloc::Global" ],
                                        "push",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_tuple_field (|
                                            M.deref (| M.read (| self |) |),
                                            "p3_util::linear_map::LinearMap",
                                            0
                                          |)
                                        |);
                                        Value.Tuple
                                          [
                                            M.read (| k |);
                                            M.call_closure (|
                                              V,
                                              M.get_trait_method (|
                                                "core::ops::function::FnOnce",
                                                impl_FnOnce___arrow_V,
                                                [],
                                                [ Ty.tuple [] ],
                                                "call_once",
                                                [],
                                                []
                                              |),
                                              [ M.read (| f |); Value.Tuple [] ]
                                            |)
                                          ]
                                      ]
                                    |)
                                  |) in
                                let~ slot :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [ Ty.apply (Ty.path "&mut") [] [ Ty.tuple [ K; V ] ] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply (Ty.path "&mut") [] [ Ty.tuple [ K; V ] ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.apply (Ty.path "&mut") [] [ Ty.tuple [ K; V ] ] ],
                                        "unwrap",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.apply (Ty.path "&mut") [] [ Ty.tuple [ K; V ] ] ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ Ty.tuple [ K; V ] ],
                                            "last_mut",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [ Ty.tuple [ K; V ] ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::deref::DerefMut",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.tuple [ K; V ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    [],
                                                    "deref_mut",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        M.deref (| M.read (| self |) |),
                                                        "p3_util::linear_map::LinearMap",
                                                        0
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                M.alloc (|
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_tuple_field (|
                                          M.deref (| M.read (| slot |) |),
                                          1
                                        |)
                                      |)
                                    |)
                                  |)
                                |)))
                          ]
                        |)
                      |)
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_get_or_insert_with :
      forall (K V : Ty.t),
      M.IsAssociatedFunction.C (Self K V) "get_or_insert_with" (get_or_insert_with K V).
    Admitted.
    Global Typeclasses Opaque get_or_insert_with.
    
    (*
        pub fn values(&self) -> impl Iterator<Item = &V> {
            self.0.iter().map(|(_, v)| v)
        }
    *)
    Definition values (K V : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self K V in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::iter::adapters::map::Map")
              []
              [
                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.tuple [ K; V ] ];
                Ty.function
                  [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.tuple [ K; V ] ] ] ]
                  (Ty.apply (Ty.path "&") [] [ V ])
              ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.tuple [ K; V ] ],
              [],
              [],
              "map",
              [],
              [
                Ty.apply (Ty.path "&") [] [ V ];
                Ty.function
                  [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.tuple [ K; V ] ] ] ]
                  (Ty.apply (Ty.path "&") [] [ V ])
              ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.tuple [ K; V ] ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "slice") [] [ Ty.tuple [ K; V ] ],
                  "iter",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.tuple [ K; V ] ] ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.tuple [ K; V ]; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_tuple_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_util::linear_map::LinearMap",
                              0
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.tuple [ K; V ] ] ] ]
                                (Ty.apply (Ty.path "&") [] [ V ])
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.read (| γ |) in
                                let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let v := M.alloc (| γ1_1 |) in
                                M.read (| v |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_values :
      forall (K V : Ty.t),
      M.IsAssociatedFunction.C (Self K V) "values" (values K V).
    Admitted.
    Global Typeclasses Opaque values.
  End Impl_p3_util_linear_map_LinearMap_K_V.
  
  Module Impl_core_iter_traits_collect_FromIterator_where_core_cmp_Eq_K_Tuple_K_V__for_p3_util_linear_map_LinearMap_K_V.
    Definition Self (K V : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_util::linear_map::LinearMap") [] [ K; V ].
    
    (*
        fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> Self {
            let mut me = Self::default();
            for (k, v) in iter {
                me.insert(k, v);
            }
            me
        }
    *)
    Definition from_iter (K V : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self K V in
      match ε, τ, α with
      | [], [ T ], [ iter ] =>
        ltac:(M.monadic
          (let iter := M.alloc (| iter |) in
          M.read (|
            let~ me :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "p3_util::linear_map::LinearMap") [] [ K; V ] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "p3_util::linear_map::LinearMap") [] [ K; V ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply (Ty.path "p3_util::linear_map::LinearMap") [] [ K; V ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.associated_in_trait
                        "core::iter::traits::collect::IntoIterator"
                        []
                        []
                        T
                        "IntoIter",
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        T,
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [ M.read (| iter |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.tuple [ K; V ] ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.associated_in_trait
                                        "core::iter::traits::collect::IntoIterator"
                                        []
                                        []
                                        T
                                        "IntoIter",
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                      let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                      let k := M.copy (| γ1_0 |) in
                                      let v := M.copy (| γ1_1 |) in
                                      let~ _ :
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [ Ty.apply (Ty.path "core::option::Option") [] [ V ]
                                            ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply (Ty.path "core::option::Option") [] [ V ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "p3_util::linear_map::LinearMap")
                                                []
                                                [ K; V ],
                                              "insert",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, me |);
                                              M.read (| k |);
                                              M.read (| v |)
                                            ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            me
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (K V : Ty.t),
      M.IsTraitInstance
        "core::iter::traits::collect::FromIterator"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.tuple [ K; V ] ]
        (Self K V)
        (* Instance *) [ ("from_iter", InstanceField.Method (from_iter K V)) ].
  End Impl_core_iter_traits_collect_FromIterator_where_core_cmp_Eq_K_Tuple_K_V__for_p3_util_linear_map_LinearMap_K_V.
  
  Module Impl_core_iter_traits_collect_IntoIterator_for_p3_util_linear_map_LinearMap_K_V.
    Definition Self (K V : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_util::linear_map::LinearMap") [] [ K; V ].
    
    (*     type Item = (K, V); *)
    Definition _Item (K V : Ty.t) : Ty.t := Ty.tuple [ K; V ].
    
    (*     type IntoIter = <Vec<(K, V)> as IntoIterator>::IntoIter; *)
    Definition _IntoIter (K V : Ty.t) : Ty.t :=
      Ty.associated_in_trait
        "core::iter::traits::collect::IntoIterator"
        []
        []
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          []
          [ Ty.tuple [ K; V ]; Ty.path "alloc::alloc::Global" ])
        "IntoIter".
    
    (*
        fn into_iter(self) -> Self::IntoIter {
            self.0.into_iter()
        }
    *)
    Definition into_iter (K V : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self K V in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::into_iter::IntoIter")
              []
              [ Ty.tuple [ K; V ]; Ty.path "alloc::alloc::Global" ],
            M.get_trait_method (|
              "core::iter::traits::collect::IntoIterator",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.tuple [ K; V ]; Ty.path "alloc::alloc::Global" ],
              [],
              [],
              "into_iter",
              [],
              []
            |),
            [
              M.read (|
                M.SubPointer.get_struct_tuple_field (| self, "p3_util::linear_map::LinearMap", 0 |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (K V : Ty.t),
      M.IsTraitInstance
        "core::iter::traits::collect::IntoIterator"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self K V)
        (* Instance *)
        [
          ("Item", InstanceField.Ty (_Item K V));
          ("IntoIter", InstanceField.Ty (_IntoIter K V));
          ("into_iter", InstanceField.Method (into_iter K V))
        ].
  End Impl_core_iter_traits_collect_IntoIterator_for_p3_util_linear_map_LinearMap_K_V.
End linear_map.
