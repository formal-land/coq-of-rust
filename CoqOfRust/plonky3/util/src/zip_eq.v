(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module zip_eq.
  (* StructRecord
    {
      name := "ZipEq";
      const_params := [];
      ty_params := [ "A"; "B" ];
      fields := [ ("a", A); ("b", B) ];
    } *)
  
  (*
  pub fn zip_eq<A, AIter, B, BIter, Error>(
      a: A,
      b: B,
      err: Error,
  ) -> Result<ZipEq<A::IntoIter, B::IntoIter>, Error>
  where
      A: IntoIterator<IntoIter = AIter>,
      AIter: ExactSizeIterator,
      B: IntoIterator<IntoIter = BIter>,
      BIter: ExactSizeIterator,
  {
      let a_iter = a.into_iter();
      let b_iter = b.into_iter();
      match a_iter.len() == b_iter.len() {
          true => Ok(ZipEq {
              a: a_iter,
              b: b_iter,
          }),
          false => Err(err),
      }
  }
  *)
  Definition zip_eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ A; AIter; B; BIter; Error ], [ a; b; err ] =>
      ltac:(M.monadic
        (let a := M.alloc (| a |) in
        let b := M.alloc (| b |) in
        let err := M.alloc (| err |) in
        M.read (|
          let~ a_iter : Ty.apply (Ty.path "*") [] [ AIter ] :=
            M.alloc (|
              M.call_closure (|
                AIter,
                M.get_trait_method (|
                  "core::iter::traits::collect::IntoIterator",
                  A,
                  [],
                  [],
                  "into_iter",
                  [],
                  []
                |),
                [ M.read (| a |) ]
              |)
            |) in
          let~ b_iter : Ty.apply (Ty.path "*") [] [ BIter ] :=
            M.alloc (|
              M.call_closure (|
                BIter,
                M.get_trait_method (|
                  "core::iter::traits::collect::IntoIterator",
                  B,
                  [],
                  [],
                  "into_iter",
                  [],
                  []
                |),
                [ M.read (| b |) ]
              |)
            |) in
          M.match_operator (|
            Ty.apply
              (Ty.path "*")
              []
              [
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.apply (Ty.path "p3_util::zip_eq::ZipEq") [] [ AIter; BIter ]; Error ]
              ],
            M.alloc (|
              M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::iter::traits::exact_size::ExactSizeIterator",
                      AIter,
                      [],
                      [],
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, a_iter |) ]
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::iter::traits::exact_size::ExactSizeIterator",
                      BIter,
                      [],
                      [],
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, b_iter |) ]
                  |)
                ]
              |)
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      [
                        Value.StructRecord
                          "p3_util::zip_eq::ZipEq"
                          [ ("a", M.read (| a_iter |)); ("b", M.read (| b_iter |)) ]
                      ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool false |) in
                  M.alloc (| Value.StructTuple "core::result::Result::Err" [ M.read (| err |) ] |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_zip_eq : M.IsFunction.C "p3_util::zip_eq::zip_eq" zip_eq.
  Admitted.
  Global Typeclasses Opaque zip_eq.
  
  Module Impl_core_iter_traits_iterator_Iterator_where_core_iter_traits_exact_size_ExactSizeIterator_A_where_core_iter_traits_exact_size_ExactSizeIterator_B_for_p3_util_zip_eq_ZipEq_A_B.
    Definition Self (A B : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_util::zip_eq::ZipEq") [] [ A; B ].
    
    (*     type Item = (A::Item, B::Item); *)
    Definition _Item (A B : Ty.t) : Ty.t :=
      Ty.tuple
        [
          Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] A "Item";
          Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] B "Item"
        ].
    
    (*
        fn next(&mut self) -> Option<Self::Item> {
            match (self.a.next(), self.b.next()) {
                (Some(a), Some(b)) => Some((a, b)),
                (None, None) => None,
                _ => unreachable!("The iterators must have the same length."),
            }
        }
    *)
    Definition next (A B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self A B in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [
                      Ty.tuple
                        [
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            A
                            "Item";
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            B
                            "Item"
                        ]
                    ]
                ],
              M.alloc (|
                Value.Tuple
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            A
                            "Item"
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        A,
                        [],
                        [],
                        "next",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_util::zip_eq::ZipEq",
                            "a"
                          |)
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            B
                            "Item"
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        B,
                        [],
                        [],
                        "next",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_util::zip_eq::ZipEq",
                            "b"
                          |)
                        |)
                      ]
                    |)
                  ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_0,
                        "core::option::Option::Some",
                        0
                      |) in
                    let a := M.copy (| γ1_0 |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_1,
                        "core::option::Option::Some",
                        0
                      |) in
                    let b := M.copy (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ Value.Tuple [ M.read (| a |); M.read (| b |) ] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let _ := M.is_struct_tuple (| γ0_0, "core::option::Option::None" |) in
                    let _ := M.is_struct_tuple (| γ0_1, "core::option::Option::None" |) in
                    M.alloc (| Value.StructTuple "core::option::Option::None" [] |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                [
                                  Value.Integer IntegerKind.Usize 1;
                                  Value.Integer IntegerKind.Usize 0
                                ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [
                                            mk_str (|
                                              "internal error: entered unreachable code: The iterators must have the same length."
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 0 ]
                                            [ Ty.path "core::fmt::rt::Argument" ],
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "none",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn size_hint(&self) -> (usize, Option<usize>) {
            // self.a.size_hint() = self.b.size_hint() as a and b are ExactSizeIterators
            // and we checked that they are the same length at construction time.
            debug_assert_eq!(self.a.size_hint(), self.b.size_hint());
            self.a.size_hint()
        }
    *)
    Definition size_hint (A B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self A B in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (|
                            Value.Tuple
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        A,
                                        [],
                                        [],
                                        "size_hint",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "p3_util::zip_eq::ZipEq",
                                            "a"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        B,
                                        [],
                                        [],
                                        "size_hint",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "p3_util::zip_eq::ZipEq",
                                            "b"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val := M.copy (| γ0_0 |) in
                                let right_val := M.copy (| γ0_1 |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_trait_method (|
                                                    "core::cmp::PartialEq",
                                                    Ty.tuple
                                                      [
                                                        Ty.path "usize";
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ],
                                                    [],
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ]
                                                    ],
                                                    "eq",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| left_val |) |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| right_val |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let~ kind :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [ Ty.path "core::panicking::AssertKind" ] :=
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [],
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ];
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ]
                                                    ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| left_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple
                  [
                    Ty.path "usize";
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ]
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  A,
                  [],
                  [],
                  "size_hint",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_util::zip_eq::ZipEq",
                      "a"
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (A B : Ty.t),
      M.IsTraitInstance
        "core::iter::traits::iterator::Iterator"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self A B)
        (* Instance *)
        [
          ("Item", InstanceField.Ty (_Item A B));
          ("next", InstanceField.Method (next A B));
          ("size_hint", InstanceField.Method (size_hint A B))
        ].
  End Impl_core_iter_traits_iterator_Iterator_where_core_iter_traits_exact_size_ExactSizeIterator_A_where_core_iter_traits_exact_size_ExactSizeIterator_B_for_p3_util_zip_eq_ZipEq_A_B.
  
  Module Impl_core_iter_traits_exact_size_ExactSizeIterator_where_core_iter_traits_exact_size_ExactSizeIterator_A_where_core_iter_traits_exact_size_ExactSizeIterator_B_for_p3_util_zip_eq_ZipEq_A_B.
    Definition Self (A B : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_util::zip_eq::ZipEq") [] [ A; B ].
    
    Axiom Implements :
      forall (A B : Ty.t),
      M.IsTraitInstance
        "core::iter::traits::exact_size::ExactSizeIterator"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self A B)
        (* Instance *) [].
  End Impl_core_iter_traits_exact_size_ExactSizeIterator_where_core_iter_traits_exact_size_ExactSizeIterator_A_where_core_iter_traits_exact_size_ExactSizeIterator_B_for_p3_util_zip_eq_ZipEq_A_B.
End zip_eq.
