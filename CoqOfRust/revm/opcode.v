(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module opcode.
  Axiom Instruction :
    forall (H : Ty.t),
    (Ty.apply (Ty.path "revm_interpreter::opcode::Instruction") [ H ]) =
      (Ty.function
        [
          Ty.apply (Ty.path "&mut") [ Ty.path "revm_interpreter::interpreter::Interpreter" ];
          Ty.apply (Ty.path "&mut") [ H ]
        ]
        (Ty.tuple [])).
  
  Axiom InstructionTable :
    forall (H : Ty.t),
    (Ty.apply (Ty.path "revm_interpreter::opcode::InstructionTable") [ H ]) =
      (Ty.apply
        (Ty.path "array")
        [
          Ty.function
            [
              Ty.apply (Ty.path "&mut") [ Ty.path "revm_interpreter::interpreter::Interpreter" ];
              Ty.apply (Ty.path "&mut") [ H ]
            ]
            (Ty.tuple [])
        ]).
  
  Axiom BoxedInstruction :
    forall (H : Ty.t),
    (Ty.apply (Ty.path "revm_interpreter::opcode::BoxedInstruction") [ H ]) =
      (Ty.apply
        (Ty.path "alloc::boxed::Box")
        [
          Ty.dyn
            [
              ("existential predicate with variables", []);
              ("existential predicate with variables", [])
            ];
          Ty.path "alloc::alloc::Global"
        ]).
  
  Axiom BoxedInstructionTable :
    forall (H : Ty.t),
    (Ty.apply (Ty.path "revm_interpreter::opcode::BoxedInstructionTable") [ H ]) =
      (Ty.apply
        (Ty.path "array")
        [
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            [
              Ty.dyn
                [
                  ("existential predicate with variables", []);
                  ("existential predicate with variables", [])
                ];
              Ty.path "alloc::alloc::Global"
            ]
        ]).
  
  (*
  Enum InstructionTables
  {
    ty_params := [ "H" ];
    variants :=
      [
        {
          name := "Plain";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "array")
                  [
                    Ty.function
                      [
                        Ty.apply
                          (Ty.path "&mut")
                          [ Ty.path "revm_interpreter::interpreter::Interpreter" ];
                        Ty.apply (Ty.path "&mut") [ H ]
                      ]
                      (Ty.tuple [])
                  ]
              ];
          discriminant := None;
        };
        {
          name := "Boxed";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "array")
                  [
                    Ty.apply
                      (Ty.path "alloc::boxed::Box")
                      [
                        Ty.dyn
                          [
                            ("existential predicate with variables", []);
                            ("existential predicate with variables", [])
                          ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
              ];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_revm_interpreter_opcode_InstructionTables_H.
    Definition Self (H : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_interpreter::opcode::InstructionTables") [ H ].
    
    (*
        pub const fn new_plain<SPEC: Spec>() -> Self {
            Self::Plain(make_instruction_table::<H, SPEC>())
        }
    *)
    Definition new_plain (H : Ty.t) (τ : list Ty.t) (α : list A.t) : M :=
      let Self : Ty.t := Self H in
      match τ, α with
      | [ SPEC ], [] =>
        ltac:(M.monadic
          (M.of_value (|
            Value.StructTuple
              "revm_interpreter::opcode::InstructionTables::Plain"
              [
                A.to_value
                  (M.call_closure (|
                    M.get_function (|
                      "revm_interpreter::opcode::make_instruction_table",
                      [ H; SPEC ]
                    |),
                    []
                  |))
              ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new_plain :
      forall (H : Ty.t),
      M.IsAssociatedFunction (Self H) "new_plain" (new_plain H).
    (*
        pub fn insert_boxed(&mut self, opcode: u8, instruction: BoxedInstruction<'a, H>) {
            // first convert the table to boxed variant
            self.convert_boxed();
    
            // now we can insert the instruction
            match self {
                Self::Plain(_) => {
                    unreachable!("we already converted the table to boxed variant");
                }
                Self::Boxed(table) => {
                    table[opcode as usize] = Box::new(instruction);
                }
            }
        }
    *)
    Definition insert_boxed (H : Ty.t) (τ : list Ty.t) (α : list A.t) : M :=
      let Self : Ty.t := Self H in
      match τ, α with
      | [], [ self; opcode; instruction ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let opcode := M.alloc (| opcode |) in
          let instruction := M.alloc (| instruction |) in
          M.read (|
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply (Ty.path "revm_interpreter::opcode::InstructionTables") [ H ],
                    "convert_boxed",
                    []
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "revm_interpreter::opcode::InstructionTables::Plain",
                        0
                      |) in
                    M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          M.get_function (| "core::panicking::panic_fmt", [] |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion (|
                                  M.alloc (|
                                    M.of_value (|
                                      Value.Array
                                        [
                                          A.to_value
                                            (M.read (|
                                              M.of_value (|
                                                Value.String
                                                  "internal error: entered unreachable code: we already converted the table to boxed variant"
                                              |)
                                            |))
                                        ]
                                    |)
                                  |)
                                |);
                                (* Unsize *)
                                M.pointer_coercion (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::rt::Argument",
                                        "none",
                                        []
                                      |),
                                      []
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "revm_interpreter::opcode::InstructionTables::Boxed",
                        0
                      |) in
                    let table := M.alloc (| γ1_0 |) in
                    let _ :=
                      M.write (|
                        M.SubPointer.get_array_field (|
                          M.read (| table |),
                          M.alloc (| M.rust_cast (| M.read (| opcode |) |) |)
                        |),
                        (* Unsize *)
                        M.pointer_coercion (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.dyn
                                        [
                                          ("existential predicate with variables", []);
                                          ("existential predicate with variables", [])
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            [ M.read (| instruction |) ]
                          |)
                        |)
                      |) in
                    M.alloc (| M.of_value (| Value.Tuple [] |) |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_insert_boxed :
      forall (H : Ty.t),
      M.IsAssociatedFunction (Self H) "insert_boxed" (insert_boxed H).
    
    (*
        pub fn insert(&mut self, opcode: u8, instruction: Instruction<H>) {
            match self {
                Self::Plain(table) => {
                    table[opcode as usize] = instruction;
                }
                Self::Boxed(table) => {
                    table[opcode as usize] = Box::new(instruction);
                }
            }
        }
    *)
    Definition insert (H : Ty.t) (τ : list Ty.t) (α : list A.t) : M :=
      let Self : Ty.t := Self H in
      match τ, α with
      | [], [ self; opcode; instruction ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let opcode := M.alloc (| opcode |) in
          let instruction := M.alloc (| instruction |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "revm_interpreter::opcode::InstructionTables::Plain",
                        0
                      |) in
                    let table := M.alloc (| γ1_0 |) in
                    let _ :=
                      M.write (|
                        M.SubPointer.get_array_field (|
                          M.read (| table |),
                          M.alloc (| M.rust_cast (| M.read (| opcode |) |) |)
                        |),
                        M.read (| instruction |)
                      |) in
                    M.alloc (| M.of_value (| Value.Tuple [] |) |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "revm_interpreter::opcode::InstructionTables::Boxed",
                        0
                      |) in
                    let table := M.alloc (| γ1_0 |) in
                    let _ :=
                      M.write (|
                        M.SubPointer.get_array_field (|
                          M.read (| table |),
                          M.alloc (| M.rust_cast (| M.read (| opcode |) |) |)
                        |),
                        (* Unsize *)
                        M.pointer_coercion (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                [
                                  Ty.function
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [ Ty.path "revm_interpreter::interpreter::Interpreter" ];
                                      Ty.apply (Ty.path "&mut") [ H ]
                                    ]
                                    (Ty.tuple []);
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            [ M.read (| instruction |) ]
                          |)
                        |)
                      |) in
                    M.alloc (| M.of_value (| Value.Tuple [] |) |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_insert :
      forall (H : Ty.t),
      M.IsAssociatedFunction (Self H) "insert" (insert H).
    
    (*
        pub fn convert_boxed(&mut self) {
            match self {
                Self::Plain(table) => {
                    *self = Self::Boxed(core::array::from_fn(|i| {
                        let instruction: BoxedInstruction<'a, H> = Box::new(table[i]);
                        instruction
                    }));
                }
                Self::Boxed(_) => {}
            };
        }
    *)
    Definition convert_boxed (H : Ty.t) (τ : list Ty.t) (α : list A.t) : M :=
      let Self : Ty.t := Self H in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let _ :=
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_interpreter::opcode::InstructionTables::Plain",
                          0
                        |) in
                      let table := M.alloc (| γ1_0 |) in
                      let _ :=
                        M.write (|
                          M.read (| self |),
                          M.of_value (|
                            Value.StructTuple
                              "revm_interpreter::opcode::InstructionTables::Boxed"
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_function (|
                                      "core::array::from_fn",
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          [
                                            Ty.dyn
                                              [
                                                ("existential predicate with variables", []);
                                                ("existential predicate with variables", [])
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                          (Ty.apply
                                            (Ty.path "alloc::boxed::Box")
                                            [
                                              Ty.dyn
                                                [
                                                  ("existential predicate with variables", []);
                                                  ("existential predicate with variables", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ])
                                      ]
                                    |),
                                    [
                                      M.closure (|
                                        fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let i := M.copy (| γ |) in
                                                      (* Unsize *)
                                                      M.pointer_coercion (|
                                                        M.read (|
                                                          let instruction :=
                                                            M.alloc (|
                                                              (* Unsize *)
                                                              M.pointer_coercion (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::boxed::Box")
                                                                      [
                                                                        Ty.function
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              [
                                                                                Ty.path
                                                                                  "revm_interpreter::interpreter::Interpreter"
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              [ H ]
                                                                          ]
                                                                          (Ty.tuple []);
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.read (| table |),
                                                                        i
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |) in
                                                          instruction
                                                        |)
                                                      |)))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |) in
                      M.alloc (| M.of_value (| Value.Tuple [] |) |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_interpreter::opcode::InstructionTables::Boxed",
                          0
                        |) in
                      M.alloc (| M.of_value (| Value.Tuple [] |) |)))
                ]
              |) in
            M.alloc (| M.of_value (| Value.Tuple [] |) |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_convert_boxed :
      forall (H : Ty.t),
      M.IsAssociatedFunction (Self H) "convert_boxed" (convert_boxed H).
  End Impl_revm_interpreter_opcode_InstructionTables_H.
  
  
  (*
  pub const fn make_instruction_table<H: Host + ?Sized, SPEC: Spec>() -> InstructionTable<H> {
      // Force const-eval of the table creation, making this function trivial.
      // TODO: Replace this with a `const {}` block once it is stable.
      struct ConstTable<H: Host + ?Sized, SPEC: Spec> {
          _host: core::marker::PhantomData<H>,
          _spec: core::marker::PhantomData<SPEC>,
      }
      impl<H: Host + ?Sized, SPEC: Spec> ConstTable<H, SPEC> {
          const NEW: InstructionTable<H> = {
              let mut tables: InstructionTable<H> = [control::unknown; 256];
              let mut i = 0;
              while i < 256 {
                  tables[i] = instruction::<H, SPEC>(i as u8);
                  i += 1;
              }
              tables
          };
      }
      ConstTable::<H, SPEC>::NEW
  }
  *)
  Definition make_instruction_table (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [ H; SPEC ], [] =>
      ltac:(M.monadic
        (M.read (| M.get_constant (| "revm_interpreter::opcode::make_instruction_table::NEW" |) |)))
    | _, _ => M.impossible
    end.
  
  Module make_instruction_table.
    (* StructRecord
      {
        name := "ConstTable";
        ty_params := [ "H"; "SPEC" ];
        fields :=
          [
            ("_host", Ty.apply (Ty.path "core::marker::PhantomData") [ H ]);
            ("_spec", Ty.apply (Ty.path "core::marker::PhantomData") [ SPEC ])
          ];
      } *)
    
    Module Impl_revm_interpreter_opcode_make_instruction_table_ConstTable_H_SPEC.
      Definition Self (H SPEC : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "revm_interpreter::opcode::make_instruction_table::ConstTable")
          [ H; SPEC ].
      
      (*
              const NEW: InstructionTable<H> = {
                  let mut tables: InstructionTable<H> = [control::unknown; 256];
                  let mut i = 0;
                  while i < 256 {
                      tables[i] = instruction::<H, SPEC>(i as u8);
                      i += 1;
                  }
                  tables
              };
      *)
      (* Ty.apply
        (Ty.path "array")
        [
          Ty.function
            [
              Ty.apply (Ty.path "&mut") [ Ty.path "revm_interpreter::interpreter::Interpreter" ];
              Ty.apply (Ty.path "&mut") [ H ]
            ]
            (Ty.tuple [])
        ] *)
      Definition value_NEW (H SPEC : Ty.t) : A.t :=
        let Self : Ty.t := Self H SPEC in
        M.run
          ltac:(M.monadic
            (let tables :=
              M.alloc (|
                repeat (|
                  (* ReifyFnPointer *)
                  M.pointer_coercion (|
                    M.get_function (| "revm_interpreter::instructions::control::unknown", [ H ] |)
                  |),
                  256
                |)
              |) in
            let i := M.alloc (| M.of_value (| Value.Integer 0 |) |) in
            let _ :=
              M.loop (|
                ltac:(M.monadic
                  (M.match_operator (|
                    M.alloc (| M.of_value (| Value.Tuple [] |) |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.Pure.lt (|
                                  M.read (| i |),
                                  M.of_value (| Value.Integer 256 |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let _ :=
                            M.write (|
                              M.SubPointer.get_array_field (| tables, i |),
                              M.call_closure (|
                                M.get_function (|
                                  "revm_interpreter::opcode::instruction",
                                  [ H; SPEC ]
                                |),
                                [ M.rust_cast (| M.read (| i |) |) ]
                              |)
                            |) in
                          let _ :=
                            let β := i in
                            M.write (|
                              β,
                              BinOp.Panic.add (|
                                Integer.Usize,
                                M.read (| β |),
                                M.of_value (| Value.Integer 1 |)
                              |)
                            |) in
                          M.alloc (| M.of_value (| Value.Tuple [] |) |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let _ :=
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                M.alloc (| M.of_value (| Value.Tuple [] |) |)
                              |)
                            |)
                          |)))
                    ]
                  |)))
              |) in
            tables)).
      
      Axiom AssociatedConstant_value_NEW :
        forall (H SPEC : Ty.t),
        M.IsAssociatedConstant (Self H SPEC) "value_NEW" (value_NEW H SPEC).
    End Impl_revm_interpreter_opcode_make_instruction_table_ConstTable_H_SPEC.
  End make_instruction_table.
  
  (*
  pub fn make_boxed_instruction_table<'a, H, SPEC, FN>(
      table: InstructionTable<H>,
      mut outer: FN,
  ) -> BoxedInstructionTable<'a, H>
  where
      H: Host,
      SPEC: Spec + 'a,
      FN: FnMut(Instruction<H>) -> BoxedInstruction<'a, H>,
  {
      core::array::from_fn(|i| outer(table[i]))
  }
  *)
  Definition make_boxed_instruction_table (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [ H; SPEC; FN ], [ table; outer ] =>
      ltac:(M.monadic
        (let table := M.alloc (| table |) in
        let outer := M.alloc (| outer |) in
        M.call_closure (|
          M.get_function (|
            "core::array::from_fn",
            [
              Ty.apply
                (Ty.path "alloc::boxed::Box")
                [
                  Ty.dyn
                    [
                      ("existential predicate with variables", []);
                      ("existential predicate with variables", [])
                    ];
                  Ty.path "alloc::alloc::Global"
                ];
              Ty.function
                [ Ty.tuple [ Ty.path "usize" ] ]
                (Ty.apply
                  (Ty.path "alloc::boxed::Box")
                  [
                    Ty.dyn
                      [
                        ("existential predicate with variables", []);
                        ("existential predicate with variables", [])
                      ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ]
          |),
          [
            M.closure (|
              fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0 ] =>
                    M.match_operator (|
                      M.alloc (| α0 |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let i := M.copy (| γ |) in
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::function::FnMut",
                                FN,
                                [
                                  Ty.tuple
                                    [
                                      Ty.function
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            [ Ty.path "revm_interpreter::interpreter::Interpreter"
                                            ];
                                          Ty.apply (Ty.path "&mut") [ H ]
                                        ]
                                        (Ty.tuple [])
                                    ]
                                ],
                                "call_mut",
                                []
                              |),
                              [
                                outer;
                                M.of_value (|
                                  Value.Tuple
                                    [
                                      A.to_value
                                        (M.read (| M.SubPointer.get_array_field (| table, i |) |))
                                    ]
                                |)
                              ]
                            |)))
                      ]
                    |)
                  | _ => M.impossible (||)
                  end)
            |)
          ]
        |)))
    | _, _ => M.impossible
    end.
  
  (* StructTuple
    {
      name := "OpCodeError";
      ty_params := [];
      fields := [ Ty.tuple [] ];
    } *)
  
  Module Impl_core_fmt_Debug_for_revm_interpreter_opcode_OpCodeError.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeError".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_tuple_field1_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| M.of_value (| Value.String "OpCodeError" |) |);
              (* Unsize *)
              M.pointer_coercion (|
                M.alloc (|
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "revm_interpreter::opcode::OpCodeError",
                    0
                  |)
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_revm_interpreter_opcode_OpCodeError.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_interpreter_opcode_OpCodeError.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_interpreter_opcode_OpCodeError.
  
  Module Impl_core_cmp_PartialEq_for_revm_interpreter_opcode_OpCodeError.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeError".
    
    (* PartialEq *)
    Definition eq (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            M.get_trait_method (| "core::cmp::PartialEq", Ty.tuple [], [ Ty.tuple [] ], "eq", [] |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "revm_interpreter::opcode::OpCodeError",
                0
              |);
              M.SubPointer.get_struct_tuple_field (|
                M.read (| other |),
                "revm_interpreter::opcode::OpCodeError",
                0
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_revm_interpreter_opcode_OpCodeError.
  
  Module Impl_core_marker_StructuralEq_for_revm_interpreter_opcode_OpCodeError.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralEq_for_revm_interpreter_opcode_OpCodeError.
  
  Module Impl_core_cmp_Eq_for_revm_interpreter_opcode_OpCodeError.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeError".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              M.of_value (| Value.DeclaredButUndefined |),
              [ fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |))) ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_revm_interpreter_opcode_OpCodeError.
  
  Module Impl_core_fmt_Display_for_revm_interpreter_opcode_OpCodeError.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeError".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.write_str("invalid opcode")
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [ M.read (| f |); M.read (| M.of_value (| Value.String "invalid opcode" |) |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_revm_interpreter_opcode_OpCodeError.
  
  Module Impl_core_error_Error_for_revm_interpreter_opcode_OpCodeError.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::error::Error"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_error_Error_for_revm_interpreter_opcode_OpCodeError.
  
  (* StructTuple
    {
      name := "OpCode";
      ty_params := [];
      fields := [ Ty.path "u8" ];
    } *)
  
  Module Impl_core_clone_Clone_for_revm_interpreter_opcode_OpCode.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCode".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              M.of_value (| Value.DeclaredButUndefined |),
              [ fun γ => ltac:(M.monadic (M.read (| self |))) ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_revm_interpreter_opcode_OpCode.
  
  Module Impl_core_marker_Copy_for_revm_interpreter_opcode_OpCode.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCode".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_revm_interpreter_opcode_OpCode.
  
  Module Impl_core_fmt_Debug_for_revm_interpreter_opcode_OpCode.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCode".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_tuple_field1_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| M.of_value (| Value.String "OpCode" |) |);
              (* Unsize *)
              M.pointer_coercion (|
                M.alloc (|
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "revm_interpreter::opcode::OpCode",
                    0
                  |)
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_revm_interpreter_opcode_OpCode.
  
  Module Impl_core_default_Default_for_revm_interpreter_opcode_OpCode.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCode".
    
    (* Default *)
    Definition default (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [] =>
        ltac:(M.monadic
          (M.of_value (|
            Value.StructTuple
              "revm_interpreter::opcode::OpCode"
              [
                A.to_value
                  (M.call_closure (|
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "u8",
                      [],
                      "default",
                      []
                    |),
                    []
                  |))
              ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_revm_interpreter_opcode_OpCode.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_interpreter_opcode_OpCode.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCode".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_interpreter_opcode_OpCode.
  
  Module Impl_core_cmp_PartialEq_for_revm_interpreter_opcode_OpCode.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCode".
    
    (* PartialEq *)
    Definition eq (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          BinOp.Pure.eq (|
            M.read (|
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "revm_interpreter::opcode::OpCode",
                0
              |)
            |),
            M.read (|
              M.SubPointer.get_struct_tuple_field (|
                M.read (| other |),
                "revm_interpreter::opcode::OpCode",
                0
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_revm_interpreter_opcode_OpCode.
  
  Module Impl_core_marker_StructuralEq_for_revm_interpreter_opcode_OpCode.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCode".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralEq_for_revm_interpreter_opcode_OpCode.
  
  Module Impl_core_cmp_Eq_for_revm_interpreter_opcode_OpCode.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCode".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              M.of_value (| Value.DeclaredButUndefined |),
              [ fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |))) ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_revm_interpreter_opcode_OpCode.
  
  Module Impl_core_cmp_PartialOrd_for_revm_interpreter_opcode_OpCode.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCode".
    
    (* PartialOrd *)
    Definition partial_cmp (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::cmp::PartialOrd",
              Ty.path "u8",
              [ Ty.path "u8" ],
              "partial_cmp",
              []
            |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "revm_interpreter::opcode::OpCode",
                0
              |);
              M.SubPointer.get_struct_tuple_field (|
                M.read (| other |),
                "revm_interpreter::opcode::OpCode",
                0
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
  End Impl_core_cmp_PartialOrd_for_revm_interpreter_opcode_OpCode.
  
  Module Impl_core_cmp_Ord_for_revm_interpreter_opcode_OpCode.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCode".
    
    (* Ord *)
    Definition cmp (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            M.get_trait_method (| "core::cmp::Ord", Ty.path "u8", [], "cmp", [] |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "revm_interpreter::opcode::OpCode",
                0
              |);
              M.SubPointer.get_struct_tuple_field (|
                M.read (| other |),
                "revm_interpreter::opcode::OpCode",
                0
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Ord"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
  End Impl_core_cmp_Ord_for_revm_interpreter_opcode_OpCode.
  
  Module Impl_core_hash_Hash_for_revm_interpreter_opcode_OpCode.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCode".
    
    (* Hash *)
    Definition hash (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.call_closure (|
            M.get_trait_method (| "core::hash::Hash", Ty.path "u8", [], "hash", [ __H ] |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "revm_interpreter::opcode::OpCode",
                0
              |);
              M.read (| state |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_revm_interpreter_opcode_OpCode.
  
  Module Impl_core_fmt_Display_for_revm_interpreter_opcode_OpCode.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCode".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            let n = self.get();
            if let Some(val) = OPCODE_INFO_JUMPTABLE[n as usize] {
                f.write_str(val.name())
            } else {
                write!(f, "UNKNOWN(0x{n:02X})")
            }
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let n :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "revm_interpreter::opcode::OpCode",
                    "get",
                    []
                  |),
                  [ M.read (| M.read (| self |) |) ]
                |)
              |) in
            M.match_operator (|
              M.alloc (| M.of_value (| Value.Tuple [] |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.SubPointer.get_array_field (|
                        M.get_constant (| "revm_interpreter::opcode::OPCODE_INFO_JUMPTABLE" |),
                        M.alloc (| M.rust_cast (| M.read (| n |) |) |)
                      |) in
                    let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let val := M.copy (| γ0_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "revm_interpreter::opcode::OpCodeInfo",
                              "name",
                              []
                            |),
                            [ val ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1_formatted",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "UNKNOWN(0x" |) |));
                                        A.to_value (M.read (| M.of_value (| Value.String ")" |) |))
                                      ]
                                  |)
                                |)
                              |);
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_upper_hex",
                                              [ Ty.path "u8" ]
                                            |),
                                            [ n ]
                                          |))
                                      ]
                                  |)
                                |)
                              |);
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Placeholder",
                                              "new",
                                              []
                                            |),
                                            [
                                              M.of_value (| Value.Integer 0 |);
                                              M.of_value (| Value.UnicodeChar 32 |);
                                              M.of_value (|
                                                Value.StructTuple
                                                  "core::fmt::rt::Alignment::Unknown"
                                                  []
                                              |);
                                              M.of_value (| Value.Integer 8 |);
                                              M.of_value (|
                                                Value.StructTuple "core::fmt::rt::Count::Implied" []
                                              |);
                                              M.of_value (|
                                                Value.StructTuple
                                                  "core::fmt::rt::Count::Is"
                                                  [ A.to_value (M.of_value (| Value.Integer 2 |)) ]
                                              |)
                                            ]
                                          |))
                                      ]
                                  |)
                                |)
                              |);
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "core::fmt::rt::UnsafeArg",
                                  "new",
                                  []
                                |),
                                []
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_revm_interpreter_opcode_OpCode.
  
  Module Impl_core_str_traits_FromStr_for_revm_interpreter_opcode_OpCode.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCode".
    
    (*     type Err = OpCodeError; *)
    Definition _Err : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeError".
    
    (*
        fn from_str(s: &str) -> Result<Self, Self::Err> {
            Self::parse(s).ok_or(OpCodeError(()))
        }
    *)
    Definition from_str (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ s ] =>
        ltac:(M.monadic
          (let s := M.alloc (| s |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "revm_interpreter::opcode::OpCode" ],
              "ok_or",
              [ Ty.path "revm_interpreter::opcode::OpCodeError" ]
            |),
            [
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "revm_interpreter::opcode::OpCode",
                  "parse",
                  []
                |),
                [ M.read (| s |) ]
              |);
              M.of_value (|
                Value.StructTuple
                  "revm_interpreter::opcode::OpCodeError"
                  [ A.to_value (M.of_value (| Value.Tuple [] |)) ]
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::str::traits::FromStr"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("Err", InstanceField.Ty _Err); ("from_str", InstanceField.Method from_str) ].
  End Impl_core_str_traits_FromStr_for_revm_interpreter_opcode_OpCode.
  
  Module Impl_revm_interpreter_opcode_OpCode.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCode".
    
    (*
        pub const fn new(opcode: u8) -> Option<Self> {
            match OPCODE_INFO_JUMPTABLE[opcode as usize] {
                Some(_) => Some(Self(opcode)),
                None => None,
            }
        }
    *)
    Definition new (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ opcode ] =>
        ltac:(M.monadic
          (let opcode := M.alloc (| opcode |) in
          M.read (|
            M.match_operator (|
              M.SubPointer.get_array_field (|
                M.get_constant (| "revm_interpreter::opcode::OPCODE_INFO_JUMPTABLE" |),
                M.alloc (| M.rust_cast (| M.read (| opcode |) |) |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    M.alloc (|
                      M.of_value (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          [
                            A.to_value
                              (M.of_value (|
                                Value.StructTuple
                                  "revm_interpreter::opcode::OpCode"
                                  [ A.to_value (M.read (| opcode |)) ]
                              |))
                          ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.of_value (| Value.StructTuple "core::option::Option::None" [] |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
    
    (*
        pub fn parse(s: &str) -> Option<Self> {
            NAME_TO_OPCODE.get(s).copied()
        }
    *)
    Definition parse (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ s ] =>
        ltac:(M.monadic
          (let s := M.alloc (| s |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.apply (Ty.path "&") [ Ty.path "revm_interpreter::opcode::OpCode" ] ],
              "copied",
              []
            |),
            [
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "phf::map::Map")
                    [
                      Ty.apply (Ty.path "&") [ Ty.path "str" ];
                      Ty.path "revm_interpreter::opcode::OpCode"
                    ],
                  "get",
                  [ Ty.path "str" ]
                |),
                [
                  M.read (| M.get_constant (| "revm_interpreter::opcode::NAME_TO_OPCODE" |) |);
                  M.read (| s |)
                ]
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_parse : M.IsAssociatedFunction Self "parse" parse.
    
    (*
        pub const fn is_jumpdest(&self) -> bool {
            self.0 == JUMPDEST
        }
    *)
    Definition is_jumpdest (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          BinOp.Pure.eq (|
            M.read (|
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "revm_interpreter::opcode::OpCode",
                0
              |)
            |),
            M.read (| M.get_constant (| "revm_interpreter::opcode::JUMPDEST" |) |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_is_jumpdest : M.IsAssociatedFunction Self "is_jumpdest" is_jumpdest.
    
    (*
        pub const fn is_jumpdest_by_op(opcode: u8) -> bool {
            if let Some(opcode) = Self::new(opcode) {
                opcode.is_jumpdest()
            } else {
                false
            }
        }
    *)
    Definition is_jumpdest_by_op (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ opcode ] =>
        ltac:(M.monadic
          (let opcode := M.alloc (| opcode |) in
          M.read (|
            M.match_operator (|
              M.alloc (| M.of_value (| Value.Tuple [] |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "revm_interpreter::opcode::OpCode",
                            "new",
                            []
                          |),
                          [ M.read (| opcode |) ]
                        |)
                      |) in
                    let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let opcode := M.copy (| γ0_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "revm_interpreter::opcode::OpCode",
                          "is_jumpdest",
                          []
                        |),
                        [ opcode ]
                      |)
                    |)));
                fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Bool false |) |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_is_jumpdest_by_op :
      M.IsAssociatedFunction Self "is_jumpdest_by_op" is_jumpdest_by_op.
    
    (*
        pub const fn is_jump(self) -> bool {
            self.0 == JUMP
        }
    *)
    Definition is_jump (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          BinOp.Pure.eq (|
            M.read (|
              M.SubPointer.get_struct_tuple_field (| self, "revm_interpreter::opcode::OpCode", 0 |)
            |),
            M.read (| M.get_constant (| "revm_interpreter::opcode::JUMP" |) |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_is_jump : M.IsAssociatedFunction Self "is_jump" is_jump.
    
    (*
        pub const fn is_jump_by_op(opcode: u8) -> bool {
            if let Some(opcode) = Self::new(opcode) {
                opcode.is_jump()
            } else {
                false
            }
        }
    *)
    Definition is_jump_by_op (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ opcode ] =>
        ltac:(M.monadic
          (let opcode := M.alloc (| opcode |) in
          M.read (|
            M.match_operator (|
              M.alloc (| M.of_value (| Value.Tuple [] |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "revm_interpreter::opcode::OpCode",
                            "new",
                            []
                          |),
                          [ M.read (| opcode |) ]
                        |)
                      |) in
                    let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let opcode := M.copy (| γ0_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "revm_interpreter::opcode::OpCode",
                          "is_jump",
                          []
                        |),
                        [ M.read (| opcode |) ]
                      |)
                    |)));
                fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Bool false |) |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_is_jump_by_op :
      M.IsAssociatedFunction Self "is_jump_by_op" is_jump_by_op.
    
    (*
        pub const fn is_push(self) -> bool {
            self.0 >= PUSH1 && self.0 <= PUSH32
        }
    *)
    Definition is_push (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          LogicalOp.and (|
            BinOp.Pure.ge (|
              M.read (|
                M.SubPointer.get_struct_tuple_field (|
                  self,
                  "revm_interpreter::opcode::OpCode",
                  0
                |)
              |),
              M.read (| M.get_constant (| "revm_interpreter::opcode::PUSH1" |) |)
            |),
            ltac:(M.monadic
              (BinOp.Pure.le (|
                M.read (|
                  M.SubPointer.get_struct_tuple_field (|
                    self,
                    "revm_interpreter::opcode::OpCode",
                    0
                  |)
                |),
                M.read (| M.get_constant (| "revm_interpreter::opcode::PUSH32" |) |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_is_push : M.IsAssociatedFunction Self "is_push" is_push.
    
    (*
        pub fn is_push_by_op(opcode: u8) -> bool {
            if let Some(opcode) = Self::new(opcode) {
                opcode.is_push()
            } else {
                false
            }
        }
    *)
    Definition is_push_by_op (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ opcode ] =>
        ltac:(M.monadic
          (let opcode := M.alloc (| opcode |) in
          M.read (|
            M.match_operator (|
              M.alloc (| M.of_value (| Value.Tuple [] |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "revm_interpreter::opcode::OpCode",
                            "new",
                            []
                          |),
                          [ M.read (| opcode |) ]
                        |)
                      |) in
                    let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let opcode := M.copy (| γ0_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "revm_interpreter::opcode::OpCode",
                          "is_push",
                          []
                        |),
                        [ M.read (| opcode |) ]
                      |)
                    |)));
                fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Bool false |) |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_is_push_by_op :
      M.IsAssociatedFunction Self "is_push_by_op" is_push_by_op.
    
    (*
        pub unsafe fn new_unchecked(opcode: u8) -> Self {
            Self(opcode)
        }
    *)
    Definition new_unchecked (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ opcode ] =>
        ltac:(M.monadic
          (let opcode := M.alloc (| opcode |) in
          M.of_value (|
            Value.StructTuple
              "revm_interpreter::opcode::OpCode"
              [ A.to_value (M.read (| opcode |)) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new_unchecked :
      M.IsAssociatedFunction Self "new_unchecked" new_unchecked.
    
    (*
        pub const fn as_str(self) -> &'static str {
            self.info().name()
        }
    *)
    Definition as_str (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "revm_interpreter::opcode::OpCodeInfo",
              "name",
              []
            |),
            [
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "revm_interpreter::opcode::OpCode",
                    "info",
                    []
                  |),
                  [ self ]
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_as_str : M.IsAssociatedFunction Self "as_str" as_str.
    
    (*
        pub const fn name_by_op(opcode: u8) -> &'static str {
            if let Some(opcode) = Self::new(opcode) {
                opcode.as_str()
            } else {
                "Unknown"
            }
        }
    *)
    Definition name_by_op (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ opcode ] =>
        ltac:(M.monadic
          (let opcode := M.alloc (| opcode |) in
          M.read (|
            M.match_operator (|
              M.alloc (| M.of_value (| Value.Tuple [] |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "revm_interpreter::opcode::OpCode",
                            "new",
                            []
                          |),
                          [ M.read (| opcode |) ]
                        |)
                      |) in
                    let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let opcode := M.copy (| γ0_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "revm_interpreter::opcode::OpCode",
                          "as_str",
                          []
                        |),
                        [ M.read (| opcode |) ]
                      |)
                    |)));
                fun γ => ltac:(M.monadic (M.of_value (| Value.String "Unknown" |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_name_by_op : M.IsAssociatedFunction Self "name_by_op" name_by_op.
    
    (*
        pub const fn inputs(&self) -> u8 {
            self.info().inputs()
        }
    *)
    Definition inputs (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "revm_interpreter::opcode::OpCodeInfo",
              "inputs",
              []
            |),
            [
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "revm_interpreter::opcode::OpCode",
                    "info",
                    []
                  |),
                  [ M.read (| self |) ]
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_inputs : M.IsAssociatedFunction Self "inputs" inputs.
    
    (*
        pub const fn outputs(&self) -> u8 {
            self.info().outputs()
        }
    *)
    Definition outputs (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "revm_interpreter::opcode::OpCodeInfo",
              "outputs",
              []
            |),
            [
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "revm_interpreter::opcode::OpCode",
                    "info",
                    []
                  |),
                  [ M.read (| self |) ]
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_outputs : M.IsAssociatedFunction Self "outputs" outputs.
    
    (*
        pub const fn io_diff(&self) -> i16 {
            self.info().io_diff()
        }
    *)
    Definition io_diff (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "revm_interpreter::opcode::OpCodeInfo",
              "io_diff",
              []
            |),
            [
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "revm_interpreter::opcode::OpCode",
                    "info",
                    []
                  |),
                  [ M.read (| self |) ]
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_io_diff : M.IsAssociatedFunction Self "io_diff" io_diff.
    
    (*
        pub const fn info_by_op(opcode: u8) -> Option<OpCodeInfo> {
            if let Some(opcode) = Self::new(opcode) {
                Some(opcode.info())
            } else {
                None
            }
        }
    *)
    Definition info_by_op (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ opcode ] =>
        ltac:(M.monadic
          (let opcode := M.alloc (| opcode |) in
          M.read (|
            M.match_operator (|
              M.alloc (| M.of_value (| Value.Tuple [] |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "revm_interpreter::opcode::OpCode",
                            "new",
                            []
                          |),
                          [ M.read (| opcode |) ]
                        |)
                      |) in
                    let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let opcode := M.copy (| γ0_0 |) in
                    M.alloc (|
                      M.of_value (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          [
                            A.to_value
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "revm_interpreter::opcode::OpCode",
                                  "info",
                                  []
                                |),
                                [ opcode ]
                              |))
                          ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.of_value (| Value.StructTuple "core::option::Option::None" [] |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_info_by_op : M.IsAssociatedFunction Self "info_by_op" info_by_op.
    
    (*
        pub const fn info(&self) -> OpCodeInfo {
            if let Some(t) = OPCODE_INFO_JUMPTABLE[self.0 as usize] {
                t
            } else {
                panic!("opcode not found")
            }
        }
    *)
    Definition info (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              M.alloc (| M.of_value (| Value.Tuple [] |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.SubPointer.get_array_field (|
                        M.get_constant (| "revm_interpreter::opcode::OPCODE_INFO_JUMPTABLE" |),
                        M.alloc (|
                          M.rust_cast (|
                            M.read (|
                              M.SubPointer.get_struct_tuple_field (|
                                M.read (| self |),
                                "revm_interpreter::opcode::OpCode",
                                0
                              |)
                            |)
                          |)
                        |)
                      |) in
                    let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let t := M.copy (| γ0_0 |) in
                    t));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          M.get_function (| "core::panicking::panic_fmt", [] |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_const",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion (|
                                  M.alloc (|
                                    M.of_value (|
                                      Value.Array
                                        [
                                          A.to_value
                                            (M.read (|
                                              M.of_value (| Value.String "opcode not found" |)
                                            |))
                                        ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_info : M.IsAssociatedFunction Self "info" info.
    
    (*
        pub const fn input_output(&self) -> (u8, u8) {
            let info = self.info();
            (info.inputs, info.outputs)
        }
    *)
    Definition input_output (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let info :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "revm_interpreter::opcode::OpCode",
                    "info",
                    []
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            M.alloc (|
              M.of_value (|
                Value.Tuple
                  [
                    A.to_value
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          info,
                          "revm_interpreter::opcode::OpCodeInfo",
                          "inputs"
                        |)
                      |));
                    A.to_value
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          info,
                          "revm_interpreter::opcode::OpCodeInfo",
                          "outputs"
                        |)
                      |))
                  ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_input_output : M.IsAssociatedFunction Self "input_output" input_output.
    
    (*
        pub const fn get(self) -> u8 {
            self.0
        }
    *)
    Definition get (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_tuple_field (| self, "revm_interpreter::opcode::OpCode", 0 |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_get : M.IsAssociatedFunction Self "get" get.
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_STOP : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 0 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_STOP : M.IsAssociatedConstant Self "value_STOP" value_STOP.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_ADD : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 1 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_ADD : M.IsAssociatedConstant Self "value_ADD" value_ADD.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_MUL : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 2 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_MUL : M.IsAssociatedConstant Self "value_MUL" value_MUL.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SUB : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 3 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SUB : M.IsAssociatedConstant Self "value_SUB" value_SUB.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DIV : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 4 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DIV : M.IsAssociatedConstant Self "value_DIV" value_DIV.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SDIV : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 5 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SDIV : M.IsAssociatedConstant Self "value_SDIV" value_SDIV.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_MOD : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 6 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_MOD : M.IsAssociatedConstant Self "value_MOD" value_MOD.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SMOD : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 7 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SMOD : M.IsAssociatedConstant Self "value_SMOD" value_SMOD.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_ADDMOD : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 8 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_ADDMOD : M.IsAssociatedConstant Self "value_ADDMOD" value_ADDMOD.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_MULMOD : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 9 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_MULMOD : M.IsAssociatedConstant Self "value_MULMOD" value_MULMOD.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_EXP : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 10 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_EXP : M.IsAssociatedConstant Self "value_EXP" value_EXP.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SIGNEXTEND : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 11 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SIGNEXTEND :
      M.IsAssociatedConstant Self "value_SIGNEXTEND" value_SIGNEXTEND.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_LT : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 16 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_LT : M.IsAssociatedConstant Self "value_LT" value_LT.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_GT : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 17 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_GT : M.IsAssociatedConstant Self "value_GT" value_GT.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SLT : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 18 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SLT : M.IsAssociatedConstant Self "value_SLT" value_SLT.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SGT : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 19 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SGT : M.IsAssociatedConstant Self "value_SGT" value_SGT.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_EQ : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 20 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_EQ : M.IsAssociatedConstant Self "value_EQ" value_EQ.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_ISZERO : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 21 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_ISZERO : M.IsAssociatedConstant Self "value_ISZERO" value_ISZERO.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_AND : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 22 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_AND : M.IsAssociatedConstant Self "value_AND" value_AND.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_OR : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 23 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_OR : M.IsAssociatedConstant Self "value_OR" value_OR.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_XOR : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 24 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_XOR : M.IsAssociatedConstant Self "value_XOR" value_XOR.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_NOT : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 25 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_NOT : M.IsAssociatedConstant Self "value_NOT" value_NOT.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_BYTE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 26 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_BYTE : M.IsAssociatedConstant Self "value_BYTE" value_BYTE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SHL : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 27 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SHL : M.IsAssociatedConstant Self "value_SHL" value_SHL.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SHR : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 28 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SHR : M.IsAssociatedConstant Self "value_SHR" value_SHR.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SAR : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 29 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SAR : M.IsAssociatedConstant Self "value_SAR" value_SAR.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_KECCAK256 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 32 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_KECCAK256 :
      M.IsAssociatedConstant Self "value_KECCAK256" value_KECCAK256.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_ADDRESS : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 48 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_ADDRESS :
      M.IsAssociatedConstant Self "value_ADDRESS" value_ADDRESS.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_BALANCE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 49 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_BALANCE :
      M.IsAssociatedConstant Self "value_BALANCE" value_BALANCE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_ORIGIN : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 50 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_ORIGIN : M.IsAssociatedConstant Self "value_ORIGIN" value_ORIGIN.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_CALLER : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 51 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_CALLER : M.IsAssociatedConstant Self "value_CALLER" value_CALLER.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_CALLVALUE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 52 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_CALLVALUE :
      M.IsAssociatedConstant Self "value_CALLVALUE" value_CALLVALUE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_CALLDATALOAD : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 53 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_CALLDATALOAD :
      M.IsAssociatedConstant Self "value_CALLDATALOAD" value_CALLDATALOAD.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_CALLDATASIZE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 54 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_CALLDATASIZE :
      M.IsAssociatedConstant Self "value_CALLDATASIZE" value_CALLDATASIZE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_CALLDATACOPY : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 55 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_CALLDATACOPY :
      M.IsAssociatedConstant Self "value_CALLDATACOPY" value_CALLDATACOPY.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_CODESIZE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 56 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_CODESIZE :
      M.IsAssociatedConstant Self "value_CODESIZE" value_CODESIZE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_CODECOPY : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 57 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_CODECOPY :
      M.IsAssociatedConstant Self "value_CODECOPY" value_CODECOPY.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_GASPRICE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 58 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_GASPRICE :
      M.IsAssociatedConstant Self "value_GASPRICE" value_GASPRICE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_EXTCODESIZE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 59 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_EXTCODESIZE :
      M.IsAssociatedConstant Self "value_EXTCODESIZE" value_EXTCODESIZE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_EXTCODECOPY : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 60 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_EXTCODECOPY :
      M.IsAssociatedConstant Self "value_EXTCODECOPY" value_EXTCODECOPY.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_RETURNDATASIZE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 61 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_RETURNDATASIZE :
      M.IsAssociatedConstant Self "value_RETURNDATASIZE" value_RETURNDATASIZE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_RETURNDATACOPY : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 62 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_RETURNDATACOPY :
      M.IsAssociatedConstant Self "value_RETURNDATACOPY" value_RETURNDATACOPY.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_EXTCODEHASH : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 63 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_EXTCODEHASH :
      M.IsAssociatedConstant Self "value_EXTCODEHASH" value_EXTCODEHASH.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_BLOCKHASH : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 64 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_BLOCKHASH :
      M.IsAssociatedConstant Self "value_BLOCKHASH" value_BLOCKHASH.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_COINBASE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 65 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_COINBASE :
      M.IsAssociatedConstant Self "value_COINBASE" value_COINBASE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_TIMESTAMP : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 66 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_TIMESTAMP :
      M.IsAssociatedConstant Self "value_TIMESTAMP" value_TIMESTAMP.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_NUMBER : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 67 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_NUMBER : M.IsAssociatedConstant Self "value_NUMBER" value_NUMBER.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DIFFICULTY : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 68 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DIFFICULTY :
      M.IsAssociatedConstant Self "value_DIFFICULTY" value_DIFFICULTY.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_GASLIMIT : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 69 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_GASLIMIT :
      M.IsAssociatedConstant Self "value_GASLIMIT" value_GASLIMIT.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_CHAINID : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 70 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_CHAINID :
      M.IsAssociatedConstant Self "value_CHAINID" value_CHAINID.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SELFBALANCE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 71 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SELFBALANCE :
      M.IsAssociatedConstant Self "value_SELFBALANCE" value_SELFBALANCE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_BASEFEE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 72 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_BASEFEE :
      M.IsAssociatedConstant Self "value_BASEFEE" value_BASEFEE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_BLOBHASH : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 73 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_BLOBHASH :
      M.IsAssociatedConstant Self "value_BLOBHASH" value_BLOBHASH.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_BLOBBASEFEE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 74 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_BLOBBASEFEE :
      M.IsAssociatedConstant Self "value_BLOBBASEFEE" value_BLOBBASEFEE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_POP : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 80 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_POP : M.IsAssociatedConstant Self "value_POP" value_POP.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_MLOAD : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 81 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_MLOAD : M.IsAssociatedConstant Self "value_MLOAD" value_MLOAD.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_MSTORE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 82 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_MSTORE : M.IsAssociatedConstant Self "value_MSTORE" value_MSTORE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_MSTORE8 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 83 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_MSTORE8 :
      M.IsAssociatedConstant Self "value_MSTORE8" value_MSTORE8.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SLOAD : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 84 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SLOAD : M.IsAssociatedConstant Self "value_SLOAD" value_SLOAD.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SSTORE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 85 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SSTORE : M.IsAssociatedConstant Self "value_SSTORE" value_SSTORE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_JUMP : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 86 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_JUMP : M.IsAssociatedConstant Self "value_JUMP" value_JUMP.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_JUMPI : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 87 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_JUMPI : M.IsAssociatedConstant Self "value_JUMPI" value_JUMPI.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PC : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 88 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PC : M.IsAssociatedConstant Self "value_PC" value_PC.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_MSIZE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 89 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_MSIZE : M.IsAssociatedConstant Self "value_MSIZE" value_MSIZE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_GAS : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 90 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_GAS : M.IsAssociatedConstant Self "value_GAS" value_GAS.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_JUMPDEST : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 91 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_JUMPDEST :
      M.IsAssociatedConstant Self "value_JUMPDEST" value_JUMPDEST.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_TLOAD : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 92 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_TLOAD : M.IsAssociatedConstant Self "value_TLOAD" value_TLOAD.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_TSTORE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 93 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_TSTORE : M.IsAssociatedConstant Self "value_TSTORE" value_TSTORE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_MCOPY : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 94 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_MCOPY : M.IsAssociatedConstant Self "value_MCOPY" value_MCOPY.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH0 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 95 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH0 : M.IsAssociatedConstant Self "value_PUSH0" value_PUSH0.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH1 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 96 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH1 : M.IsAssociatedConstant Self "value_PUSH1" value_PUSH1.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH2 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 97 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH2 : M.IsAssociatedConstant Self "value_PUSH2" value_PUSH2.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH3 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 98 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH3 : M.IsAssociatedConstant Self "value_PUSH3" value_PUSH3.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH4 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 99 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH4 : M.IsAssociatedConstant Self "value_PUSH4" value_PUSH4.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH5 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 100 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH5 : M.IsAssociatedConstant Self "value_PUSH5" value_PUSH5.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH6 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 101 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH6 : M.IsAssociatedConstant Self "value_PUSH6" value_PUSH6.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH7 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 102 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH7 : M.IsAssociatedConstant Self "value_PUSH7" value_PUSH7.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH8 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 103 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH8 : M.IsAssociatedConstant Self "value_PUSH8" value_PUSH8.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH9 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 104 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH9 : M.IsAssociatedConstant Self "value_PUSH9" value_PUSH9.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH10 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 105 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH10 : M.IsAssociatedConstant Self "value_PUSH10" value_PUSH10.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH11 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 106 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH11 : M.IsAssociatedConstant Self "value_PUSH11" value_PUSH11.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH12 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 107 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH12 : M.IsAssociatedConstant Self "value_PUSH12" value_PUSH12.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH13 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 108 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH13 : M.IsAssociatedConstant Self "value_PUSH13" value_PUSH13.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH14 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 109 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH14 : M.IsAssociatedConstant Self "value_PUSH14" value_PUSH14.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH15 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 110 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH15 : M.IsAssociatedConstant Self "value_PUSH15" value_PUSH15.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH16 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 111 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH16 : M.IsAssociatedConstant Self "value_PUSH16" value_PUSH16.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH17 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 112 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH17 : M.IsAssociatedConstant Self "value_PUSH17" value_PUSH17.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH18 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 113 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH18 : M.IsAssociatedConstant Self "value_PUSH18" value_PUSH18.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH19 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 114 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH19 : M.IsAssociatedConstant Self "value_PUSH19" value_PUSH19.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH20 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 115 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH20 : M.IsAssociatedConstant Self "value_PUSH20" value_PUSH20.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH21 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 116 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH21 : M.IsAssociatedConstant Self "value_PUSH21" value_PUSH21.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH22 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 117 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH22 : M.IsAssociatedConstant Self "value_PUSH22" value_PUSH22.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH23 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 118 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH23 : M.IsAssociatedConstant Self "value_PUSH23" value_PUSH23.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH24 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 119 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH24 : M.IsAssociatedConstant Self "value_PUSH24" value_PUSH24.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH25 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 120 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH25 : M.IsAssociatedConstant Self "value_PUSH25" value_PUSH25.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH26 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 121 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH26 : M.IsAssociatedConstant Self "value_PUSH26" value_PUSH26.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH27 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 122 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH27 : M.IsAssociatedConstant Self "value_PUSH27" value_PUSH27.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH28 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 123 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH28 : M.IsAssociatedConstant Self "value_PUSH28" value_PUSH28.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH29 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 124 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH29 : M.IsAssociatedConstant Self "value_PUSH29" value_PUSH29.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH30 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 125 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH30 : M.IsAssociatedConstant Self "value_PUSH30" value_PUSH30.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH31 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 126 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH31 : M.IsAssociatedConstant Self "value_PUSH31" value_PUSH31.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_PUSH32 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 127 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_PUSH32 : M.IsAssociatedConstant Self "value_PUSH32" value_PUSH32.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP1 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 128 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP1 : M.IsAssociatedConstant Self "value_DUP1" value_DUP1.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP2 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 129 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP2 : M.IsAssociatedConstant Self "value_DUP2" value_DUP2.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP3 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 130 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP3 : M.IsAssociatedConstant Self "value_DUP3" value_DUP3.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP4 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 131 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP4 : M.IsAssociatedConstant Self "value_DUP4" value_DUP4.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP5 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 132 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP5 : M.IsAssociatedConstant Self "value_DUP5" value_DUP5.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP6 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 133 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP6 : M.IsAssociatedConstant Self "value_DUP6" value_DUP6.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP7 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 134 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP7 : M.IsAssociatedConstant Self "value_DUP7" value_DUP7.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP8 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 135 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP8 : M.IsAssociatedConstant Self "value_DUP8" value_DUP8.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP9 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 136 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP9 : M.IsAssociatedConstant Self "value_DUP9" value_DUP9.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP10 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 137 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP10 : M.IsAssociatedConstant Self "value_DUP10" value_DUP10.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP11 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 138 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP11 : M.IsAssociatedConstant Self "value_DUP11" value_DUP11.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP12 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 139 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP12 : M.IsAssociatedConstant Self "value_DUP12" value_DUP12.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP13 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 140 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP13 : M.IsAssociatedConstant Self "value_DUP13" value_DUP13.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP14 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 141 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP14 : M.IsAssociatedConstant Self "value_DUP14" value_DUP14.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP15 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 142 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP15 : M.IsAssociatedConstant Self "value_DUP15" value_DUP15.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUP16 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 143 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUP16 : M.IsAssociatedConstant Self "value_DUP16" value_DUP16.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP1 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 144 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP1 : M.IsAssociatedConstant Self "value_SWAP1" value_SWAP1.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP2 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 145 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP2 : M.IsAssociatedConstant Self "value_SWAP2" value_SWAP2.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP3 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 146 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP3 : M.IsAssociatedConstant Self "value_SWAP3" value_SWAP3.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP4 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 147 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP4 : M.IsAssociatedConstant Self "value_SWAP4" value_SWAP4.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP5 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 148 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP5 : M.IsAssociatedConstant Self "value_SWAP5" value_SWAP5.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP6 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 149 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP6 : M.IsAssociatedConstant Self "value_SWAP6" value_SWAP6.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP7 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 150 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP7 : M.IsAssociatedConstant Self "value_SWAP7" value_SWAP7.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP8 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 151 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP8 : M.IsAssociatedConstant Self "value_SWAP8" value_SWAP8.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP9 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 152 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP9 : M.IsAssociatedConstant Self "value_SWAP9" value_SWAP9.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP10 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 153 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP10 : M.IsAssociatedConstant Self "value_SWAP10" value_SWAP10.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP11 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 154 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP11 : M.IsAssociatedConstant Self "value_SWAP11" value_SWAP11.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP12 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 155 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP12 : M.IsAssociatedConstant Self "value_SWAP12" value_SWAP12.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP13 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 156 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP13 : M.IsAssociatedConstant Self "value_SWAP13" value_SWAP13.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP14 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 157 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP14 : M.IsAssociatedConstant Self "value_SWAP14" value_SWAP14.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP15 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 158 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP15 : M.IsAssociatedConstant Self "value_SWAP15" value_SWAP15.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAP16 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 159 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAP16 : M.IsAssociatedConstant Self "value_SWAP16" value_SWAP16.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_LOG0 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 160 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_LOG0 : M.IsAssociatedConstant Self "value_LOG0" value_LOG0.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_LOG1 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 161 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_LOG1 : M.IsAssociatedConstant Self "value_LOG1" value_LOG1.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_LOG2 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 162 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_LOG2 : M.IsAssociatedConstant Self "value_LOG2" value_LOG2.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_LOG3 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 163 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_LOG3 : M.IsAssociatedConstant Self "value_LOG3" value_LOG3.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_LOG4 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 164 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_LOG4 : M.IsAssociatedConstant Self "value_LOG4" value_LOG4.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DATALOAD : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 208 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DATALOAD :
      M.IsAssociatedConstant Self "value_DATALOAD" value_DATALOAD.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DATALOADN : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 209 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DATALOADN :
      M.IsAssociatedConstant Self "value_DATALOADN" value_DATALOADN.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DATASIZE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 210 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DATASIZE :
      M.IsAssociatedConstant Self "value_DATASIZE" value_DATASIZE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DATACOPY : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 211 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DATACOPY :
      M.IsAssociatedConstant Self "value_DATACOPY" value_DATACOPY.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_RJUMP : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 224 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_RJUMP : M.IsAssociatedConstant Self "value_RJUMP" value_RJUMP.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_RJUMPI : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 225 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_RJUMPI : M.IsAssociatedConstant Self "value_RJUMPI" value_RJUMPI.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_RJUMPV : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 226 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_RJUMPV : M.IsAssociatedConstant Self "value_RJUMPV" value_RJUMPV.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_CALLF : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 227 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_CALLF : M.IsAssociatedConstant Self "value_CALLF" value_CALLF.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_RETF : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 228 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_RETF : M.IsAssociatedConstant Self "value_RETF" value_RETF.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_JUMPF : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 229 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_JUMPF : M.IsAssociatedConstant Self "value_JUMPF" value_JUMPF.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DUPN : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 230 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DUPN : M.IsAssociatedConstant Self "value_DUPN" value_DUPN.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SWAPN : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 231 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SWAPN : M.IsAssociatedConstant Self "value_SWAPN" value_SWAPN.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_EXCHANGE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 232 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_EXCHANGE :
      M.IsAssociatedConstant Self "value_EXCHANGE" value_EXCHANGE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_EOFCREATE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 236 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_EOFCREATE :
      M.IsAssociatedConstant Self "value_EOFCREATE" value_EOFCREATE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_TXCREATE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 237 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_TXCREATE :
      M.IsAssociatedConstant Self "value_TXCREATE" value_TXCREATE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_RETURNCONTRACT : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 238 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_RETURNCONTRACT :
      M.IsAssociatedConstant Self "value_RETURNCONTRACT" value_RETURNCONTRACT.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_CREATE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 240 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_CREATE : M.IsAssociatedConstant Self "value_CREATE" value_CREATE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_CALL : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 241 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_CALL : M.IsAssociatedConstant Self "value_CALL" value_CALL.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_CALLCODE : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 242 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_CALLCODE :
      M.IsAssociatedConstant Self "value_CALLCODE" value_CALLCODE.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_RETURN : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 243 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_RETURN : M.IsAssociatedConstant Self "value_RETURN" value_RETURN.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_DELEGATECALL : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 244 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_DELEGATECALL :
      M.IsAssociatedConstant Self "value_DELEGATECALL" value_DELEGATECALL.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_CREATE2 : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 245 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_CREATE2 :
      M.IsAssociatedConstant Self "value_CREATE2" value_CREATE2.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_RETURNDATALOAD : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 247 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_RETURNDATALOAD :
      M.IsAssociatedConstant Self "value_RETURNDATALOAD" value_RETURNDATALOAD.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_EXTCALL : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 248 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_EXTCALL :
      M.IsAssociatedConstant Self "value_EXTCALL" value_EXTCALL.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_EXFCALL : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 249 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_EXFCALL :
      M.IsAssociatedConstant Self "value_EXFCALL" value_EXFCALL.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_STATICCALL : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 250 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_STATICCALL :
      M.IsAssociatedConstant Self "value_STATICCALL" value_STATICCALL.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_EXTSCALL : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 251 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_EXTSCALL :
      M.IsAssociatedConstant Self "value_EXTSCALL" value_EXTSCALL.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_REVERT : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 253 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_REVERT : M.IsAssociatedConstant Self "value_REVERT" value_REVERT.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_INVALID : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 254 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_INVALID :
      M.IsAssociatedConstant Self "value_INVALID" value_INVALID.
    
    (*             pub const $name: Self = Self($val); *)
    (* Ty.path "revm_interpreter::opcode::OpCode" *)
    Definition value_SELFDESTRUCT : A.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.of_value (|
              Value.StructTuple
                "revm_interpreter::opcode::OpCode"
                [ A.to_value (M.of_value (| Value.Integer 255 |)) ]
            |)
          |))).
    
    Axiom AssociatedConstant_value_SELFDESTRUCT :
      M.IsAssociatedConstant Self "value_SELFDESTRUCT" value_SELFDESTRUCT.
  End Impl_revm_interpreter_opcode_OpCode.
  
  (* StructRecord
    {
      name := "OpCodeInfo";
      ty_params := [];
      fields :=
        [
          ("name_ptr", Ty.apply (Ty.path "core::ptr::non_null::NonNull") [ Ty.path "u8" ]);
          ("name_len", Ty.path "u8");
          ("inputs", Ty.path "u8");
          ("outputs", Ty.path "u8");
          ("immediate_size", Ty.path "u8");
          ("not_eof", Ty.path "bool");
          ("terminating", Ty.path "bool")
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_revm_interpreter_opcode_OpCodeInfo.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeInfo".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              M.of_value (| Value.DeclaredButUndefined |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      M.of_value (| Value.DeclaredButUndefined |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.of_value (| Value.DeclaredButUndefined |),
                              [ fun γ => ltac:(M.monadic (M.read (| self |))) ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_revm_interpreter_opcode_OpCodeInfo.
  
  Module Impl_core_marker_Copy_for_revm_interpreter_opcode_OpCodeInfo.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeInfo".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_revm_interpreter_opcode_OpCodeInfo.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_interpreter_opcode_OpCodeInfo.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeInfo".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_interpreter_opcode_OpCodeInfo.
  
  Module Impl_core_cmp_PartialEq_for_revm_interpreter_opcode_OpCodeInfo.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeInfo".
    
    (* PartialEq *)
    Definition eq (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            LogicalOp.and (|
              LogicalOp.and (|
                LogicalOp.and (|
                  LogicalOp.and (|
                    LogicalOp.and (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.apply (Ty.path "core::ptr::non_null::NonNull") [ Ty.path "u8" ],
                          [ Ty.apply (Ty.path "core::ptr::non_null::NonNull") [ Ty.path "u8" ] ],
                          "eq",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "revm_interpreter::opcode::OpCodeInfo",
                            "name_ptr"
                          |);
                          M.SubPointer.get_struct_record_field (|
                            M.read (| other |),
                            "revm_interpreter::opcode::OpCodeInfo",
                            "name_ptr"
                          |)
                        ]
                      |),
                      ltac:(M.monadic
                        (BinOp.Pure.eq (|
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_interpreter::opcode::OpCodeInfo",
                              "name_len"
                            |)
                          |),
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| other |),
                              "revm_interpreter::opcode::OpCodeInfo",
                              "name_len"
                            |)
                          |)
                        |)))
                    |),
                    ltac:(M.monadic
                      (BinOp.Pure.eq (|
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "revm_interpreter::opcode::OpCodeInfo",
                            "inputs"
                          |)
                        |),
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| other |),
                            "revm_interpreter::opcode::OpCodeInfo",
                            "inputs"
                          |)
                        |)
                      |)))
                  |),
                  ltac:(M.monadic
                    (BinOp.Pure.eq (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm_interpreter::opcode::OpCodeInfo",
                          "outputs"
                        |)
                      |),
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| other |),
                          "revm_interpreter::opcode::OpCodeInfo",
                          "outputs"
                        |)
                      |)
                    |)))
                |),
                ltac:(M.monadic
                  (BinOp.Pure.eq (|
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_interpreter::opcode::OpCodeInfo",
                        "immediate_size"
                      |)
                    |),
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "revm_interpreter::opcode::OpCodeInfo",
                        "immediate_size"
                      |)
                    |)
                  |)))
              |),
              ltac:(M.monadic
                (BinOp.Pure.eq (|
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_interpreter::opcode::OpCodeInfo",
                      "not_eof"
                    |)
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "revm_interpreter::opcode::OpCodeInfo",
                      "not_eof"
                    |)
                  |)
                |)))
            |),
            ltac:(M.monadic
              (BinOp.Pure.eq (|
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "revm_interpreter::opcode::OpCodeInfo",
                    "terminating"
                  |)
                |),
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| other |),
                    "revm_interpreter::opcode::OpCodeInfo",
                    "terminating"
                  |)
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_revm_interpreter_opcode_OpCodeInfo.
  
  Module Impl_core_marker_StructuralEq_for_revm_interpreter_opcode_OpCodeInfo.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeInfo".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralEq_for_revm_interpreter_opcode_OpCodeInfo.
  
  Module Impl_core_cmp_Eq_for_revm_interpreter_opcode_OpCodeInfo.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeInfo".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              M.of_value (| Value.DeclaredButUndefined |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      M.of_value (| Value.DeclaredButUndefined |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.of_value (| Value.DeclaredButUndefined |),
                              [
                                fun γ =>
                                  ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_revm_interpreter_opcode_OpCodeInfo.
  
  Module Impl_core_cmp_PartialOrd_for_revm_interpreter_opcode_OpCodeInfo.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeInfo".
    
    (* PartialOrd *)
    Definition partial_cmp (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            M.match_operator (|
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::PartialOrd",
                    Ty.apply (Ty.path "core::ptr::non_null::NonNull") [ Ty.path "u8" ],
                    [ Ty.apply (Ty.path "core::ptr::non_null::NonNull") [ Ty.path "u8" ] ],
                    "partial_cmp",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_interpreter::opcode::OpCodeInfo",
                      "name_ptr"
                    |);
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "revm_interpreter::opcode::OpCodeInfo",
                      "name_ptr"
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "u8",
                            [ Ty.path "u8" ],
                            "partial_cmp",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_interpreter::opcode::OpCodeInfo",
                              "name_len"
                            |);
                            M.SubPointer.get_struct_record_field (|
                              M.read (| other |),
                              "revm_interpreter::opcode::OpCodeInfo",
                              "name_len"
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.path "u8",
                                    [ Ty.path "u8" ],
                                    "partial_cmp",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "revm_interpreter::opcode::OpCodeInfo",
                                      "inputs"
                                    |);
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| other |),
                                      "revm_interpreter::opcode::OpCodeInfo",
                                      "inputs"
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::cmp::PartialOrd",
                                            Ty.path "u8",
                                            [ Ty.path "u8" ],
                                            "partial_cmp",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "revm_interpreter::opcode::OpCodeInfo",
                                              "outputs"
                                            |);
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| other |),
                                              "revm_interpreter::opcode::OpCodeInfo",
                                              "outputs"
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::cmp::PartialOrd",
                                                    Ty.path "u8",
                                                    [ Ty.path "u8" ],
                                                    "partial_cmp",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "revm_interpreter::opcode::OpCodeInfo",
                                                      "immediate_size"
                                                    |);
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| other |),
                                                      "revm_interpreter::opcode::OpCodeInfo",
                                                      "immediate_size"
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::option::Option::Some",
                                                        0
                                                      |) in
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "bool",
                                                            [ Ty.path "bool" ],
                                                            "partial_cmp",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| self |),
                                                              "revm_interpreter::opcode::OpCodeInfo",
                                                              "not_eof"
                                                            |);
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| other |),
                                                              "revm_interpreter::opcode::OpCodeInfo",
                                                              "not_eof"
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::cmp::PartialOrd",
                                                                  Ty.path "bool",
                                                                  [ Ty.path "bool" ],
                                                                  "partial_cmp",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| self |),
                                                                    "revm_interpreter::opcode::OpCodeInfo",
                                                                    "terminating"
                                                                  |);
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| other |),
                                                                    "revm_interpreter::opcode::OpCodeInfo",
                                                                    "terminating"
                                                                  |)
                                                                ]
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let cmp := M.copy (| γ |) in
                                                            cmp))
                                                      ]
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let cmp := M.copy (| γ |) in
                                                    cmp))
                                              ]
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let cmp := M.copy (| γ |) in
                                            cmp))
                                      ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let cmp := M.copy (| γ |) in
                                    cmp))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let cmp := M.copy (| γ |) in
                            cmp))
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let cmp := M.copy (| γ |) in
                    cmp))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
  End Impl_core_cmp_PartialOrd_for_revm_interpreter_opcode_OpCodeInfo.
  
  Module Impl_core_cmp_Ord_for_revm_interpreter_opcode_OpCodeInfo.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeInfo".
    
    (* Ord *)
    Definition cmp (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            M.match_operator (|
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::Ord",
                    Ty.apply (Ty.path "core::ptr::non_null::NonNull") [ Ty.path "u8" ],
                    [],
                    "cmp",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_interpreter::opcode::OpCodeInfo",
                      "name_ptr"
                    |);
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "revm_interpreter::opcode::OpCodeInfo",
                      "name_ptr"
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "core::cmp::Ord", Ty.path "u8", [], "cmp", [] |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_interpreter::opcode::OpCodeInfo",
                              "name_len"
                            |);
                            M.SubPointer.get_struct_record_field (|
                              M.read (| other |),
                              "revm_interpreter::opcode::OpCodeInfo",
                              "name_len"
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::Ord",
                                    Ty.path "u8",
                                    [],
                                    "cmp",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "revm_interpreter::opcode::OpCodeInfo",
                                      "inputs"
                                    |);
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| other |),
                                      "revm_interpreter::opcode::OpCodeInfo",
                                      "inputs"
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::cmp::Ord",
                                            Ty.path "u8",
                                            [],
                                            "cmp",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "revm_interpreter::opcode::OpCodeInfo",
                                              "outputs"
                                            |);
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| other |),
                                              "revm_interpreter::opcode::OpCodeInfo",
                                              "outputs"
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::cmp::Ord",
                                                    Ty.path "u8",
                                                    [],
                                                    "cmp",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "revm_interpreter::opcode::OpCodeInfo",
                                                      "immediate_size"
                                                    |);
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| other |),
                                                      "revm_interpreter::opcode::OpCodeInfo",
                                                      "immediate_size"
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::cmp::Ord",
                                                            Ty.path "bool",
                                                            [],
                                                            "cmp",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| self |),
                                                              "revm_interpreter::opcode::OpCodeInfo",
                                                              "not_eof"
                                                            |);
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| other |),
                                                              "revm_interpreter::opcode::OpCodeInfo",
                                                              "not_eof"
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::cmp::Ord",
                                                                  Ty.path "bool",
                                                                  [],
                                                                  "cmp",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| self |),
                                                                    "revm_interpreter::opcode::OpCodeInfo",
                                                                    "terminating"
                                                                  |);
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| other |),
                                                                    "revm_interpreter::opcode::OpCodeInfo",
                                                                    "terminating"
                                                                  |)
                                                                ]
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let cmp := M.copy (| γ |) in
                                                            cmp))
                                                      ]
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let cmp := M.copy (| γ |) in
                                                    cmp))
                                              ]
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let cmp := M.copy (| γ |) in
                                            cmp))
                                      ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let cmp := M.copy (| γ |) in
                                    cmp))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let cmp := M.copy (| γ |) in
                            cmp))
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let cmp := M.copy (| γ |) in
                    cmp))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Ord"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
  End Impl_core_cmp_Ord_for_revm_interpreter_opcode_OpCodeInfo.
  
  Module Impl_core_hash_Hash_for_revm_interpreter_opcode_OpCodeInfo.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeInfo".
    
    (* Hash *)
    Definition hash (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.apply (Ty.path "core::ptr::non_null::NonNull") [ Ty.path "u8" ],
                    [],
                    "hash",
                    [ __H ]
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_interpreter::opcode::OpCodeInfo",
                      "name_ptr"
                    |);
                    M.read (| state |)
                  ]
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (| "core::hash::Hash", Ty.path "u8", [], "hash", [ __H ] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_interpreter::opcode::OpCodeInfo",
                      "name_len"
                    |);
                    M.read (| state |)
                  ]
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (| "core::hash::Hash", Ty.path "u8", [], "hash", [ __H ] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_interpreter::opcode::OpCodeInfo",
                      "inputs"
                    |);
                    M.read (| state |)
                  ]
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (| "core::hash::Hash", Ty.path "u8", [], "hash", [ __H ] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_interpreter::opcode::OpCodeInfo",
                      "outputs"
                    |);
                    M.read (| state |)
                  ]
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (| "core::hash::Hash", Ty.path "u8", [], "hash", [ __H ] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_interpreter::opcode::OpCodeInfo",
                      "immediate_size"
                    |);
                    M.read (| state |)
                  ]
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (| "core::hash::Hash", Ty.path "bool", [], "hash", [ __H ] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_interpreter::opcode::OpCodeInfo",
                      "not_eof"
                    |);
                    M.read (| state |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "core::hash::Hash", Ty.path "bool", [], "hash", [ __H ] |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "revm_interpreter::opcode::OpCodeInfo",
                    "terminating"
                  |);
                  M.read (| state |)
                ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_revm_interpreter_opcode_OpCodeInfo.
  
  Module Impl_core_fmt_Debug_for_revm_interpreter_opcode_OpCodeInfo.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeInfo".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("OpCodeInfo")
                .field("name", &self.name())
                .field("inputs", &self.inputs())
                .field("outputs", &self.outputs())
                .field("not_eof", &self.is_disabled_in_eof())
                .field("terminating", &self.is_terminating())
                .field("immediate_size", &self.immediate_size())
                .finish()
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::builders::DebugStruct",
              "finish",
              []
            |),
            [
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::builders::DebugStruct",
                  "field",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "core::fmt::builders::DebugStruct",
                      "field",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::builders::DebugStruct",
                          "field",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::builders::DebugStruct",
                              "field",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "core::fmt::builders::DebugStruct",
                                  "field",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::builders::DebugStruct",
                                      "field",
                                      []
                                    |),
                                    [
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::Formatter",
                                            "debug_struct",
                                            []
                                          |),
                                          [
                                            M.read (| f |);
                                            M.read (| M.of_value (| Value.String "OpCodeInfo" |) |)
                                          ]
                                        |)
                                      |);
                                      M.read (| M.of_value (| Value.String "name" |) |);
                                      (* Unsize *)
                                      M.pointer_coercion (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "revm_interpreter::opcode::OpCodeInfo",
                                              "name",
                                              []
                                            |),
                                            [ M.read (| self |) ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.read (| M.of_value (| Value.String "inputs" |) |);
                                  (* Unsize *)
                                  M.pointer_coercion (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "revm_interpreter::opcode::OpCodeInfo",
                                          "inputs",
                                          []
                                        |),
                                        [ M.read (| self |) ]
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.read (| M.of_value (| Value.String "outputs" |) |);
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::opcode::OpCodeInfo",
                                      "outputs",
                                      []
                                    |),
                                    [ M.read (| self |) ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.read (| M.of_value (| Value.String "not_eof" |) |);
                          (* Unsize *)
                          M.pointer_coercion (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "revm_interpreter::opcode::OpCodeInfo",
                                  "is_disabled_in_eof",
                                  []
                                |),
                                [ M.read (| self |) ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.read (| M.of_value (| Value.String "terminating" |) |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "revm_interpreter::opcode::OpCodeInfo",
                              "is_terminating",
                              []
                            |),
                            [ M.read (| self |) ]
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.read (| M.of_value (| Value.String "immediate_size" |) |);
                  (* Unsize *)
                  M.pointer_coercion (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "revm_interpreter::opcode::OpCodeInfo",
                          "immediate_size",
                          []
                        |),
                        [ M.read (| self |) ]
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_revm_interpreter_opcode_OpCodeInfo.
  
  Module Impl_revm_interpreter_opcode_OpCodeInfo.
    Definition Self : Ty.t := Ty.path "revm_interpreter::opcode::OpCodeInfo".
    
    (*
        pub const fn new(name: &'static str) -> Self {
            assert!(name.len() < 256, "opcode name is too long");
            Self {
                name_ptr: unsafe { NonNull::new_unchecked(name.as_ptr().cast_mut()) },
                name_len: name.len() as u8,
                inputs: 0,
                outputs: 0,
                not_eof: false,
                terminating: false,
                immediate_size: 0,
            }
        }
    *)
    Definition new (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ name ] =>
        ltac:(M.monadic
          (let name := M.alloc (| name |) in
          M.read (|
            let _ :=
              M.match_operator (|
                M.alloc (| M.of_value (| Value.Tuple [] |) |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.Pure.not (|
                              BinOp.Pure.lt (|
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "str", "len", [] |),
                                  [ M.read (| name |) ]
                                |),
                                M.of_value (| Value.Integer 256 |)
                              |)
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            M.get_function (| "core::panicking::panic_fmt", [] |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_const",
                                  []
                                |),
                                [
                                  (* Unsize *)
                                  M.pointer_coercion (|
                                    M.alloc (|
                                      M.of_value (|
                                        Value.Array
                                          [
                                            A.to_value
                                              (M.read (|
                                                M.of_value (|
                                                  Value.String "opcode name is too long"
                                                |)
                                              |))
                                          ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
                ]
              |) in
            M.alloc (|
              M.of_value (|
                Value.StructRecord
                  "revm_interpreter::opcode::OpCodeInfo"
                  [
                    ("name_ptr",
                      A.to_value
                        (M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "core::ptr::non_null::NonNull") [ Ty.path "u8" ],
                            "new_unchecked",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "*const") [ Ty.path "u8" ],
                                "cast_mut",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "str", "as_ptr", [] |),
                                  [ M.read (| name |) ]
                                |)
                              ]
                            |)
                          ]
                        |)));
                    ("name_len",
                      A.to_value
                        (M.rust_cast (|
                          M.call_closure (|
                            M.get_associated_function (| Ty.path "str", "len", [] |),
                            [ M.read (| name |) ]
                          |)
                        |)));
                    ("inputs", A.to_value (M.of_value (| Value.Integer 0 |)));
                    ("outputs", A.to_value (M.of_value (| Value.Integer 0 |)));
                    ("not_eof", A.to_value (M.of_value (| Value.Bool false |)));
                    ("terminating", A.to_value (M.of_value (| Value.Bool false |)));
                    ("immediate_size", A.to_value (M.of_value (| Value.Integer 0 |)))
                  ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
    
    (*
        pub const fn name(&self) -> &'static str {
            // SAFETY: `self.name_*` can only be initialized with a valid `&'static str`.
            unsafe {
                // TODO: Use `str::from_raw_parts` when it's stable.
                let slice = core::slice::from_raw_parts(self.name_ptr.as_ptr(), self.name_len as usize);
                core::str::from_utf8_unchecked(slice)
            }
        }
    *)
    Definition name (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let slice :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (| "core::slice::raw::from_raw_parts", [ Ty.path "u8" ] |),
                  [
                    (* MutToConstPointer *)
                    M.pointer_coercion (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "core::ptr::non_null::NonNull") [ Ty.path "u8" ],
                          "as_ptr",
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_interpreter::opcode::OpCodeInfo",
                              "name_ptr"
                            |)
                          |)
                        ]
                      |)
                    |);
                    M.rust_cast (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm_interpreter::opcode::OpCodeInfo",
                          "name_len"
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_function (| "core::str::converts::from_utf8_unchecked", [] |),
                [ M.read (| slice |) ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_name : M.IsAssociatedFunction Self "name" name.
    
    (*
        pub const fn io_diff(&self) -> i16 {
            self.outputs as i16 - self.inputs as i16
        }
    *)
    Definition io_diff (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          BinOp.Panic.sub (|
            Integer.I16,
            M.rust_cast (|
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_interpreter::opcode::OpCodeInfo",
                  "outputs"
                |)
              |)
            |),
            M.rust_cast (|
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_interpreter::opcode::OpCodeInfo",
                  "inputs"
                |)
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_io_diff : M.IsAssociatedFunction Self "io_diff" io_diff.
    
    (*
        pub const fn inputs(&self) -> u8 {
            self.inputs
        }
    *)
    Definition inputs (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_interpreter::opcode::OpCodeInfo",
              "inputs"
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_inputs : M.IsAssociatedFunction Self "inputs" inputs.
    
    (*
        pub const fn outputs(&self) -> u8 {
            self.outputs
        }
    *)
    Definition outputs (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_interpreter::opcode::OpCodeInfo",
              "outputs"
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_outputs : M.IsAssociatedFunction Self "outputs" outputs.
    
    (*
        pub const fn is_disabled_in_eof(&self) -> bool {
            self.not_eof
        }
    *)
    Definition is_disabled_in_eof (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_interpreter::opcode::OpCodeInfo",
              "not_eof"
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_is_disabled_in_eof :
      M.IsAssociatedFunction Self "is_disabled_in_eof" is_disabled_in_eof.
    
    (*
        pub const fn is_terminating(&self) -> bool {
            self.terminating
        }
    *)
    Definition is_terminating (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_interpreter::opcode::OpCodeInfo",
              "terminating"
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_is_terminating :
      M.IsAssociatedFunction Self "is_terminating" is_terminating.
    
    (*
        pub const fn immediate_size(&self) -> u8 {
            self.immediate_size
        }
    *)
    Definition immediate_size (τ : list Ty.t) (α : list A.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_interpreter::opcode::OpCodeInfo",
              "immediate_size"
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_immediate_size :
      M.IsAssociatedFunction Self "immediate_size" immediate_size.
  End Impl_revm_interpreter_opcode_OpCodeInfo.
  
  (*
  pub const fn not_eof(mut op: OpCodeInfo) -> OpCodeInfo {
      op.not_eof = true;
      op
  }
  *)
  Definition not_eof (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ op ] =>
      ltac:(M.monadic
        (let op := M.alloc (| op |) in
        M.read (|
          let _ :=
            M.write (|
              M.SubPointer.get_struct_record_field (|
                op,
                "revm_interpreter::opcode::OpCodeInfo",
                "not_eof"
              |),
              M.of_value (| Value.Bool true |)
            |) in
          op
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub const fn immediate_size(mut op: OpCodeInfo, n: u8) -> OpCodeInfo {
      op.immediate_size = n;
      op
  }
  *)
  Definition immediate_size (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ op; n ] =>
      ltac:(M.monadic
        (let op := M.alloc (| op |) in
        let n := M.alloc (| n |) in
        M.read (|
          let _ :=
            M.write (|
              M.SubPointer.get_struct_record_field (|
                op,
                "revm_interpreter::opcode::OpCodeInfo",
                "immediate_size"
              |),
              M.read (| n |)
            |) in
          op
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub const fn terminating(mut op: OpCodeInfo) -> OpCodeInfo {
      op.terminating = true;
      op
  }
  *)
  Definition terminating (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ op ] =>
      ltac:(M.monadic
        (let op := M.alloc (| op |) in
        M.read (|
          let _ :=
            M.write (|
              M.SubPointer.get_struct_record_field (|
                op,
                "revm_interpreter::opcode::OpCodeInfo",
                "terminating"
              |),
              M.of_value (| Value.Bool true |)
            |) in
          op
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub const fn stack_io(mut op: OpCodeInfo, inputs: u8, outputs: u8) -> OpCodeInfo {
      op.inputs = inputs;
      op.outputs = outputs;
      op
  }
  *)
  Definition stack_io (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ op; inputs; outputs ] =>
      ltac:(M.monadic
        (let op := M.alloc (| op |) in
        let inputs := M.alloc (| inputs |) in
        let outputs := M.alloc (| outputs |) in
        M.read (|
          let _ :=
            M.write (|
              M.SubPointer.get_struct_record_field (|
                op,
                "revm_interpreter::opcode::OpCodeInfo",
                "inputs"
              |),
              M.read (| inputs |)
            |) in
          let _ :=
            M.write (|
              M.SubPointer.get_struct_record_field (|
                op,
                "revm_interpreter::opcode::OpCodeInfo",
                "outputs"
              |),
              M.read (| outputs |)
            |) in
          op
        |)))
    | _, _ => M.impossible
    end.
  
  Definition value_NOP : A.t :=
    M.run ltac:(M.monadic (M.get_constant (| "revm_interpreter::opcode::JUMPDEST" |))).
  
  Definition value_STOP : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 0 |) |))).
  
  Definition value_ADD : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 1 |) |))).
  
  Definition value_MUL : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 2 |) |))).
  
  Definition value_SUB : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 3 |) |))).
  
  Definition value_DIV : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 4 |) |))).
  
  Definition value_SDIV : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 5 |) |))).
  
  Definition value_MOD : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 6 |) |))).
  
  Definition value_SMOD : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 7 |) |))).
  
  Definition value_ADDMOD : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 8 |) |))).
  
  Definition value_MULMOD : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 9 |) |))).
  
  Definition value_EXP : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 10 |) |))).
  
  Definition value_SIGNEXTEND : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 11 |) |))).
  
  Definition value_LT : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 16 |) |))).
  
  Definition value_GT : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 17 |) |))).
  
  Definition value_SLT : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 18 |) |))).
  
  Definition value_SGT : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 19 |) |))).
  
  Definition value_EQ : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 20 |) |))).
  
  Definition value_ISZERO : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 21 |) |))).
  
  Definition value_AND : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 22 |) |))).
  
  Definition value_OR : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 23 |) |))).
  
  Definition value_XOR : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 24 |) |))).
  
  Definition value_NOT : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 25 |) |))).
  
  Definition value_BYTE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 26 |) |))).
  
  Definition value_SHL : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 27 |) |))).
  
  Definition value_SHR : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 28 |) |))).
  
  Definition value_SAR : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 29 |) |))).
  
  Definition value_KECCAK256 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 32 |) |))).
  
  Definition value_ADDRESS : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 48 |) |))).
  
  Definition value_BALANCE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 49 |) |))).
  
  Definition value_ORIGIN : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 50 |) |))).
  
  Definition value_CALLER : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 51 |) |))).
  
  Definition value_CALLVALUE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 52 |) |))).
  
  Definition value_CALLDATALOAD : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 53 |) |))).
  
  Definition value_CALLDATASIZE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 54 |) |))).
  
  Definition value_CALLDATACOPY : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 55 |) |))).
  
  Definition value_CODESIZE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 56 |) |))).
  
  Definition value_CODECOPY : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 57 |) |))).
  
  Definition value_GASPRICE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 58 |) |))).
  
  Definition value_EXTCODESIZE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 59 |) |))).
  
  Definition value_EXTCODECOPY : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 60 |) |))).
  
  Definition value_RETURNDATASIZE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 61 |) |))).
  
  Definition value_RETURNDATACOPY : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 62 |) |))).
  
  Definition value_EXTCODEHASH : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 63 |) |))).
  
  Definition value_BLOCKHASH : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 64 |) |))).
  
  Definition value_COINBASE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 65 |) |))).
  
  Definition value_TIMESTAMP : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 66 |) |))).
  
  Definition value_NUMBER : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 67 |) |))).
  
  Definition value_DIFFICULTY : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 68 |) |))).
  
  Definition value_GASLIMIT : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 69 |) |))).
  
  Definition value_CHAINID : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 70 |) |))).
  
  Definition value_SELFBALANCE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 71 |) |))).
  
  Definition value_BASEFEE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 72 |) |))).
  
  Definition value_BLOBHASH : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 73 |) |))).
  
  Definition value_BLOBBASEFEE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 74 |) |))).
  
  Definition value_POP : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 80 |) |))).
  
  Definition value_MLOAD : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 81 |) |))).
  
  Definition value_MSTORE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 82 |) |))).
  
  Definition value_MSTORE8 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 83 |) |))).
  
  Definition value_SLOAD : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 84 |) |))).
  
  Definition value_SSTORE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 85 |) |))).
  
  Definition value_JUMP : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 86 |) |))).
  
  Definition value_JUMPI : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 87 |) |))).
  
  Definition value_PC : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 88 |) |))).
  
  Definition value_MSIZE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 89 |) |))).
  
  Definition value_GAS : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 90 |) |))).
  
  Definition value_JUMPDEST : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 91 |) |))).
  
  Definition value_TLOAD : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 92 |) |))).
  
  Definition value_TSTORE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 93 |) |))).
  
  Definition value_MCOPY : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 94 |) |))).
  
  Definition value_PUSH0 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 95 |) |))).
  
  Definition value_PUSH1 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 96 |) |))).
  
  Definition value_PUSH2 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 97 |) |))).
  
  Definition value_PUSH3 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 98 |) |))).
  
  Definition value_PUSH4 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 99 |) |))).
  
  Definition value_PUSH5 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 100 |) |))).
  
  Definition value_PUSH6 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 101 |) |))).
  
  Definition value_PUSH7 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 102 |) |))).
  
  Definition value_PUSH8 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 103 |) |))).
  
  Definition value_PUSH9 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 104 |) |))).
  
  Definition value_PUSH10 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 105 |) |))).
  
  Definition value_PUSH11 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 106 |) |))).
  
  Definition value_PUSH12 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 107 |) |))).
  
  Definition value_PUSH13 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 108 |) |))).
  
  Definition value_PUSH14 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 109 |) |))).
  
  Definition value_PUSH15 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 110 |) |))).
  
  Definition value_PUSH16 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 111 |) |))).
  
  Definition value_PUSH17 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 112 |) |))).
  
  Definition value_PUSH18 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 113 |) |))).
  
  Definition value_PUSH19 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 114 |) |))).
  
  Definition value_PUSH20 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 115 |) |))).
  
  Definition value_PUSH21 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 116 |) |))).
  
  Definition value_PUSH22 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 117 |) |))).
  
  Definition value_PUSH23 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 118 |) |))).
  
  Definition value_PUSH24 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 119 |) |))).
  
  Definition value_PUSH25 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 120 |) |))).
  
  Definition value_PUSH26 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 121 |) |))).
  
  Definition value_PUSH27 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 122 |) |))).
  
  Definition value_PUSH28 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 123 |) |))).
  
  Definition value_PUSH29 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 124 |) |))).
  
  Definition value_PUSH30 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 125 |) |))).
  
  Definition value_PUSH31 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 126 |) |))).
  
  Definition value_PUSH32 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 127 |) |))).
  
  Definition value_DUP1 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 128 |) |))).
  
  Definition value_DUP2 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 129 |) |))).
  
  Definition value_DUP3 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 130 |) |))).
  
  Definition value_DUP4 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 131 |) |))).
  
  Definition value_DUP5 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 132 |) |))).
  
  Definition value_DUP6 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 133 |) |))).
  
  Definition value_DUP7 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 134 |) |))).
  
  Definition value_DUP8 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 135 |) |))).
  
  Definition value_DUP9 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 136 |) |))).
  
  Definition value_DUP10 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 137 |) |))).
  
  Definition value_DUP11 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 138 |) |))).
  
  Definition value_DUP12 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 139 |) |))).
  
  Definition value_DUP13 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 140 |) |))).
  
  Definition value_DUP14 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 141 |) |))).
  
  Definition value_DUP15 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 142 |) |))).
  
  Definition value_DUP16 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 143 |) |))).
  
  Definition value_SWAP1 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 144 |) |))).
  
  Definition value_SWAP2 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 145 |) |))).
  
  Definition value_SWAP3 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 146 |) |))).
  
  Definition value_SWAP4 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 147 |) |))).
  
  Definition value_SWAP5 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 148 |) |))).
  
  Definition value_SWAP6 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 149 |) |))).
  
  Definition value_SWAP7 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 150 |) |))).
  
  Definition value_SWAP8 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 151 |) |))).
  
  Definition value_SWAP9 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 152 |) |))).
  
  Definition value_SWAP10 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 153 |) |))).
  
  Definition value_SWAP11 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 154 |) |))).
  
  Definition value_SWAP12 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 155 |) |))).
  
  Definition value_SWAP13 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 156 |) |))).
  
  Definition value_SWAP14 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 157 |) |))).
  
  Definition value_SWAP15 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 158 |) |))).
  
  Definition value_SWAP16 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 159 |) |))).
  
  Definition value_LOG0 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 160 |) |))).
  
  Definition value_LOG1 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 161 |) |))).
  
  Definition value_LOG2 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 162 |) |))).
  
  Definition value_LOG3 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 163 |) |))).
  
  Definition value_LOG4 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 164 |) |))).
  
  Definition value_DATALOAD : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 208 |) |))).
  
  Definition value_DATALOADN : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 209 |) |))).
  
  Definition value_DATASIZE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 210 |) |))).
  
  Definition value_DATACOPY : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 211 |) |))).
  
  Definition value_RJUMP : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 224 |) |))).
  
  Definition value_RJUMPI : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 225 |) |))).
  
  Definition value_RJUMPV : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 226 |) |))).
  
  Definition value_CALLF : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 227 |) |))).
  
  Definition value_RETF : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 228 |) |))).
  
  Definition value_JUMPF : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 229 |) |))).
  
  Definition value_DUPN : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 230 |) |))).
  
  Definition value_SWAPN : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 231 |) |))).
  
  Definition value_EXCHANGE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 232 |) |))).
  
  Definition value_EOFCREATE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 236 |) |))).
  
  Definition value_TXCREATE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 237 |) |))).
  
  Definition value_RETURNCONTRACT : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 238 |) |))).
  
  Definition value_CREATE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 240 |) |))).
  
  Definition value_CALL : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 241 |) |))).
  
  Definition value_CALLCODE : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 242 |) |))).
  
  Definition value_RETURN : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 243 |) |))).
  
  Definition value_DELEGATECALL : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 244 |) |))).
  
  Definition value_CREATE2 : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 245 |) |))).
  
  Definition value_RETURNDATALOAD : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 247 |) |))).
  
  Definition value_EXTCALL : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 248 |) |))).
  
  Definition value_EXFCALL : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 249 |) |))).
  
  Definition value_STATICCALL : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 250 |) |))).
  
  Definition value_EXTSCALL : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 251 |) |))).
  
  Definition value_REVERT : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 253 |) |))).
  
  Definition value_INVALID : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 254 |) |))).
  
  Definition value_SELFDESTRUCT : A.t :=
    M.run ltac:(M.monadic (M.alloc (| M.of_value (| Value.Integer 255 |) |))).
  
  
  Definition value_OPCODE_INFO_JUMPTABLE : A.t :=
    M.run
      ltac:(M.monadic
        (let map :=
          M.alloc (|
            repeat (| M.of_value (| Value.StructTuple "core::option::Option::None" [] |), 256 |)
          |) in
        let prev := M.alloc (| M.of_value (| Value.Integer 0 |) |) in
        let val := M.alloc (| M.of_value (| Value.Integer 0 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "STOP" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::terminating", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 0 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 1 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "ADD" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 1 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 2 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "MUL" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 2 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 3 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SUB" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 3 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 4 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DIV" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 4 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 5 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SDIV" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 5 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 6 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "MOD" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 6 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 7 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SMOD" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 7 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 8 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "ADDMOD" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 3 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 8 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 9 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "MULMOD" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 3 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 9 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 10 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "EXP" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 10 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 11 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SIGNEXTEND" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 11 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 16 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "LT" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 16 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 17 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "GT" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 17 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 18 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SLT" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 18 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 19 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SGT" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 19 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 20 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "EQ" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 20 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 21 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "ISZERO" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 21 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 22 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "AND" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 22 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 23 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "OR" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 23 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 24 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "XOR" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 24 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 25 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "NOT" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 25 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 26 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "BYTE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 26 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 27 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SHL" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 27 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 28 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SHR" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 28 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 29 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SAR" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 29 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 32 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "KECCAK256" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 32 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 48 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "ADDRESS" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 48 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 49 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "BALANCE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 49 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 50 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "ORIGIN" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 50 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 51 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "CALLER" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 51 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 52 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "CALLVALUE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 52 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 53 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "CALLDATALOAD" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 53 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 54 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "CALLDATASIZE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 54 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 55 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "CALLDATACOPY" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 3 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 55 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 56 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "CODESIZE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 56 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 57 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "CODECOPY" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 3 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 57 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 58 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "GASPRICE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 58 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 59 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "EXTCODESIZE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 59 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 60 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "EXTCODECOPY" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 4 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 60 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 61 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "RETURNDATASIZE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 61 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 62 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "RETURNDATACOPY" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 3 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 62 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 63 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "EXTCODEHASH" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 63 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 64 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "BLOCKHASH" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 64 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 65 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "COINBASE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 65 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 66 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "TIMESTAMP" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 66 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 67 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "NUMBER" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 67 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 68 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DIFFICULTY" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 68 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 69 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "GASLIMIT" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 69 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 70 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "CHAINID" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 70 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 71 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SELFBALANCE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 71 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 72 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "BASEFEE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 72 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 73 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "BLOBHASH" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 73 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 74 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "BLOBBASEFEE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 74 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 80 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "POP" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 80 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 81 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "MLOAD" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 81 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 82 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "MSTORE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 82 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 83 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "MSTORE8" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 83 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 84 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SLOAD" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 84 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 85 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SSTORE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 85 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 86 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "JUMP" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 86 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 87 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "JUMPI" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 87 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 88 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PC" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 88 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 89 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "MSIZE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 89 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 90 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "GAS" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 90 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 91 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "JUMPDEST" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 91 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 92 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "TLOAD" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 92 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 93 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "TSTORE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 93 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 94 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "MCOPY" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 3 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 94 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 95 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH0" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 95 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 96 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH1" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 1 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 96 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 97 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH2" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 2 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 97 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 98 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH3" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 3 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 98 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 99 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH4" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 4 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (| map, M.alloc (| M.of_value (| Value.Integer 99 |) |) |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 100 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH5" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 5 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 100 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 101 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH6" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 6 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 101 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 102 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH7" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 7 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 102 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 103 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH8" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 8 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 103 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 104 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH9" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 9 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 104 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 105 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH10" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 10 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 105 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 106 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH11" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 11 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 106 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 107 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH12" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 12 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 107 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 108 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH13" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 13 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 108 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 109 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH14" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 14 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 109 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 110 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH15" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 15 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 110 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 111 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH16" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 16 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 111 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 112 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH17" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 17 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 112 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 113 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH18" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 18 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 113 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 114 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH19" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 19 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 114 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 115 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH20" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 20 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 115 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 116 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH21" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 21 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 116 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 117 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH22" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 22 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 117 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 118 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH23" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 23 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 118 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 119 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH24" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 24 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 119 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 120 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH25" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 25 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 120 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 121 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH26" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 26 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 121 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 122 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH27" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 27 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 122 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 123 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH28" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 28 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 123 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 124 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH29" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 29 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 124 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 125 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH30" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 30 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 125 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 126 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH31" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 31 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 126 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 127 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "PUSH32" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 32 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 127 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 128 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP1" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 2 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 128 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 129 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP2" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 3 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 129 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 130 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP3" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 3 |);
                M.of_value (| Value.Integer 4 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 130 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 131 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP4" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 4 |);
                M.of_value (| Value.Integer 5 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 131 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 132 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP5" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 5 |);
                M.of_value (| Value.Integer 6 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 132 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 133 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP6" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 6 |);
                M.of_value (| Value.Integer 7 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 133 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 134 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP7" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 7 |);
                M.of_value (| Value.Integer 8 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 134 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 135 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP8" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 8 |);
                M.of_value (| Value.Integer 9 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 135 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 136 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP9" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 9 |);
                M.of_value (| Value.Integer 10 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 136 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 137 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP10" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 10 |);
                M.of_value (| Value.Integer 11 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 137 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 138 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP11" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 11 |);
                M.of_value (| Value.Integer 12 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 138 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 139 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP12" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 12 |);
                M.of_value (| Value.Integer 13 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 139 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 140 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP13" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 13 |);
                M.of_value (| Value.Integer 14 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 140 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 141 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP14" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 14 |);
                M.of_value (| Value.Integer 15 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 141 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 142 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP15" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 15 |);
                M.of_value (| Value.Integer 16 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 142 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 143 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUP16" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 16 |);
                M.of_value (| Value.Integer 17 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 143 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 144 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP1" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 2 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 144 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 145 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP2" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 3 |);
                M.of_value (| Value.Integer 3 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 145 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 146 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP3" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 4 |);
                M.of_value (| Value.Integer 4 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 146 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 147 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP4" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 5 |);
                M.of_value (| Value.Integer 5 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 147 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 148 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP5" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 6 |);
                M.of_value (| Value.Integer 6 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 148 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 149 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP6" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 7 |);
                M.of_value (| Value.Integer 7 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 149 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 150 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP7" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 8 |);
                M.of_value (| Value.Integer 8 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 150 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 151 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP8" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 9 |);
                M.of_value (| Value.Integer 9 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 151 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 152 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP9" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 10 |);
                M.of_value (| Value.Integer 10 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 152 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 153 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP10" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 11 |);
                M.of_value (| Value.Integer 11 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 153 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 154 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP11" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 12 |);
                M.of_value (| Value.Integer 12 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 154 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 155 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP12" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 13 |);
                M.of_value (| Value.Integer 13 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 155 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 156 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP13" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 14 |);
                M.of_value (| Value.Integer 14 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 156 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 157 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP14" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 15 |);
                M.of_value (| Value.Integer 15 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 157 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 158 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP15" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 16 |);
                M.of_value (| Value.Integer 16 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 158 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 159 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAP16" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 17 |);
                M.of_value (| Value.Integer 17 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 159 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 160 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "LOG0" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 160 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 161 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "LOG1" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 3 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 161 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 162 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "LOG2" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 4 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 162 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 163 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "LOG3" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 5 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 163 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 164 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "LOG4" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 6 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 164 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 208 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DATALOAD" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 208 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 209 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DATALOADN" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 2 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 209 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 210 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DATASIZE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 210 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 211 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DATACOPY" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 3 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 211 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 224 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "RJUMP" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 2 |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::terminating", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 224 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 225 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "RJUMPI" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 2 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 225 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 226 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "RJUMPV" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 1 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 226 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 227 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "CALLF" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 2 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 227 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 228 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "RETF" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::terminating", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 228 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 229 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "JUMPF" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 2 |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::terminating", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 229 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 230 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DUPN" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 1 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 230 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 231 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SWAPN" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 1 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 231 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 232 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "EXCHANGE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 1 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 232 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 236 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "EOFCREATE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 4 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 1 |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 236 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 237 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "TXCREATE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 5 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 237 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 238 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "RETURNCONTRACT" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::immediate_size", [] |),
              [ M.read (| info |); M.of_value (| Value.Integer 1 |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::terminating", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 238 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 240 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "CREATE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 3 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 240 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 241 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "CALL" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 7 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 241 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 242 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "CALLCODE" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 7 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 242 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 243 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "RETURN" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::terminating", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 243 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 244 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "DELEGATECALL" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 6 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 244 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 245 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "CREATE2" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 4 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 245 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 247 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "RETURNDATALOAD" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 247 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 248 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "EXTCALL" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 4 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 248 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 249 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "EXFCALL" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 3 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 249 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 250 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "STATICCALL" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 6 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 250 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 251 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "EXTSCALL" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 3 |);
                M.of_value (| Value.Integer 1 |)
              ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 251 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 253 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "REVERT" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 2 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::terminating", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 253 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 254 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "INVALID" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 0 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::terminating", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 254 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        let val := M.alloc (| M.of_value (| Value.Integer 255 |) |) in
        let _ :=
          M.match_operator (|
            M.alloc (| M.of_value (| Value.Tuple [] |) |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        UnOp.Pure.not (|
                          LogicalOp.or (|
                            BinOp.Pure.eq (| M.read (| val |), M.of_value (| Value.Integer 0 |) |),
                            ltac:(M.monadic
                              (BinOp.Pure.gt (| M.read (| val |), M.read (| prev |) |)))
                          |)
                        |)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic_fmt", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (|
                                              Value.String
                                                "opcodes must be sorted in ascending order"
                                            |)
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
            ]
          |) in
        let _ := M.write (| prev, M.read (| val |) |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "revm_interpreter::opcode::OpCodeInfo",
                "new",
                []
              |),
              [ M.read (| M.of_value (| Value.String "SELFDESTRUCT" |) |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::stack_io", [] |),
              [
                M.read (| info |);
                M.of_value (| Value.Integer 1 |);
                M.of_value (| Value.Integer 0 |)
              ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::not_eof", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let info :=
          M.alloc (|
            M.call_closure (|
              M.get_function (| "revm_interpreter::opcode::terminating", [] |),
              [ M.read (| info |) ]
            |)
          |) in
        let _ :=
          M.write (|
            M.SubPointer.get_array_field (|
              map,
              M.alloc (| M.of_value (| Value.Integer 255 |) |)
            |),
            M.of_value (|
              Value.StructTuple "core::option::Option::Some" [ A.to_value (M.read (| info |)) ]
            |)
          |) in
        M.match_operator (| prev, [ fun γ => ltac:(M.monadic map) ] |))).
  
  Definition value_NAME_TO_OPCODE : A.t :=
    M.run
      ltac:(M.monadic
        (M.alloc (|
          M.alloc (|
            M.of_value (|
              Value.StructRecord
                "phf::map::Map"
                [
                  ("key", A.to_value (M.of_value (| Value.Integer 12913932095322966823 |)));
                  ("disps",
                    A.to_value
                      (* Unsize *)
                      (M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 27 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 3 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 155 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 0 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 153 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 26 |));
                                        A.to_value (M.of_value (| Value.Integer 134 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 135 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 123 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 2 |));
                                        A.to_value (M.of_value (| Value.Integer 3 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 70 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 0 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 100 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 4 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 111 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 2 |));
                                        A.to_value (M.of_value (| Value.Integer 33 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 0 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 1 |));
                                        A.to_value (M.of_value (| Value.Integer 154 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 8 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 1 |));
                                        A.to_value (M.of_value (| Value.Integer 49 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 1 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 7 |));
                                        A.to_value (M.of_value (| Value.Integer 29 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 39 |));
                                        A.to_value (M.of_value (| Value.Integer 151 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 2 |));
                                        A.to_value (M.of_value (| Value.Integer 77 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 55 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 17 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 75 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 15 |));
                                        A.to_value (M.of_value (| Value.Integer 42 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 2 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 3 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 2 |));
                                        A.to_value (M.of_value (| Value.Integer 32 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 5 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 1 |));
                                        A.to_value (M.of_value (| Value.Integer 18 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 0 |));
                                        A.to_value (M.of_value (| Value.Integer 2 |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value (M.of_value (| Value.Integer 69 |));
                                        A.to_value (M.of_value (| Value.Integer 21 |))
                                      ]
                                  |))
                              ]
                          |)
                        |)
                      |)));
                  ("entries",
                    A.to_value
                      (* Unsize *)
                      (M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "RETURN" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::RETURN" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH15" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH15" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP6" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP6" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH27" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH27" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "JUMPDEST" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::JUMPDEST"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "TIMESTAMP" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::TIMESTAMP"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH7" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH7" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (| Value.String "SELFDESTRUCT" |)
                                          |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::SELFDESTRUCT"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "ISZERO" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::ISZERO" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SLOAD" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SLOAD" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP1" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP1" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH20" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH20" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (| Value.String "RETURNDATACOPY" |)
                                          |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::RETURNDATACOPY"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "EXTSCALL" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::EXTSCALL"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "JUMPI" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::JUMPI" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DATASIZE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::DATASIZE"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP15" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP15" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP10" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP10" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP1" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP1" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH30" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH30" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "CREATE2" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::CREATE2" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "LOG3" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::LOG3" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "CALL" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::CALL" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP9" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP9" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "BLOCKHASH" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::BLOCKHASH"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "BLOBHASH" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::BLOBHASH"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "LOG1" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::LOG1" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP2" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP2" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "EQ" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::EQ" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "MCOPY" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::MCOPY" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "RJUMP" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::RJUMP" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "GAS" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::GAS" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "LOG0" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::LOG0" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (| Value.String "EXTCODEHASH" |)
                                          |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::EXTCODEHASH"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH12" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH12" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (| Value.String "CALLDATACOPY" |)
                                          |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::CALLDATACOPY"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (| Value.String "RETURNDATALOAD" |)
                                          |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::RETURNDATALOAD"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH17" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH17" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "BASEFEE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::BASEFEE" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "MLOAD" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::MLOAD" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "TXCREATE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::TXCREATE"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP15" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP15" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SMOD" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SMOD" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "EOFCREATE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::EOFCREATE"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP10" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP10" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "ADDMOD" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::ADDMOD" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "RJUMPI" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::RJUMPI" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "GASPRICE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::GASPRICE"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH23" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH23" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP12" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP12" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP7" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP7" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "EXTCALL" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::EXTCALL" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "LT" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::LT" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH3" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH3" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SDIV" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SDIV" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (| Value.String "EXTCODESIZE" |)
                                          |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::EXTCODESIZE"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP4" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP4" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (| Value.String "CALLDATALOAD" |)
                                          |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::CALLDATALOAD"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH13" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH13" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "JUMP" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::JUMP" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP6" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP6" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "MOD" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::MOD" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "INVALID" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::INVALID" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH31" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH31" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH29" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH29" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP8" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP8" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "CALLER" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::CALLER" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH25" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH25" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH2" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH2" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP16" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP16" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP14" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP14" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH14" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH14" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUPN" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUPN" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DATALOADN" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::DATALOADN"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "CHAINID" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::CHAINID" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH10" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH10" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH9" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH9" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP3" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP3" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "EXCHANGE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::EXCHANGE"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP2" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP2" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (| Value.String "EXTCODECOPY" |)
                                          |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::EXTCODECOPY"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "MULMOD" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::MULMOD" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH11" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH11" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "ORIGIN" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::ORIGIN" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "POP" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::POP" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP13" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP13" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "AND" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::AND" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH21" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH21" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH16" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH16" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "TSTORE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::TSTORE" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "TLOAD" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::TLOAD" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DIFFICULTY" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::DIFFICULTY"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP5" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP5" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP11" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP11" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "CALLF" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::CALLF" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "MUL" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::MUL" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SHL" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SHL" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH6" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH6" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "GASLIMIT" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::GASLIMIT"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH28" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH28" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "CREATE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::CREATE" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "CALLVALUE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::CALLVALUE"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DATALOAD" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::DATALOAD"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH4" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH4" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (| Value.String "RETURNCONTRACT" |)
                                          |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::RETURNCONTRACT"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "JUMPF" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::JUMPF" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DATACOPY" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::DATACOPY"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "KECCAK256" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::KECCAK256"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "RJUMPV" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::RJUMPV" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "BYTE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::BYTE" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SGT" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SGT" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "RETF" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::RETF" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH22" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH22" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "MSIZE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::MSIZE" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP14" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP14" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "REVERT" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::REVERT" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "MSTORE8" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::MSTORE8" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH5" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH5" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SUB" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SUB" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP5" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP5" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH32" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH32" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP11" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP11" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SHR" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SHR" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP3" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP3" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "NUMBER" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::NUMBER" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PC" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PC" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH8" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH8" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH0" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH0" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "MSTORE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::MSTORE" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP16" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP16" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "BALANCE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::BALANCE" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "ADD" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::ADD" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH19" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH19" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "STOP" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::STOP" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (| Value.String "BLOBBASEFEE" |)
                                          |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::BLOBBASEFEE"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "GT" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::GT" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DIV" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DIV" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH26" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH26" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "NOT" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::NOT" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "OR" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::OR" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "ADDRESS" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::ADDRESS" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAPN" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAPN" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SAR" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SAR" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (| Value.String "CALLDATASIZE" |)
                                          |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::CALLDATASIZE"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (| Value.String "DELEGATECALL" |)
                                          |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::DELEGATECALL"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "EXFCALL" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::EXFCALL" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH18" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH18" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "CODESIZE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::CODESIZE"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP13" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP13" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP12" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP12" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SIGNEXTEND" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::SIGNEXTEND"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "CALLCODE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::CALLCODE"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP7" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP7" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "XOR" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::XOR" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SLT" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SLT" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "CODECOPY" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::CODECOPY"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "LOG4" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::LOG4" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "COINBASE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::COINBASE"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH1" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH1" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "STATICCALL" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::STATICCALL"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "LOG2" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::LOG2" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SSTORE" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SSTORE" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (| Value.String "RETURNDATASIZE" |)
                                          |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::RETURNDATASIZE"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP9" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP9" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "DUP4" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::DUP4" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "EXP" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::EXP" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (|
                                            M.of_value (| Value.String "SELFBALANCE" |)
                                          |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (|
                                              "revm_interpreter::opcode::SELFBALANCE"
                                            |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "PUSH24" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::PUSH24" |)
                                          |))
                                      ]
                                  |));
                                A.to_value
                                  (M.of_value (|
                                    Value.Tuple
                                      [
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String "SWAP8" |) |));
                                        A.to_value
                                          (M.read (|
                                            M.get_constant (| "revm_interpreter::opcode::SWAP8" |)
                                          |))
                                      ]
                                  |))
                              ]
                          |)
                        |)
                      |)))
                ]
            |)
          |)
        |))).
  
  (*
          pub const fn instruction<H: Host + ?Sized, SPEC: Spec>(opcode: u8) -> Instruction<H> {
              match opcode {
                  $($name => $f,)*
                  _ => control::unknown,
              }
          }
  *)
  Definition instruction (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [ H; SPEC ], [ opcode ] =>
      ltac:(M.monadic
        (let opcode := M.alloc (| opcode |) in
        M.read (|
          M.match_operator (|
            opcode,
            [
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 0 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::control::stop", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 1 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::arithmetic::add", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 2 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::arithmetic::mul", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 3 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::arithmetic::sub", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 4 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::arithmetic::div", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 5 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::arithmetic::sdiv", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 6 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::arithmetic::rem", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 7 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::arithmetic::smod", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 8 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::arithmetic::addmod",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 9 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::arithmetic::mulmod",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 10 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::arithmetic::exp",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 11 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::arithmetic::signextend",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 16 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::bitwise::lt", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 17 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::bitwise::gt", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 18 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::bitwise::slt", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 19 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::bitwise::sgt", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 20 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::bitwise::eq", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 21 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::bitwise::iszero", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 22 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::bitwise::bitand", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 23 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::bitwise::bitor", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 24 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::bitwise::bitxor", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 25 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::bitwise::not", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 26 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::bitwise::byte", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 27 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::bitwise::shl",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 28 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::bitwise::shr",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 29 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::bitwise::sar",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 32 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::system::keccak256",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 48 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::system::address", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 49 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host::balance",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 50 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::host_env::origin", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 51 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::system::caller", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 52 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::system::callvalue",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 53 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::system::calldataload",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 54 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::system::calldatasize",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 55 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::system::calldatacopy",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 56 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::system::codesize", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 57 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::system::codecopy", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 58 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host_env::gasprice",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 59 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host::extcodesize",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 60 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host::extcodecopy",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 61 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::system::returndatasize",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 62 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::system::returndatacopy",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 63 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host::extcodehash",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 64 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host::blockhash",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 65 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host_env::coinbase",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 66 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host_env::timestamp",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 67 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host_env::block_number",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 68 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host_env::difficulty",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 69 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host_env::gaslimit",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 70 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host_env::chainid",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 71 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host::selfbalance",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 72 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host_env::basefee",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 73 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host_env::blob_hash",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 74 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host_env::blob_basefee",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 80 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::pop", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 81 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::memory::mload", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 82 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::memory::mstore", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 83 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::memory::mstore8", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 84 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host::sload",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 85 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host::sstore",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 86 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::control::jump", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 87 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::control::jumpi", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 88 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::control::pc", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 89 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::memory::msize", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 90 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::system::gas", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 91 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::control::jumpdest_or_nop",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 92 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host::tload",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 93 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host::tstore",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 94 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::memory::mcopy",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 95 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::stack::push0",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 96 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 97 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 98 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 99 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 100 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 101 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 102 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 103 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 104 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 105 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 106 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 107 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 108 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 109 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 110 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 111 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 112 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 113 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 114 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 115 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 116 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 117 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 118 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 119 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 120 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 121 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 122 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 123 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 124 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 125 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 126 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 127 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::push", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 128 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 129 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 130 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 131 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 132 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 133 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 134 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 135 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 136 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 137 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 138 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 139 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 140 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 141 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 142 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 143 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dup", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 144 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 145 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 146 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 147 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 148 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 149 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 150 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 151 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 152 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 153 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 154 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 155 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 156 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 157 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 158 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 159 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swap", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 160 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::host::log", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 161 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::host::log", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 162 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::host::log", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 163 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::host::log", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 164 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::host::log", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 208 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::data::data_load", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 209 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::data::data_loadn", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 210 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::data::data_size", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 211 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::data::data_copy", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 224 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::control::rjump", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 225 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::control::rjumpi", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 226 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::control::rjumpv", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 227 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::control::callf", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 228 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::control::retf", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 229 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::control::jumpf", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 230 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::dupn", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 231 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::swapn", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 232 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::stack::exchange", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 236 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::contract::eofcreate",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 237 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::contract::txcreate",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 238 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::contract::return_contract",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 240 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::contract::create",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 241 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::contract::call",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 242 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::contract::call_code",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 243 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::control::ret", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 244 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::contract::delegate_call",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 245 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::contract::create",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 247 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::system::returndataload",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 248 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::contract::extcall",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 249 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::contract::extdcall",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 250 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::contract::static_call",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 251 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::contract::extscall",
                        [ H ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 253 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::control::revert",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 254 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::control::invalid", [ H ] |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 255 |) in
                  M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (|
                        "revm_interpreter::instructions::host::selfdestruct",
                        [ H; SPEC ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (M.alloc (|
                    (* ReifyFnPointer *)
                    M.pointer_coercion (|
                      M.get_function (| "revm_interpreter::instructions::control::unknown", [ H ] |)
                    |)
                  |)))
            ]
          |)
        |)))
    | _, _ => M.impossible
    end.
End opcode.
