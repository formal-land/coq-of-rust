(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module db.
  Module states.
    Module changes.
      (* StructRecord
        {
          name := "StateChangeset";
          ty_params := [];
          fields :=
            [
              ("accounts",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.tuple
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.apply
                          (Ty.path "core::option::Option")
                          [ Ty.path "revm_primitives::state::AccountInfo" ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("storage",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.path "revm::db::states::changes::PlainStorageChangeset";
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("contracts",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.tuple
                      [
                        Ty.path "alloy_primitives::bits::fixed::FixedBytes";
                        Ty.path "revm_primitives::bytecode::Bytecode"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_core_clone_Clone_for_revm_db_states_changes_StateChangeset.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::StateChangeset".
        
        (* Clone *)
        Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "revm::db::states::changes::StateChangeset"
                [
                  ("accounts",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple
                              [
                                Ty.path "alloy_primitives::bits::address::Address";
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  [ Ty.path "revm_primitives::state::AccountInfo" ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm::db::states::changes::StateChangeset",
                          "accounts"
                        |)
                      ]
                    |));
                  ("storage",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.path "revm::db::states::changes::PlainStorageChangeset";
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm::db::states::changes::StateChangeset",
                          "storage"
                        |)
                      ]
                    |));
                  ("contracts",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple
                              [
                                Ty.path "alloy_primitives::bits::fixed::FixedBytes";
                                Ty.path "revm_primitives::bytecode::Bytecode"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm::db::states::changes::StateChangeset",
                          "contracts"
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_revm_db_states_changes_StateChangeset.
      
      Module Impl_core_fmt_Debug_for_revm_db_states_changes_StateChangeset.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::StateChangeset".
        
        (* Debug *)
        Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field3_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "StateChangeset" |);
                  M.read (| Value.String "accounts" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm::db::states::changes::StateChangeset",
                      "accounts"
                    |));
                  M.read (| Value.String "storage" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm::db::states::changes::StateChangeset",
                      "storage"
                    |));
                  M.read (| Value.String "contracts" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm::db::states::changes::StateChangeset",
                        "contracts"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_revm_db_states_changes_StateChangeset.
      
      Module Impl_core_default_Default_for_revm_db_states_changes_StateChangeset.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::StateChangeset".
        
        (* Default *)
        Definition default (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [] =>
            ltac:(M.monadic
              (Value.StructRecord
                "revm::db::states::changes::StateChangeset"
                [
                  ("accounts",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple
                              [
                                Ty.path "alloy_primitives::bits::address::Address";
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  [ Ty.path "revm_primitives::state::AccountInfo" ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "default",
                        []
                      |),
                      []
                    |));
                  ("storage",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.path "revm::db::states::changes::PlainStorageChangeset";
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "default",
                        []
                      |),
                      []
                    |));
                  ("contracts",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple
                              [
                                Ty.path "alloy_primitives::bits::fixed::FixedBytes";
                                Ty.path "revm_primitives::bytecode::Bytecode"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "default",
                        []
                      |),
                      []
                    |))
                ]))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::default::Default"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("default", InstanceField.Method default) ].
      End Impl_core_default_Default_for_revm_db_states_changes_StateChangeset.
      
      (* StructRecord
        {
          name := "PlainStorageChangeset";
          ty_params := [];
          fields :=
            [
              ("address", Ty.path "alloy_primitives::bits::address::Address");
              ("wipe_storage", Ty.path "bool");
              ("storage",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.tuple [ Ty.path "ruint::Uint"; Ty.path "ruint::Uint" ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_core_clone_Clone_for_revm_db_states_changes_PlainStorageChangeset.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStorageChangeset".
        
        (* Clone *)
        Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "revm::db::states::changes::PlainStorageChangeset"
                [
                  ("address",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "alloy_primitives::bits::address::Address",
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm::db::states::changes::PlainStorageChangeset",
                          "address"
                        |)
                      ]
                    |));
                  ("wipe_storage",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "bool",
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm::db::states::changes::PlainStorageChangeset",
                          "wipe_storage"
                        |)
                      ]
                    |));
                  ("storage",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple [ Ty.path "ruint::Uint"; Ty.path "ruint::Uint" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm::db::states::changes::PlainStorageChangeset",
                          "storage"
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_revm_db_states_changes_PlainStorageChangeset.
      
      Module Impl_core_fmt_Debug_for_revm_db_states_changes_PlainStorageChangeset.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStorageChangeset".
        
        (* Debug *)
        Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field3_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "PlainStorageChangeset" |);
                  M.read (| Value.String "address" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm::db::states::changes::PlainStorageChangeset",
                      "address"
                    |));
                  M.read (| Value.String "wipe_storage" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm::db::states::changes::PlainStorageChangeset",
                      "wipe_storage"
                    |));
                  M.read (| Value.String "storage" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm::db::states::changes::PlainStorageChangeset",
                        "storage"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_revm_db_states_changes_PlainStorageChangeset.
      
      Module Impl_core_marker_StructuralPartialEq_for_revm_db_states_changes_PlainStorageChangeset.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStorageChangeset".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_revm_db_states_changes_PlainStorageChangeset.
      
      Module Impl_core_cmp_PartialEq_for_revm_db_states_changes_PlainStorageChangeset.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStorageChangeset".
        
        (* PartialEq *)
        Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; other ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let other := M.alloc (| other |) in
              LogicalOp.and (|
                LogicalOp.and (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.path "alloy_primitives::bits::address::Address",
                      [ Ty.path "alloy_primitives::bits::address::Address" ],
                      "eq",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm::db::states::changes::PlainStorageChangeset",
                        "address"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "revm::db::states::changes::PlainStorageChangeset",
                        "address"
                      |)
                    ]
                  |),
                  ltac:(M.monadic
                    (BinOp.eq (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm::db::states::changes::PlainStorageChangeset",
                          "wipe_storage"
                        |)
                      |),
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| other |),
                          "revm::db::states::changes::PlainStorageChangeset",
                          "wipe_storage"
                        |)
                      |)
                    |)))
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.tuple [ Ty.path "ruint::Uint"; Ty.path "ruint::Uint" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple [ Ty.path "ruint::Uint"; Ty.path "ruint::Uint" ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                      "eq",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm::db::states::changes::PlainStorageChangeset",
                        "storage"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "revm::db::states::changes::PlainStorageChangeset",
                        "storage"
                      |)
                    ]
                  |)))
              |)))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::PartialEq"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("eq", InstanceField.Method eq) ].
      End Impl_core_cmp_PartialEq_for_revm_db_states_changes_PlainStorageChangeset.
      
      Module Impl_core_marker_StructuralEq_for_revm_db_states_changes_PlainStorageChangeset.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStorageChangeset".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::StructuralEq"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [].
      End Impl_core_marker_StructuralEq_for_revm_db_states_changes_PlainStorageChangeset.
      
      Module Impl_core_cmp_Eq_for_revm_db_states_changes_PlainStorageChangeset.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStorageChangeset".
        
        (* Eq *)
        Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                M.match_operator (|
                  Value.DeclaredButUndefined,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Value.DeclaredButUndefined,
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Value.DeclaredButUndefined,
                                  [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::Eq"
            Self
            (* Trait polymorphic types *) []
            (* Instance *)
            [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
      End Impl_core_cmp_Eq_for_revm_db_states_changes_PlainStorageChangeset.
      
      Module Impl_core_default_Default_for_revm_db_states_changes_PlainStorageChangeset.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStorageChangeset".
        
        (* Default *)
        Definition default (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [] =>
            ltac:(M.monadic
              (Value.StructRecord
                "revm::db::states::changes::PlainStorageChangeset"
                [
                  ("address",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "alloy_primitives::bits::address::Address",
                        [],
                        "default",
                        []
                      |),
                      []
                    |));
                  ("wipe_storage",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "bool",
                        [],
                        "default",
                        []
                      |),
                      []
                    |));
                  ("storage",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple [ Ty.path "ruint::Uint"; Ty.path "ruint::Uint" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "default",
                        []
                      |),
                      []
                    |))
                ]))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::default::Default"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("default", InstanceField.Method default) ].
      End Impl_core_default_Default_for_revm_db_states_changes_PlainStorageChangeset.
      
      (* StructRecord
        {
          name := "PlainStorageRevert";
          ty_params := [];
          fields :=
            [
              ("address", Ty.path "alloy_primitives::bits::address::Address");
              ("wiped", Ty.path "bool");
              ("storage_revert",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.tuple
                      [ Ty.path "ruint::Uint"; Ty.path "revm::db::states::reverts::RevertToSlot" ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_core_clone_Clone_for_revm_db_states_changes_PlainStorageRevert.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStorageRevert".
        
        (* Clone *)
        Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "revm::db::states::changes::PlainStorageRevert"
                [
                  ("address",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "alloy_primitives::bits::address::Address",
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm::db::states::changes::PlainStorageRevert",
                          "address"
                        |)
                      ]
                    |));
                  ("wiped",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "bool",
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm::db::states::changes::PlainStorageRevert",
                          "wiped"
                        |)
                      ]
                    |));
                  ("storage_revert",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple
                              [
                                Ty.path "ruint::Uint";
                                Ty.path "revm::db::states::reverts::RevertToSlot"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm::db::states::changes::PlainStorageRevert",
                          "storage_revert"
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_revm_db_states_changes_PlainStorageRevert.
      
      Module Impl_core_fmt_Debug_for_revm_db_states_changes_PlainStorageRevert.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStorageRevert".
        
        (* Debug *)
        Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field3_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "PlainStorageRevert" |);
                  M.read (| Value.String "address" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm::db::states::changes::PlainStorageRevert",
                      "address"
                    |));
                  M.read (| Value.String "wiped" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm::db::states::changes::PlainStorageRevert",
                      "wiped"
                    |));
                  M.read (| Value.String "storage_revert" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm::db::states::changes::PlainStorageRevert",
                        "storage_revert"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_revm_db_states_changes_PlainStorageRevert.
      
      Module Impl_core_marker_StructuralPartialEq_for_revm_db_states_changes_PlainStorageRevert.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStorageRevert".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_revm_db_states_changes_PlainStorageRevert.
      
      Module Impl_core_cmp_PartialEq_for_revm_db_states_changes_PlainStorageRevert.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStorageRevert".
        
        (* PartialEq *)
        Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; other ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let other := M.alloc (| other |) in
              LogicalOp.and (|
                LogicalOp.and (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.path "alloy_primitives::bits::address::Address",
                      [ Ty.path "alloy_primitives::bits::address::Address" ],
                      "eq",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm::db::states::changes::PlainStorageRevert",
                        "address"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "revm::db::states::changes::PlainStorageRevert",
                        "address"
                      |)
                    ]
                  |),
                  ltac:(M.monadic
                    (BinOp.eq (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm::db::states::changes::PlainStorageRevert",
                          "wiped"
                        |)
                      |),
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| other |),
                          "revm::db::states::changes::PlainStorageRevert",
                          "wiped"
                        |)
                      |)
                    |)))
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.tuple
                            [
                              Ty.path "ruint::Uint";
                              Ty.path "revm::db::states::reverts::RevertToSlot"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple
                              [
                                Ty.path "ruint::Uint";
                                Ty.path "revm::db::states::reverts::RevertToSlot"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                      "eq",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm::db::states::changes::PlainStorageRevert",
                        "storage_revert"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "revm::db::states::changes::PlainStorageRevert",
                        "storage_revert"
                      |)
                    ]
                  |)))
              |)))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::PartialEq"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("eq", InstanceField.Method eq) ].
      End Impl_core_cmp_PartialEq_for_revm_db_states_changes_PlainStorageRevert.
      
      Module Impl_core_marker_StructuralEq_for_revm_db_states_changes_PlainStorageRevert.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStorageRevert".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::StructuralEq"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [].
      End Impl_core_marker_StructuralEq_for_revm_db_states_changes_PlainStorageRevert.
      
      Module Impl_core_cmp_Eq_for_revm_db_states_changes_PlainStorageRevert.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStorageRevert".
        
        (* Eq *)
        Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                M.match_operator (|
                  Value.DeclaredButUndefined,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Value.DeclaredButUndefined,
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Value.DeclaredButUndefined,
                                  [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::Eq"
            Self
            (* Trait polymorphic types *) []
            (* Instance *)
            [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
      End Impl_core_cmp_Eq_for_revm_db_states_changes_PlainStorageRevert.
      
      Module Impl_core_default_Default_for_revm_db_states_changes_PlainStorageRevert.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStorageRevert".
        
        (* Default *)
        Definition default (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [] =>
            ltac:(M.monadic
              (Value.StructRecord
                "revm::db::states::changes::PlainStorageRevert"
                [
                  ("address",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "alloy_primitives::bits::address::Address",
                        [],
                        "default",
                        []
                      |),
                      []
                    |));
                  ("wiped",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "bool",
                        [],
                        "default",
                        []
                      |),
                      []
                    |));
                  ("storage_revert",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple
                              [
                                Ty.path "ruint::Uint";
                                Ty.path "revm::db::states::reverts::RevertToSlot"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "default",
                        []
                      |),
                      []
                    |))
                ]))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::default::Default"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("default", InstanceField.Method default) ].
      End Impl_core_default_Default_for_revm_db_states_changes_PlainStorageRevert.
      
      (* StructRecord
        {
          name := "PlainStateReverts";
          ty_params := [];
          fields :=
            [
              ("accounts",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.tuple
                          [
                            Ty.path "alloy_primitives::bits::address::Address";
                            Ty.apply
                              (Ty.path "core::option::Option")
                              [ Ty.path "revm_primitives::state::AccountInfo" ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("storage",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.path "revm::db::states::changes::PlainStorageRevert";
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_core_clone_Clone_for_revm_db_states_changes_PlainStateReverts.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStateReverts".
        
        (* Clone *)
        Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "revm::db::states::changes::PlainStateReverts"
                [
                  ("accounts",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple
                                  [
                                    Ty.path "alloy_primitives::bits::address::Address";
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      [ Ty.path "revm_primitives::state::AccountInfo" ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm::db::states::changes::PlainStateReverts",
                          "accounts"
                        |)
                      ]
                    |));
                  ("storage",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "revm::db::states::changes::PlainStorageRevert";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm::db::states::changes::PlainStateReverts",
                          "storage"
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_revm_db_states_changes_PlainStateReverts.
      
      Module Impl_core_fmt_Debug_for_revm_db_states_changes_PlainStateReverts.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStateReverts".
        
        (* Debug *)
        Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field2_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "PlainStateReverts" |);
                  M.read (| Value.String "accounts" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm::db::states::changes::PlainStateReverts",
                      "accounts"
                    |));
                  M.read (| Value.String "storage" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm::db::states::changes::PlainStateReverts",
                        "storage"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_revm_db_states_changes_PlainStateReverts.
      
      Module Impl_core_default_Default_for_revm_db_states_changes_PlainStateReverts.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStateReverts".
        
        (* Default *)
        Definition default (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [] =>
            ltac:(M.monadic
              (Value.StructRecord
                "revm::db::states::changes::PlainStateReverts"
                [
                  ("accounts",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple
                                  [
                                    Ty.path "alloy_primitives::bits::address::Address";
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      [ Ty.path "revm_primitives::state::AccountInfo" ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "default",
                        []
                      |),
                      []
                    |));
                  ("storage",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "revm::db::states::changes::PlainStorageRevert";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "default",
                        []
                      |),
                      []
                    |))
                ]))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::default::Default"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("default", InstanceField.Method default) ].
      End Impl_core_default_Default_for_revm_db_states_changes_PlainStateReverts.
      
      Module Impl_revm_db_states_changes_PlainStateReverts.
        Definition Self : Ty.t := Ty.path "revm::db::states::changes::PlainStateReverts".
        
        (*
            pub fn with_capacity(capacity: usize) -> Self {
                Self {
                    accounts: Vec::with_capacity(capacity),
                    storage: Vec::with_capacity(capacity),
                }
            }
        *)
        Definition with_capacity (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ capacity ] =>
            ltac:(M.monadic
              (let capacity := M.alloc (| capacity |) in
              Value.StructRecord
                "revm::db::states::changes::PlainStateReverts"
                [
                  ("accounts",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple
                                  [
                                    Ty.path "alloy_primitives::bits::address::Address";
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      [ Ty.path "revm_primitives::state::AccountInfo" ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "with_capacity",
                        []
                      |),
                      [ M.read (| capacity |) ]
                    |));
                  ("storage",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "revm::db::states::changes::PlainStorageRevert";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "with_capacity",
                        []
                      |),
                      [ M.read (| capacity |) ]
                    |))
                ]))
          | _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom AssociatedFunction_with_capacity :
          M.IsAssociatedFunction Self "with_capacity" with_capacity.
      End Impl_revm_db_states_changes_PlainStateReverts.
      
      Axiom StorageRevert :
        (Ty.path "revm::db::states::changes::StorageRevert") =
          (Ty.apply
            (Ty.path "alloc::vec::Vec")
            [
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.tuple
                    [
                      Ty.path "alloy_primitives::bits::address::Address";
                      Ty.path "bool";
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.tuple
                            [
                              Ty.path "ruint::Uint";
                              Ty.path "revm::db::states::reverts::RevertToSlot"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ];
              Ty.path "alloc::alloc::Global"
            ]).
    End changes.
  End states.
End db.
