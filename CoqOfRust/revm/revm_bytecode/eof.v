(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module eof.
  Definition value_EOF_MAGIC_HASH : Value.t :=
    M.run_constant
      ltac:(M.monadic
        (M.alloc (|
          M.call_closure (|
            Ty.apply
              (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
              [ Value.Integer IntegerKind.Usize 32 ]
              [],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                [ Value.Integer IntegerKind.Usize 32 ]
                [],
              "new",
              [],
              []
            |),
            [ M.read (| M.get_constant "revm_bytecode::eof::EOF_MAGIC_HASH::RES" |) ]
          |)
        |))).
  
  Axiom Constant_value_EOF_MAGIC_HASH :
    (M.get_constant "revm_bytecode::eof::EOF_MAGIC_HASH") = value_EOF_MAGIC_HASH.
  Global Hint Rewrite Constant_value_EOF_MAGIC_HASH : constant_rewrites.
  
  Definition value_EOF_MAGIC : Value.t :=
    M.run_constant ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U16 61184 |))).
  
  Axiom Constant_value_EOF_MAGIC :
    (M.get_constant "revm_bytecode::eof::EOF_MAGIC") = value_EOF_MAGIC.
  Global Hint Rewrite Constant_value_EOF_MAGIC : constant_rewrites.
  
  Definition value_EOF_MAGIC_BYTES : Value.t :=
    M.run_constant
      ltac:(M.monadic
        (M.alloc (|
          M.alloc (|
            M.call_closure (|
              Ty.path "alloy_primitives::bytes_::Bytes",
              M.get_associated_function (|
                Ty.path "alloy_primitives::bytes_::Bytes",
                "from_static",
                [],
                []
              |),
              [ M.read (| M.get_constant "revm_bytecode::eof::EOF_MAGIC_BYTES::STATIC_BYTES" |) ]
            |)
          |)
        |))).
  
  Axiom Constant_value_EOF_MAGIC_BYTES :
    (M.get_constant "revm_bytecode::eof::EOF_MAGIC_BYTES") = value_EOF_MAGIC_BYTES.
  Global Hint Rewrite Constant_value_EOF_MAGIC_BYTES : constant_rewrites.
  
  (* StructRecord
    {
      name := "Eof";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("header", Ty.path "revm_bytecode::eof::header::EofHeader");
          ("body", Ty.path "revm_bytecode::eof::body::EofBody");
          ("raw", Ty.path "alloy_primitives::bytes_::Bytes")
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_revm_bytecode_eof_Eof.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::Eof".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "revm_bytecode::eof::Eof"
            [
              ("header",
                M.call_closure (|
                  Ty.path "revm_bytecode::eof::header::EofHeader",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "revm_bytecode::eof::header::EofHeader",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_bytecode::eof::Eof",
                            "header"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("body",
                M.call_closure (|
                  Ty.path "revm_bytecode::eof::body::EofBody",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "revm_bytecode::eof::body::EofBody",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_bytecode::eof::Eof",
                            "body"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("raw",
                M.call_closure (|
                  Ty.path "alloy_primitives::bytes_::Bytes",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "alloy_primitives::bytes_::Bytes",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_bytecode::eof::Eof",
                            "raw"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_revm_bytecode_eof_Eof.
  
  Module Impl_core_fmt_Debug_for_revm_bytecode_eof_Eof.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::Eof".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| Value.String "Eof" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| Value.String "header" |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_bytecode::eof::Eof",
                      "header"
                    |)
                  |)
                |)
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| Value.String "body" |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_bytecode::eof::Eof",
                      "body"
                    |)
                  |)
                |)
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| Value.String "raw" |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_bytecode::eof::Eof",
                          "raw"
                        |)
                      |)
                    |)
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_revm_bytecode_eof_Eof.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_bytecode_eof_Eof.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::Eof".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_bytecode_eof_Eof.
  
  Module Impl_core_cmp_PartialEq_revm_bytecode_eof_Eof_for_revm_bytecode_eof_Eof.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::Eof".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            LogicalOp.and (|
              M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.path "revm_bytecode::eof::header::EofHeader",
                  [],
                  [ Ty.path "revm_bytecode::eof::header::EofHeader" ],
                  "eq",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_bytecode::eof::Eof",
                      "header"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "revm_bytecode::eof::Eof",
                      "header"
                    |)
                  |)
                ]
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.path "revm_bytecode::eof::body::EofBody",
                    [],
                    [ Ty.path "revm_bytecode::eof::body::EofBody" ],
                    "eq",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_bytecode::eof::Eof",
                        "body"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "revm_bytecode::eof::Eof",
                        "body"
                      |)
                    |)
                  ]
                |)))
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.path "alloy_primitives::bytes_::Bytes",
                  [],
                  [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                  "eq",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_bytecode::eof::Eof",
                      "raw"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "revm_bytecode::eof::Eof",
                      "raw"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "revm_bytecode::eof::Eof" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_revm_bytecode_eof_Eof_for_revm_bytecode_eof_Eof.
  
  Module Impl_core_cmp_Eq_for_revm_bytecode_eof_Eof.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::Eof".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              None,
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      None,
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              None,
                              Value.DeclaredButUndefined,
                              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_revm_bytecode_eof_Eof.
  
  Module Impl_core_hash_Hash_for_revm_bytecode_eof_Eof.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::Eof".
    
    (* Hash *)
    Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.path "revm_bytecode::eof::header::EofHeader",
                    [],
                    [],
                    "hash",
                    [],
                    [ __H ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_bytecode::eof::Eof",
                            "header"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.path "revm_bytecode::eof::body::EofBody",
                    [],
                    [],
                    "hash",
                    [],
                    [ __H ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_bytecode::eof::Eof",
                            "body"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::hash::Hash",
                  Ty.path "alloy_primitives::bytes_::Bytes",
                  [],
                  [],
                  "hash",
                  [],
                  [ __H ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_bytecode::eof::Eof",
                          "raw"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_revm_bytecode_eof_Eof.
  
  Module Impl_core_cmp_Ord_for_revm_bytecode_eof_Eof.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::Eof".
    
    (* Ord *)
    Definition cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            M.match_operator (|
              Some (Ty.path "core::cmp::Ordering"),
              M.alloc (|
                M.call_closure (|
                  Ty.path "core::cmp::Ordering",
                  M.get_trait_method (|
                    "core::cmp::Ord",
                    Ty.path "revm_bytecode::eof::header::EofHeader",
                    [],
                    [],
                    "cmp",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_bytecode::eof::Eof",
                            "header"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| other |) |),
                            "revm_bytecode::eof::Eof",
                            "header"
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "core::cmp::Ordering::Equal" |) in
                    M.match_operator (|
                      Some (Ty.path "core::cmp::Ordering"),
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "core::cmp::Ordering",
                          M.get_trait_method (|
                            "core::cmp::Ord",
                            Ty.path "revm_bytecode::eof::body::EofBody",
                            [],
                            [],
                            "cmp",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "revm_bytecode::eof::Eof",
                                    "body"
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| other |) |),
                                    "revm_bytecode::eof::Eof",
                                    "body"
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let _ := M.is_struct_tuple (| γ, "core::cmp::Ordering::Equal" |) in
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "core::cmp::Ordering",
                                M.get_trait_method (|
                                  "core::cmp::Ord",
                                  Ty.path "alloy_primitives::bytes_::Bytes",
                                  [],
                                  [],
                                  "cmp",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "revm_bytecode::eof::Eof",
                                          "raw"
                                        |)
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| other |) |),
                                          "revm_bytecode::eof::Eof",
                                          "raw"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let cmp := M.copy (| γ |) in
                            cmp))
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let cmp := M.copy (| γ |) in
                    cmp))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Ord"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
  End Impl_core_cmp_Ord_for_revm_bytecode_eof_Eof.
  
  Module Impl_core_cmp_PartialOrd_revm_bytecode_eof_Eof_for_revm_bytecode_eof_Eof.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::Eof".
    
    (* PartialOrd *)
    Definition partial_cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            M.match_operator (|
              Some (Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "core::cmp::Ordering" ]),
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "core::cmp::Ordering" ],
                  M.get_trait_method (|
                    "core::cmp::PartialOrd",
                    Ty.path "revm_bytecode::eof::header::EofHeader",
                    [],
                    [ Ty.path "revm_bytecode::eof::header::EofHeader" ],
                    "partial_cmp",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_bytecode::eof::Eof",
                            "header"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| other |) |),
                            "revm_bytecode::eof::Eof",
                            "header"
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let _ := M.is_struct_tuple (| γ0_0, "core::cmp::Ordering::Equal" |) in
                    M.match_operator (|
                      Some
                        (Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.path "core::cmp::Ordering" ]),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "core::cmp::Ordering" ],
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "revm_bytecode::eof::body::EofBody",
                            [],
                            [ Ty.path "revm_bytecode::eof::body::EofBody" ],
                            "partial_cmp",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "revm_bytecode::eof::Eof",
                                    "body"
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| other |) |),
                                    "revm_bytecode::eof::Eof",
                                    "body"
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let _ := M.is_struct_tuple (| γ0_0, "core::cmp::Ordering::Equal" |) in
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "core::cmp::Ordering" ],
                                M.get_trait_method (|
                                  "core::cmp::PartialOrd",
                                  Ty.path "alloy_primitives::bytes_::Bytes",
                                  [],
                                  [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                  "partial_cmp",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "revm_bytecode::eof::Eof",
                                          "raw"
                                        |)
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| other |) |),
                                          "revm_bytecode::eof::Eof",
                                          "raw"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let cmp := M.copy (| γ |) in
                            cmp))
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let cmp := M.copy (| γ |) in
                    cmp))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "revm_bytecode::eof::Eof" ]
        Self
        (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
  End Impl_core_cmp_PartialOrd_revm_bytecode_eof_Eof_for_revm_bytecode_eof_Eof.
  
  Module Impl_core_default_Default_for_revm_bytecode_eof_Eof.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::Eof".
    
    (*
        fn default() -> Self {
            let body = EofBody {
                // Types section with zero inputs, zero outputs and zero max stack size.
                types_section: vec![TypesSection::default()],
                code_section: vec![1],
                // One code section with a STOP byte.
                code: Bytes::from_static(&[0x00]),
                container_section: vec![],
                data_section: Bytes::new(),
                is_data_filled: true,
            };
            body.into_eof()
        }
    *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.read (|
            let~ body : Ty.path "revm_bytecode::eof::body::EofBody" :=
              M.alloc (|
                Value.StructRecord
                  "revm_bytecode::eof::body::EofBody"
                  [
                    ("types_section",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "revm_bytecode::eof::types_section::TypesSection";
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.path "revm_bytecode::eof::types_section::TypesSection" ],
                          "into_vec",
                          [],
                          [ Ty.path "alloc::alloc::Global" ]
                        |),
                        [
                          M.read (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ Ty.path "revm_bytecode::eof::types_section::TypesSection" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "revm_bytecode::eof::types_section::TypesSection" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        Ty.path "revm_bytecode::eof::types_section::TypesSection",
                                        M.get_trait_method (|
                                          "core::default::Default",
                                          Ty.path "revm_bytecode::eof::types_section::TypesSection",
                                          [],
                                          [],
                                          "default",
                                          [],
                                          []
                                        |),
                                        []
                                      |)
                                    ]
                                |)
                              ]
                            |)
                          |)
                        ]
                      |));
                    ("code_section",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                          "into_vec",
                          [],
                          [ Ty.path "alloc::alloc::Global" ]
                        |),
                        [
                          M.read (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ Ty.path "usize" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "usize" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [ M.alloc (| Value.Array [ Value.Integer IntegerKind.Usize 1 ] |) ]
                            |)
                          |)
                        ]
                      |));
                    ("code",
                      M.call_closure (|
                        Ty.path "alloy_primitives::bytes_::Bytes",
                        M.get_associated_function (|
                          Ty.path "alloy_primitives::bytes_::Bytes",
                          "from_static",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (| Value.Array [ Value.Integer IntegerKind.U8 0 ] |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("container_section",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "alloy_primitives::bytes_::Bytes";
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.path "alloy_primitives::bytes_::Bytes";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          [],
                          []
                        |),
                        []
                      |));
                    ("data_section",
                      M.call_closure (|
                        Ty.path "alloy_primitives::bytes_::Bytes",
                        M.get_associated_function (|
                          Ty.path "alloy_primitives::bytes_::Bytes",
                          "new",
                          [],
                          []
                        |),
                        []
                      |));
                    ("is_data_filled", Value.Bool true)
                  ]
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "revm_bytecode::eof::Eof",
                M.get_associated_function (|
                  Ty.path "revm_bytecode::eof::body::EofBody",
                  "into_eof",
                  [],
                  []
                |),
                [ M.read (| body |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_revm_bytecode_eof_Eof.
  
  Module Impl_revm_bytecode_eof_Eof.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::Eof".
    
    (*
        pub fn validate(&self) -> Result<(), EofError> {
            validate_eof(self)
        }
    *)
    Definition validate (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "revm_bytecode::eof::verification::EofError" ],
            M.get_function (| "revm_bytecode::eof::verification::validate_eof", [], [] |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_validate :
      M.IsAssociatedFunction.Trait Self "validate" validate.
    Admitted.
    Global Typeclasses Opaque validate.
    
    (*
        pub fn valitate_raw(bytes: Bytes) -> Result<Eof, EofError> {
            validate_raw_eof(bytes)
        }
    *)
    Definition valitate_raw (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ bytes ] =>
        ltac:(M.monadic
          (let bytes := M.alloc (| bytes |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.path "revm_bytecode::eof::Eof";
                Ty.path "revm_bytecode::eof::verification::EofError"
              ],
            M.get_function (| "revm_bytecode::eof::verification::validate_raw_eof", [], [] |),
            [ M.read (| bytes |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_valitate_raw :
      M.IsAssociatedFunction.Trait Self "valitate_raw" valitate_raw.
    Admitted.
    Global Typeclasses Opaque valitate_raw.
    
    (*
        pub fn validate_mode(&self, mode: CodeType) -> Result<(), EofError> {
            validate_eof_inner(self, Some(mode))
        }
    *)
    Definition validate_mode (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; mode ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mode := M.alloc (| mode |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "revm_bytecode::eof::verification::EofError" ],
            M.get_function (| "revm_bytecode::eof::verification::validate_eof_inner", [], [] |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              Value.StructTuple "core::option::Option::Some" [ M.read (| mode |) ]
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_validate_mode :
      M.IsAssociatedFunction.Trait Self "validate_mode" validate_mode.
    Admitted.
    Global Typeclasses Opaque validate_mode.
    
    (*
        pub fn new(body: EofBody) -> Self {
            body.into_eof()
        }
    *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ body ] =>
        ltac:(M.monadic
          (let body := M.alloc (| body |) in
          M.call_closure (|
            Ty.path "revm_bytecode::eof::Eof",
            M.get_associated_function (|
              Ty.path "revm_bytecode::eof::body::EofBody",
              "into_eof",
              [],
              []
            |),
            [ M.read (| body |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new : M.IsAssociatedFunction.Trait Self "new" new.
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn size(&self) -> usize {
            self.header.size() + self.header.body_size()
        }
    *)
    Definition size (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          BinOp.Wrap.add (|
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.path "revm_bytecode::eof::header::EofHeader",
                "size",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_bytecode::eof::Eof",
                    "header"
                  |)
                |)
              ]
            |),
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.path "revm_bytecode::eof::header::EofHeader",
                "body_size",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_bytecode::eof::Eof",
                    "header"
                  |)
                |)
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_size : M.IsAssociatedFunction.Trait Self "size" size.
    Admitted.
    Global Typeclasses Opaque size.
    
    (*
        pub fn raw(&self) -> &Bytes {
            &self.raw
        }
    *)
    Definition raw (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "revm_bytecode::eof::Eof",
                  "raw"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_raw : M.IsAssociatedFunction.Trait Self "raw" raw.
    Admitted.
    Global Typeclasses Opaque raw.
    
    (*
        pub fn data_slice(&self, offset: usize, len: usize) -> &[u8] {
            self.body
                .data_section
                .get(offset..)
                .and_then(|bytes| bytes.get(..min(len, bytes.len())))
                .unwrap_or(&[])
        }
    *)
    Definition data_slice (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; offset; len ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let offset := M.alloc (| offset |) in
          let len := M.alloc (| len |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                    ],
                  "unwrap_or",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        ],
                      "and_then",
                      [],
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                            ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                          ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                          "get",
                          [],
                          [ Ty.apply (Ty.path "core::ops::range::RangeFrom") [] [ Ty.path "usize" ]
                          ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.path "bytes::bytes::Bytes",
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "bytes::bytes::Bytes" ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.path "alloy_primitives::bytes_::Bytes",
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "revm_bytecode::eof::Eof",
                                                "body"
                                              |),
                                              "revm_bytecode::eof::body::EofBody",
                                              "data_section"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |);
                          Value.StructRecord
                            "core::ops::range::RangeFrom"
                            [ ("start", M.read (| offset |)) ]
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Some
                                    (Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                        ])),
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let bytes := M.copy (| γ |) in
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                            "get",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::RangeTo")
                                                []
                                                [ Ty.path "usize" ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| bytes |) |)
                                            |);
                                            Value.StructRecord
                                              "core::ops::range::RangeTo"
                                              [
                                                ("end_",
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_function (|
                                                      "core::cmp::min",
                                                      [],
                                                      [ Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.read (| len |);
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ],
                                                          "len",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| bytes |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |))
                                              ]
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, M.alloc (| Value.Array [] |) |) |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_data_slice :
      M.IsAssociatedFunction.Trait Self "data_slice" data_slice.
    Admitted.
    Global Typeclasses Opaque data_slice.
    
    (*
        pub fn data(&self) -> &[u8] {
            &self.body.data_section
        }
    *)
    Definition data (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.get_trait_method (|
                  "core::ops::deref::Deref",
                  Ty.path "bytes::bytes::Bytes",
                  [],
                  [],
                  "deref",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "bytes::bytes::Bytes" ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.path "alloy_primitives::bytes_::Bytes",
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "revm_bytecode::eof::Eof",
                                    "body"
                                  |),
                                  "revm_bytecode::eof::body::EofBody",
                                  "data_section"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_data : M.IsAssociatedFunction.Trait Self "data" data.
    Admitted.
    Global Typeclasses Opaque data.
    
    (*
        pub fn encode_slow(&self) -> Bytes {
            let mut buffer: Vec<u8> = Vec::with_capacity(self.size());
            self.header.encode(&mut buffer);
            self.body.encode(&mut buffer);
            buffer.into()
        }
    *)
    Definition encode_slow (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ buffer :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                    "with_capacity",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.path "revm_bytecode::eof::Eof",
                        "size",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "revm_bytecode::eof::header::EofHeader",
                    "encode",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_bytecode::eof::Eof",
                        "header"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (| M.borrow (| Pointer.Kind.MutRef, buffer |) |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "revm_bytecode::eof::body::EofBody",
                    "encode",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_bytecode::eof::Eof",
                        "body"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (| M.borrow (| Pointer.Kind.MutRef, buffer |) |)
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "alloy_primitives::bytes_::Bytes",
                M.get_trait_method (|
                  "core::convert::Into",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                  [],
                  [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                  "into",
                  [],
                  []
                |),
                [ M.read (| buffer |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_encode_slow :
      M.IsAssociatedFunction.Trait Self "encode_slow" encode_slow.
    Admitted.
    Global Typeclasses Opaque encode_slow.
    
    (*
        pub fn decode_dangling(mut raw: Bytes) -> Result<(Self, Bytes), EofDecodeError> {
            let (header, _) = EofHeader::decode(&raw)?;
            let eof_size = header.body_size() + header.size();
            if eof_size > raw.len() {
                return Err(EofDecodeError::MissingInput);
            }
            let dangling_data = raw.split_off(eof_size);
            let body = EofBody::decode(&raw, &header)?;
            Ok((Self { header, body, raw }, dangling_data))
        }
    *)
    Definition decode_dangling (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ raw ] =>
        ltac:(M.monadic
          (let raw := M.alloc (| raw |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  None,
                  M.match_operator (|
                    Some
                      (Ty.tuple
                        [
                          Ty.path "revm_bytecode::eof::header::EofHeader";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        ]),
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "revm_bytecode::eof::EofDecodeError"
                              ];
                            Ty.tuple
                              [
                                Ty.path "revm_bytecode::eof::header::EofHeader";
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.path "revm_bytecode::eof::header::EofHeader";
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ];
                              Ty.path "revm_bytecode::eof::EofDecodeError"
                            ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.path "revm_bytecode::eof::header::EofHeader";
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ];
                                Ty.path "revm_bytecode::eof::EofDecodeError"
                              ],
                            M.get_associated_function (|
                              Ty.path "revm_bytecode::eof::header::EofHeader",
                              "decode",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.path "bytes::bytes::Bytes",
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "bytes::bytes::Bytes" ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.path "alloy_primitives::bytes_::Bytes",
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, raw |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "revm_bytecode::eof::Eof";
                                            Ty.path "alloy_primitives::bytes_::Bytes"
                                          ];
                                        Ty.path "revm_bytecode::eof::EofDecodeError"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "revm_bytecode::eof::Eof";
                                              Ty.path "alloy_primitives::bytes_::Bytes"
                                            ];
                                          Ty.path "revm_bytecode::eof::EofDecodeError"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "revm_bytecode::eof::EofDecodeError"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let header := M.copy (| γ0_0 |) in
                        let~ eof_size : Ty.path "usize" :=
                          M.alloc (|
                            BinOp.Wrap.add (|
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.path "revm_bytecode::eof::header::EofHeader",
                                  "body_size",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, header |) ]
                              |),
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.path "revm_bytecode::eof::header::EofHeader",
                                  "size",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, header |) ]
                              |)
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.gt (|
                                          M.read (| eof_size |),
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.path "bytes::bytes::Bytes",
                                              "len",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.path "bytes::bytes::Bytes" ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.path "alloy_primitives::bytes_::Bytes",
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, raw |) ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::result::Result::Err"
                                            [
                                              Value.StructTuple
                                                "revm_bytecode::eof::EofDecodeError::MissingInput"
                                                []
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ dangling_data : Ty.path "alloy_primitives::bytes_::Bytes" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "alloy_primitives::bytes_::Bytes",
                              M.get_associated_function (|
                                Ty.path "alloy_primitives::bytes_::Bytes",
                                "split_off",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, raw |); M.read (| eof_size |) ]
                            |)
                          |) in
                        let~ body : Ty.path "revm_bytecode::eof::body::EofBody" :=
                          M.copy (|
                            M.match_operator (|
                              Some (Ty.path "revm_bytecode::eof::body::EofBody"),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "revm_bytecode::eof::EofDecodeError"
                                        ];
                                      Ty.path "revm_bytecode::eof::body::EofBody"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "revm_bytecode::eof::body::EofBody";
                                        Ty.path "revm_bytecode::eof::EofDecodeError"
                                      ],
                                    [],
                                    [],
                                    "branch",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "revm_bytecode::eof::body::EofBody";
                                          Ty.path "revm_bytecode::eof::EofDecodeError"
                                        ],
                                      M.get_associated_function (|
                                        Ty.path "revm_bytecode::eof::body::EofBody",
                                        "decode",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.borrow (| Pointer.Kind.Ref, raw |) |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.borrow (| Pointer.Kind.Ref, header |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path "revm_bytecode::eof::Eof";
                                                      Ty.path "alloy_primitives::bytes_::Bytes"
                                                    ];
                                                  Ty.path "revm_bytecode::eof::EofDecodeError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path "revm_bytecode::eof::Eof";
                                                        Ty.path "alloy_primitives::bytes_::Bytes"
                                                      ];
                                                    Ty.path "revm_bytecode::eof::EofDecodeError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "revm_bytecode::eof::EofDecodeError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.Tuple
                                [
                                  Value.StructRecord
                                    "revm_bytecode::eof::Eof"
                                    [
                                      ("header", M.read (| header |));
                                      ("body", M.read (| body |));
                                      ("raw", M.read (| raw |))
                                    ];
                                  M.read (| dangling_data |)
                                ]
                            ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_decode_dangling :
      M.IsAssociatedFunction.Trait Self "decode_dangling" decode_dangling.
    Admitted.
    Global Typeclasses Opaque decode_dangling.
    
    (*
        pub fn decode(raw: Bytes) -> Result<Self, EofDecodeError> {
            let (header, _) = EofHeader::decode(&raw)?;
            let body = EofBody::decode(&raw, &header)?;
            Ok(Self { header, body, raw })
        }
    *)
    Definition decode (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ raw ] =>
        ltac:(M.monadic
          (let raw := M.alloc (| raw |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  None,
                  M.match_operator (|
                    Some
                      (Ty.tuple
                        [
                          Ty.path "revm_bytecode::eof::header::EofHeader";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        ]),
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "revm_bytecode::eof::EofDecodeError"
                              ];
                            Ty.tuple
                              [
                                Ty.path "revm_bytecode::eof::header::EofHeader";
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.path "revm_bytecode::eof::header::EofHeader";
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ];
                              Ty.path "revm_bytecode::eof::EofDecodeError"
                            ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.path "revm_bytecode::eof::header::EofHeader";
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ];
                                Ty.path "revm_bytecode::eof::EofDecodeError"
                              ],
                            M.get_associated_function (|
                              Ty.path "revm_bytecode::eof::header::EofHeader",
                              "decode",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.path "bytes::bytes::Bytes",
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "bytes::bytes::Bytes" ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.path "alloy_primitives::bytes_::Bytes",
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, raw |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "revm_bytecode::eof::Eof";
                                        Ty.path "revm_bytecode::eof::EofDecodeError"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "revm_bytecode::eof::Eof";
                                          Ty.path "revm_bytecode::eof::EofDecodeError"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "revm_bytecode::eof::EofDecodeError"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let header := M.copy (| γ0_0 |) in
                        let~ body : Ty.path "revm_bytecode::eof::body::EofBody" :=
                          M.copy (|
                            M.match_operator (|
                              Some (Ty.path "revm_bytecode::eof::body::EofBody"),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "revm_bytecode::eof::EofDecodeError"
                                        ];
                                      Ty.path "revm_bytecode::eof::body::EofBody"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "revm_bytecode::eof::body::EofBody";
                                        Ty.path "revm_bytecode::eof::EofDecodeError"
                                      ],
                                    [],
                                    [],
                                    "branch",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "revm_bytecode::eof::body::EofBody";
                                          Ty.path "revm_bytecode::eof::EofDecodeError"
                                        ],
                                      M.get_associated_function (|
                                        Ty.path "revm_bytecode::eof::body::EofBody",
                                        "decode",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.borrow (| Pointer.Kind.Ref, raw |) |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.borrow (| Pointer.Kind.Ref, header |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "revm_bytecode::eof::Eof";
                                                  Ty.path "revm_bytecode::eof::EofDecodeError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.path "revm_bytecode::eof::Eof";
                                                    Ty.path "revm_bytecode::eof::EofDecodeError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "revm_bytecode::eof::EofDecodeError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.StructRecord
                                "revm_bytecode::eof::Eof"
                                [
                                  ("header", M.read (| header |));
                                  ("body", M.read (| body |));
                                  ("raw", M.read (| raw |))
                                ]
                            ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_decode : M.IsAssociatedFunction.Trait Self "decode" decode.
    Admitted.
    Global Typeclasses Opaque decode.
  End Impl_revm_bytecode_eof_Eof.
  
  (*
  Enum EofDecodeError
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "MissingInput";
          item := StructTuple [];
        };
        {
          name := "MissingBodyWithoutData";
          item := StructTuple [];
        };
        {
          name := "DanglingData";
          item := StructTuple [];
        };
        {
          name := "InvalidTypesSection";
          item := StructTuple [];
        };
        {
          name := "InvalidTypesSectionSize";
          item := StructTuple [];
        };
        {
          name := "InvalidEOFMagicNumber";
          item := StructTuple [];
        };
        {
          name := "InvalidEOFVersion";
          item := StructTuple [];
        };
        {
          name := "InvalidTypesKind";
          item := StructTuple [];
        };
        {
          name := "InvalidCodeKind";
          item := StructTuple [];
        };
        {
          name := "InvalidTerminalByte";
          item := StructTuple [];
        };
        {
          name := "InvalidDataKind";
          item := StructTuple [];
        };
        {
          name := "InvalidKindAfterCode";
          item := StructTuple [];
        };
        {
          name := "MismatchCodeAndTypesSize";
          item := StructTuple [];
        };
        {
          name := "NonSizes";
          item := StructTuple [];
        };
        {
          name := "ShortInputForSizes";
          item := StructTuple [];
        };
        {
          name := "ZeroSize";
          item := StructTuple [];
        };
        {
          name := "TooManyCodeSections";
          item := StructTuple [];
        };
        {
          name := "ZeroCodeSections";
          item := StructTuple [];
        };
        {
          name := "TooManyContainerSections";
          item := StructTuple [];
        };
        {
          name := "InvalidEOFSize";
          item := StructTuple [];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_EofDecodeError_MissingInput :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::MissingInput" 0.
  Axiom IsDiscriminant_EofDecodeError_MissingBodyWithoutData :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::MissingBodyWithoutData" 1.
  Axiom IsDiscriminant_EofDecodeError_DanglingData :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::DanglingData" 2.
  Axiom IsDiscriminant_EofDecodeError_InvalidTypesSection :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::InvalidTypesSection" 3.
  Axiom IsDiscriminant_EofDecodeError_InvalidTypesSectionSize :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::InvalidTypesSectionSize" 4.
  Axiom IsDiscriminant_EofDecodeError_InvalidEOFMagicNumber :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::InvalidEOFMagicNumber" 5.
  Axiom IsDiscriminant_EofDecodeError_InvalidEOFVersion :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::InvalidEOFVersion" 6.
  Axiom IsDiscriminant_EofDecodeError_InvalidTypesKind :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::InvalidTypesKind" 7.
  Axiom IsDiscriminant_EofDecodeError_InvalidCodeKind :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::InvalidCodeKind" 8.
  Axiom IsDiscriminant_EofDecodeError_InvalidTerminalByte :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::InvalidTerminalByte" 9.
  Axiom IsDiscriminant_EofDecodeError_InvalidDataKind :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::InvalidDataKind" 10.
  Axiom IsDiscriminant_EofDecodeError_InvalidKindAfterCode :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::InvalidKindAfterCode" 11.
  Axiom IsDiscriminant_EofDecodeError_MismatchCodeAndTypesSize :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::MismatchCodeAndTypesSize" 12.
  Axiom IsDiscriminant_EofDecodeError_NonSizes :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::NonSizes" 13.
  Axiom IsDiscriminant_EofDecodeError_ShortInputForSizes :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::ShortInputForSizes" 14.
  Axiom IsDiscriminant_EofDecodeError_ZeroSize :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::ZeroSize" 15.
  Axiom IsDiscriminant_EofDecodeError_TooManyCodeSections :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::TooManyCodeSections" 16.
  Axiom IsDiscriminant_EofDecodeError_ZeroCodeSections :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::ZeroCodeSections" 17.
  Axiom IsDiscriminant_EofDecodeError_TooManyContainerSections :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::TooManyContainerSections" 18.
  Axiom IsDiscriminant_EofDecodeError_InvalidEOFSize :
    M.IsDiscriminant "revm_bytecode::eof::EofDecodeError::InvalidEOFSize" 19.
  
  Module Impl_core_clone_Clone_for_revm_bytecode_eof_EofDecodeError.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::EofDecodeError".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.deref (| M.read (| self |) |) |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_revm_bytecode_eof_EofDecodeError.
  
  Module Impl_core_marker_Copy_for_revm_bytecode_eof_EofDecodeError.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::EofDecodeError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_revm_bytecode_eof_EofDecodeError.
  
  Module Impl_core_fmt_Debug_for_revm_bytecode_eof_EofDecodeError.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::EofDecodeError".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.read (|
                M.match_operator (|
                  Some (Ty.apply (Ty.path "&") [] [ Ty.path "str" ]),
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::MissingInput"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "MissingInput" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::MissingBodyWithoutData"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "MissingBodyWithoutData" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::DanglingData"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "DanglingData" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidTypesSection"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "InvalidTypesSection" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidTypesSectionSize"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "InvalidTypesSectionSize" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidEOFMagicNumber"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "InvalidEOFMagicNumber" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidEOFVersion"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "InvalidEOFVersion" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidTypesKind"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "InvalidTypesKind" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidCodeKind"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "InvalidCodeKind" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidTerminalByte"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "InvalidTerminalByte" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidDataKind"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "InvalidDataKind" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidKindAfterCode"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "InvalidKindAfterCode" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::MismatchCodeAndTypesSize"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "MismatchCodeAndTypesSize" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::NonSizes"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "NonSizes" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::ShortInputForSizes"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "ShortInputForSizes" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::ZeroSize"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "ZeroSize" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::TooManyCodeSections"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "TooManyCodeSections" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::ZeroCodeSections"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "ZeroCodeSections" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::TooManyContainerSections"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "TooManyContainerSections" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidEOFSize"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "InvalidEOFSize" |) |)
                          |)
                        |)))
                  ]
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_revm_bytecode_eof_EofDecodeError.
  
  Module Impl_core_hash_Hash_for_revm_bytecode_eof_EofDecodeError.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::EofDecodeError".
    
    (* Hash *)
    Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ __self_discr : Ty.path "isize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_bytecode::eof::EofDecodeError" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::hash::Hash",
                  Ty.path "isize",
                  [],
                  [],
                  "hash",
                  [],
                  [ __H ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_revm_bytecode_eof_EofDecodeError.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_bytecode_eof_EofDecodeError.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::EofDecodeError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_bytecode_eof_EofDecodeError.
  
  Module Impl_core_cmp_PartialEq_revm_bytecode_eof_EofDecodeError_for_revm_bytecode_eof_EofDecodeError.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::EofDecodeError".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_discr : Ty.path "isize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_bytecode::eof::EofDecodeError" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ __arg1_discr : Ty.path "isize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_bytecode::eof::EofDecodeError" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |)
              |) in
            M.alloc (| BinOp.eq (| M.read (| __self_discr |), M.read (| __arg1_discr |) |) |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "revm_bytecode::eof::EofDecodeError" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_revm_bytecode_eof_EofDecodeError_for_revm_bytecode_eof_EofDecodeError.
  
  Module Impl_core_cmp_Eq_for_revm_bytecode_eof_EofDecodeError.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::EofDecodeError".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_revm_bytecode_eof_EofDecodeError.
  
  Module Impl_core_cmp_PartialOrd_revm_bytecode_eof_EofDecodeError_for_revm_bytecode_eof_EofDecodeError.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::EofDecodeError".
    
    (* PartialOrd *)
    Definition partial_cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_discr : Ty.path "isize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_bytecode::eof::EofDecodeError" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ __arg1_discr : Ty.path "isize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_bytecode::eof::EofDecodeError" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "core::cmp::Ordering" ],
                M.get_trait_method (|
                  "core::cmp::PartialOrd",
                  Ty.path "isize",
                  [],
                  [ Ty.path "isize" ],
                  "partial_cmp",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "revm_bytecode::eof::EofDecodeError" ]
        Self
        (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
  End Impl_core_cmp_PartialOrd_revm_bytecode_eof_EofDecodeError_for_revm_bytecode_eof_EofDecodeError.
  
  Module Impl_core_cmp_Ord_for_revm_bytecode_eof_EofDecodeError.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::EofDecodeError".
    
    (* Ord *)
    Definition cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_discr : Ty.path "isize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_bytecode::eof::EofDecodeError" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ __arg1_discr : Ty.path "isize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_bytecode::eof::EofDecodeError" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "core::cmp::Ordering",
                M.get_trait_method (| "core::cmp::Ord", Ty.path "isize", [], [], "cmp", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Ord"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
  End Impl_core_cmp_Ord_for_revm_bytecode_eof_EofDecodeError.
  
  Module Impl_core_fmt_Display_for_revm_bytecode_eof_EofDecodeError.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::EofDecodeError".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            let s = match self {
                Self::MissingInput => "Short input while processing EOF",
                Self::MissingBodyWithoutData => "Short body while processing EOF",
                Self::DanglingData => "Body size is more than specified in the header",
                Self::InvalidTypesSection => "Invalid types section data",
                Self::InvalidTypesSectionSize => "Invalid types section size",
                Self::InvalidEOFMagicNumber => "Invalid EOF magic number",
                Self::InvalidEOFVersion => "Invalid EOF version",
                Self::InvalidTypesKind => "Invalid number for types kind",
                Self::InvalidCodeKind => "Invalid number for code kind",
                Self::InvalidTerminalByte => "Invalid terminal code",
                Self::InvalidDataKind => "Invalid data kind",
                Self::InvalidKindAfterCode => "Invalid kind after code",
                Self::MismatchCodeAndTypesSize => "Mismatch of code and types sizes",
                Self::NonSizes => "There should be at least one size",
                Self::ShortInputForSizes => "Missing size",
                Self::ZeroSize => "Size cant be zero",
                Self::TooManyCodeSections => "Invalid code number",
                Self::ZeroCodeSections => "Invalid number of code sections",
                Self::TooManyContainerSections => "Invalid container number",
                Self::InvalidEOFSize => "Invalid initcode size",
            };
            f.write_str(s)
        }
    *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let~ s : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
              M.copy (|
                M.match_operator (|
                  Some (Ty.apply (Ty.path "&") [] [ Ty.path "str" ]),
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::MissingInput"
                          |) in
                        Value.String "Short input while processing EOF"));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::MissingBodyWithoutData"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.read (| Value.String "Short body while processing EOF" |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::DanglingData"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.read (|
                                Value.String "Body size is more than specified in the header"
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidTypesSection"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "Invalid types section data" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidTypesSectionSize"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "Invalid types section size" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidEOFMagicNumber"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "Invalid EOF magic number" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidEOFVersion"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "Invalid EOF version" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidTypesKind"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "Invalid number for types kind" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidCodeKind"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "Invalid number for code kind" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidTerminalByte"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "Invalid terminal code" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidDataKind"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "Invalid data kind" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidKindAfterCode"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "Invalid kind after code" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::MismatchCodeAndTypesSize"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.read (| Value.String "Mismatch of code and types sizes" |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::NonSizes"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.read (| Value.String "There should be at least one size" |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::ShortInputForSizes"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "Missing size" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::ZeroSize"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "Size cant be zero" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::TooManyCodeSections"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "Invalid code number" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::ZeroCodeSections"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.read (| Value.String "Invalid number of code sections" |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::TooManyContainerSections"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "Invalid container number" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_bytecode::eof::EofDecodeError::InvalidEOFSize"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| Value.String "Invalid initcode size" |) |)
                          |)
                        |)))
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_revm_bytecode_eof_EofDecodeError.
  
  Module Impl_core_error_Error_for_revm_bytecode_eof_EofDecodeError.
    Definition Self : Ty.t := Ty.path "revm_bytecode::eof::EofDecodeError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::error::Error"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_error_Error_for_revm_bytecode_eof_EofDecodeError.
End eof.
