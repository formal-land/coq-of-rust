(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module eof.
  Module verification.
    (*
    pub fn validate_raw_eof(raw: Bytes) -> Result<Eof, EofError> {
        validate_raw_eof_inner(raw, Some(CodeType::ReturnContract))
    }
    *)
    Definition validate_raw_eof (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ raw ] =>
        ltac:(M.monadic
          (let raw := M.alloc (| raw |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.path "revm_bytecode::eof::Eof";
                Ty.path "revm_bytecode::eof::verification::EofError"
              ],
            M.get_function (| "revm_bytecode::eof::verification::validate_raw_eof_inner", [], [] |),
            [
              M.read (| raw |);
              Value.StructTuple
                "core::option::Option::Some"
                [ Value.StructTuple "revm_bytecode::eof::verification::CodeType::ReturnContract" []
                ]
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_validate_raw_eof :
      M.IsFunction.Trait "revm_bytecode::eof::verification::validate_raw_eof" validate_raw_eof.
    Admitted.
    Global Typeclasses Opaque validate_raw_eof.
    
    (*
    pub fn validate_raw_eof_inner(
        raw: Bytes,
        first_code_type: Option<CodeType>,
    ) -> Result<Eof, EofError> {
        if raw.len() > MAX_INITCODE_SIZE {
            return Err(EofError::Decode(EofDecodeError::InvalidEOFSize));
        }
        let eof = Eof::decode(raw)?;
        validate_eof_inner(&eof, first_code_type)?;
        Ok(eof)
    }
    *)
    Definition validate_raw_eof_inner (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ raw; first_code_type ] =>
        ltac:(M.monadic
          (let raw := M.alloc (| raw |) in
          let first_code_type := M.alloc (| first_code_type |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.gt (|
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.path "bytes::bytes::Bytes",
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "bytes::bytes::Bytes" ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.path "alloy_primitives::bytes_::Bytes",
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, raw |) ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |),
                                  M.read (|
                                    M.get_constant
                                      "revm_specification::constants::MAX_INITCODE_SIZE"
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_bytecode::eof::verification::EofError::Decode"
                                        [
                                          Value.StructTuple
                                            "revm_bytecode::eof::EofDecodeError::InvalidEOFSize"
                                            []
                                        ]
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ eof : Ty.path "revm_bytecode::eof::Eof" :=
                  M.copy (|
                    M.match_operator (|
                      Some (Ty.path "revm_bytecode::eof::Eof"),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "revm_bytecode::eof::EofDecodeError"
                                ];
                              Ty.path "revm_bytecode::eof::Eof"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "revm_bytecode::eof::Eof";
                                Ty.path "revm_bytecode::eof::EofDecodeError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "revm_bytecode::eof::Eof";
                                  Ty.path "revm_bytecode::eof::EofDecodeError"
                                ],
                              M.get_associated_function (|
                                Ty.path "revm_bytecode::eof::Eof",
                                "decode",
                                [],
                                []
                              |),
                              [ M.read (| raw |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "revm_bytecode::eof::Eof";
                                          Ty.path "revm_bytecode::eof::verification::EofError"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "revm_bytecode::eof::Eof";
                                            Ty.path "revm_bytecode::eof::verification::EofError"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "revm_bytecode::eof::EofDecodeError"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "revm_bytecode::eof::verification::EofError"
                              ];
                            Ty.tuple []
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "revm_bytecode::eof::verification::EofError" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "revm_bytecode::eof::verification::EofError" ],
                            M.get_function (|
                              "revm_bytecode::eof::verification::validate_eof_inner",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, eof |) |)
                              |);
                              M.read (| first_code_type |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "revm_bytecode::eof::Eof";
                                        Ty.path "revm_bytecode::eof::verification::EofError"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "revm_bytecode::eof::Eof";
                                          Ty.path "revm_bytecode::eof::verification::EofError"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "revm_bytecode::eof::verification::EofError"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| eof |) ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_validate_raw_eof_inner :
      M.IsFunction.Trait
        "revm_bytecode::eof::verification::validate_raw_eof_inner"
        validate_raw_eof_inner.
    Admitted.
    Global Typeclasses Opaque validate_raw_eof_inner.
    
    (*
    pub fn validate_eof(eof: &Eof) -> Result<(), EofError> {
        validate_eof_inner(eof, Some(CodeType::ReturnContract))
    }
    *)
    Definition validate_eof (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ eof ] =>
        ltac:(M.monadic
          (let eof := M.alloc (| eof |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "revm_bytecode::eof::verification::EofError" ],
            M.get_function (| "revm_bytecode::eof::verification::validate_eof_inner", [], [] |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| eof |) |) |);
              Value.StructTuple
                "core::option::Option::Some"
                [ Value.StructTuple "revm_bytecode::eof::verification::CodeType::ReturnContract" []
                ]
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_validate_eof :
      M.IsFunction.Trait "revm_bytecode::eof::verification::validate_eof" validate_eof.
    Admitted.
    Global Typeclasses Opaque validate_eof.
    
    (*
    pub fn validate_eof_inner(eof: &Eof, first_code_type: Option<CodeType>) -> Result<(), EofError> {
        // Data needs to be filled first first container.
        if !eof.body.is_data_filled {
            return Err(EofError::Validation(EofValidationError::DataNotFilled));
        }
        if eof.body.container_section.is_empty() {
            validate_eof_codes(eof, first_code_type)?;
            return Ok(());
        }
    
        let mut stack = Vec::with_capacity(4);
        stack.push((Cow::Borrowed(eof), first_code_type));
    
        while let Some((eof, code_type)) = stack.pop() {
            // Validate the current container.
            let tracker_containers = validate_eof_codes(&eof, code_type)?;
            // Decode subcontainers and push them to the stack.
            for (container, code_type) in eof
                .body
                .container_section
                .iter()
                .zip(tracker_containers.into_iter())
            {
                stack.push((Cow::Owned(Eof::decode(container.clone())?), Some(code_type)));
            }
        }
    
        Ok(())
    }
    *)
    Definition validate_eof_inner (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ eof; first_code_type ] =>
        ltac:(M.monadic
          (let eof := M.alloc (| eof |) in
          let first_code_type := M.alloc (| first_code_type |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| eof |) |),
                                        "revm_bytecode::eof::Eof",
                                        "body"
                                      |),
                                      "revm_bytecode::eof::body::EofBody",
                                      "is_data_filled"
                                    |)
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_bytecode::eof::verification::EofError::Validation"
                                        [
                                          Value.StructTuple
                                            "revm_bytecode::eof::verification::EofValidationError::DataNotFilled"
                                            []
                                        ]
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "alloy_primitives::bytes_::Bytes";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "is_empty",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| eof |) |),
                                          "revm_bytecode::eof::Eof",
                                          "body"
                                        |),
                                        "revm_bytecode::eof::body::EofBody",
                                        "container_section"
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_bytecode::eof::verification::CodeType";
                                        Ty.path "alloc::alloc::Global"
                                      ] :=
                                  M.match_operator (|
                                    Some
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.path "revm_bytecode::eof::verification::CodeType";
                                          Ty.path "alloc::alloc::Global"
                                        ]),
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::ops::control_flow::ControlFlow")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path
                                                  "revm_bytecode::eof::verification::EofValidationError"
                                              ];
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.path
                                                  "revm_bytecode::eof::verification::CodeType";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.path
                                                    "revm_bytecode::eof::verification::CodeType";
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.path
                                                "revm_bytecode::eof::verification::EofValidationError"
                                            ],
                                          [],
                                          [],
                                          "branch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.path
                                                      "revm_bytecode::eof::verification::CodeType";
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path
                                                  "revm_bytecode::eof::verification::EofValidationError"
                                              ],
                                            M.get_function (|
                                              "revm_bytecode::eof::verification::validate_eof_codes",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| eof |) |)
                                              |);
                                              M.read (| first_code_type |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path
                                                          "revm_bytecode::eof::verification::EofError"
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "revm_bytecode::eof::verification::EofError"
                                                        ],
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "revm_bytecode::eof::verification::EofValidationError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                M.return_ (|
                                  Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ stack :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "alloc::borrow::Cow")
                              []
                              [ Ty.path "revm_bytecode::eof::Eof" ];
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "alloc::borrow::Cow")
                                []
                                [ Ty.path "revm_bytecode::eof::Eof" ];
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "alloc::borrow::Cow")
                                  []
                                  [ Ty.path "revm_bytecode::eof::Eof" ];
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "with_capacity",
                        [],
                        []
                      |),
                      [ Value.Integer IntegerKind.Usize 4 ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "alloc::borrow::Cow")
                                  []
                                  [ Ty.path "revm_bytecode::eof::Eof" ];
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "push",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, stack |);
                        Value.Tuple
                          [
                            Value.StructTuple
                              "alloc::borrow::Cow::Borrowed"
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| eof |) |) |) ];
                            M.read (| first_code_type |)
                          ]
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.loop (|
                    Ty.tuple [],
                    ltac:(M.monadic
                      (M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::borrow::Cow")
                                              []
                                              [ Ty.path "revm_bytecode::eof::Eof" ];
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "revm_bytecode::eof::verification::CodeType"
                                              ]
                                          ]
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::borrow::Cow")
                                                []
                                                [ Ty.path "revm_bytecode::eof::Eof" ];
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.path
                                                    "revm_bytecode::eof::verification::CodeType"
                                                ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "pop",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.MutRef, stack |) ]
                                  |)
                                |) in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                              let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                              let eof := M.copy (| γ1_0 |) in
                              let code_type := M.copy (| γ1_1 |) in
                              let~ tracker_containers :
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.path "revm_bytecode::eof::verification::CodeType";
                                      Ty.path "alloc::alloc::Global"
                                    ] :=
                                M.copy (|
                                  M.match_operator (|
                                    Some
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.path "revm_bytecode::eof::verification::CodeType";
                                          Ty.path "alloc::alloc::Global"
                                        ]),
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::ops::control_flow::ControlFlow")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path
                                                  "revm_bytecode::eof::verification::EofValidationError"
                                              ];
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.path
                                                  "revm_bytecode::eof::verification::CodeType";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.path
                                                    "revm_bytecode::eof::verification::CodeType";
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.path
                                                "revm_bytecode::eof::verification::EofValidationError"
                                            ],
                                          [],
                                          [],
                                          "branch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.path
                                                      "revm_bytecode::eof::verification::CodeType";
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path
                                                  "revm_bytecode::eof::verification::EofValidationError"
                                              ],
                                            M.get_function (|
                                              "revm_bytecode::eof::verification::validate_eof_codes",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.path "revm_bytecode::eof::Eof" ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::borrow::Cow")
                                                        []
                                                        [ Ty.path "revm_bytecode::eof::Eof" ],
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (| Pointer.Kind.Ref, eof |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| code_type |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path
                                                          "revm_bytecode::eof::verification::EofError"
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "revm_bytecode::eof::verification::EofError"
                                                        ],
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "revm_bytecode::eof::verification::EofValidationError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |) in
                              M.use
                                (M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.path "alloy_primitives::bytes_::Bytes" ];
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            []
                                            [
                                              Ty.path "revm_bytecode::eof::verification::CodeType";
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.path "alloy_primitives::bytes_::Bytes" ];
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [
                                                Ty.path
                                                  "revm_bytecode::eof::verification::CodeType";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        [],
                                        [],
                                        "into_iter",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::zip::Zip")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                []
                                                [ Ty.path "alloy_primitives::bytes_::Bytes" ];
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.path
                                                    "revm_bytecode::eof::verification::CodeType";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                            [],
                                            [],
                                            "zip",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.path
                                                    "revm_bytecode::eof::verification::CodeType";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                []
                                                [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                                "iter",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.path
                                                                "alloy_primitives::bytes_::Bytes"
                                                            ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path
                                                              "alloy_primitives::bytes_::Bytes";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [],
                                                        "deref",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "revm_bytecode::eof::Eof"
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::Deref",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::borrow::Cow")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "revm_bytecode::eof::Eof"
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "deref",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      eof
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              "revm_bytecode::eof::Eof",
                                                              "body"
                                                            |),
                                                            "revm_bytecode::eof::body::EofBody",
                                                            "container_section"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.path
                                                    "revm_bytecode::eof::verification::CodeType";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::collect::IntoIterator",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.path
                                                      "revm_bytecode::eof::verification::CodeType";
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [],
                                                "into_iter",
                                                [],
                                                []
                                              |),
                                              [ M.read (| tracker_containers |) ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let iter := M.copy (| γ |) in
                                        M.loop (|
                                          Ty.tuple [],
                                          ltac:(M.monadic
                                            (let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Some (Ty.tuple []),
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "alloy_primitives::bytes_::Bytes"
                                                              ];
                                                            Ty.path
                                                              "revm_bytecode::eof::verification::CodeType"
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [
                                                              Ty.path
                                                                "alloy_primitives::bytes_::Bytes"
                                                            ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::vec::into_iter::IntoIter")
                                                            []
                                                            [
                                                              Ty.path
                                                                "revm_bytecode::eof::verification::CodeType";
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ],
                                                      [],
                                                      [],
                                                      "next",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.borrow (| Pointer.Kind.MutRef, iter |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let _ :=
                                                        M.is_struct_tuple (|
                                                          γ,
                                                          "core::option::Option::None"
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (| M.break (||) |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::option::Option::Some",
                                                          0
                                                        |) in
                                                      let γ1_0 :=
                                                        M.SubPointer.get_tuple_field (|
                                                          γ0_0,
                                                          0
                                                        |) in
                                                      let γ1_1 :=
                                                        M.SubPointer.get_tuple_field (|
                                                          γ0_0,
                                                          1
                                                        |) in
                                                      let container := M.copy (| γ1_0 |) in
                                                      let code_type := M.copy (| γ1_1 |) in
                                                      let~ _ : Ty.tuple [] :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.tuple [],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::borrow::Cow")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "revm_bytecode::eof::Eof"
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "revm_bytecode::eof::verification::CodeType"
                                                                        ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "push",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                stack
                                                              |);
                                                              Value.Tuple
                                                                [
                                                                  Value.StructTuple
                                                                    "alloc::borrow::Cow::Owned"
                                                                    [
                                                                      M.read (|
                                                                        M.match_operator (|
                                                                          Some
                                                                            (Ty.path
                                                                              "revm_bytecode::eof::Eof"),
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::ops::control_flow::ControlFlow")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "core::convert::Infallible";
                                                                                      Ty.path
                                                                                        "revm_bytecode::eof::EofDecodeError"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "revm_bytecode::eof::Eof"
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::ops::try_trait::Try",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "revm_bytecode::eof::Eof";
                                                                                    Ty.path
                                                                                      "revm_bytecode::eof::EofDecodeError"
                                                                                  ],
                                                                                [],
                                                                                [],
                                                                                "branch",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "revm_bytecode::eof::Eof";
                                                                                      Ty.path
                                                                                        "revm_bytecode::eof::EofDecodeError"
                                                                                    ],
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "revm_bytecode::eof::Eof",
                                                                                    "decode",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "alloy_primitives::bytes_::Bytes",
                                                                                      M.get_trait_method (|
                                                                                        "core::clone::Clone",
                                                                                        Ty.path
                                                                                          "alloy_primitives::bytes_::Bytes",
                                                                                        [],
                                                                                        [],
                                                                                        "clone",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              container
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::ops::control_flow::ControlFlow::Break",
                                                                                    0
                                                                                  |) in
                                                                                let residual :=
                                                                                  M.copy (|
                                                                                    γ0_0
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  M.never_to_any (|
                                                                                    M.read (|
                                                                                      M.return_ (|
                                                                                        M.call_closure (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::result::Result")
                                                                                            []
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [];
                                                                                              Ty.path
                                                                                                "revm_bytecode::eof::verification::EofError"
                                                                                            ],
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::try_trait::FromResidual",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::result::Result")
                                                                                              []
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [];
                                                                                                Ty.path
                                                                                                  "revm_bytecode::eof::verification::EofError"
                                                                                              ],
                                                                                            [],
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::result::Result")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "core::convert::Infallible";
                                                                                                  Ty.path
                                                                                                    "revm_bytecode::eof::EofDecodeError"
                                                                                                ]
                                                                                            ],
                                                                                            "from_residual",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              residual
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                                                    0
                                                                                  |) in
                                                                                let val :=
                                                                                  M.copy (|
                                                                                    γ0_0
                                                                                  |) in
                                                                                val))
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    ];
                                                                  Value.StructTuple
                                                                    "core::option::Option::Some"
                                                                    [ M.read (| code_type |) ]
                                                                ]
                                                            ]
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                        |)))
                                  ]
                                |))));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_validate_eof_inner :
      M.IsFunction.Trait "revm_bytecode::eof::verification::validate_eof_inner" validate_eof_inner.
    Admitted.
    Global Typeclasses Opaque validate_eof_inner.
    
    (*
    pub fn validate_eof_codes(
        eof: &Eof,
        this_code_type: Option<CodeType>,
    ) -> Result<Vec<CodeType>, EofValidationError> {
        if eof.body.code_section.len() != eof.body.types_section.len() {
            return Err(EofValidationError::InvalidTypesSection);
        }
    
        if eof.body.code_section.is_empty() {
            // No code sections. This should be already checked in decode.
            return Err(EofValidationError::NoCodeSections);
        }
    
        // The first code section must have a type signature
        // (0, 0x80, max_stack_height) (0 inputs non-returning function)
        let first_types = &eof.body.types_section[0];
        if first_types.inputs != 0 || !first_types.is_non_returning() {
            return Err(EofValidationError::InvalidTypesSection);
        }
    
        // Tracking access of code and sub containers.
        let mut tracker: AccessTracker = AccessTracker::new(
            this_code_type,
            eof.body.code_section.len(),
            eof.body.container_section.len(),
        );
    
        while let Some(index) = tracker.processing_stack.pop() {
            // Assume `index` is correct.
            let code = eof.body.code(index).unwrap();
            validate_eof_code(
                &code,
                eof.header.data_size as usize,
                index,
                eof.body.container_section.len(),
                &eof.body.types_section,
                &mut tracker,
            )?;
        }
    
        // Iterate over accessed codes and check if all are accessed.
        if !tracker.codes.into_iter().all(identity) {
            return Err(EofValidationError::CodeSectionNotAccessed);
        }
        // Iterate over all accessed subcontainers and check if all are accessed.
        if !tracker.subcontainers.iter().all(|i| i.is_some()) {
            return Err(EofValidationError::SubContainerNotAccessed);
        }
    
        if tracker.this_container_code_type == Some(CodeType::ReturnContract)
            && !eof.body.is_data_filled
        {
            return Err(EofValidationError::DataNotFilled);
        }
    
        Ok(tracker
            .subcontainers
            .into_iter()
            .map(|i| i.unwrap())
            .collect())
    }
    *)
    Definition validate_eof_codes (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ eof; this_code_type ] =>
        ltac:(M.monadic
          (let eof := M.alloc (| eof |) in
          let this_code_type := M.alloc (| this_code_type |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.ne (|
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| eof |) |),
                                            "revm_bytecode::eof::Eof",
                                            "body"
                                          |),
                                          "revm_bytecode::eof::body::EofBody",
                                          "code_section"
                                        |)
                                      |)
                                    ]
                                  |),
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.path "revm_bytecode::eof::types_section::TypesSection";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| eof |) |),
                                            "revm_bytecode::eof::Eof",
                                            "body"
                                          |),
                                          "revm_bytecode::eof::body::EofBody",
                                          "types_section"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_bytecode::eof::verification::EofValidationError::InvalidTypesSection"
                                        []
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                    "is_empty",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| eof |) |),
                                          "revm_bytecode::eof::Eof",
                                          "body"
                                        |),
                                        "revm_bytecode::eof::body::EofBody",
                                        "code_section"
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_bytecode::eof::verification::EofValidationError::NoCodeSections"
                                        []
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ first_types :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "revm_bytecode::eof::types_section::TypesSection" ] :=
                  M.alloc (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "revm_bytecode::eof::types_section::TypesSection" ],
                          M.get_trait_method (|
                            "core::ops::index::Index",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path "revm_bytecode::eof::types_section::TypesSection";
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [ Ty.path "usize" ],
                            "index",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| eof |) |),
                                  "revm_bytecode::eof::Eof",
                                  "body"
                                |),
                                "revm_bytecode::eof::body::EofBody",
                                "types_section"
                              |)
                            |);
                            Value.Integer IntegerKind.Usize 0
                          ]
                        |)
                      |)
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.or (|
                                  BinOp.ne (|
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| first_types |) |),
                                        "revm_bytecode::eof::types_section::TypesSection",
                                        "inputs"
                                      |)
                                    |),
                                    Value.Integer IntegerKind.U8 0
                                  |),
                                  ltac:(M.monadic
                                    (UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.path "revm_bytecode::eof::types_section::TypesSection",
                                          "is_non_returning",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| first_types |) |)
                                          |)
                                        ]
                                      |)
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_bytecode::eof::verification::EofValidationError::InvalidTypesSection"
                                        []
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ tracker : Ty.path "revm_bytecode::eof::verification::AccessTracker" :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "revm_bytecode::eof::verification::AccessTracker",
                      M.get_associated_function (|
                        Ty.path "revm_bytecode::eof::verification::AccessTracker",
                        "new",
                        [],
                        []
                      |),
                      [
                        M.read (| this_code_type |);
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                            "len",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| eof |) |),
                                  "revm_bytecode::eof::Eof",
                                  "body"
                                |),
                                "revm_bytecode::eof::body::EofBody",
                                "code_section"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path "alloy_primitives::bytes_::Bytes";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "len",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| eof |) |),
                                  "revm_bytecode::eof::Eof",
                                  "body"
                                |),
                                "revm_bytecode::eof::body::EofBody",
                                "container_section"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.loop (|
                    Ty.tuple [],
                    ltac:(M.monadic
                      (M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                      "pop",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          tracker,
                                          "revm_bytecode::eof::verification::AccessTracker",
                                          "processing_stack"
                                        |)
                                      |)
                                    ]
                                  |)
                                |) in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let index := M.copy (| γ0_0 |) in
                              let~ code : Ty.path "alloy_primitives::bytes_::Bytes" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloy_primitives::bytes_::Bytes",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                      "unwrap",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                        M.get_associated_function (|
                                          Ty.path "revm_bytecode::eof::body::EofBody",
                                          "code",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| eof |) |),
                                              "revm_bytecode::eof::Eof",
                                              "body"
                                            |)
                                          |);
                                          M.read (| index |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path
                                                "revm_bytecode::eof::verification::EofValidationError"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path
                                              "revm_bytecode::eof::verification::EofValidationError"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.path
                                                "revm_bytecode::eof::verification::EofValidationError"
                                            ],
                                          M.get_function (|
                                            "revm_bytecode::eof::verification::validate_eof_code",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.path "bytes::bytes::Bytes",
                                                    [],
                                                    [],
                                                    "deref",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "bytes::bytes::Bytes" ],
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.path
                                                              "alloy_primitives::bytes_::Bytes",
                                                            [],
                                                            [],
                                                            "deref",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  code
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.cast
                                              (Ty.path "usize")
                                              (M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| eof |) |),
                                                    "revm_bytecode::eof::Eof",
                                                    "header"
                                                  |),
                                                  "revm_bytecode::eof::header::EofHeader",
                                                  "data_size"
                                                |)
                                              |));
                                            M.read (| index |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.path "alloy_primitives::bytes_::Bytes";
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| eof |) |),
                                                      "revm_bytecode::eof::Eof",
                                                      "body"
                                                    |),
                                                    "revm_bytecode::eof::body::EofBody",
                                                    "container_section"
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.path
                                                            "revm_bytecode::eof::types_section::TypesSection"
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.path
                                                          "revm_bytecode::eof::types_section::TypesSection";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    [],
                                                    "deref",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| eof |) |),
                                                              "revm_bytecode::eof::Eof",
                                                              "body"
                                                            |),
                                                            "revm_bytecode::eof::body::EofBody",
                                                            "types_section"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, tracker |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.path
                                                            "revm_bytecode::eof::verification::CodeType";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path
                                                        "revm_bytecode::eof::verification::EofValidationError"
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path
                                                              "revm_bytecode::eof::verification::CodeType";
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.path
                                                          "revm_bytecode::eof::verification::EofValidationError"
                                                      ],
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "revm_bytecode::eof::verification::EofValidationError"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      [],
                                      "all",
                                      [],
                                      [ Ty.function [ Ty.path "bool" ] (Ty.path "bool") ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ],
                                              [],
                                              [],
                                              "into_iter",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  tracker,
                                                  "revm_bytecode::eof::verification::AccessTracker",
                                                  "codes"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.get_function (|
                                        "core::convert::identity",
                                        [],
                                        [ Ty.path "bool" ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_bytecode::eof::verification::EofValidationError::CodeSectionNotAccessed"
                                        []
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                                        ],
                                      [],
                                      [],
                                      "all",
                                      [],
                                      [
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.path
                                                          "revm_bytecode::eof::verification::CodeType"
                                                      ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.path "bool")
                                      ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.path
                                                      "revm_bytecode::eof::verification::CodeType"
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [
                                                      Ty.path
                                                        "revm_bytecode::eof::verification::CodeType"
                                                    ]
                                                ],
                                              "iter",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "revm_bytecode::eof::verification::CodeType"
                                                              ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.path
                                                                "revm_bytecode::eof::verification::CodeType"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          tracker,
                                                          "revm_bytecode::eof::verification::AccessTracker",
                                                          "subcontainers"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Some
                                                    (Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "revm_bytecode::eof::verification::CodeType"
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.path "bool")),
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let i := M.copy (| γ |) in
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "revm_bytecode::eof::verification::CodeType"
                                                              ],
                                                            "is_some",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| i |) |)
                                                            |)
                                                          ]
                                                        |)))
                                                  ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end))
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_bytecode::eof::verification::EofValidationError::SubContainerNotAccessed"
                                        []
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "revm_bytecode::eof::verification::CodeType" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                                      ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          tracker,
                                          "revm_bytecode::eof::verification::AccessTracker",
                                          "this_container_code_type"
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [
                                              Value.StructTuple
                                                "revm_bytecode::eof::verification::CodeType::ReturnContract"
                                                []
                                            ]
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (UnOp.not (|
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| eof |) |),
                                            "revm_bytecode::eof::Eof",
                                            "body"
                                          |),
                                          "revm_bytecode::eof::body::EofBody",
                                          "is_data_filled"
                                        |)
                                      |)
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_bytecode::eof::verification::EofValidationError::DataNotFilled"
                                        []
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "revm_bytecode::eof::verification::CodeType";
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.path "revm_bytecode::eof::verification::CodeType" ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                                    ]
                                ]
                                (Ty.path "revm_bytecode::eof::verification::CodeType")
                            ],
                          [],
                          [],
                          "collect",
                          [],
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path "revm_bytecode::eof::verification::CodeType";
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "revm_bytecode::eof::verification::CodeType" ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                                      ]
                                  ]
                                  (Ty.path "revm_bytecode::eof::verification::CodeType")
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.path "revm_bytecode::eof::verification::CodeType" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "map",
                              [],
                              [
                                Ty.path "revm_bytecode::eof::verification::CodeType";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                                      ]
                                  ]
                                  (Ty.path "revm_bytecode::eof::verification::CodeType")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "revm_bytecode::eof::verification::CodeType" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "revm_bytecode::eof::verification::CodeType" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      tracker,
                                      "revm_bytecode::eof::verification::AccessTracker",
                                      "subcontainers"
                                    |)
                                  |)
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Some
                                            (Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.path
                                                          "revm_bytecode::eof::verification::CodeType"
                                                      ]
                                                  ]
                                              ]
                                              (Ty.path
                                                "revm_bytecode::eof::verification::CodeType")),
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let i := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path
                                                    "revm_bytecode::eof::verification::CodeType",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.path
                                                          "revm_bytecode::eof::verification::CodeType"
                                                      ],
                                                    "unwrap",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| i |) ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        ]
                      |)
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_validate_eof_codes :
      M.IsFunction.Trait "revm_bytecode::eof::verification::validate_eof_codes" validate_eof_codes.
    Admitted.
    Global Typeclasses Opaque validate_eof_codes.
    
    (*
    Enum EofError
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "Decode";
            item := StructTuple [ Ty.path "revm_bytecode::eof::EofDecodeError" ];
          };
          {
            name := "Validation";
            item := StructTuple [ Ty.path "revm_bytecode::eof::verification::EofValidationError" ];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_EofError_Decode :
      M.IsDiscriminant "revm_bytecode::eof::verification::EofError::Decode" 0.
    Axiom IsDiscriminant_EofError_Validation :
      M.IsDiscriminant "revm_bytecode::eof::verification::EofError::Validation" 1.
    
    Module Impl_core_fmt_Debug_for_revm_bytecode_eof_verification_EofError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofError".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                Some
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ]),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_bytecode::eof::verification::EofError::Decode",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Decode" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_bytecode::eof::verification::EofError::Validation",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Validation" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_revm_bytecode_eof_verification_EofError.
    
    Module Impl_core_hash_Hash_for_revm_bytecode_eof_verification_EofError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofError".
      
      (* Hash *)
      Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::EofError" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::hash::Hash",
                      Ty.path "isize",
                      [],
                      [],
                      "hash",
                      [],
                      [ __H ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                    ]
                  |)
                |) in
              M.match_operator (|
                Some (Ty.tuple []),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_bytecode::eof::verification::EofError::Decode",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "revm_bytecode::eof::EofDecodeError",
                            [],
                            [],
                            "hash",
                            [],
                            [ __H ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |);
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_bytecode::eof::verification::EofError::Validation",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "revm_bytecode::eof::verification::EofValidationError",
                            [],
                            [],
                            "hash",
                            [],
                            [ __H ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |);
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_revm_bytecode_eof_verification_EofError.
    
    Module Impl_core_marker_StructuralPartialEq_for_revm_bytecode_eof_verification_EofError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofError".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_revm_bytecode_eof_verification_EofError.
    
    Module Impl_core_cmp_PartialEq_revm_bytecode_eof_verification_EofError_for_revm_bytecode_eof_verification_EofError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofError".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::EofError" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::EofError" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.alloc (|
                LogicalOp.and (|
                  BinOp.eq (| M.read (| __self_discr |), M.read (| __arg1_discr |) |),
                  ltac:(M.monadic
                    (M.read (|
                      M.match_operator (|
                        Some (Ty.path "bool"),
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "revm_bytecode::eof::verification::EofError::Decode",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "revm_bytecode::eof::verification::EofError::Decode",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "revm_bytecode::eof::EofDecodeError" ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "revm_bytecode::eof::EofDecodeError" ]
                                    ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                    M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "revm_bytecode::eof::verification::EofError::Validation",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "revm_bytecode::eof::verification::EofError::Validation",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.path
                                          "revm_bytecode::eof::verification::EofValidationError"
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.path
                                            "revm_bytecode::eof::verification::EofValidationError"
                                        ]
                                    ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                    M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    Ty.path "never",
                                    M.get_function (| "core::intrinsics::unreachable", [], [] |),
                                    []
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)))
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "revm_bytecode::eof::verification::EofError" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_revm_bytecode_eof_verification_EofError_for_revm_bytecode_eof_verification_EofError.
    
    Module Impl_core_cmp_Eq_for_revm_bytecode_eof_verification_EofError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofError".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        None,
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_revm_bytecode_eof_verification_EofError.
    
    Module Impl_core_cmp_PartialOrd_revm_bytecode_eof_verification_EofError_for_revm_bytecode_eof_verification_EofError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofError".
      
      (* PartialOrd *)
      Definition partial_cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::EofError" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::EofError" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.match_operator (|
                Some
                  (Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "core::cmp::Ordering" ]),
                M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "revm_bytecode::eof::verification::EofError::Decode",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "revm_bytecode::eof::verification::EofError::Decode",
                          0
                        |) in
                      let __arg1_0 := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "core::cmp::Ordering" ],
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "revm_bytecode::eof::EofDecodeError",
                            [],
                            [ Ty.path "revm_bytecode::eof::EofDecodeError" ],
                            "partial_cmp",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __arg1_0 |) |) |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "revm_bytecode::eof::verification::EofError::Validation",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "revm_bytecode::eof::verification::EofError::Validation",
                          0
                        |) in
                      let __arg1_0 := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "core::cmp::Ordering" ],
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "revm_bytecode::eof::verification::EofValidationError",
                            [],
                            [ Ty.path "revm_bytecode::eof::verification::EofValidationError" ],
                            "partial_cmp",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __arg1_0 |) |) |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "core::cmp::Ordering" ],
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "isize",
                            [],
                            [ Ty.path "isize" ],
                            "partial_cmp",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                            |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "revm_bytecode::eof::verification::EofError" ]
          Self
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_revm_bytecode_eof_verification_EofError_for_revm_bytecode_eof_verification_EofError.
    
    Module Impl_core_cmp_Ord_for_revm_bytecode_eof_verification_EofError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofError".
      
      (* Ord *)
      Definition cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::EofError" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::EofError" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.match_operator (|
                Some (Ty.path "core::cmp::Ordering"),
                M.alloc (|
                  M.call_closure (|
                    Ty.path "core::cmp::Ordering",
                    M.get_trait_method (|
                      "core::cmp::Ord",
                      Ty.path "isize",
                      [],
                      [],
                      "cmp",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let _ := M.is_struct_tuple (| γ, "core::cmp::Ordering::Equal" |) in
                      M.match_operator (|
                        Some (Ty.path "core::cmp::Ordering"),
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "revm_bytecode::eof::verification::EofError::Decode",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "revm_bytecode::eof::verification::EofError::Decode",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "core::cmp::Ordering",
                                  M.get_trait_method (|
                                    "core::cmp::Ord",
                                    Ty.path "revm_bytecode::eof::EofDecodeError",
                                    [],
                                    [],
                                    "cmp",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| __self_0 |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| __arg1_0 |) |)
                                    |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "revm_bytecode::eof::verification::EofError::Validation",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "revm_bytecode::eof::verification::EofError::Validation",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "core::cmp::Ordering",
                                  M.get_trait_method (|
                                    "core::cmp::Ord",
                                    Ty.path "revm_bytecode::eof::verification::EofValidationError",
                                    [],
                                    [],
                                    "cmp",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| __self_0 |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| __arg1_0 |) |)
                                    |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    Ty.path "never",
                                    M.get_function (| "core::intrinsics::unreachable", [], [] |),
                                    []
                                  |)
                                |)
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let cmp := M.copy (| γ |) in
                      cmp))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Ord"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
    End Impl_core_cmp_Ord_for_revm_bytecode_eof_verification_EofError.
    
    Module Impl_core_clone_Clone_for_revm_bytecode_eof_verification_EofError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofError".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        None,
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_revm_bytecode_eof_verification_EofError.
    
    Module Impl_core_marker_Copy_for_revm_bytecode_eof_verification_EofError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofError".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_revm_bytecode_eof_verification_EofError.
    
    Module Impl_core_convert_From_revm_bytecode_eof_EofDecodeError_for_revm_bytecode_eof_verification_EofError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofError".
      
      (*
          fn from(err: EofDecodeError) -> Self {
              EofError::Decode(err)
          }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ err ] =>
          ltac:(M.monadic
            (let err := M.alloc (| err |) in
            Value.StructTuple
              "revm_bytecode::eof::verification::EofError::Decode"
              [ M.read (| err |) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "revm_bytecode::eof::EofDecodeError" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_revm_bytecode_eof_EofDecodeError_for_revm_bytecode_eof_verification_EofError.
    
    Module Impl_core_convert_From_revm_bytecode_eof_verification_EofValidationError_for_revm_bytecode_eof_verification_EofError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofError".
      
      (*
          fn from(err: EofValidationError) -> Self {
              EofError::Validation(err)
          }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ err ] =>
          ltac:(M.monadic
            (let err := M.alloc (| err |) in
            Value.StructTuple
              "revm_bytecode::eof::verification::EofError::Validation"
              [ M.read (| err |) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "revm_bytecode::eof::verification::EofValidationError" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_revm_bytecode_eof_verification_EofValidationError_for_revm_bytecode_eof_verification_EofError.
    
    Module Impl_core_fmt_Display_for_revm_bytecode_eof_verification_EofError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofError".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              match self {
                  EofError::Decode(e) => write!(f, "Bytecode decode error: {}", e),
                  EofError::Validation(e) => write!(f, "Bytecode validation error: {}", e),
              }
          }
      *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                Some
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ]),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_bytecode::eof::verification::EofError::Decode",
                          0
                        |) in
                      let e := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                [
                                  Value.Integer IntegerKind.Usize 1;
                                  Value.Integer IntegerKind.Usize 1
                                ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [ M.read (| Value.String "Bytecode decode error: " |) ]
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "revm_bytecode::eof::EofDecodeError" ]
                                                ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.borrow (| Pointer.Kind.Ref, e |) |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_bytecode::eof::verification::EofError::Validation",
                          0
                        |) in
                      let e := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                [
                                  Value.Integer IntegerKind.Usize 1;
                                  Value.Integer IntegerKind.Usize 1
                                ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [ M.read (| Value.String "Bytecode validation error: " |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.path
                                                        "revm_bytecode::eof::verification::EofValidationError"
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.borrow (| Pointer.Kind.Ref, e |) |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_revm_bytecode_eof_verification_EofError.
    
    Module Impl_core_error_Error_for_revm_bytecode_eof_verification_EofError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofError".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::error::Error"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_error_Error_for_revm_bytecode_eof_verification_EofError.
    
    (*
    Enum EofValidationError
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "FalsePositive";
            item := StructTuple [];
          };
          {
            name := "UnknownOpcode";
            item := StructTuple [];
          };
          {
            name := "OpcodeDisabled";
            item := StructTuple [];
          };
          {
            name := "InstructionNotForwardAccessed";
            item := StructTuple [];
          };
          {
            name := "MissingImmediateBytes";
            item := StructTuple [];
          };
          {
            name := "MissingRJUMPVImmediateBytes";
            item := StructTuple [];
          };
          {
            name := "JumpToImmediateBytes";
            item := StructTuple [];
          };
          {
            name := "BackwardJumpToImmediateBytes";
            item := StructTuple [];
          };
          {
            name := "RJUMPVZeroMaxIndex";
            item := StructTuple [];
          };
          {
            name := "JumpZeroOffset";
            item := StructTuple [];
          };
          {
            name := "EOFCREATEInvalidIndex";
            item := StructTuple [];
          };
          {
            name := "CodeSectionOutOfBounds";
            item := StructTuple [];
          };
          {
            name := "CALLFNonReturningFunction";
            item := StructTuple [];
          };
          {
            name := "StackOverflow";
            item := StructTuple [];
          };
          {
            name := "JUMPFEnoughOutputs";
            item := StructTuple [];
          };
          {
            name := "JUMPFStackHigherThanOutputs";
            item := StructTuple [];
          };
          {
            name := "DataLoadOutOfBounds";
            item := StructTuple [];
          };
          {
            name := "RETFBiggestStackNumMoreThenOutputs";
            item := StructTuple [];
          };
          {
            name := "StackUnderflow";
            item := StructTuple [];
          };
          {
            name := "TypesStackUnderflow";
            item := StructTuple [];
          };
          {
            name := "JumpUnderflow";
            item := StructTuple [];
          };
          {
            name := "JumpOverflow";
            item := StructTuple [];
          };
          {
            name := "BackwardJumpBiggestNumMismatch";
            item := StructTuple [];
          };
          {
            name := "BackwardJumpSmallestNumMismatch";
            item := StructTuple [];
          };
          {
            name := "LastInstructionNotTerminating";
            item := StructTuple [];
          };
          {
            name := "CodeSectionNotAccessed";
            item := StructTuple [];
          };
          {
            name := "InvalidTypesSection";
            item := StructTuple [];
          };
          {
            name := "InvalidFirstTypesSection";
            item := StructTuple [];
          };
          {
            name := "MaxStackMismatch";
            item := StructTuple [];
          };
          {
            name := "NoCodeSections";
            item := StructTuple [];
          };
          {
            name := "SubContainerCalledInTwoModes";
            item := StructTuple [];
          };
          {
            name := "SubContainerNotAccessed";
            item := StructTuple [];
          };
          {
            name := "DataNotFilled";
            item := StructTuple [];
          };
          {
            name := "NonReturningSectionIsReturning";
            item := StructTuple [];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_EofValidationError_FalsePositive :
      M.IsDiscriminant "revm_bytecode::eof::verification::EofValidationError::FalsePositive" 0.
    Axiom IsDiscriminant_EofValidationError_UnknownOpcode :
      M.IsDiscriminant "revm_bytecode::eof::verification::EofValidationError::UnknownOpcode" 1.
    Axiom IsDiscriminant_EofValidationError_OpcodeDisabled :
      M.IsDiscriminant "revm_bytecode::eof::verification::EofValidationError::OpcodeDisabled" 2.
    Axiom IsDiscriminant_EofValidationError_InstructionNotForwardAccessed :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::InstructionNotForwardAccessed"
        3.
    Axiom IsDiscriminant_EofValidationError_MissingImmediateBytes :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::MissingImmediateBytes"
        4.
    Axiom IsDiscriminant_EofValidationError_MissingRJUMPVImmediateBytes :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::MissingRJUMPVImmediateBytes"
        5.
    Axiom IsDiscriminant_EofValidationError_JumpToImmediateBytes :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::JumpToImmediateBytes"
        6.
    Axiom IsDiscriminant_EofValidationError_BackwardJumpToImmediateBytes :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::BackwardJumpToImmediateBytes"
        7.
    Axiom IsDiscriminant_EofValidationError_RJUMPVZeroMaxIndex :
      M.IsDiscriminant "revm_bytecode::eof::verification::EofValidationError::RJUMPVZeroMaxIndex" 8.
    Axiom IsDiscriminant_EofValidationError_JumpZeroOffset :
      M.IsDiscriminant "revm_bytecode::eof::verification::EofValidationError::JumpZeroOffset" 9.
    Axiom IsDiscriminant_EofValidationError_EOFCREATEInvalidIndex :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::EOFCREATEInvalidIndex"
        10.
    Axiom IsDiscriminant_EofValidationError_CodeSectionOutOfBounds :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::CodeSectionOutOfBounds"
        11.
    Axiom IsDiscriminant_EofValidationError_CALLFNonReturningFunction :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::CALLFNonReturningFunction"
        12.
    Axiom IsDiscriminant_EofValidationError_StackOverflow :
      M.IsDiscriminant "revm_bytecode::eof::verification::EofValidationError::StackOverflow" 13.
    Axiom IsDiscriminant_EofValidationError_JUMPFEnoughOutputs :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::JUMPFEnoughOutputs"
        14.
    Axiom IsDiscriminant_EofValidationError_JUMPFStackHigherThanOutputs :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::JUMPFStackHigherThanOutputs"
        15.
    Axiom IsDiscriminant_EofValidationError_DataLoadOutOfBounds :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::DataLoadOutOfBounds"
        16.
    Axiom IsDiscriminant_EofValidationError_RETFBiggestStackNumMoreThenOutputs :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::RETFBiggestStackNumMoreThenOutputs"
        17.
    Axiom IsDiscriminant_EofValidationError_StackUnderflow :
      M.IsDiscriminant "revm_bytecode::eof::verification::EofValidationError::StackUnderflow" 18.
    Axiom IsDiscriminant_EofValidationError_TypesStackUnderflow :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::TypesStackUnderflow"
        19.
    Axiom IsDiscriminant_EofValidationError_JumpUnderflow :
      M.IsDiscriminant "revm_bytecode::eof::verification::EofValidationError::JumpUnderflow" 20.
    Axiom IsDiscriminant_EofValidationError_JumpOverflow :
      M.IsDiscriminant "revm_bytecode::eof::verification::EofValidationError::JumpOverflow" 21.
    Axiom IsDiscriminant_EofValidationError_BackwardJumpBiggestNumMismatch :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::BackwardJumpBiggestNumMismatch"
        22.
    Axiom IsDiscriminant_EofValidationError_BackwardJumpSmallestNumMismatch :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::BackwardJumpSmallestNumMismatch"
        23.
    Axiom IsDiscriminant_EofValidationError_LastInstructionNotTerminating :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::LastInstructionNotTerminating"
        24.
    Axiom IsDiscriminant_EofValidationError_CodeSectionNotAccessed :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::CodeSectionNotAccessed"
        25.
    Axiom IsDiscriminant_EofValidationError_InvalidTypesSection :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::InvalidTypesSection"
        26.
    Axiom IsDiscriminant_EofValidationError_InvalidFirstTypesSection :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::InvalidFirstTypesSection"
        27.
    Axiom IsDiscriminant_EofValidationError_MaxStackMismatch :
      M.IsDiscriminant "revm_bytecode::eof::verification::EofValidationError::MaxStackMismatch" 28.
    Axiom IsDiscriminant_EofValidationError_NoCodeSections :
      M.IsDiscriminant "revm_bytecode::eof::verification::EofValidationError::NoCodeSections" 29.
    Axiom IsDiscriminant_EofValidationError_SubContainerCalledInTwoModes :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::SubContainerCalledInTwoModes"
        30.
    Axiom IsDiscriminant_EofValidationError_SubContainerNotAccessed :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::SubContainerNotAccessed"
        31.
    Axiom IsDiscriminant_EofValidationError_DataNotFilled :
      M.IsDiscriminant "revm_bytecode::eof::verification::EofValidationError::DataNotFilled" 32.
    Axiom IsDiscriminant_EofValidationError_NonReturningSectionIsReturning :
      M.IsDiscriminant
        "revm_bytecode::eof::verification::EofValidationError::NonReturningSectionIsReturning"
        33.
    
    Module Impl_core_fmt_Debug_for_revm_bytecode_eof_verification_EofValidationError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofValidationError".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.read (|
                  M.match_operator (|
                    Some (Ty.apply (Ty.path "&") [] [ Ty.path "str" ]),
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::FalsePositive"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "FalsePositive" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::UnknownOpcode"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "UnknownOpcode" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::OpcodeDisabled"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "OpcodeDisabled" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::InstructionNotForwardAccessed"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "InstructionNotForwardAccessed" |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::MissingImmediateBytes"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "MissingImmediateBytes" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::MissingRJUMPVImmediateBytes"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "MissingRJUMPVImmediateBytes" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::JumpToImmediateBytes"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "JumpToImmediateBytes" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::BackwardJumpToImmediateBytes"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "BackwardJumpToImmediateBytes" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::RJUMPVZeroMaxIndex"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "RJUMPVZeroMaxIndex" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::JumpZeroOffset"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "JumpZeroOffset" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::EOFCREATEInvalidIndex"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "EOFCREATEInvalidIndex" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::CodeSectionOutOfBounds"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "CodeSectionOutOfBounds" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::CALLFNonReturningFunction"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "CALLFNonReturningFunction" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::StackOverflow"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "StackOverflow" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::JUMPFEnoughOutputs"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "JUMPFEnoughOutputs" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::JUMPFStackHigherThanOutputs"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "JUMPFStackHigherThanOutputs" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::DataLoadOutOfBounds"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "DataLoadOutOfBounds" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::RETFBiggestStackNumMoreThenOutputs"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "RETFBiggestStackNumMoreThenOutputs" |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::StackUnderflow"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "StackUnderflow" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::TypesStackUnderflow"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "TypesStackUnderflow" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::JumpUnderflow"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "JumpUnderflow" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::JumpOverflow"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "JumpOverflow" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::BackwardJumpBiggestNumMismatch"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "BackwardJumpBiggestNumMismatch" |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::BackwardJumpSmallestNumMismatch"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "BackwardJumpSmallestNumMismatch" |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::LastInstructionNotTerminating"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "LastInstructionNotTerminating" |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::CodeSectionNotAccessed"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "CodeSectionNotAccessed" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::InvalidTypesSection"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "InvalidTypesSection" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::InvalidFirstTypesSection"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "InvalidFirstTypesSection" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::MaxStackMismatch"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "MaxStackMismatch" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::NoCodeSections"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "NoCodeSections" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::SubContainerCalledInTwoModes"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "SubContainerCalledInTwoModes" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::SubContainerNotAccessed"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "SubContainerNotAccessed" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::DataNotFilled"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "DataNotFilled" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::NonReturningSectionIsReturning"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "NonReturningSectionIsReturning" |)
                              |)
                            |)
                          |)))
                    ]
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_revm_bytecode_eof_verification_EofValidationError.
    
    Module Impl_core_hash_Hash_for_revm_bytecode_eof_verification_EofValidationError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofValidationError".
      
      (* Hash *)
      Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::EofValidationError" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.path "isize",
                    [],
                    [],
                    "hash",
                    [],
                    [ __H ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_revm_bytecode_eof_verification_EofValidationError.
    
    Module Impl_core_marker_StructuralPartialEq_for_revm_bytecode_eof_verification_EofValidationError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofValidationError".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_revm_bytecode_eof_verification_EofValidationError.
    
    Module Impl_core_cmp_PartialEq_revm_bytecode_eof_verification_EofValidationError_for_revm_bytecode_eof_verification_EofValidationError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofValidationError".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::EofValidationError" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::EofValidationError" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.alloc (| BinOp.eq (| M.read (| __self_discr |), M.read (| __arg1_discr |) |) |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "revm_bytecode::eof::verification::EofValidationError" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_revm_bytecode_eof_verification_EofValidationError_for_revm_bytecode_eof_verification_EofValidationError.
    
    Module Impl_core_cmp_Eq_for_revm_bytecode_eof_verification_EofValidationError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofValidationError".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.Tuple []))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_revm_bytecode_eof_verification_EofValidationError.
    
    Module Impl_core_cmp_PartialOrd_revm_bytecode_eof_verification_EofValidationError_for_revm_bytecode_eof_verification_EofValidationError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofValidationError".
      
      (* PartialOrd *)
      Definition partial_cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::EofValidationError" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::EofValidationError" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "core::cmp::Ordering" ],
                  M.get_trait_method (|
                    "core::cmp::PartialOrd",
                    Ty.path "isize",
                    [],
                    [ Ty.path "isize" ],
                    "partial_cmp",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "revm_bytecode::eof::verification::EofValidationError" ]
          Self
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_revm_bytecode_eof_verification_EofValidationError_for_revm_bytecode_eof_verification_EofValidationError.
    
    Module Impl_core_cmp_Ord_for_revm_bytecode_eof_verification_EofValidationError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofValidationError".
      
      (* Ord *)
      Definition cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::EofValidationError" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::EofValidationError" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.path "core::cmp::Ordering",
                  M.get_trait_method (| "core::cmp::Ord", Ty.path "isize", [], [], "cmp", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Ord"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
    End Impl_core_cmp_Ord_for_revm_bytecode_eof_verification_EofValidationError.
    
    Module Impl_core_clone_Clone_for_revm_bytecode_eof_verification_EofValidationError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofValidationError".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (| M.deref (| M.read (| self |) |) |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_revm_bytecode_eof_verification_EofValidationError.
    
    Module Impl_core_marker_Copy_for_revm_bytecode_eof_verification_EofValidationError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofValidationError".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_revm_bytecode_eof_verification_EofValidationError.
    
    (* StructRecord
      {
        name := "AccessTracker";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("this_container_code_type",
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.path "revm_bytecode::eof::verification::CodeType" ]);
            ("codes",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ]);
            ("processing_stack",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]);
            ("subcontainers",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.path "revm_bytecode::eof::verification::CodeType" ];
                  Ty.path "alloc::alloc::Global"
                ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_revm_bytecode_eof_verification_AccessTracker.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::AccessTracker".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "revm_bytecode::eof::verification::AccessTracker"
              [
                ("this_container_code_type",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.path "revm_bytecode::eof::verification::CodeType" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.path "revm_bytecode::eof::verification::CodeType" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_bytecode::eof::verification::AccessTracker",
                              "this_container_code_type"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("codes",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_bytecode::eof::verification::AccessTracker",
                              "codes"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("processing_stack",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_bytecode::eof::verification::AccessTracker",
                              "processing_stack"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("subcontainers",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.path "revm_bytecode::eof::verification::CodeType" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "revm_bytecode::eof::verification::CodeType" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_bytecode::eof::verification::AccessTracker",
                              "subcontainers"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_revm_bytecode_eof_verification_AccessTracker.
    
    Module Impl_core_fmt_Debug_for_revm_bytecode_eof_verification_AccessTracker.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::AccessTracker".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field4_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.read (| Value.String "AccessTracker" |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.read (| Value.String "this_container_code_type" |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_bytecode::eof::verification::AccessTracker",
                        "this_container_code_type"
                      |)
                    |)
                  |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| Value.String "codes" |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_bytecode::eof::verification::AccessTracker",
                        "codes"
                      |)
                    |)
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.read (| Value.String "processing_stack" |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_bytecode::eof::verification::AccessTracker",
                        "processing_stack"
                      |)
                    |)
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.read (| Value.String "subcontainers" |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_bytecode::eof::verification::AccessTracker",
                            "subcontainers"
                          |)
                        |)
                      |)
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_revm_bytecode_eof_verification_AccessTracker.
    
    Module Impl_core_marker_StructuralPartialEq_for_revm_bytecode_eof_verification_AccessTracker.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::AccessTracker".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_revm_bytecode_eof_verification_AccessTracker.
    
    Module Impl_core_cmp_PartialEq_revm_bytecode_eof_verification_AccessTracker_for_revm_bytecode_eof_verification_AccessTracker.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::AccessTracker".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              LogicalOp.and (|
                LogicalOp.and (|
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.path "revm_bytecode::eof::verification::CodeType" ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                      ],
                      "eq",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_bytecode::eof::verification::AccessTracker",
                          "this_container_code_type"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| other |) |),
                          "revm_bytecode::eof::verification::AccessTracker",
                          "this_container_code_type"
                        |)
                      |)
                    ]
                  |),
                  ltac:(M.monadic
                    (M.call_closure (|
                      Ty.path "bool",
                      M.get_trait_method (|
                        "core::cmp::PartialEq",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ]
                        ],
                        "eq",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_bytecode::eof::verification::AccessTracker",
                            "codes"
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| other |) |),
                            "revm_bytecode::eof::verification::AccessTracker",
                            "codes"
                          |)
                        |)
                      ]
                    |)))
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                      ],
                      "eq",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_bytecode::eof::verification::AccessTracker",
                          "processing_stack"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| other |) |),
                          "revm_bytecode::eof::verification::AccessTracker",
                          "processing_stack"
                        |)
                      |)
                    ]
                  |)))
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.path "revm_bytecode::eof::verification::CodeType" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "revm_bytecode::eof::verification::CodeType" ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ],
                    "eq",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_bytecode::eof::verification::AccessTracker",
                        "subcontainers"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "revm_bytecode::eof::verification::AccessTracker",
                        "subcontainers"
                      |)
                    |)
                  ]
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "revm_bytecode::eof::verification::AccessTracker" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_revm_bytecode_eof_verification_AccessTracker_for_revm_bytecode_eof_verification_AccessTracker.
    
    Module Impl_core_cmp_Eq_for_revm_bytecode_eof_verification_AccessTracker.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::AccessTracker".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        None,
                        Value.DeclaredButUndefined,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                None,
                                Value.DeclaredButUndefined,
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        None,
                                        Value.DeclaredButUndefined,
                                        [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                                      |)))
                                ]
                              |)))
                        ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_revm_bytecode_eof_verification_AccessTracker.
    
    Module Impl_revm_bytecode_eof_verification_AccessTracker.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::AccessTracker".
      
      (*
          pub fn new(
              this_container_code_type: Option<CodeType>,
              codes_size: usize,
              subcontainers_size: usize,
          ) -> Self {
              if codes_size == 0 {
                  panic!("There should be at least one code section");
              }
              let mut this = Self {
                  this_container_code_type,
                  codes: vec![false; codes_size],
                  processing_stack: Vec::with_capacity(4),
                  subcontainers: vec![None; subcontainers_size],
              };
              this.codes[0] = true;
              this.processing_stack.push(0);
              this
          }
      *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ this_container_code_type; codes_size; subcontainers_size ] =>
          ltac:(M.monadic
            (let this_container_code_type := M.alloc (| this_container_code_type |) in
            let codes_size := M.alloc (| codes_size |) in
            let subcontainers_size := M.alloc (| subcontainers_size |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.eq (|
                                M.read (| codes_size |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic_fmt", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_const",
                                    [ Value.Integer IntegerKind.Usize 1 ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Value.Array
                                              [
                                                M.read (|
                                                  Value.String
                                                    "There should be at least one code section"
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ this : Ty.path "revm_bytecode::eof::verification::AccessTracker" :=
                M.alloc (|
                  Value.StructRecord
                    "revm_bytecode::eof::verification::AccessTracker"
                    [
                      ("this_container_code_type", M.read (| this_container_code_type |));
                      ("codes",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ],
                          M.get_function (| "alloc::vec::from_elem", [], [ Ty.path "bool" ] |),
                          [ Value.Bool false; M.read (| codes_size |) ]
                        |));
                      ("processing_stack",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                            "with_capacity",
                            [],
                            []
                          |),
                          [ Value.Integer IntegerKind.Usize 4 ]
                        |));
                      ("subcontainers",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "revm_bytecode::eof::verification::CodeType" ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_function (|
                            "alloc::vec::from_elem",
                            [],
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                            ]
                          |),
                          [
                            Value.StructTuple "core::option::Option::None" [];
                            M.read (| subcontainers_size |)
                          ]
                        |))
                    ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  M.write (|
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ Ty.path "bool" ],
                        M.get_trait_method (|
                          "core::ops::index::IndexMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ],
                          [],
                          [ Ty.path "usize" ],
                          "index_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              this,
                              "revm_bytecode::eof::verification::AccessTracker",
                              "codes"
                            |)
                          |);
                          Value.Integer IntegerKind.Usize 0
                        ]
                      |)
                    |),
                    Value.Bool true
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      "push",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          this,
                          "revm_bytecode::eof::verification::AccessTracker",
                          "processing_stack"
                        |)
                      |);
                      Value.Integer IntegerKind.Usize 0
                    ]
                  |)
                |) in
              this
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.Trait Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn access_code(&mut self, index: usize) {
              let was_accessed = mem::replace(&mut self.codes[index], true);
              if !was_accessed {
                  self.processing_stack.push(index);
              }
          }
      *)
      Definition access_code (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.read (|
              let~ was_accessed : Ty.path "bool" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_function (| "core::mem::replace", [], [ Ty.path "bool" ] |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&mut") [] [ Ty.path "bool" ],
                                M.get_trait_method (|
                                  "core::ops::index::IndexMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [ Ty.path "usize" ],
                                  "index_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "revm_bytecode::eof::verification::AccessTracker",
                                      "codes"
                                    |)
                                  |);
                                  M.read (| index |)
                                ]
                              |)
                            |)
                          |)
                        |)
                      |);
                      Value.Bool true
                    ]
                  |)
                |) in
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| UnOp.not (| M.read (| was_accessed |) |) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                              "push",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "revm_bytecode::eof::verification::AccessTracker",
                                  "processing_stack"
                                |)
                              |);
                              M.read (| index |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_access_code :
        M.IsAssociatedFunction.Trait Self "access_code" access_code.
      Admitted.
      Global Typeclasses Opaque access_code.
      
      (*
          pub fn set_subcontainer_type(
              &mut self,
              index: usize,
              new_code_type: CodeType,
          ) -> Result<(), EofValidationError> {
              let Some(container) = self.subcontainers.get_mut(index) else {
                  panic!("It should not be possible")
              };
      
              let Some(code_type) = container else {
                  *container = Some(new_code_type);
                  return Ok(());
              };
      
              if *code_type != new_code_type {
                  return Err(EofValidationError::SubContainerCalledInTwoModes);
              }
              Ok(())
          }
      *)
      Definition set_subcontainer_type (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index; new_code_type ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            let new_code_type := M.alloc (| new_code_type |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  M.match_operator (|
                    None,
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                              ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                            ],
                          "get_mut",
                          [],
                          [ Ty.path "usize" ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::DerefMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "revm_bytecode::eof::verification::CodeType" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "revm_bytecode::eof::verification::AccessTracker",
                                      "subcontainers"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |);
                          M.read (| index |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let container := M.copy (| γ0_0 |) in
                          M.match_operator (|
                            None,
                            container,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.read (| γ |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let code_type := M.alloc (| γ1_0 |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Some (Ty.tuple []),
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_trait_method (|
                                                      "core::cmp::PartialEq",
                                                      Ty.path
                                                        "revm_bytecode::eof::verification::CodeType",
                                                      [],
                                                      [
                                                        Ty.path
                                                          "revm_bytecode::eof::verification::CodeType"
                                                      ],
                                                      "ne",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| code_type |) |)
                                                      |);
                                                      M.borrow (| Pointer.Kind.Ref, new_code_type |)
                                                    ]
                                                  |)
                                                |)) in
                                            let _ :=
                                              M.is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.read (|
                                                  M.return_ (|
                                                    Value.StructTuple
                                                      "core::result::Result::Err"
                                                      [
                                                        Value.StructTuple
                                                          "revm_bytecode::eof::verification::EofValidationError::SubContainerCalledInTwoModes"
                                                          []
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (|
                                    Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                                  |)))
                            ]
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_subcontainer_type :
        M.IsAssociatedFunction.Trait Self "set_subcontainer_type" set_subcontainer_type.
      Admitted.
      Global Typeclasses Opaque set_subcontainer_type.
    End Impl_revm_bytecode_eof_verification_AccessTracker.
    
    (*
    Enum CodeType
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "ReturnContract";
            item := StructTuple [];
          };
          {
            name := "ReturnOrStop";
            item := StructTuple [];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_CodeType_ReturnContract :
      M.IsDiscriminant "revm_bytecode::eof::verification::CodeType::ReturnContract" 0.
    Axiom IsDiscriminant_CodeType_ReturnOrStop :
      M.IsDiscriminant "revm_bytecode::eof::verification::CodeType::ReturnOrStop" 1.
    
    Module Impl_core_clone_Clone_for_revm_bytecode_eof_verification_CodeType.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::CodeType".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (| M.deref (| M.read (| self |) |) |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_revm_bytecode_eof_verification_CodeType.
    
    Module Impl_core_marker_Copy_for_revm_bytecode_eof_verification_CodeType.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::CodeType".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_revm_bytecode_eof_verification_CodeType.
    
    Module Impl_core_fmt_Debug_for_revm_bytecode_eof_verification_CodeType.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::CodeType".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.read (|
                  M.match_operator (|
                    Some (Ty.apply (Ty.path "&") [] [ Ty.path "str" ]),
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::CodeType::ReturnContract"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "ReturnContract" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::CodeType::ReturnOrStop"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "ReturnOrStop" |) |)
                            |)
                          |)))
                    ]
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_revm_bytecode_eof_verification_CodeType.
    
    Module Impl_core_marker_StructuralPartialEq_for_revm_bytecode_eof_verification_CodeType.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::CodeType".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_revm_bytecode_eof_verification_CodeType.
    
    Module Impl_core_cmp_PartialEq_revm_bytecode_eof_verification_CodeType_for_revm_bytecode_eof_verification_CodeType.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::CodeType".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.alloc (| BinOp.eq (| M.read (| __self_discr |), M.read (| __arg1_discr |) |) |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "revm_bytecode::eof::verification::CodeType" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_revm_bytecode_eof_verification_CodeType_for_revm_bytecode_eof_verification_CodeType.
    
    Module Impl_core_cmp_Eq_for_revm_bytecode_eof_verification_CodeType.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::CodeType".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.Tuple []))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_revm_bytecode_eof_verification_CodeType.
    
    Module Impl_revm_bytecode_eof_verification_CodeType.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::CodeType".
      
      (*
          pub fn is_initcode(&self) -> bool {
              matches!(self, CodeType::ReturnContract)
          }
      *)
      Definition is_initcode (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Some (Ty.path "bool"),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "revm_bytecode::eof::verification::CodeType::ReturnContract"
                        |) in
                      M.alloc (| Value.Bool true |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_initcode :
        M.IsAssociatedFunction.Trait Self "is_initcode" is_initcode.
      Admitted.
      Global Typeclasses Opaque is_initcode.
    End Impl_revm_bytecode_eof_verification_CodeType.
    
    Module Impl_core_fmt_Display_for_revm_bytecode_eof_verification_EofValidationError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofValidationError".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              let s = match self {
                  Self::FalsePositive => "False positive",
                  Self::UnknownOpcode => "Opcode is not known",
                  Self::OpcodeDisabled => "Opcode is disabled",
                  Self::InstructionNotForwardAccessed => "Should have forward jump",
                  Self::MissingImmediateBytes => "Bytecode is missing bytes",
                  Self::MissingRJUMPVImmediateBytes => "Bytecode is missing bytes after RJUMPV opcode",
                  Self::JumpToImmediateBytes => "Invalid jump",
                  Self::BackwardJumpToImmediateBytes => "Invalid backward jump",
                  Self::RJUMPVZeroMaxIndex => "Used RJUMPV with zero as MaxIndex",
                  Self::JumpZeroOffset => "Used JUMP with zero as offset",
                  Self::EOFCREATEInvalidIndex => "EOFCREATE points to out of bound index",
                  Self::CodeSectionOutOfBounds => "CALLF index is out of bounds",
                  Self::CALLFNonReturningFunction => "CALLF was used on non-returning function",
                  Self::StackOverflow => "CALLF stack overflow",
                  Self::JUMPFEnoughOutputs => "JUMPF needs more outputs",
                  Self::JUMPFStackHigherThanOutputs => "JUMPF stack is too high for outputs",
                  Self::DataLoadOutOfBounds => "DATALOAD is out of bounds",
                  Self::RETFBiggestStackNumMoreThenOutputs => {
                      "RETF biggest stack num is more than outputs"
                  }
                  Self::StackUnderflow => "Stack requirement is above smallest stack items",
                  Self::TypesStackUnderflow => "Smallest stack items is more than output type",
                  Self::JumpUnderflow => "Jump destination is too low",
                  Self::JumpOverflow => "Jump destination is too high",
                  Self::BackwardJumpBiggestNumMismatch => {
                      "Backward jump has different biggest stack item"
                  }
                  Self::BackwardJumpSmallestNumMismatch => {
                      "Backward jump has different smallest stack item"
                  }
                  Self::LastInstructionNotTerminating => {
                      "Last instruction of bytecode is not terminating"
                  }
                  Self::CodeSectionNotAccessed => "Code section was not accessed",
                  Self::InvalidTypesSection => "Invalid types section",
                  Self::InvalidFirstTypesSection => "Invalid first types section",
                  Self::MaxStackMismatch => "Max stack element mismatches",
                  Self::NoCodeSections => "No code sections",
                  Self::SubContainerCalledInTwoModes => "Sub container called in two modes",
                  Self::SubContainerNotAccessed => "Sub container not accessed",
                  Self::DataNotFilled => "Data not filled",
                  Self::NonReturningSectionIsReturning => "Non returning section is returning",
              };
              f.write_str(s)
          }
      *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              let~ s : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
                M.copy (|
                  M.match_operator (|
                    Some (Ty.apply (Ty.path "&") [] [ Ty.path "str" ]),
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::FalsePositive"
                            |) in
                          Value.String "False positive"));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::UnknownOpcode"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Opcode is not known" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::OpcodeDisabled"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Opcode is disabled" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::InstructionNotForwardAccessed"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Should have forward jump" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::MissingImmediateBytes"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Bytecode is missing bytes" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::MissingRJUMPVImmediateBytes"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (|
                                  Value.String "Bytecode is missing bytes after RJUMPV opcode"
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::JumpToImmediateBytes"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Invalid jump" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::BackwardJumpToImmediateBytes"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Invalid backward jump" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::RJUMPVZeroMaxIndex"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "Used RJUMPV with zero as MaxIndex" |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::JumpZeroOffset"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "Used JUMP with zero as offset" |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::EOFCREATEInvalidIndex"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "EOFCREATE points to out of bound index" |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::CodeSectionOutOfBounds"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "CALLF index is out of bounds" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::CALLFNonReturningFunction"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "CALLF was used on non-returning function" |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::StackOverflow"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "CALLF stack overflow" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::JUMPFEnoughOutputs"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "JUMPF needs more outputs" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::JUMPFStackHigherThanOutputs"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "JUMPF stack is too high for outputs" |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::DataLoadOutOfBounds"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "DATALOAD is out of bounds" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::RETFBiggestStackNumMoreThenOutputs"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (|
                                  Value.String "RETF biggest stack num is more than outputs"
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::StackUnderflow"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (|
                                  Value.String "Stack requirement is above smallest stack items"
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::TypesStackUnderflow"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (|
                                  Value.String "Smallest stack items is more than output type"
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::JumpUnderflow"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Jump destination is too low" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::JumpOverflow"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Jump destination is too high" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::BackwardJumpBiggestNumMismatch"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (|
                                  Value.String "Backward jump has different biggest stack item"
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::BackwardJumpSmallestNumMismatch"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (|
                                  Value.String "Backward jump has different smallest stack item"
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::LastInstructionNotTerminating"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (|
                                  Value.String "Last instruction of bytecode is not terminating"
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::CodeSectionNotAccessed"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "Code section was not accessed" |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::InvalidTypesSection"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Invalid types section" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::InvalidFirstTypesSection"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Invalid first types section" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::MaxStackMismatch"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Max stack element mismatches" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::NoCodeSections"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "No code sections" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::SubContainerCalledInTwoModes"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "Sub container called in two modes" |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::SubContainerNotAccessed"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Sub container not accessed" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::DataNotFilled"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Data not filled" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_bytecode::eof::verification::EofValidationError::NonReturningSectionIsReturning"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "Non returning section is returning" |)
                              |)
                            |)
                          |)))
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "write_str",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_revm_bytecode_eof_verification_EofValidationError.
    
    Module Impl_core_error_Error_for_revm_bytecode_eof_verification_EofValidationError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::eof::verification::EofValidationError".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::error::Error"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_error_Error_for_revm_bytecode_eof_verification_EofValidationError.
    
    (*
    pub fn validate_eof_code(
        code: &[u8],
        _data_size: usize,
        this_types_index: usize,
        _num_of_containers: usize,
        types: &[TypesSection],
        _tracker: &mut AccessTracker,
    ) -> Result<(), EofValidationError> {
        let this_types = &types[this_types_index];
    
        #[derive(Debug, Copy, Clone)]
        struct InstructionInfo {
            /// Is immediate byte, jumps can't happen on this part of code.
            is_immediate: bool,
            /// Have forward jump to this opcode. Used to check if opcode
            /// after termination is accessed.
            is_jumpdest: bool,
            /// Smallest number of stack items accessed by jumps or sequential opcodes.
            smallest: i32,
            /// Biggest number of stack items accessed by jumps or sequential opcodes.
            biggest: i32,
        }
    
        impl InstructionInfo {
            #[inline]
            fn mark_as_immediate(&mut self) -> Result<(), EofValidationError> {
                if self.is_jumpdest {
                    // Jump to immediate bytes.
                    return Err(EofValidationError::JumpToImmediateBytes);
                }
                self.is_immediate = true;
                Ok(())
            }
        }
    
        impl Default for InstructionInfo {
            fn default() -> Self {
                Self {
                    is_immediate: false,
                    is_jumpdest: false,
                    smallest: i32::MAX,
                    biggest: i32::MIN,
                }
            }
        }
    
        // All bytes that are intermediate.
        let mut jumps = vec![InstructionInfo::default(); code.len()];
        let mut is_after_termination = false;
    
        let mut next_smallest = this_types.inputs as i32;
        let mut next_biggest = this_types.inputs as i32;
    
        let is_returning = false;
    
        let mut i = 0;
        // We can check validity and jump destinations in one pass.
        while i < code.len() {
            let op = code[i];
            let opcode = &OPCODE_INFO[op as usize];
    
            let Some(opcode) = opcode else {
                // Err unknown opcode.
                return Err(EofValidationError::UnknownOpcode);
            };
    
            if opcode.is_disabled_in_eof() {
                // Opcode is disabled in EOF
                return Err(EofValidationError::OpcodeDisabled);
            }
    
            let this_instruction = &mut jumps[i];
    
            // Update biggest/smallest values for next instruction only if it is not after termination.
            if !is_after_termination {
                this_instruction.smallest = core::cmp::min(this_instruction.smallest, next_smallest);
                this_instruction.biggest = core::cmp::max(this_instruction.biggest, next_biggest);
            }
    
            let this_instruction = *this_instruction;
    
            // Opcodes after termination should be accessed by forward jumps.
            if is_after_termination && !this_instruction.is_jumpdest {
                // Opcode after termination was not accessed.
                return Err(EofValidationError::InstructionNotForwardAccessed);
            }
            is_after_termination = opcode.is_terminating();
    
            // Mark immediate as non-jumpable. RJUMPV is special case covered later.
            if opcode.immediate_size() != 0 {
                // Check if the opcode immediate are within the bounds of the code
                if i + opcode.immediate_size() as usize >= code.len() {
                    // Malfunctional code
                    return Err(EofValidationError::MissingImmediateBytes);
                }
    
                // Mark immediate bytes as non-jumpable.
                for imm in 1..opcode.immediate_size() as usize + 1 {
                    // SAFETY: Immediate size is checked above.
                    jumps[i + imm].mark_as_immediate()?;
                }
            }
            // IO diff used to generate next instruction smallest/biggest value.
            let stack_io_diff = opcode.io_diff() as i32;
            // How many stack items are required for this opcode.
            let stack_requirement = opcode.inputs() as i32;
            // Additional immediate bytes for RJUMPV, it has dynamic vtable.
            let rjumpv_additional_immediates = 0;
            // If opcodes is RJUMP, RJUMPI or RJUMPV then this will have absolute jumpdest.
            let absolute_jumpdest: Vec<isize> = vec![];
            // Check if stack requirement is more than smallest stack items.
            if stack_requirement > this_instruction.smallest {
                // Opcode requirement is more than smallest stack items.
                return Err(EofValidationError::StackUnderflow);
            }
    
            next_smallest = this_instruction.smallest + stack_io_diff;
            next_biggest = this_instruction.biggest + stack_io_diff;
    
            // Check if jumpdest are correct and mark forward jumps.
            for absolute_jump in absolute_jumpdest {
                if absolute_jump < 0 {
                    // Jump out of bounds.
                    return Err(EofValidationError::JumpUnderflow);
                }
                if absolute_jump >= code.len() as isize {
                    // Jump to out of bounds
                    return Err(EofValidationError::JumpOverflow);
                }
                // Fine to cast as bounds are checked.
                let absolute_jump = absolute_jump as usize;
    
                let target_jump = &mut jumps[absolute_jump];
                if target_jump.is_immediate {
                    // Jump target is immediate byte.
                    return Err(EofValidationError::BackwardJumpToImmediateBytes);
                }
    
                // Needed to mark forward jumps. It does not do anything for backward jumps.
                target_jump.is_jumpdest = true;
    
                if absolute_jump <= i {
                    // Backward jumps should have same smallest and biggest stack items.
                    if target_jump.biggest != next_biggest {
                        // Wrong jumpdest.
                        return Err(EofValidationError::BackwardJumpBiggestNumMismatch);
                    }
                    if target_jump.smallest != next_smallest {
                        // Wrong jumpdest.
                        return Err(EofValidationError::BackwardJumpSmallestNumMismatch);
                    }
                } else {
                    // Forward jumps can make min even smallest size
                    // While biggest num is needed to check stack overflow
                    target_jump.smallest = core::cmp::min(target_jump.smallest, next_smallest);
                    target_jump.biggest = core::cmp::max(target_jump.biggest, next_biggest);
                }
            }
    
            // Additional immediate are from RJUMPV vtable.
            i += 1 + opcode.immediate_size() as usize + rjumpv_additional_immediates;
        }
    
        // Error if section is returning but marked as non-returning.
        if is_returning == this_types.is_non_returning() {
            // Wrong termination.
            return Err(EofValidationError::NonReturningSectionIsReturning);
        }
    
        // Last opcode should be terminating
        if !is_after_termination {
            // Wrong termination.
            return Err(EofValidationError::LastInstructionNotTerminating);
        }
        // TODO : Integrate max so we dont need to iterate again
        let mut max_stack_requirement = 0;
        for opcode in jumps {
            max_stack_requirement = core::cmp::max(opcode.biggest, max_stack_requirement);
        }
    
        if max_stack_requirement != types[this_types_index].max_stack_size as i32 {
            // Stack overflow
            return Err(EofValidationError::MaxStackMismatch);
        }
    
        Ok(())
    }
    *)
    Definition validate_eof_code (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ code; _data_size; this_types_index; _num_of_containers; types; _tracker ] =>
        ltac:(M.monadic
          (let code := M.alloc (| code |) in
          let _data_size := M.alloc (| _data_size |) in
          let this_types_index := M.alloc (| this_types_index |) in
          let _num_of_containers := M.alloc (| _num_of_containers |) in
          let types := M.alloc (| types |) in
          let _tracker := M.alloc (| _tracker |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ this_types :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "revm_bytecode::eof::types_section::TypesSection" ] :=
                  M.alloc (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_array_field (|
                        M.deref (| M.read (| types |) |),
                        M.read (| this_types_index |)
                      |)
                    |)
                  |) in
                let~ jumps :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path
                          "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo";
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.path
                            "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo";
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_function (|
                        "alloc::vec::from_elem",
                        [],
                        [
                          Ty.path
                            "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo"
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.path
                            "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                          M.get_trait_method (|
                            "core::default::Default",
                            Ty.path
                              "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                            [],
                            [],
                            "default",
                            [],
                            []
                          |),
                          []
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                            "len",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| code |) |) |) ]
                        |)
                      ]
                    |)
                  |) in
                let~ is_after_termination : Ty.path "bool" := M.alloc (| Value.Bool false |) in
                let~ next_smallest : Ty.path "i32" :=
                  M.alloc (|
                    M.cast
                      (Ty.path "i32")
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| this_types |) |),
                          "revm_bytecode::eof::types_section::TypesSection",
                          "inputs"
                        |)
                      |))
                  |) in
                let~ next_biggest : Ty.path "i32" :=
                  M.alloc (|
                    M.cast
                      (Ty.path "i32")
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| this_types |) |),
                          "revm_bytecode::eof::types_section::TypesSection",
                          "inputs"
                        |)
                      |))
                  |) in
                let~ is_returning : Ty.path "bool" := M.alloc (| Value.Bool false |) in
                let~ i : Ty.path "usize" := M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
                let~ _ : Ty.tuple [] :=
                  M.loop (|
                    Ty.tuple [],
                    ltac:(M.monadic
                      (M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.lt (|
                                      M.read (| i |),
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| code |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let~ op : Ty.path "u8" :=
                                M.copy (|
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| code |) |),
                                    M.read (| i |)
                                  |)
                                |) in
                              let~ opcode :
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "revm_bytecode::opcode::OpCodeInfo" ]
                                    ] :=
                                M.alloc (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_array_field (|
                                      M.get_constant "revm_bytecode::opcode::OPCODE_INFO",
                                      M.cast (Ty.path "usize") (M.read (| op |))
                                    |)
                                  |)
                                |) in
                              M.match_operator (|
                                None,
                                opcode,
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.read (| γ |) in
                                      let γ1_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let opcode := M.alloc (| γ1_0 |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Some (Ty.tuple []),
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "revm_bytecode::opcode::OpCodeInfo",
                                                          "is_disabled_in_eof",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| opcode |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  M.is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        Value.StructTuple
                                                          "core::result::Result::Err"
                                                          [
                                                            Value.StructTuple
                                                              "revm_bytecode::eof::verification::EofValidationError::OpcodeDisabled"
                                                              []
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      let~ this_instruction :
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.path
                                                "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo"
                                            ] :=
                                        M.alloc (|
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [
                                                    Ty.path
                                                      "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::index::IndexMut",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.path
                                                        "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [ Ty.path "usize" ],
                                                  "index_mut",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (| Pointer.Kind.MutRef, jumps |);
                                                  M.read (| i |)
                                                ]
                                              |)
                                            |)
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Some (Ty.tuple []),
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      UnOp.not (|
                                                        M.read (| is_after_termination |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  M.is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.write (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| this_instruction |) |),
                                                        "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                        "smallest"
                                                      |),
                                                      M.call_closure (|
                                                        Ty.path "i32",
                                                        M.get_function (|
                                                          "core::cmp::min",
                                                          [],
                                                          [ Ty.path "i32" ]
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (|
                                                                M.read (| this_instruction |)
                                                              |),
                                                              "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                              "smallest"
                                                            |)
                                                          |);
                                                          M.read (| next_smallest |)
                                                        ]
                                                      |)
                                                    |)
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.write (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| this_instruction |) |),
                                                        "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                        "biggest"
                                                      |),
                                                      M.call_closure (|
                                                        Ty.path "i32",
                                                        M.get_function (|
                                                          "core::cmp::max",
                                                          [],
                                                          [ Ty.path "i32" ]
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (|
                                                                M.read (| this_instruction |)
                                                              |),
                                                              "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                              "biggest"
                                                            |)
                                                          |);
                                                          M.read (| next_biggest |)
                                                        ]
                                                      |)
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      let~ this_instruction :
                                          Ty.path
                                            "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo" :=
                                        M.copy (| M.deref (| M.read (| this_instruction |) |) |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Some (Ty.tuple []),
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      LogicalOp.and (|
                                                        M.read (| is_after_termination |),
                                                        ltac:(M.monadic
                                                          (UnOp.not (|
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                this_instruction,
                                                                "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                                "is_jumpdest"
                                                              |)
                                                            |)
                                                          |)))
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  M.is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        Value.StructTuple
                                                          "core::result::Result::Err"
                                                          [
                                                            Value.StructTuple
                                                              "revm_bytecode::eof::verification::EofValidationError::InstructionNotForwardAccessed"
                                                              []
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.write (|
                                            is_after_termination,
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.path "revm_bytecode::opcode::OpCodeInfo",
                                                "is_terminating",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| opcode |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Some (Ty.tuple []),
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      BinOp.ne (|
                                                        M.call_closure (|
                                                          Ty.path "u8",
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "revm_bytecode::opcode::OpCodeInfo",
                                                            "immediate_size",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| opcode |) |)
                                                            |)
                                                          ]
                                                        |),
                                                        Value.Integer IntegerKind.U8 0
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  M.is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                BinOp.ge (|
                                                                  BinOp.Wrap.add (|
                                                                    M.read (| i |),
                                                                    M.cast
                                                                      (Ty.path "usize")
                                                                      (M.call_closure (|
                                                                        Ty.path "u8",
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "revm_bytecode::opcode::OpCodeInfo",
                                                                          "immediate_size",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| opcode |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |))
                                                                  |),
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ Ty.path "u8" ],
                                                                      "len",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| code |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  Value.StructTuple
                                                                    "core::result::Result::Err"
                                                                    [
                                                                      Value.StructTuple
                                                                        "revm_bytecode::eof::verification::EofValidationError::MissingImmediateBytes"
                                                                        []
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                M.use
                                                  (M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          [],
                                                          [],
                                                          "into_iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          Value.StructRecord
                                                            "core::ops::range::Range"
                                                            [
                                                              ("start",
                                                                Value.Integer IntegerKind.Usize 1);
                                                              ("end_",
                                                                BinOp.Wrap.add (|
                                                                  M.cast
                                                                    (Ty.path "usize")
                                                                    (M.call_closure (|
                                                                      Ty.path "u8",
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "revm_bytecode::opcode::OpCodeInfo",
                                                                        "immediate_size",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| opcode |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)),
                                                                  Value.Integer IntegerKind.Usize 1
                                                                |))
                                                            ]
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            Ty.tuple [],
                                                            ltac:(M.monadic
                                                              (let~ _ : Ty.tuple [] :=
                                                                M.match_operator (|
                                                                  Some (Ty.tuple []),
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [ Ty.path "usize" ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::ops::range::Range")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        [],
                                                                        [],
                                                                        "next",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              iter
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let _ :=
                                                                          M.is_struct_tuple (|
                                                                            γ,
                                                                            "core::option::Option::None"
                                                                          |) in
                                                                        M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let imm :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let~ _ : Ty.tuple [] :=
                                                                          M.match_operator (|
                                                                            Some (Ty.tuple []),
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::ops::control_flow::ControlFlow")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::result::Result")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "core::convert::Infallible";
                                                                                        Ty.path
                                                                                          "revm_bytecode::eof::verification::EofValidationError"
                                                                                      ];
                                                                                    Ty.tuple []
                                                                                  ],
                                                                                M.get_trait_method (|
                                                                                  "core::ops::try_trait::Try",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    []
                                                                                    [
                                                                                      Ty.tuple [];
                                                                                      Ty.path
                                                                                        "revm_bytecode::eof::verification::EofValidationError"
                                                                                    ],
                                                                                  [],
                                                                                  [],
                                                                                  "branch",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::result::Result")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple [];
                                                                                        Ty.path
                                                                                          "revm_bytecode::eof::verification::EofValidationError"
                                                                                      ],
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                                                      "mark_as_immediate",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&mut")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo"
                                                                                              ],
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::index::IndexMut",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [],
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ],
                                                                                              "index_mut",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.MutRef,
                                                                                                jumps
                                                                                              |);
                                                                                              BinOp.Wrap.add (|
                                                                                                M.read (|
                                                                                                  i
                                                                                                |),
                                                                                                M.read (|
                                                                                                  imm
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ0_0 :=
                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                      γ,
                                                                                      "core::ops::control_flow::ControlFlow::Break",
                                                                                      0
                                                                                    |) in
                                                                                  let residual :=
                                                                                    M.copy (|
                                                                                      γ0_0
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    M.never_to_any (|
                                                                                      M.read (|
                                                                                        M.return_ (|
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::result::Result")
                                                                                              []
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [];
                                                                                                Ty.path
                                                                                                  "revm_bytecode::eof::verification::EofValidationError"
                                                                                              ],
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::try_trait::FromResidual",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::result::Result")
                                                                                                []
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [];
                                                                                                  Ty.path
                                                                                                    "revm_bytecode::eof::verification::EofValidationError"
                                                                                                ],
                                                                                              [],
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "core::convert::Infallible";
                                                                                                    Ty.path
                                                                                                      "revm_bytecode::eof::verification::EofValidationError"
                                                                                                  ]
                                                                                              ],
                                                                                              "from_residual",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                residual
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)));
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ0_0 :=
                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                      γ,
                                                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                                                      0
                                                                                    |) in
                                                                                  let val :=
                                                                                    M.copy (|
                                                                                      γ0_0
                                                                                    |) in
                                                                                  val))
                                                                            ]
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |))));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      let~ stack_io_diff : Ty.path "i32" :=
                                        M.alloc (|
                                          M.cast
                                            (Ty.path "i32")
                                            (M.call_closure (|
                                              Ty.path "i16",
                                              M.get_associated_function (|
                                                Ty.path "revm_bytecode::opcode::OpCodeInfo",
                                                "io_diff",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| opcode |) |)
                                                |)
                                              ]
                                            |))
                                        |) in
                                      let~ stack_requirement : Ty.path "i32" :=
                                        M.alloc (|
                                          M.cast
                                            (Ty.path "i32")
                                            (M.call_closure (|
                                              Ty.path "u8",
                                              M.get_associated_function (|
                                                Ty.path "revm_bytecode::opcode::OpCodeInfo",
                                                "inputs",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| opcode |) |)
                                                |)
                                              ]
                                            |))
                                        |) in
                                      let~ rjumpv_additional_immediates : Ty.path "usize" :=
                                        M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
                                      let~ absolute_jumpdest :
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Ty.path "isize"; Ty.path "alloc::alloc::Global" ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Ty.path "isize"; Ty.path "alloc::alloc::Global" ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Ty.path "isize"; Ty.path "alloc::alloc::Global" ],
                                              "new",
                                              [],
                                              []
                                            |),
                                            []
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Some (Ty.tuple []),
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      BinOp.gt (|
                                                        M.read (| stack_requirement |),
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            this_instruction,
                                                            "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                            "smallest"
                                                          |)
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  M.is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        Value.StructTuple
                                                          "core::result::Result::Err"
                                                          [
                                                            Value.StructTuple
                                                              "revm_bytecode::eof::verification::EofValidationError::StackUnderflow"
                                                              []
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.write (|
                                            next_smallest,
                                            BinOp.Wrap.add (|
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  this_instruction,
                                                  "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                  "smallest"
                                                |)
                                              |),
                                              M.read (| stack_io_diff |)
                                            |)
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.write (|
                                            next_biggest,
                                            BinOp.Wrap.add (|
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  this_instruction,
                                                  "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                  "biggest"
                                                |)
                                              |),
                                              M.read (| stack_io_diff |)
                                            |)
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.use
                                          (M.match_operator (|
                                            Some (Ty.tuple []),
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  []
                                                  [ Ty.path "isize"; Ty.path "alloc::alloc::Global"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.path "isize";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [],
                                                  "into_iter",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| absolute_jumpdest |) ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter := M.copy (| γ |) in
                                                  M.loop (|
                                                    Ty.tuple [],
                                                    ltac:(M.monadic
                                                      (let~ _ : Ty.tuple [] :=
                                                        M.match_operator (|
                                                          Some (Ty.tuple []),
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ Ty.path "isize" ],
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::vec::into_iter::IntoIter")
                                                                  []
                                                                  [
                                                                    Ty.path "isize";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                [],
                                                                "next",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      iter
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let _ :=
                                                                  M.is_struct_tuple (|
                                                                    γ,
                                                                    "core::option::Option::None"
                                                                  |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (| M.break (||) |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::option::Option::Some",
                                                                    0
                                                                  |) in
                                                                let absolute_jump :=
                                                                  M.copy (| γ0_0 |) in
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.match_operator (|
                                                                    Some (Ty.tuple []),
                                                                    M.alloc (| Value.Tuple [] |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.use
                                                                              (M.alloc (|
                                                                                BinOp.lt (|
                                                                                  M.read (|
                                                                                    absolute_jump
                                                                                  |),
                                                                                  Value.Integer
                                                                                    IntegerKind.Isize
                                                                                    0
                                                                                |)
                                                                              |)) in
                                                                          let _ :=
                                                                            M.is_constant_or_break_match (|
                                                                              M.read (| γ |),
                                                                              Value.Bool true
                                                                            |) in
                                                                          M.alloc (|
                                                                            M.never_to_any (|
                                                                              M.read (|
                                                                                M.return_ (|
                                                                                  Value.StructTuple
                                                                                    "core::result::Result::Err"
                                                                                    [
                                                                                      Value.StructTuple
                                                                                        "revm_bytecode::eof::verification::EofValidationError::JumpUnderflow"
                                                                                        []
                                                                                    ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            Value.Tuple []
                                                                          |)))
                                                                    ]
                                                                  |) in
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.match_operator (|
                                                                    Some (Ty.tuple []),
                                                                    M.alloc (| Value.Tuple [] |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.use
                                                                              (M.alloc (|
                                                                                BinOp.ge (|
                                                                                  M.read (|
                                                                                    absolute_jump
                                                                                  |),
                                                                                  M.cast
                                                                                    (Ty.path
                                                                                      "isize")
                                                                                    (M.call_closure (|
                                                                                      Ty.path
                                                                                        "usize",
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "u8"
                                                                                          ],
                                                                                        "len",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              code
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |))
                                                                                |)
                                                                              |)) in
                                                                          let _ :=
                                                                            M.is_constant_or_break_match (|
                                                                              M.read (| γ |),
                                                                              Value.Bool true
                                                                            |) in
                                                                          M.alloc (|
                                                                            M.never_to_any (|
                                                                              M.read (|
                                                                                M.return_ (|
                                                                                  Value.StructTuple
                                                                                    "core::result::Result::Err"
                                                                                    [
                                                                                      Value.StructTuple
                                                                                        "revm_bytecode::eof::verification::EofValidationError::JumpOverflow"
                                                                                        []
                                                                                    ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            Value.Tuple []
                                                                          |)))
                                                                    ]
                                                                  |) in
                                                                let~ absolute_jump :
                                                                    Ty.path "usize" :=
                                                                  M.alloc (|
                                                                    M.cast
                                                                      (Ty.path "usize")
                                                                      (M.read (| absolute_jump |))
                                                                  |) in
                                                                let~ target_jump :
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo"
                                                                      ] :=
                                                                  M.alloc (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::index::IndexMut",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            [ Ty.path "usize" ],
                                                                            "index_mut",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              jumps
                                                                            |);
                                                                            M.read (|
                                                                              absolute_jump
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |) in
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.match_operator (|
                                                                    Some (Ty.tuple []),
                                                                    M.alloc (| Value.Tuple [] |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.use
                                                                              (M.SubPointer.get_struct_record_field (|
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    target_jump
                                                                                  |)
                                                                                |),
                                                                                "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                                                "is_immediate"
                                                                              |)) in
                                                                          let _ :=
                                                                            M.is_constant_or_break_match (|
                                                                              M.read (| γ |),
                                                                              Value.Bool true
                                                                            |) in
                                                                          M.alloc (|
                                                                            M.never_to_any (|
                                                                              M.read (|
                                                                                M.return_ (|
                                                                                  Value.StructTuple
                                                                                    "core::result::Result::Err"
                                                                                    [
                                                                                      Value.StructTuple
                                                                                        "revm_bytecode::eof::verification::EofValidationError::BackwardJumpToImmediateBytes"
                                                                                        []
                                                                                    ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            Value.Tuple []
                                                                          |)))
                                                                    ]
                                                                  |) in
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.alloc (|
                                                                    M.write (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| target_jump |)
                                                                        |),
                                                                        "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                                        "is_jumpdest"
                                                                      |),
                                                                      Value.Bool true
                                                                    |)
                                                                  |) in
                                                                M.match_operator (|
                                                                  Some (Ty.tuple []),
                                                                  M.alloc (| Value.Tuple [] |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ :=
                                                                          M.use
                                                                            (M.alloc (|
                                                                              BinOp.le (|
                                                                                M.read (|
                                                                                  absolute_jump
                                                                                |),
                                                                                M.read (| i |)
                                                                              |)
                                                                            |)) in
                                                                        let _ :=
                                                                          M.is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.Bool true
                                                                          |) in
                                                                        let~ _ : Ty.tuple [] :=
                                                                          M.match_operator (|
                                                                            Some (Ty.tuple []),
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ :=
                                                                                    M.use
                                                                                      (M.alloc (|
                                                                                        BinOp.ne (|
                                                                                          M.read (|
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              M.deref (|
                                                                                                M.read (|
                                                                                                  target_jump
                                                                                                |)
                                                                                              |),
                                                                                              "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                                                              "biggest"
                                                                                            |)
                                                                                          |),
                                                                                          M.read (|
                                                                                            next_biggest
                                                                                          |)
                                                                                        |)
                                                                                      |)) in
                                                                                  let _ :=
                                                                                    M.is_constant_or_break_match (|
                                                                                      M.read (|
                                                                                        γ
                                                                                      |),
                                                                                      Value.Bool
                                                                                        true
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    M.never_to_any (|
                                                                                      M.read (|
                                                                                        M.return_ (|
                                                                                          Value.StructTuple
                                                                                            "core::result::Result::Err"
                                                                                            [
                                                                                              Value.StructTuple
                                                                                                "revm_bytecode::eof::verification::EofValidationError::BackwardJumpBiggestNumMismatch"
                                                                                                []
                                                                                            ]
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)));
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (M.alloc (|
                                                                                    Value.Tuple []
                                                                                  |)))
                                                                            ]
                                                                          |) in
                                                                        M.match_operator (|
                                                                          Some (Ty.tuple []),
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ :=
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      BinOp.ne (|
                                                                                        M.read (|
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                target_jump
                                                                                              |)
                                                                                            |),
                                                                                            "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                                                            "smallest"
                                                                                          |)
                                                                                        |),
                                                                                        M.read (|
                                                                                          next_smallest
                                                                                        |)
                                                                                      |)
                                                                                    |)) in
                                                                                let _ :=
                                                                                  M.is_constant_or_break_match (|
                                                                                    M.read (| γ |),
                                                                                    Value.Bool true
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  M.never_to_any (|
                                                                                    M.read (|
                                                                                      M.return_ (|
                                                                                        Value.StructTuple
                                                                                          "core::result::Result::Err"
                                                                                          [
                                                                                            Value.StructTuple
                                                                                              "revm_bytecode::eof::verification::EofValidationError::BackwardJumpSmallestNumMismatch"
                                                                                              []
                                                                                          ]
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                          ]
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let~ _ : Ty.tuple [] :=
                                                                          M.alloc (|
                                                                            M.write (|
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    target_jump
                                                                                  |)
                                                                                |),
                                                                                "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                                                "smallest"
                                                                              |),
                                                                              M.call_closure (|
                                                                                Ty.path "i32",
                                                                                M.get_function (|
                                                                                  "core::cmp::min",
                                                                                  [],
                                                                                  [ Ty.path "i32" ]
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          target_jump
                                                                                        |)
                                                                                      |),
                                                                                      "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                                                      "smallest"
                                                                                    |)
                                                                                  |);
                                                                                  M.read (|
                                                                                    next_smallest
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |) in
                                                                        let~ _ : Ty.tuple [] :=
                                                                          M.alloc (|
                                                                            M.write (|
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    target_jump
                                                                                  |)
                                                                                |),
                                                                                "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                                                "biggest"
                                                                              |),
                                                                              M.call_closure (|
                                                                                Ty.path "i32",
                                                                                M.get_function (|
                                                                                  "core::cmp::max",
                                                                                  [],
                                                                                  [ Ty.path "i32" ]
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          target_jump
                                                                                        |)
                                                                                      |),
                                                                                      "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                                                      "biggest"
                                                                                    |)
                                                                                  |);
                                                                                  M.read (|
                                                                                    next_biggest
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                  |)))
                                            ]
                                          |)) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          let β := i in
                                          M.write (|
                                            β,
                                            BinOp.Wrap.add (|
                                              M.read (| β |),
                                              BinOp.Wrap.add (|
                                                BinOp.Wrap.add (|
                                                  Value.Integer IntegerKind.Usize 1,
                                                  M.cast
                                                    (Ty.path "usize")
                                                    (M.call_closure (|
                                                      Ty.path "u8",
                                                      M.get_associated_function (|
                                                        Ty.path "revm_bytecode::opcode::OpCodeInfo",
                                                        "immediate_size",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| opcode |) |)
                                                        |)
                                                      ]
                                                    |))
                                                |),
                                                M.read (| rjumpv_additional_immediates |)
                                              |)
                                            |)
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.eq (|
                                  M.read (| is_returning |),
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_bytecode::eof::types_section::TypesSection",
                                      "is_non_returning",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| this_types |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_bytecode::eof::verification::EofValidationError::NonReturningSectionIsReturning"
                                        []
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (| UnOp.not (| M.read (| is_after_termination |) |) |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_bytecode::eof::verification::EofValidationError::LastInstructionNotTerminating"
                                        []
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ max_stack_requirement : Ty.path "i32" :=
                  M.alloc (| Value.Integer IntegerKind.I32 0 |) in
                let~ _ : Ty.tuple [] :=
                  M.use
                    (M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.path
                                "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo";
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path
                                  "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo";
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| jumps |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.path
                                              "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo"
                                          ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            []
                                            [
                                              Ty.path
                                                "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let opcode := M.copy (| γ0_0 |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.alloc (|
                                              M.write (|
                                                max_stack_requirement,
                                                M.call_closure (|
                                                  Ty.path "i32",
                                                  M.get_function (|
                                                    "core::cmp::max",
                                                    [],
                                                    [ Ty.path "i32" ]
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        opcode,
                                                        "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                                        "biggest"
                                                      |)
                                                    |);
                                                    M.read (| max_stack_requirement |)
                                                  ]
                                                |)
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.ne (|
                                  M.read (| max_stack_requirement |),
                                  M.cast
                                    (Ty.path "i32")
                                    (M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_array_field (|
                                          M.deref (| M.read (| types |) |),
                                          M.read (| this_types_index |)
                                        |),
                                        "revm_bytecode::eof::types_section::TypesSection",
                                        "max_stack_size"
                                      |)
                                    |))
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_bytecode::eof::verification::EofValidationError::MaxStackMismatch"
                                        []
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_validate_eof_code :
      M.IsFunction.Trait "revm_bytecode::eof::verification::validate_eof_code" validate_eof_code.
    Admitted.
    Global Typeclasses Opaque validate_eof_code.
    
    Module validate_eof_code.
      (* StructRecord
        {
          name := "InstructionInfo";
          const_params := [];
          ty_params := [];
          fields :=
            [
              ("is_immediate", Ty.path "bool");
              ("is_jumpdest", Ty.path "bool");
              ("smallest", Ty.path "i32");
              ("biggest", Ty.path "i32")
            ];
        } *)
      
      Module Impl_core_fmt_Debug_for_revm_bytecode_eof_verification_validate_eof_code_InstructionInfo.
        Definition Self : Ty.t :=
          Ty.path "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo".
        
        (*     Debug *)
        Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field4_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| Value.String "InstructionInfo" |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| Value.String "is_immediate" |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                          "is_immediate"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| Value.String "is_jumpdest" |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                          "is_jumpdest"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| Value.String "smallest" |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                          "smallest"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| Value.String "biggest" |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                              "biggest"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_revm_bytecode_eof_verification_validate_eof_code_InstructionInfo.
      
      Module Impl_core_marker_Copy_for_revm_bytecode_eof_verification_validate_eof_code_InstructionInfo.
        Definition Self : Ty.t :=
          Ty.path "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::Copy"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [].
      End Impl_core_marker_Copy_for_revm_bytecode_eof_verification_validate_eof_code_InstructionInfo.
      
      Module Impl_core_clone_Clone_for_revm_bytecode_eof_verification_validate_eof_code_InstructionInfo.
        Definition Self : Ty.t :=
          Ty.path "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo".
        
        (*     Clone *)
        Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                M.match_operator (|
                  None,
                  Value.DeclaredButUndefined,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          None,
                          Value.DeclaredButUndefined,
                          [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
                        |)))
                  ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_revm_bytecode_eof_verification_validate_eof_code_InstructionInfo.
      
      Module Impl_revm_bytecode_eof_verification_validate_eof_code_InstructionInfo.
        Definition Self : Ty.t :=
          Ty.path "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo".
        
        (*
                fn mark_as_immediate(&mut self) -> Result<(), EofValidationError> {
                    if self.is_jumpdest {
                        // Jump to immediate bytes.
                        return Err(EofValidationError::JumpToImmediateBytes);
                    }
                    self.is_immediate = true;
                    Ok(())
                }
        *)
        Definition mark_as_immediate (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                                    "is_jumpdest"
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.StructTuple
                                        "core::result::Result::Err"
                                        [
                                          Value.StructTuple
                                            "revm_bytecode::eof::verification::EofValidationError::JumpToImmediateBytes"
                                            []
                                        ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.alloc (|
                        M.write (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo",
                            "is_immediate"
                          |),
                          Value.Bool true
                        |)
                      |) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_mark_as_immediate :
          M.IsAssociatedFunction.Trait Self "mark_as_immediate" mark_as_immediate.
        Admitted.
        Global Typeclasses Opaque mark_as_immediate.
      End Impl_revm_bytecode_eof_verification_validate_eof_code_InstructionInfo.
      
      Module Impl_core_default_Default_for_revm_bytecode_eof_verification_validate_eof_code_InstructionInfo.
        Definition Self : Ty.t :=
          Ty.path "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo".
        
        (*
                fn default() -> Self {
                    Self {
                        is_immediate: false,
                        is_jumpdest: false,
                        smallest: i32::MAX,
                        biggest: i32::MIN,
                    }
                }
        *)
        Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [] =>
            ltac:(M.monadic
              (Value.StructRecord
                "revm_bytecode::eof::verification::validate_eof_code::InstructionInfo"
                [
                  ("is_immediate", Value.Bool false);
                  ("is_jumpdest", Value.Bool false);
                  ("smallest", M.read (| M.get_constant "core::num::MAX" |));
                  ("biggest", M.read (| M.get_constant "core::num::MIN" |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::default::Default"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("default", InstanceField.Method default) ].
      End Impl_core_default_Default_for_revm_bytecode_eof_verification_validate_eof_code_InstructionInfo.
    End validate_eof_code.
  End verification.
End eof.
