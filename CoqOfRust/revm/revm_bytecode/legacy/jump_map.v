(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module legacy.
  Module jump_map.
    (* StructTuple
      {
        name := "JumpTable";
        const_params := [];
        ty_params := [];
        fields :=
          [
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.apply
                  (Ty.path "bitvec::vec::BitVec")
                  []
                  [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                Ty.path "alloc::alloc::Global"
              ]
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_revm_bytecode_legacy_jump_map_JumpTable.
      Definition Self : Ty.t := Ty.path "revm_bytecode::legacy::jump_map::JumpTable".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructTuple
              "revm_bytecode::legacy::jump_map::JumpTable"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "bitvec::vec::BitVec")
                        []
                        [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.apply
                          (Ty.path "bitvec::vec::BitVec")
                          []
                          [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_tuple_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_bytecode::legacy::jump_map::JumpTable",
                            0
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_revm_bytecode_legacy_jump_map_JumpTable.
    
    Module Impl_core_default_Default_for_revm_bytecode_legacy_jump_map_JumpTable.
      Definition Self : Ty.t := Ty.path "revm_bytecode::legacy::jump_map::JumpTable".
      
      (* Default *)
      Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.StructTuple
              "revm_bytecode::legacy::jump_map::JumpTable"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "bitvec::vec::BitVec")
                        []
                        [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.apply
                          (Ty.path "bitvec::vec::BitVec")
                          []
                          [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("default", InstanceField.Method default) ].
    End Impl_core_default_Default_for_revm_bytecode_legacy_jump_map_JumpTable.
    
    Module Impl_core_marker_StructuralPartialEq_for_revm_bytecode_legacy_jump_map_JumpTable.
      Definition Self : Ty.t := Ty.path "revm_bytecode::legacy::jump_map::JumpTable".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_revm_bytecode_legacy_jump_map_JumpTable.
    
    Module Impl_core_cmp_PartialEq_revm_bytecode_legacy_jump_map_JumpTable_for_revm_bytecode_legacy_jump_map_JumpTable.
      Definition Self : Ty.t := Ty.path "revm_bytecode::legacy::jump_map::JumpTable".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "bitvec::vec::BitVec")
                      []
                      [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                    Ty.path "alloc::alloc::Global"
                  ],
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "bitvec::vec::BitVec")
                        []
                        [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ],
                "eq",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_bytecode::legacy::jump_map::JumpTable",
                    0
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| other |) |),
                    "revm_bytecode::legacy::jump_map::JumpTable",
                    0
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "revm_bytecode::legacy::jump_map::JumpTable" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_revm_bytecode_legacy_jump_map_JumpTable_for_revm_bytecode_legacy_jump_map_JumpTable.
    
    Module Impl_core_cmp_Eq_for_revm_bytecode_legacy_jump_map_JumpTable.
      Definition Self : Ty.t := Ty.path "revm_bytecode::legacy::jump_map::JumpTable".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_revm_bytecode_legacy_jump_map_JumpTable.
    
    Module Impl_core_hash_Hash_for_revm_bytecode_legacy_jump_map_JumpTable.
      Definition Self : Ty.t := Ty.path "revm_bytecode::legacy::jump_map::JumpTable".
      
      (* Hash *)
      Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (|
                "core::hash::Hash",
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "bitvec::vec::BitVec")
                      []
                      [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                    Ty.path "alloc::alloc::Global"
                  ],
                [],
                [],
                "hash",
                [],
                [ __H ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_tuple_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_bytecode::legacy::jump_map::JumpTable",
                        0
                      |)
                    |)
                  |)
                |);
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_revm_bytecode_legacy_jump_map_JumpTable.
    
    Module Impl_core_cmp_Ord_for_revm_bytecode_legacy_jump_map_JumpTable.
      Definition Self : Ty.t := Ty.path "revm_bytecode::legacy::jump_map::JumpTable".
      
      (* Ord *)
      Definition cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              Ty.path "core::cmp::Ordering",
              M.get_trait_method (|
                "core::cmp::Ord",
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "bitvec::vec::BitVec")
                      []
                      [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                    Ty.path "alloc::alloc::Global"
                  ],
                [],
                [],
                "cmp",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_tuple_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_bytecode::legacy::jump_map::JumpTable",
                        0
                      |)
                    |)
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_tuple_field (|
                        M.deref (| M.read (| other |) |),
                        "revm_bytecode::legacy::jump_map::JumpTable",
                        0
                      |)
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Ord"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
    End Impl_core_cmp_Ord_for_revm_bytecode_legacy_jump_map_JumpTable.
    
    Module Impl_core_cmp_PartialOrd_revm_bytecode_legacy_jump_map_JumpTable_for_revm_bytecode_legacy_jump_map_JumpTable.
      Definition Self : Ty.t := Ty.path "revm_bytecode::legacy::jump_map::JumpTable".
      
      (* PartialOrd *)
      Definition partial_cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "core::cmp::Ordering" ],
              M.get_trait_method (|
                "core::cmp::PartialOrd",
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "bitvec::vec::BitVec")
                      []
                      [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                    Ty.path "alloc::alloc::Global"
                  ],
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "bitvec::vec::BitVec")
                        []
                        [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ],
                "partial_cmp",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_tuple_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_bytecode::legacy::jump_map::JumpTable",
                        0
                      |)
                    |)
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_tuple_field (|
                        M.deref (| M.read (| other |) |),
                        "revm_bytecode::legacy::jump_map::JumpTable",
                        0
                      |)
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "revm_bytecode::legacy::jump_map::JumpTable" ]
          Self
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_revm_bytecode_legacy_jump_map_JumpTable_for_revm_bytecode_legacy_jump_map_JumpTable.
    
    Module Impl_core_fmt_Debug_for_revm_bytecode_legacy_jump_map_JumpTable.
      Definition Self : Ty.t := Ty.path "revm_bytecode::legacy::jump_map::JumpTable".
      
      (*
          fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
              f.debug_struct("JumpTable")
                  .field("map", &hex::encode(self.0.as_raw_slice()))
                  .finish()
          }
      *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::builders::DebugStruct",
                "finish",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::builders::DebugStruct" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::builders::DebugStruct",
                        "field",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "core::fmt::builders::DebugStruct",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Formatter",
                                "debug_struct",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| mk_str (| "JumpTable" |) |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "map" |) |) |);
                        (* Unsize *)
                        M.pointer_coercion
                          (M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (|
                                      "const_hex::encode",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "bitvec::vec::BitVec")
                                            []
                                            [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ],
                                          "as_raw_slice",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "bitvec::vec::BitVec")
                                                      []
                                                      [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0"
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "bitvec::vec::BitVec")
                                                        []
                                                        [
                                                          Ty.path "u8";
                                                          Ty.path "bitvec::order::Lsb0"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [],
                                                  "deref",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "revm_bytecode::legacy::jump_map::JumpTable",
                                                      0
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |))
                      ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_revm_bytecode_legacy_jump_map_JumpTable.
    
    Module Impl_revm_bytecode_legacy_jump_map_JumpTable.
      Definition Self : Ty.t := Ty.path "revm_bytecode::legacy::jump_map::JumpTable".
      
      (*
          pub fn as_slice(&self) -> &[u8] {
              self.0.as_raw_slice()
          }
      *)
      Definition as_slice (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "bitvec::vec::BitVec")
                      []
                      [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ],
                    "as_raw_slice",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "bitvec::vec::BitVec")
                                []
                                [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ]
                            ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path "bitvec::vec::BitVec")
                                  []
                                  [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_tuple_field (|
                                M.deref (| M.read (| self |) |),
                                "revm_bytecode::legacy::jump_map::JumpTable",
                                0
                              |)
                            |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_as_slice :
        M.IsAssociatedFunction.C Self "as_slice" as_slice.
      Admitted.
      Global Typeclasses Opaque as_slice.
      
      (*
          pub fn from_slice(slice: &[u8]) -> Self {
              Self(Arc::new(BitVec::from_slice(slice)))
          }
      *)
      Definition from_slice (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ slice ] =>
          ltac:(M.monadic
            (let slice := M.alloc (| slice |) in
            Value.StructTuple
              "revm_bytecode::legacy::jump_map::JumpTable"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "bitvec::vec::BitVec")
                        []
                        [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.apply
                          (Ty.path "bitvec::vec::BitVec")
                          []
                          [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "bitvec::vec::BitVec")
                        []
                        [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "bitvec::vec::BitVec")
                          []
                          [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ],
                        "from_slice",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| slice |) |) |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_slice :
        M.IsAssociatedFunction.C Self "from_slice" from_slice.
      Admitted.
      Global Typeclasses Opaque from_slice.
      
      (*
          pub fn is_valid(&self, pc: usize) -> bool {
              pc < self.0.len() && unsafe { *self.0.get_unchecked(pc) }
          }
      *)
      Definition is_valid (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; pc ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let pc := M.alloc (| pc |) in
            LogicalOp.and (|
              M.call_closure (|
                Ty.path "bool",
                BinOp.lt,
                [
                  M.read (| pc |);
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "bitvec::vec::BitVec")
                        []
                        [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ],
                      "len",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "bitvec::vec::BitVec")
                                  []
                                  [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ]
                              ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "bitvec::vec::BitVec")
                                    []
                                    [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_tuple_field (|
                                  M.deref (| M.read (| self |) |),
                                  "revm_bytecode::legacy::jump_map::JumpTable",
                                  0
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic
                (M.read (|
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.path "bool" ],
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.apply
                          (Ty.path "bitvec::ptr::proxy::BitRef")
                          []
                          [ Ty.path "wyz::comu::Const"; Ty.path "u8"; Ty.path "bitvec::order::Lsb0"
                          ],
                        [],
                        [],
                        "deref",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "bitvec::ptr::proxy::BitRef")
                                []
                                [
                                  Ty.path "wyz::comu::Const";
                                  Ty.path "u8";
                                  Ty.path "bitvec::order::Lsb0"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "bitvec::slice::BitSlice")
                                  []
                                  [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ],
                                "get_unchecked",
                                [],
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "bitvec::slice::BitSlice")
                                            []
                                            [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "bitvec::vec::BitVec")
                                          []
                                          [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "bitvec::vec::BitVec")
                                                    []
                                                    [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0" ]
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "bitvec::vec::BitVec")
                                                      []
                                                      [ Ty.path "u8"; Ty.path "bitvec::order::Lsb0"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [],
                                                "deref",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "revm_bytecode::legacy::jump_map::JumpTable",
                                                    0
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.read (| pc |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_valid :
        M.IsAssociatedFunction.C Self "is_valid" is_valid.
      Admitted.
      Global Typeclasses Opaque is_valid.
    End Impl_revm_bytecode_legacy_jump_map_JumpTable.
  End jump_map.
End legacy.
