(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module opcode.
  Module parse.
    (* StructTuple
      {
        name := "OpCodeError";
        const_params := [];
        ty_params := [];
        fields := [ Ty.tuple [] ];
      } *)
    
    Module Impl_core_fmt_Debug_for_revm_bytecode_opcode_parse_OpCodeError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::opcode::parse::OpCodeError".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_tuple_field1_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "OpCodeError" |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_tuple_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_bytecode::opcode::parse::OpCodeError",
                            0
                          |)
                        |)
                      |)
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_revm_bytecode_opcode_parse_OpCodeError.
    
    Module Impl_core_marker_StructuralPartialEq_for_revm_bytecode_opcode_parse_OpCodeError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::opcode::parse::OpCodeError".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_revm_bytecode_opcode_parse_OpCodeError.
    
    Module Impl_core_cmp_PartialEq_revm_bytecode_opcode_parse_OpCodeError_for_revm_bytecode_opcode_parse_OpCodeError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::opcode::parse::OpCodeError".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.tuple [],
                [],
                [ Ty.tuple [] ],
                "eq",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_bytecode::opcode::parse::OpCodeError",
                    0
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| other |) |),
                    "revm_bytecode::opcode::parse::OpCodeError",
                    0
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "revm_bytecode::opcode::parse::OpCodeError" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_revm_bytecode_opcode_parse_OpCodeError_for_revm_bytecode_opcode_parse_OpCodeError.
    
    Module Impl_core_cmp_Eq_for_revm_bytecode_opcode_parse_OpCodeError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::opcode::parse::OpCodeError".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_revm_bytecode_opcode_parse_OpCodeError.
    
    Module Impl_core_fmt_Display_for_revm_bytecode_opcode_parse_OpCodeError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::opcode::parse::OpCodeError".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              f.write_str("invalid opcode")
          }
      *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "invalid opcode" |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_revm_bytecode_opcode_parse_OpCodeError.
    
    Module Impl_core_error_Error_for_revm_bytecode_opcode_parse_OpCodeError.
      Definition Self : Ty.t := Ty.path "revm_bytecode::opcode::parse::OpCodeError".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::error::Error"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_error_Error_for_revm_bytecode_opcode_parse_OpCodeError.
    
    Module Impl_core_str_traits_FromStr_for_revm_bytecode_opcode_OpCode.
      Definition Self : Ty.t := Ty.path "revm_bytecode::opcode::OpCode".
      
      (*     type Err = OpCodeError; *)
      Definition _Err : Ty.t := Ty.path "revm_bytecode::opcode::parse::OpCodeError".
      
      (*
          fn from_str(s: &str) -> Result<Self, Self::Err> {
              Self::parse(s).ok_or(OpCodeError(()))
          }
      *)
      Definition from_str (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ s ] =>
          ltac:(M.monadic
            (let s := M.alloc (| s |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "revm_bytecode::opcode::OpCode";
                  Ty.path "revm_bytecode::opcode::parse::OpCodeError"
                ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.path "revm_bytecode::opcode::OpCode" ],
                "ok_or",
                [],
                [ Ty.path "revm_bytecode::opcode::parse::OpCodeError" ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.path "revm_bytecode::opcode::OpCode" ],
                  M.get_associated_function (|
                    Ty.path "revm_bytecode::opcode::OpCode",
                    "parse",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                |);
                Value.StructTuple "revm_bytecode::opcode::parse::OpCodeError" [ Value.Tuple [] ]
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::str::traits::FromStr"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("Err", InstanceField.Ty _Err); ("from_str", InstanceField.Method from_str) ].
    End Impl_core_str_traits_FromStr_for_revm_bytecode_opcode_OpCode.
    
    Module Impl_revm_bytecode_opcode_OpCode.
      Definition Self : Ty.t := Ty.path "revm_bytecode::opcode::OpCode".
      
      (*
          pub fn parse(s: &str) -> Option<Self> {
              NAME_TO_OPCODE.get(s).copied()
          }
      *)
      Definition parse (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ s ] =>
          ltac:(M.monadic
            (let s := M.alloc (| s |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.path "revm_bytecode::opcode::OpCode" ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.path "revm_bytecode::opcode::OpCode" ] ],
                "copied",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "&") [] [ Ty.path "revm_bytecode::opcode::OpCode" ] ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "phf::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                        Ty.path "revm_bytecode::opcode::OpCode"
                      ],
                    "get",
                    [],
                    [ Ty.path "str" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.read (|
                          get_constant (|
                            "revm_bytecode::opcode::NAME_TO_OPCODE",
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "phf::map::Map")
                                  []
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                                    Ty.path "revm_bytecode::opcode::OpCode"
                                  ]
                              ]
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_parse : M.IsAssociatedFunction.C Self "parse" parse.
      Admitted.
      Global Typeclasses Opaque parse.
    End Impl_revm_bytecode_opcode_OpCode.
  End parse.
End opcode.
