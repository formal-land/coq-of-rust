(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module block.
  Module blob.
    (* StructRecord
      {
        name := "BlobExcessGasAndPrice";
        const_params := [];
        ty_params := [];
        fields := [ ("excess_blob_gas", Ty.path "u64"); ("blob_gasprice", Ty.path "u128") ];
      } *)
    
    Module Impl_core_marker_Copy_for_revm_context_interface_block_blob_BlobExcessGasAndPrice.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_revm_context_interface_block_blob_BlobExcessGasAndPrice.
    
    Module Impl_core_clone_Clone_for_revm_context_interface_block_blob_BlobExcessGasAndPrice.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        None,
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_revm_context_interface_block_blob_BlobExcessGasAndPrice.
    
    Module Impl_core_fmt_Debug_for_revm_context_interface_block_blob_BlobExcessGasAndPrice.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "BlobExcessGasAndPrice" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "excess_blob_gas" |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_context_interface::block::blob::BlobExcessGasAndPrice",
                        "excess_blob_gas"
                      |)
                    |)
                  |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "blob_gasprice" |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_context_interface::block::blob::BlobExcessGasAndPrice",
                            "blob_gasprice"
                          |)
                        |)
                      |)
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_revm_context_interface_block_blob_BlobExcessGasAndPrice.
    
    Module Impl_core_marker_StructuralPartialEq_for_revm_context_interface_block_blob_BlobExcessGasAndPrice.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_revm_context_interface_block_blob_BlobExcessGasAndPrice.
    
    Module Impl_core_cmp_PartialEq_revm_context_interface_block_blob_BlobExcessGasAndPrice_for_revm_context_interface_block_blob_BlobExcessGasAndPrice.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              BinOp.eq (|
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_context_interface::block::blob::BlobExcessGasAndPrice",
                    "excess_blob_gas"
                  |)
                |),
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "revm_context_interface::block::blob::BlobExcessGasAndPrice",
                    "excess_blob_gas"
                  |)
                |)
              |),
              ltac:(M.monadic
                (BinOp.eq (|
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_context_interface::block::blob::BlobExcessGasAndPrice",
                      "blob_gasprice"
                    |)
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "revm_context_interface::block::blob::BlobExcessGasAndPrice",
                      "blob_gasprice"
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_revm_context_interface_block_blob_BlobExcessGasAndPrice_for_revm_context_interface_block_blob_BlobExcessGasAndPrice.
    
    Module Impl_core_cmp_Eq_for_revm_context_interface_block_blob_BlobExcessGasAndPrice.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        None,
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_revm_context_interface_block_blob_BlobExcessGasAndPrice.
    
    Module Impl_core_hash_Hash_for_revm_context_interface_block_blob_BlobExcessGasAndPrice.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice".
      
      (* Hash *)
      Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::hash::Hash",
                      Ty.path "u64",
                      [],
                      [],
                      "hash",
                      [],
                      [ __H ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_context_interface::block::blob::BlobExcessGasAndPrice",
                              "excess_blob_gas"
                            |)
                          |)
                        |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.path "u128",
                    [],
                    [],
                    "hash",
                    [],
                    [ __H ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_context_interface::block::blob::BlobExcessGasAndPrice",
                            "blob_gasprice"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_revm_context_interface_block_blob_BlobExcessGasAndPrice.
    
    Module Impl_revm_context_interface_block_blob_BlobExcessGasAndPrice.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice".
      
      (*
          pub fn new(excess_blob_gas: u64) -> Self {
              let blob_gasprice = calc_blob_gasprice(excess_blob_gas);
              Self {
                  excess_blob_gas,
                  blob_gasprice,
              }
          }
      *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ excess_blob_gas ] =>
          ltac:(M.monadic
            (let excess_blob_gas := M.alloc (| excess_blob_gas |) in
            M.read (|
              let~ blob_gasprice : Ty.path "u128" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u128",
                    M.get_function (|
                      "revm_context_interface::block::blob::calc_blob_gasprice",
                      [],
                      []
                    |),
                    [ M.read (| excess_blob_gas |) ]
                  |)
                |) in
              M.alloc (|
                Value.StructRecord
                  "revm_context_interface::block::blob::BlobExcessGasAndPrice"
                  [
                    ("excess_blob_gas", M.read (| excess_blob_gas |));
                    ("blob_gasprice", M.read (| blob_gasprice |))
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_revm_context_interface_block_blob_BlobExcessGasAndPrice.
    
    (*
    pub fn calc_excess_blob_gas(parent_excess_blob_gas: u64, parent_blob_gas_used: u64) -> u64 {
        (parent_excess_blob_gas + parent_blob_gas_used).saturating_sub(TARGET_BLOB_GAS_PER_BLOCK)
    }
    *)
    Definition calc_excess_blob_gas (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ parent_excess_blob_gas; parent_blob_gas_used ] =>
        ltac:(M.monadic
          (let parent_excess_blob_gas := M.alloc (| parent_excess_blob_gas |) in
          let parent_blob_gas_used := M.alloc (| parent_blob_gas_used |) in
          M.call_closure (|
            Ty.path "u64",
            M.get_associated_function (| Ty.path "u64", "saturating_sub", [], [] |),
            [
              BinOp.Wrap.add (|
                M.read (| parent_excess_blob_gas |),
                M.read (| parent_blob_gas_used |)
              |);
              M.read (|
                get_constant (|
                  "revm_specification::eip4844::TARGET_BLOB_GAS_PER_BLOCK",
                  Ty.path "u64"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_calc_excess_blob_gas :
      M.IsFunction.C
        "revm_context_interface::block::blob::calc_excess_blob_gas"
        calc_excess_blob_gas.
    Admitted.
    Global Typeclasses Opaque calc_excess_blob_gas.
    
    (*
    pub fn calc_blob_gasprice(excess_blob_gas: u64) -> u128 {
        fake_exponential(
            MIN_BLOB_GASPRICE,
            excess_blob_gas,
            BLOB_GASPRICE_UPDATE_FRACTION,
        )
    }
    *)
    Definition calc_blob_gasprice (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ excess_blob_gas ] =>
        ltac:(M.monadic
          (let excess_blob_gas := M.alloc (| excess_blob_gas |) in
          M.call_closure (|
            Ty.path "u128",
            M.get_function (| "revm_context_interface::block::blob::fake_exponential", [], [] |),
            [
              M.read (|
                get_constant (| "revm_specification::eip4844::MIN_BLOB_GASPRICE", Ty.path "u64" |)
              |);
              M.read (| excess_blob_gas |);
              M.read (|
                get_constant (|
                  "revm_specification::eip4844::BLOB_GASPRICE_UPDATE_FRACTION",
                  Ty.path "u64"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_calc_blob_gasprice :
      M.IsFunction.C "revm_context_interface::block::blob::calc_blob_gasprice" calc_blob_gasprice.
    Admitted.
    Global Typeclasses Opaque calc_blob_gasprice.
    
    (*
    pub fn fake_exponential(factor: u64, numerator: u64, denominator: u64) -> u128 {
        assert_ne!(denominator, 0, "attempt to divide by zero");
        let factor = factor as u128;
        let numerator = numerator as u128;
        let denominator = denominator as u128;
    
        let mut i = 1;
        let mut output = 0;
        let mut numerator_accum = factor * denominator;
        while numerator_accum > 0 {
            output += numerator_accum;
    
            // Denominator is asserted as not zero at the start of the function.
            numerator_accum = (numerator_accum * numerator) / (denominator * i);
            i += 1;
        }
        output / denominator
    }
    *)
    Definition fake_exponential (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ factor; numerator; denominator ] =>
        ltac:(M.monadic
          (let factor := M.alloc (| factor |) in
          let numerator := M.alloc (| numerator |) in
          let denominator := M.alloc (| denominator |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (| Pointer.Kind.Ref, denominator |);
                      M.borrow (| Pointer.Kind.Ref, M.alloc (| Value.Integer IntegerKind.U64 0 |) |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.eq (|
                                      M.read (| M.deref (| M.read (| left_val |) |) |),
                                      M.read (| M.deref (| M.read (| right_val |) |) |)
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind : Ty.path "core::panicking::AssertKind" :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Ne" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "u64"; Ty.path "u64" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [
                                              M.call_closure (|
                                                Ty.path "core::fmt::Arguments",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::Arguments",
                                                  "new_const",
                                                  [ Value.Integer IntegerKind.Usize 1 ],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Value.Array
                                                            [
                                                              mk_str (|
                                                                "attempt to divide by zero"
                                                              |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            let~ factor : Ty.path "u128" :=
              M.alloc (| M.cast (Ty.path "u128") (M.read (| factor |)) |) in
            let~ numerator : Ty.path "u128" :=
              M.alloc (| M.cast (Ty.path "u128") (M.read (| numerator |)) |) in
            let~ denominator : Ty.path "u128" :=
              M.alloc (| M.cast (Ty.path "u128") (M.read (| denominator |)) |) in
            let~ i : Ty.path "u128" := M.alloc (| Value.Integer IntegerKind.U128 1 |) in
            let~ output : Ty.path "u128" := M.alloc (| Value.Integer IntegerKind.U128 0 |) in
            let~ numerator_accum : Ty.path "u128" :=
              M.alloc (| BinOp.Wrap.mul (| M.read (| factor |), M.read (| denominator |) |) |) in
            let~ _ : Ty.tuple [] :=
              M.loop (|
                Ty.tuple [],
                ltac:(M.monadic
                  (M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.gt (|
                                  M.read (| numerator_accum |),
                                  Value.Integer IntegerKind.U128 0
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              let β := output in
                              M.write (|
                                β,
                                BinOp.Wrap.add (| M.read (| β |), M.read (| numerator_accum |) |)
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.write (|
                                numerator_accum,
                                BinOp.Wrap.div (|
                                  BinOp.Wrap.mul (|
                                    M.read (| numerator_accum |),
                                    M.read (| numerator |)
                                  |),
                                  BinOp.Wrap.mul (| M.read (| denominator |), M.read (| i |) |)
                                |)
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              let β := i in
                              M.write (|
                                β,
                                BinOp.Wrap.add (|
                                  M.read (| β |),
                                  Value.Integer IntegerKind.U128 1
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                M.alloc (| Value.Tuple [] |)
                              |)
                            |)
                          |)))
                    ]
                  |)))
              |) in
            M.alloc (| BinOp.Wrap.div (| M.read (| output |), M.read (| denominator |) |) |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_fake_exponential :
      M.IsFunction.C "revm_context_interface::block::blob::fake_exponential" fake_exponential.
    Admitted.
    Global Typeclasses Opaque fake_exponential.
  End blob.
End block.
