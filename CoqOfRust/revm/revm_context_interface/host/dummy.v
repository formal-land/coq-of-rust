(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module host.
  Module dummy.
    (* StructRecord
      {
        name := "DummyHost";
        const_params := [];
        ty_params := [ "BLOCK"; "TX"; "CFG" ];
        fields :=
          [
            ("tx", TX);
            ("block", BLOCK);
            ("cfg", CFG);
            ("storage",
              Ty.apply
                (Ty.path "hashbrown::map::HashMap")
                []
                [
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [];
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [];
                  Ty.path "foldhash::seed::fast::RandomState";
                  Ty.path "hashbrown::raw::alloc::inner::Global"
                ]);
            ("transient_storage",
              Ty.apply
                (Ty.path "hashbrown::map::HashMap")
                []
                [
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [];
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [];
                  Ty.path "foldhash::seed::fast::RandomState";
                  Ty.path "hashbrown::raw::alloc::inner::Global"
                ]);
            ("log",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "alloy_primitives::log::Log")
                    []
                    [ Ty.path "alloy_primitives::log::LogData" ];
                  Ty.path "alloc::alloc::Global"
                ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_BLOCK_where_core_clone_Clone_TX_where_core_clone_Clone_CFG_where_revm_context_interface_block_Block_BLOCK_where_revm_context_interface_transaction_Transaction_TX_where_revm_context_interface_cfg_Cfg_CFG_for_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
      Definition Self (BLOCK TX CFG : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "revm_context_interface::host::dummy::DummyHost") [] [ BLOCK; TX; CFG ].
      
      (* Clone *)
      Definition clone
          (BLOCK TX CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BLOCK TX CFG in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "revm_context_interface::host::dummy::DummyHost"
              []
              [ BLOCK; TX; CFG ]
              [
                ("tx",
                  M.call_closure (|
                    TX,
                    M.get_trait_method (| "core::clone::Clone", TX, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_context_interface::host::dummy::DummyHost",
                              "tx"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("block",
                  M.call_closure (|
                    BLOCK,
                    M.get_trait_method (| "core::clone::Clone", BLOCK, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_context_interface::host::dummy::DummyHost",
                              "block"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("cfg",
                  M.call_closure (|
                    CFG,
                    M.get_trait_method (| "core::clone::Clone", CFG, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_context_interface::host::dummy::DummyHost",
                              "cfg"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("storage",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "hashbrown::map::HashMap")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "hashbrown::map::HashMap")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "foldhash::seed::fast::RandomState";
                          Ty.path "hashbrown::raw::alloc::inner::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_context_interface::host::dummy::DummyHost",
                              "storage"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("transient_storage",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "hashbrown::map::HashMap")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "hashbrown::map::HashMap")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "foldhash::seed::fast::RandomState";
                          Ty.path "hashbrown::raw::alloc::inner::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_context_interface::host::dummy::DummyHost",
                              "transient_storage"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("log",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::log::Log")
                          []
                          [ Ty.path "alloy_primitives::log::LogData" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::log::Log")
                            []
                            [ Ty.path "alloy_primitives::log::LogData" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_context_interface::host::dummy::DummyHost",
                              "log"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BLOCK TX CFG : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BLOCK TX CFG)
          (* Instance *) [ ("clone", InstanceField.Method (clone BLOCK TX CFG)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_BLOCK_where_core_clone_Clone_TX_where_core_clone_Clone_CFG_where_revm_context_interface_block_Block_BLOCK_where_revm_context_interface_transaction_Transaction_TX_where_revm_context_interface_cfg_Cfg_CFG_for_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_BLOCK_where_core_fmt_Debug_TX_where_core_fmt_Debug_CFG_where_revm_context_interface_block_Block_BLOCK_where_revm_context_interface_transaction_Transaction_TX_where_revm_context_interface_cfg_Cfg_CFG_for_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
      Definition Self (BLOCK TX CFG : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "revm_context_interface::host::dummy::DummyHost") [] [ BLOCK; TX; CFG ].
      
      (* Debug *)
      Definition fmt
          (BLOCK TX CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BLOCK TX CFG in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              let~ names :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 6 ]
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    ] :=
                M.alloc (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Value.Array
                            [
                              mk_str (| "tx" |);
                              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "block" |) |) |);
                              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "cfg" |) |) |);
                              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "storage" |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "transient_storage" |) |)
                              |);
                              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "log" |) |) |)
                            ]
                        |)
                      |)
                    |)
                  |)
                |) in
              let~ values :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                            ]
                        ]
                    ] :=
                M.alloc (|
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Value.Array
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "revm_context_interface::host::dummy::DummyHost",
                                          "tx"
                                        |)
                                      |)
                                    |)
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "revm_context_interface::host::dummy::DummyHost",
                                          "block"
                                        |)
                                      |)
                                    |)
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "revm_context_interface::host::dummy::DummyHost",
                                          "cfg"
                                        |)
                                      |)
                                    |)
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "revm_context_interface::host::dummy::DummyHost",
                                          "storage"
                                        |)
                                      |)
                                    |)
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "revm_context_interface::host::dummy::DummyHost",
                                          "transient_storage"
                                        |)
                                      |)
                                    |)
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "revm_context_interface::host::dummy::DummyHost",
                                              "log"
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  |))
                              ]
                          |)
                        |)
                      |)
                    |))
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "DummyHost" |) |) |);
                    (* Unsize *)
                    M.pointer_coercion
                      (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |));
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BLOCK TX CFG : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BLOCK TX CFG)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt BLOCK TX CFG)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_BLOCK_where_core_fmt_Debug_TX_where_core_fmt_Debug_CFG_where_revm_context_interface_block_Block_BLOCK_where_revm_context_interface_transaction_Transaction_TX_where_revm_context_interface_cfg_Cfg_CFG_for_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
    
    Module Impl_core_default_Default_where_core_default_Default_BLOCK_where_core_default_Default_TX_where_core_default_Default_CFG_where_revm_context_interface_block_Block_BLOCK_where_revm_context_interface_transaction_Transaction_TX_where_revm_context_interface_cfg_Cfg_CFG_for_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
      Definition Self (BLOCK TX CFG : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "revm_context_interface::host::dummy::DummyHost") [] [ BLOCK; TX; CFG ].
      
      (* Default *)
      Definition default
          (BLOCK TX CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BLOCK TX CFG in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.StructRecord
              "revm_context_interface::host::dummy::DummyHost"
              []
              [ BLOCK; TX; CFG ]
              [
                ("tx",
                  M.call_closure (|
                    TX,
                    M.get_trait_method (|
                      "core::default::Default",
                      TX,
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("block",
                  M.call_closure (|
                    BLOCK,
                    M.get_trait_method (|
                      "core::default::Default",
                      BLOCK,
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("cfg",
                  M.call_closure (|
                    CFG,
                    M.get_trait_method (|
                      "core::default::Default",
                      CFG,
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("storage",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "hashbrown::map::HashMap")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "hashbrown::map::HashMap")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "foldhash::seed::fast::RandomState";
                          Ty.path "hashbrown::raw::alloc::inner::Global"
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("transient_storage",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "hashbrown::map::HashMap")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "hashbrown::map::HashMap")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "foldhash::seed::fast::RandomState";
                          Ty.path "hashbrown::raw::alloc::inner::Global"
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("log",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::log::Log")
                          []
                          [ Ty.path "alloy_primitives::log::LogData" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::log::Log")
                            []
                            [ Ty.path "alloy_primitives::log::LogData" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BLOCK TX CFG : Ty.t),
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BLOCK TX CFG)
          (* Instance *) [ ("default", InstanceField.Method (default BLOCK TX CFG)) ].
    End Impl_core_default_Default_where_core_default_Default_BLOCK_where_core_default_Default_TX_where_core_default_Default_CFG_where_revm_context_interface_block_Block_BLOCK_where_revm_context_interface_transaction_Transaction_TX_where_revm_context_interface_cfg_Cfg_CFG_for_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
    
    Module Impl_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
      Definition Self (BLOCK TX CFG : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "revm_context_interface::host::dummy::DummyHost") [] [ BLOCK; TX; CFG ].
      
      (*
          pub fn new(tx: TX, block: BLOCK) -> Self {
              Self {
                  tx,
                  block,
                  cfg: CFG::default(),
                  storage: HashMap::default(),
                  transient_storage: HashMap::default(),
                  log: Vec::new(),
              }
          }
      *)
      Definition new
          (BLOCK TX CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BLOCK TX CFG in
        match ε, τ, α with
        | [], [], [ tx; block ] =>
          ltac:(M.monadic
            (let tx := M.alloc (| tx |) in
            let block := M.alloc (| block |) in
            Value.StructRecord
              "revm_context_interface::host::dummy::DummyHost"
              []
              [ BLOCK; TX; CFG ]
              [
                ("tx", M.read (| tx |));
                ("block", M.read (| block |));
                ("cfg",
                  M.call_closure (|
                    CFG,
                    M.get_trait_method (|
                      "core::default::Default",
                      CFG,
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("storage",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "hashbrown::map::HashMap")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "hashbrown::map::HashMap")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "foldhash::seed::fast::RandomState";
                          Ty.path "hashbrown::raw::alloc::inner::Global"
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("transient_storage",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "hashbrown::map::HashMap")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "hashbrown::map::HashMap")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "foldhash::seed::fast::RandomState";
                          Ty.path "hashbrown::raw::alloc::inner::Global"
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("log",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::log::Log")
                          []
                          [ Ty.path "alloy_primitives::log::LogData" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::log::Log")
                            []
                            [ Ty.path "alloy_primitives::log::LogData" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (BLOCK TX CFG : Ty.t),
        M.IsAssociatedFunction.C (Self BLOCK TX CFG) "new" (new BLOCK TX CFG).
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn clear(&mut self) {
              self.storage.clear();
              self.log.clear();
          }
      *)
      Definition clear
          (BLOCK TX CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BLOCK TX CFG in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "hashbrown::map::HashMap")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "foldhash::seed::fast::RandomState";
                          Ty.path "hashbrown::raw::alloc::inner::Global"
                        ],
                      "clear",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_context_interface::host::dummy::DummyHost",
                          "storage"
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::log::Log")
                            []
                            [ Ty.path "alloy_primitives::log::LogData" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "clear",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_context_interface::host::dummy::DummyHost",
                          "log"
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_clear :
        forall (BLOCK TX CFG : Ty.t),
        M.IsAssociatedFunction.C (Self BLOCK TX CFG) "clear" (clear BLOCK TX CFG).
      Admitted.
      Global Typeclasses Opaque clear.
    End Impl_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
    
    Module Impl_revm_context_interface_block_BlockGetter_where_revm_context_interface_block_Block_BLOCK_where_revm_context_interface_transaction_Transaction_TX_where_revm_context_interface_cfg_Cfg_CFG_for_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
      Definition Self (BLOCK TX CFG : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "revm_context_interface::host::dummy::DummyHost") [] [ BLOCK; TX; CFG ].
      
      (*     type Block = BLOCK; *)
      Definition _Block (BLOCK TX CFG : Ty.t) : Ty.t := BLOCK.
      
      (*
          fn block(&self) -> &Self::Block {
              &self.block
          }
      *)
      Definition block
          (BLOCK TX CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BLOCK TX CFG in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_context_interface::host::dummy::DummyHost",
                    "block"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BLOCK TX CFG : Ty.t),
        M.IsTraitInstance
          "revm_context_interface::block::BlockGetter"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BLOCK TX CFG)
          (* Instance *)
          [
            ("Block", InstanceField.Ty (_Block BLOCK TX CFG));
            ("block", InstanceField.Method (block BLOCK TX CFG))
          ].
    End Impl_revm_context_interface_block_BlockGetter_where_revm_context_interface_block_Block_BLOCK_where_revm_context_interface_transaction_Transaction_TX_where_revm_context_interface_cfg_Cfg_CFG_for_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
    
    Module Impl_revm_context_interface_transaction_TransactionGetter_where_revm_context_interface_block_Block_BLOCK_where_revm_context_interface_transaction_Transaction_TX_where_revm_context_interface_cfg_Cfg_CFG_for_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
      Definition Self (BLOCK TX CFG : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "revm_context_interface::host::dummy::DummyHost") [] [ BLOCK; TX; CFG ].
      
      (*     type Transaction = TX; *)
      Definition _Transaction (BLOCK TX CFG : Ty.t) : Ty.t := TX.
      
      (*
          fn tx(&self) -> &Self::Transaction {
              &self.tx
          }
      *)
      Definition tx
          (BLOCK TX CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BLOCK TX CFG in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_context_interface::host::dummy::DummyHost",
                    "tx"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BLOCK TX CFG : Ty.t),
        M.IsTraitInstance
          "revm_context_interface::transaction::TransactionGetter"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BLOCK TX CFG)
          (* Instance *)
          [
            ("Transaction", InstanceField.Ty (_Transaction BLOCK TX CFG));
            ("tx", InstanceField.Method (tx BLOCK TX CFG))
          ].
    End Impl_revm_context_interface_transaction_TransactionGetter_where_revm_context_interface_block_Block_BLOCK_where_revm_context_interface_transaction_Transaction_TX_where_revm_context_interface_cfg_Cfg_CFG_for_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
    
    Module Impl_revm_context_interface_cfg_CfgGetter_where_revm_context_interface_block_Block_BLOCK_where_revm_context_interface_transaction_Transaction_TX_where_revm_context_interface_cfg_Cfg_CFG_for_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
      Definition Self (BLOCK TX CFG : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "revm_context_interface::host::dummy::DummyHost") [] [ BLOCK; TX; CFG ].
      
      (*     type Cfg = CFG; *)
      Definition _Cfg (BLOCK TX CFG : Ty.t) : Ty.t := CFG.
      
      (*
          fn cfg(&self) -> &Self::Cfg {
              &self.cfg
          }
      *)
      Definition cfg
          (BLOCK TX CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BLOCK TX CFG in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_context_interface::host::dummy::DummyHost",
                    "cfg"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BLOCK TX CFG : Ty.t),
        M.IsTraitInstance
          "revm_context_interface::cfg::CfgGetter"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BLOCK TX CFG)
          (* Instance *)
          [
            ("Cfg", InstanceField.Ty (_Cfg BLOCK TX CFG));
            ("cfg", InstanceField.Method (cfg BLOCK TX CFG))
          ].
    End Impl_revm_context_interface_cfg_CfgGetter_where_revm_context_interface_block_Block_BLOCK_where_revm_context_interface_transaction_Transaction_TX_where_revm_context_interface_cfg_Cfg_CFG_for_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
    
    Module Impl_revm_context_interface_host_Host_where_revm_context_interface_transaction_Transaction_TX_where_revm_context_interface_block_Block_BLOCK_where_revm_context_interface_cfg_Cfg_CFG_for_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
      Definition Self (TX BLOCK CFG : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "revm_context_interface::host::dummy::DummyHost") [] [ BLOCK; TX; CFG ].
      
      (*
          fn load_account_delegated(&mut self, _address: Address) -> Option<AccountLoad> {
              Some(AccountLoad::default())
          }
      *)
      Definition load_account_delegated
          (TX BLOCK CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self TX BLOCK CFG in
        match ε, τ, α with
        | [], [], [ self; _address ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _address := M.alloc (| _address |) in
            Value.StructTuple
              "core::option::Option::Some"
              []
              [ Ty.path "revm_context_interface::journaled_state::AccountLoad" ]
              [
                M.call_closure (|
                  Ty.path "revm_context_interface::journaled_state::AccountLoad",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "revm_context_interface::journaled_state::AccountLoad",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn block_hash(&mut self, _number: u64) -> Option<B256> {
              Some(B256::ZERO)
          }
      *)
      Definition block_hash
          (TX BLOCK CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self TX BLOCK CFG in
        match ε, τ, α with
        | [], [], [ self; _number ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _number := M.alloc (| _number |) in
            Value.StructTuple
              "core::option::Option::Some"
              []
              [
                Ty.apply
                  (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                  [ Value.Integer IntegerKind.Usize 32 ]
                  []
              ]
              [
                M.read (|
                  get_associated_constant (|
                    Ty.apply
                      (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [],
                    "ZERO",
                    Ty.apply
                      (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      []
                  |)
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn balance(&mut self, _address: Address) -> Option<StateLoad<U256>> {
              Some(Default::default())
          }
      *)
      Definition balance
          (TX BLOCK CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self TX BLOCK CFG in
        match ε, τ, α with
        | [], [], [ self; _address ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _address := M.alloc (| _address |) in
            Value.StructTuple
              "core::option::Option::Some"
              []
              [
                Ty.apply
                  (Ty.path "revm_context_interface::journaled_state::StateLoad")
                  []
                  [
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      []
                  ]
              ]
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "revm_context_interface::journaled_state::StateLoad")
                    []
                    [
                      Ty.apply
                        (Ty.path "ruint::Uint")
                        [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                        []
                    ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "revm_context_interface::journaled_state::StateLoad")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          []
                      ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn code(&mut self, _address: Address) -> Option<Eip7702CodeLoad<Bytes>> {
              Some(Default::default())
          }
      *)
      Definition code
          (TX BLOCK CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self TX BLOCK CFG in
        match ε, τ, α with
        | [], [], [ self; _address ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _address := M.alloc (| _address |) in
            Value.StructTuple
              "core::option::Option::Some"
              []
              [
                Ty.apply
                  (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
                  []
                  [ Ty.path "alloy_primitives::bytes_::Bytes" ]
              ]
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
                    []
                    [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
                      []
                      [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn code_hash(&mut self, _address: Address) -> Option<Eip7702CodeLoad<B256>> {
              Some(Eip7702CodeLoad::new_not_delegated(KECCAK_EMPTY, false))
          }
      *)
      Definition code_hash
          (TX BLOCK CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self TX BLOCK CFG in
        match ε, τ, α with
        | [], [], [ self; _address ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _address := M.alloc (| _address |) in
            Value.StructTuple
              "core::option::Option::Some"
              []
              [
                Ty.apply
                  (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      []
                  ]
              ]
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        []
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          []
                      ],
                    "new_not_delegated",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      get_constant (|
                        "revm_primitives::KECCAK_EMPTY",
                        Ty.apply
                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          []
                      |)
                    |);
                    Value.Bool false
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn sload(&mut self, _address: Address, index: U256) -> Option<StateLoad<U256>> {
              match self.storage.entry(index) {
                  Entry::Occupied(entry) => Some(StateLoad::new( *entry.get(), false)),
                  Entry::Vacant(entry) => {
                      entry.insert(U256::ZERO);
                      Some(StateLoad::new(U256::ZERO, true))
                  }
              }
          }
      *)
      Definition sload
          (TX BLOCK CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self TX BLOCK CFG in
        match ε, τ, α with
        | [], [], [ self; _address; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _address := M.alloc (| _address |) in
            let index := M.alloc (| index |) in
            M.read (|
              M.match_operator (|
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "revm_context_interface::journaled_state::StateLoad")
                          []
                          [
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              []
                          ]
                      ]
                  ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "hashbrown::map::Entry")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "hashbrown::map::HashMap")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "foldhash::seed::fast::RandomState";
                          Ty.path "hashbrown::raw::alloc::inner::Global"
                        ],
                      "entry",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_context_interface::host::dummy::DummyHost",
                          "storage"
                        |)
                      |);
                      M.read (| index |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "hashbrown::map::Entry::Occupied",
                          0
                        |) in
                      let entry := M.copy (| γ0_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          []
                          [
                            Ty.apply
                              (Ty.path "revm_context_interface::journaled_state::StateLoad")
                              []
                              [
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  []
                              ]
                          ]
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "revm_context_interface::journaled_state::StateLoad")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "revm_context_interface::journaled_state::StateLoad")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            []
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "hashbrown::map::OccupiedEntry")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [];
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [];
                                            Ty.path "foldhash::seed::fast::RandomState";
                                            Ty.path "hashbrown::raw::alloc::inner::Global"
                                          ],
                                        "get",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, entry |) ]
                                    |)
                                  |)
                                |);
                                Value.Bool false
                              ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "hashbrown::map::Entry::Vacant",
                          0
                        |) in
                      let entry := M.copy (| γ0_0 |) in
                      let~ _ :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  []
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "hashbrown::map::VacantEntry")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [];
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [];
                                  Ty.path "foldhash::seed::fast::RandomState";
                                  Ty.path "hashbrown::raw::alloc::inner::Global"
                                ],
                              "insert",
                              [],
                              []
                            |),
                            [
                              M.read (| entry |);
                              M.read (|
                                get_associated_constant (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  "ZERO",
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                |)
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          []
                          [
                            Ty.apply
                              (Ty.path "revm_context_interface::journaled_state::StateLoad")
                              []
                              [
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  []
                              ]
                          ]
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "revm_context_interface::journaled_state::StateLoad")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "revm_context_interface::journaled_state::StateLoad")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  get_associated_constant (|
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    "ZERO",
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  |)
                                |);
                                Value.Bool true
                              ]
                            |)
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn sstore(
              &mut self,
              _address: Address,
              index: U256,
              value: U256,
          ) -> Option<StateLoad<SStoreResult>> {
              let present = self.storage.insert(index, value);
              Some(StateLoad {
                  data: SStoreResult {
                      original_value: U256::ZERO,
                      present_value: present.unwrap_or(U256::ZERO),
                      new_value: value,
                  },
                  is_cold: present.is_none(),
              })
          }
      *)
      Definition sstore
          (TX BLOCK CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self TX BLOCK CFG in
        match ε, τ, α with
        | [], [], [ self; _address; index; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _address := M.alloc (| _address |) in
            let index := M.alloc (| index |) in
            let value := M.alloc (| value |) in
            M.read (|
              let~ present :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            []
                        ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          []
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "hashbrown::map::HashMap")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "foldhash::seed::fast::RandomState";
                          Ty.path "hashbrown::raw::alloc::inner::Global"
                        ],
                      "insert",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_context_interface::host::dummy::DummyHost",
                          "storage"
                        |)
                      |);
                      M.read (| index |);
                      M.read (| value |)
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructTuple
                  "core::option::Option::Some"
                  []
                  [
                    Ty.apply
                      (Ty.path "revm_context_interface::journaled_state::StateLoad")
                      []
                      [ Ty.path "revm_context_interface::host::SStoreResult" ]
                  ]
                  [
                    Value.StructRecord
                      "revm_context_interface::journaled_state::StateLoad"
                      []
                      [ Ty.path "revm_context_interface::host::SStoreResult" ]
                      [
                        ("data",
                          Value.StructRecord
                            "revm_context_interface::host::SStoreResult"
                            []
                            []
                            [
                              ("original_value",
                                M.read (|
                                  get_associated_constant (|
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    "ZERO",
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  |)
                                |));
                              ("present_value",
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      ],
                                    "unwrap_or",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| present |);
                                    M.read (|
                                      get_associated_constant (|
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [],
                                        "ZERO",
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      |)
                                    |)
                                  ]
                                |));
                              ("new_value", M.read (| value |))
                            ]);
                        ("is_cold",
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ],
                              "is_none",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, present |) ]
                          |))
                      ]
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn tload(&mut self, _address: Address, index: U256) -> U256 {
              self.transient_storage
                  .get(&index)
                  .copied()
                  .unwrap_or_default()
          }
      *)
      Definition tload
          (TX BLOCK CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self TX BLOCK CFG in
        match ε, τ, α with
        | [], [], [ self; _address; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _address := M.alloc (| _address |) in
            let index := M.alloc (| index |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "ruint::Uint")
                [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                [],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      []
                  ],
                "unwrap_or_default",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [
                      Ty.apply
                        (Ty.path "ruint::Uint")
                        [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                        []
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              []
                          ]
                      ],
                    "copied",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "hashbrown::map::HashMap")
                          []
                          [
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [];
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [];
                            Ty.path "foldhash::seed::fast::RandomState";
                            Ty.path "hashbrown::raw::alloc::inner::Global"
                          ],
                        "get",
                        [],
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            []
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_context_interface::host::dummy::DummyHost",
                            "transient_storage"
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.borrow (| Pointer.Kind.Ref, index |) |)
                        |)
                      ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn tstore(&mut self, _address: Address, index: U256, value: U256) {
              self.transient_storage.insert(index, value);
          }
      *)
      Definition tstore
          (TX BLOCK CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self TX BLOCK CFG in
        match ε, τ, α with
        | [], [], [ self; _address; index; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _address := M.alloc (| _address |) in
            let index := M.alloc (| index |) in
            let value := M.alloc (| value |) in
            M.read (|
              let~ _ :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            []
                        ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          []
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "hashbrown::map::HashMap")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "foldhash::seed::fast::RandomState";
                          Ty.path "hashbrown::raw::alloc::inner::Global"
                        ],
                      "insert",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_context_interface::host::dummy::DummyHost",
                          "transient_storage"
                        |)
                      |);
                      M.read (| index |);
                      M.read (| value |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn log(&mut self, log: Log) {
              self.log.push(log)
          }
      *)
      Definition log
          (TX BLOCK CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self TX BLOCK CFG in
        match ε, τ, α with
        | [], [], [ self; log ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let log := M.alloc (| log |) in
            M.call_closure (|
              Ty.tuple [],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloy_primitives::log::Log")
                      []
                      [ Ty.path "alloy_primitives::log::LogData" ];
                    Ty.path "alloc::alloc::Global"
                  ],
                "push",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_context_interface::host::dummy::DummyHost",
                    "log"
                  |)
                |);
                M.read (| log |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn selfdestruct(
              &mut self,
              _address: Address,
              _target: Address,
          ) -> Option<StateLoad<SelfDestructResult>> {
              Some(StateLoad::default())
          }
      *)
      Definition selfdestruct
          (TX BLOCK CFG : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self TX BLOCK CFG in
        match ε, τ, α with
        | [], [], [ self; _address; _target ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _address := M.alloc (| _address |) in
            let _target := M.alloc (| _target |) in
            Value.StructTuple
              "core::option::Option::Some"
              []
              [
                Ty.apply
                  (Ty.path "revm_context_interface::journaled_state::StateLoad")
                  []
                  [ Ty.path "revm_context_interface::host::SelfDestructResult" ]
              ]
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "revm_context_interface::journaled_state::StateLoad")
                    []
                    [ Ty.path "revm_context_interface::host::SelfDestructResult" ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "revm_context_interface::journaled_state::StateLoad")
                      []
                      [ Ty.path "revm_context_interface::host::SelfDestructResult" ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (TX BLOCK CFG : Ty.t),
        M.IsTraitInstance
          "revm_context_interface::host::Host"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self TX BLOCK CFG)
          (* Instance *)
          [
            ("load_account_delegated", InstanceField.Method (load_account_delegated TX BLOCK CFG));
            ("block_hash", InstanceField.Method (block_hash TX BLOCK CFG));
            ("balance", InstanceField.Method (balance TX BLOCK CFG));
            ("code", InstanceField.Method (code TX BLOCK CFG));
            ("code_hash", InstanceField.Method (code_hash TX BLOCK CFG));
            ("sload", InstanceField.Method (sload TX BLOCK CFG));
            ("sstore", InstanceField.Method (sstore TX BLOCK CFG));
            ("tload", InstanceField.Method (tload TX BLOCK CFG));
            ("tstore", InstanceField.Method (tstore TX BLOCK CFG));
            ("log", InstanceField.Method (log TX BLOCK CFG));
            ("selfdestruct", InstanceField.Method (selfdestruct TX BLOCK CFG))
          ].
    End Impl_revm_context_interface_host_Host_where_revm_context_interface_transaction_Transaction_TX_where_revm_context_interface_block_Block_BLOCK_where_revm_context_interface_cfg_Cfg_CFG_for_revm_context_interface_host_dummy_DummyHost_BLOCK_TX_CFG.
  End dummy.
End host.
