(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module journaled_state.
  (* Trait *)
  Module Journal.
    Definition set_code (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; address; code ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let code := M.alloc (| code |) in
          M.read (|
            let~ hash :
                Ty.apply
                  (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                  [ Value.Integer IntegerKind.Usize 32 ]
                  [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                    [ Value.Integer IntegerKind.Usize 32 ]
                    [],
                  M.get_associated_function (|
                    Ty.path "revm_bytecode::bytecode::Bytecode",
                    "hash_slow",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, code |) ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "revm_context_interface::journaled_state::Journal",
                    Self,
                    [],
                    [],
                    "set_code_with_hash",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.read (| address |);
                    M.read (| code |);
                    M.read (| hash |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_set_code :
      M.IsProvidedMethod "revm_context_interface::journaled_state::Journal" "set_code" set_code.
  End Journal.
  
  (*
  Enum TransferError
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "OutOfFunds";
          item := StructTuple [];
        };
        {
          name := "OverflowPayment";
          item := StructTuple [];
        };
        {
          name := "CreateCollision";
          item := StructTuple [];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_TransferError_OutOfFunds :
    M.IsDiscriminant "revm_context_interface::journaled_state::TransferError::OutOfFunds" 0.
  Axiom IsDiscriminant_TransferError_OverflowPayment :
    M.IsDiscriminant "revm_context_interface::journaled_state::TransferError::OverflowPayment" 1.
  Axiom IsDiscriminant_TransferError_CreateCollision :
    M.IsDiscriminant "revm_context_interface::journaled_state::TransferError::CreateCollision" 2.
  
  Module Impl_core_marker_Copy_for_revm_context_interface_journaled_state_TransferError.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::TransferError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_revm_context_interface_journaled_state_TransferError.
  
  Module Impl_core_clone_Clone_for_revm_context_interface_journaled_state_TransferError.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::TransferError".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.deref (| M.read (| self |) |) |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_revm_context_interface_journaled_state_TransferError.
  
  Module Impl_core_fmt_Debug_for_revm_context_interface_journaled_state_TransferError.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::TransferError".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.read (|
                M.match_operator (|
                  Some (Ty.apply (Ty.path "&") [] [ Ty.path "str" ]),
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_context_interface::journaled_state::TransferError::OutOfFunds"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "OutOfFunds" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_context_interface::journaled_state::TransferError::OverflowPayment"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "OverflowPayment" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "revm_context_interface::journaled_state::TransferError::CreateCollision"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "CreateCollision" |) |)
                          |)
                        |)))
                  ]
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_revm_context_interface_journaled_state_TransferError.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_context_interface_journaled_state_TransferError.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::TransferError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_context_interface_journaled_state_TransferError.
  
  Module Impl_core_cmp_PartialEq_revm_context_interface_journaled_state_TransferError_for_revm_context_interface_journaled_state_TransferError.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::TransferError".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_discr : Ty.path "isize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_context_interface::journaled_state::TransferError" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ __arg1_discr : Ty.path "isize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "revm_context_interface::journaled_state::TransferError" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.path "revm_context_interface::journaled_state::TransferError" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_revm_context_interface_journaled_state_TransferError_for_revm_context_interface_journaled_state_TransferError.
  
  Module Impl_core_cmp_Eq_for_revm_context_interface_journaled_state_TransferError.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::TransferError".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_revm_context_interface_journaled_state_TransferError.
  
  (* StructRecord
    {
      name := "JournalCheckpoint";
      const_params := [];
      ty_params := [];
      fields := [ ("log_i", Ty.path "usize"); ("journal_i", Ty.path "usize") ];
    } *)
  
  Module Impl_core_fmt_Debug_for_revm_context_interface_journaled_state_JournalCheckpoint.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::JournalCheckpoint".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "JournalCheckpoint" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "log_i" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_context_interface::journaled_state::JournalCheckpoint",
                        "log_i"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "journal_i" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_context_interface::journaled_state::JournalCheckpoint",
                            "journal_i"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_revm_context_interface_journaled_state_JournalCheckpoint.
  
  Module Impl_core_marker_Copy_for_revm_context_interface_journaled_state_JournalCheckpoint.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::JournalCheckpoint".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_revm_context_interface_journaled_state_JournalCheckpoint.
  
  Module Impl_core_clone_Clone_for_revm_context_interface_journaled_state_JournalCheckpoint.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::JournalCheckpoint".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              None,
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_revm_context_interface_journaled_state_JournalCheckpoint.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_context_interface_journaled_state_JournalCheckpoint.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::JournalCheckpoint".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_context_interface_journaled_state_JournalCheckpoint.
  
  Module Impl_core_cmp_PartialEq_revm_context_interface_journaled_state_JournalCheckpoint_for_revm_context_interface_journaled_state_JournalCheckpoint.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::JournalCheckpoint".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            M.call_closure (|
              Ty.path "bool",
              BinOp.eq,
              [
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_context_interface::journaled_state::JournalCheckpoint",
                    "log_i"
                  |)
                |);
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "revm_context_interface::journaled_state::JournalCheckpoint",
                    "log_i"
                  |)
                |)
              ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_context_interface::journaled_state::JournalCheckpoint",
                      "journal_i"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "revm_context_interface::journaled_state::JournalCheckpoint",
                      "journal_i"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.path "revm_context_interface::journaled_state::JournalCheckpoint" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_revm_context_interface_journaled_state_JournalCheckpoint_for_revm_context_interface_journaled_state_JournalCheckpoint.
  
  Module Impl_core_cmp_Eq_for_revm_context_interface_journaled_state_JournalCheckpoint.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::JournalCheckpoint".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              None,
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_revm_context_interface_journaled_state_JournalCheckpoint.
  
  (* StructRecord
    {
      name := "StateLoad";
      const_params := [];
      ty_params := [ "T" ];
      fields := [ ("data", T); ("is_cold", Ty.path "bool") ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_revm_context_interface_journaled_state_StateLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ].
    
    (* Clone *)
    Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "revm_context_interface::journaled_state::StateLoad"
            [
              ("data",
                M.call_closure (|
                  T,
                  M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_context_interface::journaled_state::StateLoad",
                            "data"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("is_cold",
                M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "bool",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_context_interface::journaled_state::StateLoad",
                            "is_cold"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_T_for_revm_context_interface_journaled_state_StateLoad_T.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_revm_context_interface_journaled_state_StateLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ].
    
    (* Debug *)
    Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "StateLoad" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "data" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_context_interface::journaled_state::StateLoad",
                        "data"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_cold" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_context_interface::journaled_state::StateLoad",
                            "is_cold"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_revm_context_interface_journaled_state_StateLoad_T.
  
  Module Impl_core_default_Default_where_core_default_Default_T_for_revm_context_interface_journaled_state_StateLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ].
    
    (* Default *)
    Definition default (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "revm_context_interface::journaled_state::StateLoad"
            [
              ("data",
                M.call_closure (|
                  T,
                  M.get_trait_method (| "core::default::Default", T, [], [], "default", [], [] |),
                  []
                |));
              ("is_cold",
                M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "bool",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("default", InstanceField.Method (default T)) ].
  End Impl_core_default_Default_where_core_default_Default_T_for_revm_context_interface_journaled_state_StateLoad_T.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_context_interface_journaled_state_StateLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ].
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_context_interface_journaled_state_StateLoad_T.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_T_revm_context_interface_journaled_state_StateLoad_T_for_revm_context_interface_journaled_state_StateLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ].
    
    (* PartialEq *)
    Definition eq (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (| "core::cmp::PartialEq", T, [], [ T ], "eq", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_context_interface::journaled_state::StateLoad",
                    "data"
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "revm_context_interface::journaled_state::StateLoad",
                    "data"
                  |)
                |)
              ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_context_interface::journaled_state::StateLoad",
                      "is_cold"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "revm_context_interface::journaled_state::StateLoad",
                      "is_cold"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ] ]
        (Self T)
        (* Instance *) [ ("eq", InstanceField.Method (eq T)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_T_revm_context_interface_journaled_state_StateLoad_T_for_revm_context_interface_journaled_state_StateLoad_T.
  
  Module Impl_core_cmp_Eq_where_core_cmp_Eq_T_for_revm_context_interface_journaled_state_StateLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ].
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              None,
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      None,
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq T)) ].
  End Impl_core_cmp_Eq_where_core_cmp_Eq_T_for_revm_context_interface_journaled_state_StateLoad_T.
  
  Module Impl_core_ops_deref_Deref_for_revm_context_interface_journaled_state_StateLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ].
    
    (*     type Target = T; *)
    Definition _Target (T : Ty.t) : Ty.t := T.
    
    (*
        fn deref(&self) -> &Self::Target {
            &self.data
        }
    *)
    Definition deref (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "revm_context_interface::journaled_state::StateLoad",
                  "data"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::deref::Deref"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *)
        [ ("Target", InstanceField.Ty (_Target T)); ("deref", InstanceField.Method (deref T)) ].
  End Impl_core_ops_deref_Deref_for_revm_context_interface_journaled_state_StateLoad_T.
  
  Module Impl_core_ops_deref_DerefMut_for_revm_context_interface_journaled_state_StateLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ].
    
    (*
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.data
        }
    *)
    Definition deref_mut (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_context_interface::journaled_state::StateLoad",
                      "data"
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::deref::DerefMut"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("deref_mut", InstanceField.Method (deref_mut T)) ].
  End Impl_core_ops_deref_DerefMut_for_revm_context_interface_journaled_state_StateLoad_T.
  
  Module Impl_revm_context_interface_journaled_state_StateLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ].
    
    (*
        pub fn new(data: T, is_cold: bool) -> Self {
            Self { data, is_cold }
        }
    *)
    Definition new (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ data; is_cold ] =>
        ltac:(M.monadic
          (let data := M.alloc (| data |) in
          let is_cold := M.alloc (| is_cold |) in
          Value.StructRecord
            "revm_context_interface::journaled_state::StateLoad"
            [ ("data", M.read (| data |)); ("is_cold", M.read (| is_cold |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "new" (new T).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn map<B, F>(self, f: F) -> StateLoad<B>
        where
            F: FnOnce(T) -> B,
        {
            StateLoad::new(f(self.data), self.is_cold)
        }
    *)
    Definition map (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [ B; F ], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ B ],
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ B ],
              "new",
              [],
              []
            |),
            [
              M.call_closure (|
                B,
                M.get_trait_method (|
                  "core::ops::function::FnOnce",
                  F,
                  [],
                  [ Ty.tuple [ T ] ],
                  "call_once",
                  [],
                  []
                |),
                [
                  M.read (| f |);
                  Value.Tuple
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "revm_context_interface::journaled_state::StateLoad",
                          "data"
                        |)
                      |)
                    ]
                ]
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  self,
                  "revm_context_interface::journaled_state::StateLoad",
                  "is_cold"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_map :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "map" (map T).
    Admitted.
    Global Typeclasses Opaque map.
  End Impl_revm_context_interface_journaled_state_StateLoad_T.
  
  (* StructRecord
    {
      name := "AccountLoad";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("load",
            Ty.apply
              (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
              []
              [ Ty.tuple [] ]);
          ("is_empty", Ty.path "bool")
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_revm_context_interface_journaled_state_AccountLoad.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::AccountLoad".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "revm_context_interface::journaled_state::AccountLoad"
            [
              ("load",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
                    []
                    [ Ty.tuple [] ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
                      []
                      [ Ty.tuple [] ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_context_interface::journaled_state::AccountLoad",
                            "load"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("is_empty",
                M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "bool",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_context_interface::journaled_state::AccountLoad",
                            "is_empty"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_revm_context_interface_journaled_state_AccountLoad.
  
  Module Impl_core_fmt_Debug_for_revm_context_interface_journaled_state_AccountLoad.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::AccountLoad".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "AccountLoad" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "load" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_context_interface::journaled_state::AccountLoad",
                        "load"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_empty" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_context_interface::journaled_state::AccountLoad",
                            "is_empty"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_revm_context_interface_journaled_state_AccountLoad.
  
  Module Impl_core_default_Default_for_revm_context_interface_journaled_state_AccountLoad.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::AccountLoad".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "revm_context_interface::journaled_state::AccountLoad"
            [
              ("load",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
                    []
                    [ Ty.tuple [] ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
                      []
                      [ Ty.tuple [] ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("is_empty",
                M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "bool",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_revm_context_interface_journaled_state_AccountLoad.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_context_interface_journaled_state_AccountLoad.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::AccountLoad".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_context_interface_journaled_state_AccountLoad.
  
  Module Impl_core_cmp_PartialEq_revm_context_interface_journaled_state_AccountLoad_for_revm_context_interface_journaled_state_AccountLoad.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::AccountLoad".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.apply
                  (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
                  []
                  [ Ty.tuple [] ],
                [],
                [
                  Ty.apply
                    (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
                    []
                    [ Ty.tuple [] ]
                ],
                "eq",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_context_interface::journaled_state::AccountLoad",
                    "load"
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "revm_context_interface::journaled_state::AccountLoad",
                    "load"
                  |)
                |)
              ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_context_interface::journaled_state::AccountLoad",
                      "is_empty"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "revm_context_interface::journaled_state::AccountLoad",
                      "is_empty"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.path "revm_context_interface::journaled_state::AccountLoad" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_revm_context_interface_journaled_state_AccountLoad_for_revm_context_interface_journaled_state_AccountLoad.
  
  Module Impl_core_cmp_Eq_for_revm_context_interface_journaled_state_AccountLoad.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::AccountLoad".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              None,
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      None,
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_revm_context_interface_journaled_state_AccountLoad.
  
  Module Impl_core_ops_deref_Deref_for_revm_context_interface_journaled_state_AccountLoad.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::AccountLoad".
    
    (*     type Target = Eip7702CodeLoad<()>; *)
    Definition _Target : Ty.t :=
      Ty.apply
        (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
        []
        [ Ty.tuple [] ].
    
    (*
        fn deref(&self) -> &Self::Target {
            &self.load
        }
    *)
    Definition deref (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "revm_context_interface::journaled_state::AccountLoad",
                  "load"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::deref::Deref"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("Target", InstanceField.Ty _Target); ("deref", InstanceField.Method deref) ].
  End Impl_core_ops_deref_Deref_for_revm_context_interface_journaled_state_AccountLoad.
  
  Module Impl_core_ops_deref_DerefMut_for_revm_context_interface_journaled_state_AccountLoad.
    Definition Self : Ty.t := Ty.path "revm_context_interface::journaled_state::AccountLoad".
    
    (*
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.load
        }
    *)
    Definition deref_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_context_interface::journaled_state::AccountLoad",
                      "load"
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::deref::DerefMut"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("deref_mut", InstanceField.Method deref_mut) ].
  End Impl_core_ops_deref_DerefMut_for_revm_context_interface_journaled_state_AccountLoad.
  
  (* StructRecord
    {
      name := "Eip7702CodeLoad";
      const_params := [];
      ty_params := [ "T" ];
      fields :=
        [
          ("state_load",
            Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ]);
          ("is_delegate_account_cold",
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "bool" ])
        ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad") [] [ T ].
    
    (* Clone *)
    Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "revm_context_interface::journaled_state::Eip7702CodeLoad"
            [
              ("state_load",
                M.call_closure (|
                  Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "revm_context_interface::journaled_state::StateLoad")
                      []
                      [ T ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_context_interface::journaled_state::Eip7702CodeLoad",
                            "state_load"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("is_delegate_account_cold",
                M.call_closure (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "bool" ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "bool" ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_context_interface::journaled_state::Eip7702CodeLoad",
                            "is_delegate_account_cold"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_T_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad") [] [ T ].
    
    (* Debug *)
    Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Eip7702CodeLoad" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "state_load" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_context_interface::journaled_state::Eip7702CodeLoad",
                        "state_load"
                      |)
                    |)
                  |)
                |));
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| mk_str (| "is_delegate_account_cold" |) |)
              |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_context_interface::journaled_state::Eip7702CodeLoad",
                            "is_delegate_account_cold"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
  
  Module Impl_core_default_Default_where_core_default_Default_T_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad") [] [ T ].
    
    (* Default *)
    Definition default (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "revm_context_interface::journaled_state::Eip7702CodeLoad"
            [
              ("state_load",
                M.call_closure (|
                  Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "revm_context_interface::journaled_state::StateLoad")
                      []
                      [ T ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("is_delegate_account_cold",
                M.call_closure (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "bool" ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "bool" ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("default", InstanceField.Method (default T)) ].
  End Impl_core_default_Default_where_core_default_Default_T_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad") [] [ T ].
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_T_revm_context_interface_journaled_state_Eip7702CodeLoad_T_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad") [] [ T ].
    
    (* PartialEq *)
    Definition eq (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ],
                [],
                [ Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ]
                ],
                "eq",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_context_interface::journaled_state::Eip7702CodeLoad",
                    "state_load"
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "revm_context_interface::journaled_state::Eip7702CodeLoad",
                    "state_load"
                  |)
                |)
              ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "bool" ],
                  [],
                  [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "bool" ] ],
                  "eq",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_context_interface::journaled_state::Eip7702CodeLoad",
                      "is_delegate_account_cold"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "revm_context_interface::journaled_state::Eip7702CodeLoad",
                      "is_delegate_account_cold"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad") [] [ T ] ]
        (Self T)
        (* Instance *) [ ("eq", InstanceField.Method (eq T)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_T_revm_context_interface_journaled_state_Eip7702CodeLoad_T_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
  
  Module Impl_core_cmp_Eq_where_core_cmp_Eq_T_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad") [] [ T ].
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              None,
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      None,
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq T)) ].
  End Impl_core_cmp_Eq_where_core_cmp_Eq_T_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
  
  Module Impl_core_ops_deref_Deref_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad") [] [ T ].
    
    (*     type Target = StateLoad<T>; *)
    Definition _Target (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ].
    
    (*
        fn deref(&self) -> &Self::Target {
            &self.state_load
        }
    *)
    Definition deref (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "revm_context_interface::journaled_state::Eip7702CodeLoad",
                  "state_load"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::deref::Deref"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *)
        [ ("Target", InstanceField.Ty (_Target T)); ("deref", InstanceField.Method (deref T)) ].
  End Impl_core_ops_deref_Deref_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
  
  Module Impl_core_ops_deref_DerefMut_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad") [] [ T ].
    
    (*
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.state_load
        }
    *)
    Definition deref_mut (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_context_interface::journaled_state::Eip7702CodeLoad",
                      "state_load"
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::deref::DerefMut"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("deref_mut", InstanceField.Method (deref_mut T)) ].
  End Impl_core_ops_deref_DerefMut_for_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
  
  Module Impl_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad") [] [ T ].
    
    (*
        pub fn new_state_load(state_load: StateLoad<T>) -> Self {
            Self {
                state_load,
                is_delegate_account_cold: None,
            }
        }
    *)
    Definition new_state_load
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ state_load ] =>
        ltac:(M.monadic
          (let state_load := M.alloc (| state_load |) in
          Value.StructRecord
            "revm_context_interface::journaled_state::Eip7702CodeLoad"
            [
              ("state_load", M.read (| state_load |));
              ("is_delegate_account_cold", Value.StructTuple "core::option::Option::None" [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_state_load :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "new_state_load" (new_state_load T).
    Admitted.
    Global Typeclasses Opaque new_state_load.
    
    (*
        pub fn new_not_delegated(data: T, is_cold: bool) -> Self {
            Self {
                state_load: StateLoad::new(data, is_cold),
                is_delegate_account_cold: None,
            }
        }
    *)
    Definition new_not_delegated
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ data; is_cold ] =>
        ltac:(M.monadic
          (let data := M.alloc (| data |) in
          let is_cold := M.alloc (| is_cold |) in
          Value.StructRecord
            "revm_context_interface::journaled_state::Eip7702CodeLoad"
            [
              ("state_load",
                M.call_closure (|
                  Ty.apply (Ty.path "revm_context_interface::journaled_state::StateLoad") [] [ T ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "revm_context_interface::journaled_state::StateLoad")
                      []
                      [ T ],
                    "new",
                    [],
                    []
                  |),
                  [ M.read (| data |); M.read (| is_cold |) ]
                |));
              ("is_delegate_account_cold", Value.StructTuple "core::option::Option::None" [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_not_delegated :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "new_not_delegated" (new_not_delegated T).
    Admitted.
    Global Typeclasses Opaque new_not_delegated.
    
    (*
        pub fn into_components(self) -> (T, Eip7702CodeLoad<()>) {
            let is_cold = self.is_cold;
            (
                self.state_load.data,
                Eip7702CodeLoad {
                    state_load: StateLoad::new((), is_cold),
                    is_delegate_account_cold: self.is_delegate_account_cold,
                },
            )
        }
    *)
    Definition into_components
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ is_cold : Ty.path "bool" :=
              M.copy (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "revm_context_interface::journaled_state::StateLoad")
                            []
                            [ T ]
                        ],
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.apply
                          (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
                          []
                          [ T ],
                        [],
                        [],
                        "deref",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, self |) ]
                    |)
                  |),
                  "revm_context_interface::journaled_state::StateLoad",
                  "is_cold"
                |)
              |) in
            M.alloc (|
              Value.Tuple
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "revm_context_interface::journaled_state::Eip7702CodeLoad",
                        "state_load"
                      |),
                      "revm_context_interface::journaled_state::StateLoad",
                      "data"
                    |)
                  |);
                  Value.StructRecord
                    "revm_context_interface::journaled_state::Eip7702CodeLoad"
                    [
                      ("state_load",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "revm_context_interface::journaled_state::StateLoad")
                            []
                            [ Ty.tuple [] ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "revm_context_interface::journaled_state::StateLoad")
                              []
                              [ Ty.tuple [] ],
                            "new",
                            [],
                            []
                          |),
                          [ Value.Tuple []; M.read (| is_cold |) ]
                        |));
                      ("is_delegate_account_cold",
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "revm_context_interface::journaled_state::Eip7702CodeLoad",
                            "is_delegate_account_cold"
                          |)
                        |))
                    ]
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_into_components :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "into_components" (into_components T).
    Admitted.
    Global Typeclasses Opaque into_components.
    
    (*
        pub fn set_delegate_load(&mut self, is_delegate_account_cold: bool) {
            self.is_delegate_account_cold = Some(is_delegate_account_cold);
        }
    *)
    Definition set_delegate_load
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self; is_delegate_account_cold ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let is_delegate_account_cold := M.alloc (| is_delegate_account_cold |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_context_interface::journaled_state::Eip7702CodeLoad",
                    "is_delegate_account_cold"
                  |),
                  Value.StructTuple
                    "core::option::Option::Some"
                    [ M.read (| is_delegate_account_cold |) ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_set_delegate_load :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "set_delegate_load" (set_delegate_load T).
    Admitted.
    Global Typeclasses Opaque set_delegate_load.
    
    (*
        pub fn new(state_load: StateLoad<T>, is_delegate_account_cold: bool) -> Self {
            Self {
                state_load,
                is_delegate_account_cold: Some(is_delegate_account_cold),
            }
        }
    *)
    Definition new (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ state_load; is_delegate_account_cold ] =>
        ltac:(M.monadic
          (let state_load := M.alloc (| state_load |) in
          let is_delegate_account_cold := M.alloc (| is_delegate_account_cold |) in
          Value.StructRecord
            "revm_context_interface::journaled_state::Eip7702CodeLoad"
            [
              ("state_load", M.read (| state_load |));
              ("is_delegate_account_cold",
                Value.StructTuple
                  "core::option::Option::Some"
                  [ M.read (| is_delegate_account_cold |) ])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "new" (new T).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_revm_context_interface_journaled_state_Eip7702CodeLoad_T.
  
  Axiom JournalDBError :
    forall (CTX : Ty.t),
    (Ty.apply (Ty.path "revm_context_interface::journaled_state::JournalDBError") [] [ CTX ]) =
      (Ty.associated_in_trait
        "revm_database_interface::Database"
        []
        []
        (Ty.associated_in_trait
          "revm_context_interface::journaled_state::Journal"
          []
          []
          (Ty.associated_in_trait
            "revm_context_interface::journaled_state::JournalGetter"
            []
            []
            CTX
            "Journal")
          "Database")
        "Error").
  
  (* Trait *)
  (* Empty module 'JournalGetter' *)
  
  Module Impl_revm_context_interface_journaled_state_JournalGetter_where_revm_context_interface_journaled_state_JournalGetter_T_for_ref_mut_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "&mut") [] [ T ].
    
    (*     type Journal = T::Journal; *)
    Definition _Journal (T : Ty.t) : Ty.t :=
      Ty.associated_in_trait
        "revm_context_interface::journaled_state::JournalGetter"
        []
        []
        T
        "Journal".
    
    (*
        fn journal(&mut self) -> &mut Self::Journal {
            T::journal( *self)
        }
    *)
    Definition journal (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.associated_in_trait
                          "revm_context_interface::journaled_state::JournalGetter"
                          []
                          []
                          T
                          "Journal"
                      ],
                    M.get_trait_method (|
                      "revm_context_interface::journaled_state::JournalGetter",
                      T,
                      [],
                      [],
                      "journal",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                      |)
                    ]
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn journal_ref(&self) -> &Self::Journal {
            T::journal_ref( *self)
        }
    *)
    Definition journal_ref (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.associated_in_trait
                      "revm_context_interface::journaled_state::JournalGetter"
                      []
                      []
                      T
                      "Journal"
                  ],
                M.get_trait_method (|
                  "revm_context_interface::journaled_state::JournalGetter",
                  T,
                  [],
                  [],
                  "journal_ref",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "revm_context_interface::journaled_state::JournalGetter"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *)
        [
          ("Journal", InstanceField.Ty (_Journal T));
          ("journal", InstanceField.Method (journal T));
          ("journal_ref", InstanceField.Method (journal_ref T))
        ].
  End Impl_revm_context_interface_journaled_state_JournalGetter_where_revm_context_interface_journaled_state_JournalGetter_T_for_ref_mut_T.
  
  Module Impl_revm_context_interface_journaled_state_JournalGetter_where_revm_context_interface_journaled_state_JournalGetter_T_for_alloc_boxed_Box_T_alloc_alloc_Global.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "alloc::boxed::Box") [] [ T; Ty.path "alloc::alloc::Global" ].
    
    (*     type Journal = T::Journal; *)
    Definition _Journal (T : Ty.t) : Ty.t :=
      Ty.associated_in_trait
        "revm_context_interface::journaled_state::JournalGetter"
        []
        []
        T
        "Journal".
    
    (*
        fn journal(&mut self) -> &mut Self::Journal {
            T::journal(self.as_mut())
        }
    *)
    Definition journal (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.associated_in_trait
                          "revm_context_interface::journaled_state::JournalGetter"
                          []
                          []
                          T
                          "Journal"
                      ],
                    M.get_trait_method (|
                      "revm_context_interface::journaled_state::JournalGetter",
                      T,
                      [],
                      [],
                      "journal",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&mut") [] [ T ],
                            M.get_trait_method (|
                              "core::convert::AsMut",
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ],
                              [],
                              [ T ],
                              "as_mut",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn journal_ref(&self) -> &Self::Journal {
            T::journal_ref(self.as_ref())
        }
    *)
    Definition journal_ref (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.associated_in_trait
                      "revm_context_interface::journaled_state::JournalGetter"
                      []
                      []
                      T
                      "Journal"
                  ],
                M.get_trait_method (|
                  "revm_context_interface::journaled_state::JournalGetter",
                  T,
                  [],
                  [],
                  "journal_ref",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::convert::AsRef",
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [ T ],
                          "as_ref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "revm_context_interface::journaled_state::JournalGetter"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *)
        [
          ("Journal", InstanceField.Ty (_Journal T));
          ("journal", InstanceField.Method (journal T));
          ("journal_ref", InstanceField.Method (journal_ref T))
        ].
  End Impl_revm_context_interface_journaled_state_JournalGetter_where_revm_context_interface_journaled_state_JournalGetter_T_for_alloc_boxed_Box_T_alloc_alloc_Global.
End journaled_state.
