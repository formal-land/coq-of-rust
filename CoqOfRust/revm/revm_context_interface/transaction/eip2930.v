(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module transaction.
  Module eip2930.
    (* Trait *)
    (* Empty module 'Eip2930Tx' *)
    
    Module underscore.
      Module Impl_revm_context_interface_transaction_eip2930_Eip2930Tx_where_revm_context_interface_transaction_eip2930_Eip2930Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_common_CommonTxFields_ref__T_for_ref__T.
        Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "&") [] [ T ].
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition _AccessList (T : Ty.t) : Ty.t :=
          Ty.associated_in_trait
            "revm_context_interface::transaction::eip2930::Eip2930Tx"
            []
            []
            T
            "AccessList".
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition chain_id (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "u64",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip2930::Eip2930Tx",
                  T,
                  [],
                  [],
                  "chain_id",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition gas_price (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "u128",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip2930::Eip2930Tx",
                  T,
                  [],
                  [],
                  "gas_price",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition kind (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "alloy_primitives::common::TxKind",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip2930::Eip2930Tx",
                  T,
                  [],
                  [],
                  "kind",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition access_list
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.associated_in_trait
                          "revm_context_interface::transaction::eip2930::Eip2930Tx"
                          []
                          []
                          T
                          "AccessList"
                      ],
                    M.get_trait_method (|
                      "revm_context_interface::transaction::eip2930::Eip2930Tx",
                      T,
                      [],
                      [],
                      "access_list",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "revm_context_interface::transaction::eip2930::Eip2930Tx"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *)
            [
              ("AccessList", InstanceField.Ty (_AccessList T));
              ("chain_id", InstanceField.Method (chain_id T));
              ("gas_price", InstanceField.Method (gas_price T));
              ("kind", InstanceField.Method (kind T));
              ("access_list", InstanceField.Method (access_list T))
            ].
      End Impl_revm_context_interface_transaction_eip2930_Eip2930Tx_where_revm_context_interface_transaction_eip2930_Eip2930Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_common_CommonTxFields_ref__T_for_ref__T.
      Module Impl_revm_context_interface_transaction_eip2930_Eip2930Tx_where_revm_context_interface_transaction_eip2930_Eip2930Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_common_CommonTxFields_alloc_boxed_Box_T_alloc_alloc_Global_for_alloc_boxed_Box_T_alloc_alloc_Global.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "alloc::boxed::Box") [] [ T; Ty.path "alloc::alloc::Global" ].
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition _AccessList (T : Ty.t) : Ty.t :=
          Ty.associated_in_trait
            "revm_context_interface::transaction::eip2930::Eip2930Tx"
            []
            []
            T
            "AccessList".
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition chain_id (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "u64",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip2930::Eip2930Tx",
                  T,
                  [],
                  [],
                  "chain_id",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition gas_price (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "u128",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip2930::Eip2930Tx",
                  T,
                  [],
                  [],
                  "gas_price",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition kind (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "alloy_primitives::common::TxKind",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip2930::Eip2930Tx",
                  T,
                  [],
                  [],
                  "kind",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition access_list
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.associated_in_trait
                          "revm_context_interface::transaction::eip2930::Eip2930Tx"
                          []
                          []
                          T
                          "AccessList"
                      ],
                    M.get_trait_method (|
                      "revm_context_interface::transaction::eip2930::Eip2930Tx",
                      T,
                      [],
                      [],
                      "access_list",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "revm_context_interface::transaction::eip2930::Eip2930Tx"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *)
            [
              ("AccessList", InstanceField.Ty (_AccessList T));
              ("chain_id", InstanceField.Method (chain_id T));
              ("gas_price", InstanceField.Method (gas_price T));
              ("kind", InstanceField.Method (kind T));
              ("access_list", InstanceField.Method (access_list T))
            ].
      End Impl_revm_context_interface_transaction_eip2930_Eip2930Tx_where_revm_context_interface_transaction_eip2930_Eip2930Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_common_CommonTxFields_alloc_boxed_Box_T_alloc_alloc_Global_for_alloc_boxed_Box_T_alloc_alloc_Global.
      Module Impl_revm_context_interface_transaction_eip2930_Eip2930Tx_where_revm_context_interface_transaction_eip2930_Eip2930Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_common_CommonTxFields_alloc_sync_Arc_T_alloc_alloc_Global_for_alloc_sync_Arc_T_alloc_alloc_Global.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "alloc::sync::Arc") [] [ T; Ty.path "alloc::alloc::Global" ].
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition _AccessList (T : Ty.t) : Ty.t :=
          Ty.associated_in_trait
            "revm_context_interface::transaction::eip2930::Eip2930Tx"
            []
            []
            T
            "AccessList".
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition chain_id (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "u64",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip2930::Eip2930Tx",
                  T,
                  [],
                  [],
                  "chain_id",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition gas_price (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "u128",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip2930::Eip2930Tx",
                  T,
                  [],
                  [],
                  "gas_price",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition kind (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "alloy_primitives::common::TxKind",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip2930::Eip2930Tx",
                  T,
                  [],
                  [],
                  "kind",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition access_list
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.associated_in_trait
                          "revm_context_interface::transaction::eip2930::Eip2930Tx"
                          []
                          []
                          T
                          "AccessList"
                      ],
                    M.get_trait_method (|
                      "revm_context_interface::transaction::eip2930::Eip2930Tx",
                      T,
                      [],
                      [],
                      "access_list",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ T ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "revm_context_interface::transaction::eip2930::Eip2930Tx"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *)
            [
              ("AccessList", InstanceField.Ty (_AccessList T));
              ("chain_id", InstanceField.Method (chain_id T));
              ("gas_price", InstanceField.Method (gas_price T));
              ("kind", InstanceField.Method (kind T));
              ("access_list", InstanceField.Method (access_list T))
            ].
      End Impl_revm_context_interface_transaction_eip2930_Eip2930Tx_where_revm_context_interface_transaction_eip2930_Eip2930Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_common_CommonTxFields_alloc_sync_Arc_T_alloc_alloc_Global_for_alloc_sync_Arc_T_alloc_alloc_Global.
      Module Impl_revm_context_interface_transaction_eip2930_Eip2930Tx_where_revm_context_interface_transaction_eip2930_Eip2930Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_common_CommonTxFields_alloc_rc_Rc_T_alloc_alloc_Global_for_alloc_rc_Rc_T_alloc_alloc_Global.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "alloc::rc::Rc") [] [ T; Ty.path "alloc::alloc::Global" ].
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition _AccessList (T : Ty.t) : Ty.t :=
          Ty.associated_in_trait
            "revm_context_interface::transaction::eip2930::Eip2930Tx"
            []
            []
            T
            "AccessList".
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition chain_id (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "u64",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip2930::Eip2930Tx",
                  T,
                  [],
                  [],
                  "chain_id",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::rc::Rc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition gas_price (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "u128",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip2930::Eip2930Tx",
                  T,
                  [],
                  [],
                  "gas_price",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::rc::Rc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition kind (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "alloy_primitives::common::TxKind",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip2930::Eip2930Tx",
                  T,
                  [],
                  [],
                  "kind",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::rc::Rc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition access_list
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.associated_in_trait
                          "revm_context_interface::transaction::eip2930::Eip2930Tx"
                          []
                          []
                          T
                          "AccessList"
                      ],
                    M.get_trait_method (|
                      "revm_context_interface::transaction::eip2930::Eip2930Tx",
                      T,
                      [],
                      [],
                      "access_list",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ T ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "revm_context_interface::transaction::eip2930::Eip2930Tx"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *)
            [
              ("AccessList", InstanceField.Ty (_AccessList T));
              ("chain_id", InstanceField.Method (chain_id T));
              ("gas_price", InstanceField.Method (gas_price T));
              ("kind", InstanceField.Method (kind T));
              ("access_list", InstanceField.Method (access_list T))
            ].
      End Impl_revm_context_interface_transaction_eip2930_Eip2930Tx_where_revm_context_interface_transaction_eip2930_Eip2930Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_common_CommonTxFields_alloc_rc_Rc_T_alloc_alloc_Global_for_alloc_rc_Rc_T_alloc_alloc_Global.
    End underscore.
    
    
    
  End eip2930.
End transaction.
