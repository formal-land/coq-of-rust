(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module transaction.
  Module eip7702.
    (* Trait *)
    (* Empty module 'Eip7702Tx' *)
    
    Module underscore.
      Module Impl_revm_context_interface_transaction_eip7702_Eip7702Tx_where_revm_context_interface_transaction_eip7702_Eip7702Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_eip1559_Eip1559Tx_ref__T_for_ref__T.
        Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "&") [] [ T ].
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition destination
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "alloy_primitives::bits::address::Address",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Eip7702Tx",
                  T,
                  [],
                  [],
                  "destination",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition authorization_list_len
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Eip7702Tx",
                  T,
                  [],
                  [],
                  "authorization_list_len",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition authorization_list_iter
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.associated_in_trait
                  "revm_context_interface::transaction::eip7702::Eip7702Tx"
                  []
                  []
                  T
                  "{{synthetic}}",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Eip7702Tx",
                  T,
                  [],
                  [],
                  "authorization_list_iter",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "revm_context_interface::transaction::eip7702::Eip7702Tx"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *)
            [
              ("destination", InstanceField.Method (destination T));
              ("authorization_list_len", InstanceField.Method (authorization_list_len T));
              ("authorization_list_iter", InstanceField.Method (authorization_list_iter T))
            ].
      End Impl_revm_context_interface_transaction_eip7702_Eip7702Tx_where_revm_context_interface_transaction_eip7702_Eip7702Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_eip1559_Eip1559Tx_ref__T_for_ref__T.
      Module Impl_revm_context_interface_transaction_eip7702_Eip7702Tx_where_revm_context_interface_transaction_eip7702_Eip7702Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_eip1559_Eip1559Tx_alloc_boxed_Box_T_alloc_alloc_Global_for_alloc_boxed_Box_T_alloc_alloc_Global.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "alloc::boxed::Box") [] [ T; Ty.path "alloc::alloc::Global" ].
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition destination
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "alloy_primitives::bits::address::Address",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Eip7702Tx",
                  T,
                  [],
                  [],
                  "destination",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition authorization_list_len
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Eip7702Tx",
                  T,
                  [],
                  [],
                  "authorization_list_len",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition authorization_list_iter
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.associated_in_trait
                  "revm_context_interface::transaction::eip7702::Eip7702Tx"
                  []
                  []
                  T
                  "{{synthetic}}",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Eip7702Tx",
                  T,
                  [],
                  [],
                  "authorization_list_iter",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "revm_context_interface::transaction::eip7702::Eip7702Tx"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *)
            [
              ("destination", InstanceField.Method (destination T));
              ("authorization_list_len", InstanceField.Method (authorization_list_len T));
              ("authorization_list_iter", InstanceField.Method (authorization_list_iter T))
            ].
      End Impl_revm_context_interface_transaction_eip7702_Eip7702Tx_where_revm_context_interface_transaction_eip7702_Eip7702Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_eip1559_Eip1559Tx_alloc_boxed_Box_T_alloc_alloc_Global_for_alloc_boxed_Box_T_alloc_alloc_Global.
      Module Impl_revm_context_interface_transaction_eip7702_Eip7702Tx_where_revm_context_interface_transaction_eip7702_Eip7702Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_eip1559_Eip1559Tx_alloc_sync_Arc_T_alloc_alloc_Global_for_alloc_sync_Arc_T_alloc_alloc_Global.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "alloc::sync::Arc") [] [ T; Ty.path "alloc::alloc::Global" ].
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition destination
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "alloy_primitives::bits::address::Address",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Eip7702Tx",
                  T,
                  [],
                  [],
                  "destination",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition authorization_list_len
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Eip7702Tx",
                  T,
                  [],
                  [],
                  "authorization_list_len",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition authorization_list_iter
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.associated_in_trait
                  "revm_context_interface::transaction::eip7702::Eip7702Tx"
                  []
                  []
                  T
                  "{{synthetic}}",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Eip7702Tx",
                  T,
                  [],
                  [],
                  "authorization_list_iter",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "revm_context_interface::transaction::eip7702::Eip7702Tx"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *)
            [
              ("destination", InstanceField.Method (destination T));
              ("authorization_list_len", InstanceField.Method (authorization_list_len T));
              ("authorization_list_iter", InstanceField.Method (authorization_list_iter T))
            ].
      End Impl_revm_context_interface_transaction_eip7702_Eip7702Tx_where_revm_context_interface_transaction_eip7702_Eip7702Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_eip1559_Eip1559Tx_alloc_sync_Arc_T_alloc_alloc_Global_for_alloc_sync_Arc_T_alloc_alloc_Global.
      Module Impl_revm_context_interface_transaction_eip7702_Eip7702Tx_where_revm_context_interface_transaction_eip7702_Eip7702Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_eip1559_Eip1559Tx_alloc_rc_Rc_T_alloc_alloc_Global_for_alloc_rc_Rc_T_alloc_alloc_Global.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "alloc::rc::Rc") [] [ T; Ty.path "alloc::alloc::Global" ].
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition destination
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "alloy_primitives::bits::address::Address",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Eip7702Tx",
                  T,
                  [],
                  [],
                  "destination",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::rc::Rc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition authorization_list_len
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Eip7702Tx",
                  T,
                  [],
                  [],
                  "authorization_list_len",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::rc::Rc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition authorization_list_iter
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.associated_in_trait
                  "revm_context_interface::transaction::eip7702::Eip7702Tx"
                  []
                  []
                  T
                  "{{synthetic}}",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Eip7702Tx",
                  T,
                  [],
                  [],
                  "authorization_list_iter",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::rc::Rc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "revm_context_interface::transaction::eip7702::Eip7702Tx"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *)
            [
              ("destination", InstanceField.Method (destination T));
              ("authorization_list_len", InstanceField.Method (authorization_list_len T));
              ("authorization_list_iter", InstanceField.Method (authorization_list_iter T))
            ].
      End Impl_revm_context_interface_transaction_eip7702_Eip7702Tx_where_revm_context_interface_transaction_eip7702_Eip7702Tx_T_where_core_marker_Sized_T_where_revm_context_interface_transaction_eip1559_Eip1559Tx_alloc_rc_Rc_T_alloc_alloc_Global_for_alloc_rc_Rc_T_alloc_alloc_Global.
      Module Impl_revm_context_interface_transaction_eip7702_Authorization_where_revm_context_interface_transaction_eip7702_Authorization_T_where_core_marker_Sized_T_where_core_clone_Clone_ref__T_for_ref__T.
        Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "&") [] [ T ].
        
        (* #[auto_impl(&, Arc)] *)
        Definition authority (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.path "alloy_primitives::bits::address::Address" ],
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Authorization",
                  T,
                  [],
                  [],
                  "authority",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Arc)] *)
        Definition chain_id (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "u64",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Authorization",
                  T,
                  [],
                  [],
                  "chain_id",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Arc)] *)
        Definition nonce (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "u64",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Authorization",
                  T,
                  [],
                  [],
                  "nonce",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Arc)] *)
        Definition address (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "alloy_primitives::bits::address::Address",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Authorization",
                  T,
                  [],
                  [],
                  "address",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Arc)] *)
        Definition is_invalid
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Authorization",
                  T,
                  [],
                  [],
                  "is_invalid",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "revm_context_interface::transaction::eip7702::Authorization"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *)
            [
              ("authority", InstanceField.Method (authority T));
              ("chain_id", InstanceField.Method (chain_id T));
              ("nonce", InstanceField.Method (nonce T));
              ("address", InstanceField.Method (address T));
              ("is_invalid", InstanceField.Method (is_invalid T))
            ].
      End Impl_revm_context_interface_transaction_eip7702_Authorization_where_revm_context_interface_transaction_eip7702_Authorization_T_where_core_marker_Sized_T_where_core_clone_Clone_ref__T_for_ref__T.
      Module Impl_revm_context_interface_transaction_eip7702_Authorization_where_revm_context_interface_transaction_eip7702_Authorization_T_where_core_marker_Sized_T_where_core_clone_Clone_alloc_sync_Arc_T_alloc_alloc_Global_for_alloc_sync_Arc_T_alloc_alloc_Global.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "alloc::sync::Arc") [] [ T; Ty.path "alloc::alloc::Global" ].
        
        (* #[auto_impl(&, Arc)] *)
        Definition authority (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.path "alloy_primitives::bits::address::Address" ],
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Authorization",
                  T,
                  [],
                  [],
                  "authority",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Arc)] *)
        Definition chain_id (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "u64",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Authorization",
                  T,
                  [],
                  [],
                  "chain_id",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Arc)] *)
        Definition nonce (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "u64",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Authorization",
                  T,
                  [],
                  [],
                  "nonce",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Arc)] *)
        Definition address (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "alloy_primitives::bits::address::Address",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Authorization",
                  T,
                  [],
                  [],
                  "address",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Arc)] *)
        Definition is_invalid
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "revm_context_interface::transaction::eip7702::Authorization",
                  T,
                  [],
                  [],
                  "is_invalid",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ T ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "revm_context_interface::transaction::eip7702::Authorization"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *)
            [
              ("authority", InstanceField.Method (authority T));
              ("chain_id", InstanceField.Method (chain_id T));
              ("nonce", InstanceField.Method (nonce T));
              ("address", InstanceField.Method (address T));
              ("is_invalid", InstanceField.Method (is_invalid T))
            ].
      End Impl_revm_context_interface_transaction_eip7702_Authorization_where_revm_context_interface_transaction_eip7702_Authorization_T_where_core_marker_Sized_T_where_core_clone_Clone_alloc_sync_Arc_T_alloc_alloc_Global_for_alloc_sync_Arc_T_alloc_alloc_Global.
    End underscore.
    
    
    
    
    (* Trait *)
    (* Empty module 'Authorization' *)
    
    
    
    Module Impl_revm_context_interface_transaction_eip7702_Authorization_for_revm_specification_eip7702_recovered_authorization_RecoveredAuthorization.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization".
      
      (*
          fn authority(&self) -> Option<Address> {
              self.authority()
          }
      *)
      Definition authority (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.path "alloy_primitives::bits::address::Address" ],
              M.get_associated_function (|
                Ty.path
                  "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization",
                "authority",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn chain_id(&self) -> u64 {
              // TODO : `chain_id` is set as u64 in newest EIP-7702 spec
              self.inner().chain_id().try_into().unwrap()
          }
      *)
      Definition chain_id (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u64",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "u64";
                    Ty.apply (Ty.path "ruint::from::FromUintError") [] [ Ty.path "u64" ]
                  ],
                "unwrap",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.path "u64";
                      Ty.apply (Ty.path "ruint::from::FromUintError") [] [ Ty.path "u64" ]
                    ],
                  M.get_trait_method (|
                    "core::convert::TryInto",
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      [],
                    [],
                    [ Ty.path "u64" ],
                    "try_into",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "ruint::Uint")
                        [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                        [],
                      M.get_associated_function (|
                        Ty.path "alloy_eip7702::auth_list::Authorization",
                        "chain_id",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "alloy_eip7702::auth_list::Authorization" ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.path "alloy_eip7702::auth_list::SignedAuthorization",
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "alloy_eip7702::auth_list::SignedAuthorization" ],
                                      M.get_associated_function (|
                                        Ty.path
                                          "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization",
                                        "inner",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn nonce(&self) -> u64 {
              self.inner().nonce()
          }
      *)
      Definition nonce (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u64",
              M.get_associated_function (|
                Ty.path "alloy_eip7702::auth_list::Authorization",
                "nonce",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.path "alloy_eip7702::auth_list::Authorization" ],
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.path "alloy_eip7702::auth_list::SignedAuthorization",
                        [],
                        [],
                        "deref",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "alloy_eip7702::auth_list::SignedAuthorization" ],
                              M.get_associated_function (|
                                Ty.path
                                  "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization",
                                "inner",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn address(&self) -> Address {
              *self.inner().address()
          }
      *)
      Definition address (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.path "alloy_primitives::bits::address::Address" ],
                  M.get_associated_function (|
                    Ty.path "alloy_eip7702::auth_list::Authorization",
                    "address",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "alloy_eip7702::auth_list::Authorization" ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.path "alloy_eip7702::auth_list::SignedAuthorization",
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "alloy_eip7702::auth_list::SignedAuthorization" ],
                                  M.get_associated_function (|
                                    Ty.path
                                      "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization",
                                    "inner",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn is_invalid(&self) -> bool {
              use specification::{eip2::SECP256K1N_HALF, eip7702::Parity};
      
              // Check y_parity, Parity::Parity means that it was 0 or 1.
              if !matches!(self.inner().signature().v(), Parity::Parity(_)) {
                  return true;
              }
      
              // Check s-value
              if self.inner().signature().s() > SECP256K1N_HALF {
                  return true;
              }
      
              false
          }
      *)
      Definition is_invalid (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "bool") (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.not (|
                                    M.read (|
                                      M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "bool" ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "alloy_primitives::signature::parity::Parity",
                                            M.get_associated_function (|
                                              Ty.path "alloy_primitives::signature::sig::Signature",
                                              "v",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.path
                                                          "alloy_primitives::signature::sig::Signature"
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "alloy_eip7702::auth_list::SignedAuthorization",
                                                      "signature",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "alloy_eip7702::auth_list::SignedAuthorization"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization",
                                                              "inner",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| self |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "alloy_primitives::signature::parity::Parity::Parity",
                                                  0
                                                |) in
                                              M.alloc (| Value.Bool true |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
                                        ]
                                      |)
                                    |)
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (| M.read (| M.return_ (| Value.Bool true |) |) |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      ],
                                      "gt",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            M.get_associated_function (|
                                              Ty.path "alloy_primitives::signature::sig::Signature",
                                              "s",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.path
                                                          "alloy_primitives::signature::sig::Signature"
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "alloy_eip7702::auth_list::SignedAuthorization",
                                                      "signature",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "alloy_eip7702::auth_list::SignedAuthorization"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization",
                                                              "inner",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| self |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "revm_specification::eip2::SECP256K1N_HALF",
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            []
                                        |)
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (| M.read (| M.return_ (| Value.Bool true |) |) |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.alloc (| Value.Bool false |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "revm_context_interface::transaction::eip7702::Authorization"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [
            ("authority", InstanceField.Method authority);
            ("chain_id", InstanceField.Method chain_id);
            ("nonce", InstanceField.Method nonce);
            ("address", InstanceField.Method address);
            ("is_invalid", InstanceField.Method is_invalid)
          ].
    End Impl_revm_context_interface_transaction_eip7702_Authorization_for_revm_specification_eip7702_recovered_authorization_RecoveredAuthorization.
  End eip7702.
End transaction.
