(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module gas.
  Module calc.
    (*
    pub fn sstore_refund(spec_id: SpecId, vals: &SStoreResult) -> i64 {
        if spec_id.is_enabled_in(SpecId::ISTANBUL) {
            // EIP-3529: Reduction in refunds
            let sstore_clears_schedule = if spec_id.is_enabled_in(SpecId::LONDON) {
                (SSTORE_RESET - COLD_SLOAD_COST + ACCESS_LIST_STORAGE_KEY) as i64
            } else {
                REFUND_SSTORE_CLEARS
            };
            if vals.is_new_eq_present() {
                0
            } else {
                if vals.is_original_eq_present() && vals.is_new_zero() {
                    sstore_clears_schedule
                } else {
                    let mut refund = 0;
    
                    if !vals.is_original_zero() {
                        if vals.is_present_zero() {
                            refund -= sstore_clears_schedule;
                        } else if vals.is_new_zero() {
                            refund += sstore_clears_schedule;
                        }
                    }
    
                    if vals.is_original_eq_new() {
                        let (gas_sstore_reset, gas_sload) = if spec_id.is_enabled_in(SpecId::BERLIN) {
                            (SSTORE_RESET - COLD_SLOAD_COST, WARM_STORAGE_READ_COST)
                        } else {
                            (SSTORE_RESET, sload_cost(spec_id, false))
                        };
                        if vals.is_original_zero() {
                            refund += (SSTORE_SET - gas_sload) as i64;
                        } else {
                            refund += (gas_sstore_reset - gas_sload) as i64;
                        }
                    }
    
                    refund
                }
            }
        } else {
            if !vals.is_present_zero() && vals.is_new_zero() {
                REFUND_SSTORE_CLEARS
            } else {
                0
            }
        }
    }
    *)
    Definition sstore_refund (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ spec_id; vals ] =>
        ltac:(M.monadic
          (let spec_id := M.alloc (| spec_id |) in
          let vals := M.alloc (| vals |) in
          M.read (|
            M.match_operator (|
              Some (Ty.path "i64"),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_associated_function (|
                              Ty.path "revm_specification::hardfork::SpecId",
                              "is_enabled_in",
                              [],
                              []
                            |),
                            [
                              M.read (| spec_id |);
                              Value.StructTuple "revm_specification::hardfork::SpecId::ISTANBUL" []
                            ]
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    let~ sstore_clears_schedule : Ty.path "i64" :=
                      M.copy (|
                        M.match_operator (|
                          Some (Ty.path "i64"),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.path "revm_specification::hardfork::SpecId",
                                          "is_enabled_in",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (| spec_id |);
                                          Value.StructTuple
                                            "revm_specification::hardfork::SpecId::LONDON"
                                            []
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.cast
                                    (Ty.path "i64")
                                    (BinOp.Wrap.add (|
                                      BinOp.Wrap.sub (|
                                        M.read (|
                                          get_constant (|
                                            "revm_interpreter::gas::constants::SSTORE_RESET",
                                            Ty.path "u64"
                                          |)
                                        |),
                                        M.read (|
                                          get_constant (|
                                            "revm_interpreter::gas::constants::COLD_SLOAD_COST",
                                            Ty.path "u64"
                                          |)
                                        |)
                                      |),
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::ACCESS_LIST_STORAGE_KEY",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    |))
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (get_constant (|
                                  "revm_interpreter::gas::constants::REFUND_SSTORE_CLEARS",
                                  Ty.path "i64"
                                |)))
                          ]
                        |)
                      |) in
                    M.match_operator (|
                      Some (Ty.path "i64"),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_context_interface::host::SStoreResult",
                                      "is_new_eq_present",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| vals |) |)
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (| Value.Integer IntegerKind.I64 0 |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Some (Ty.path "i64"),
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          LogicalOp.and (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.path
                                                  "revm_context_interface::host::SStoreResult",
                                                "is_original_eq_present",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| vals |) |)
                                                |)
                                              ]
                                            |),
                                            ltac:(M.monadic
                                              (M.call_closure (|
                                                Ty.path "bool",
                                                M.get_associated_function (|
                                                  Ty.path
                                                    "revm_context_interface::host::SStoreResult",
                                                  "is_new_zero",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| vals |) |)
                                                  |)
                                                ]
                                              |)))
                                          |)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    sstore_clears_schedule));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let~ refund : Ty.path "i64" :=
                                      M.alloc (| Value.Integer IntegerKind.I64 0 |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Some (Ty.tuple []),
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    UnOp.not (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "revm_context_interface::host::SStoreResult",
                                                          "is_original_zero",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| vals |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.match_operator (|
                                                Some (Ty.tuple []),
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "revm_context_interface::host::SStoreResult",
                                                                "is_present_zero",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| vals |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      let~ _ : Ty.tuple [] :=
                                                        M.alloc (|
                                                          let β := refund in
                                                          M.write (|
                                                            β,
                                                            BinOp.Wrap.sub (|
                                                              M.read (| β |),
                                                              M.read (| sstore_clears_schedule |)
                                                            |)
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.match_operator (|
                                                        Some (Ty.tuple []),
                                                        M.alloc (| Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "revm_context_interface::host::SStoreResult",
                                                                        "is_new_zero",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| vals |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                M.is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              let~ _ : Ty.tuple [] :=
                                                                M.alloc (|
                                                                  let β := refund in
                                                                  M.write (|
                                                                    β,
                                                                    BinOp.Wrap.add (|
                                                                      M.read (| β |),
                                                                      M.read (|
                                                                        sstore_clears_schedule
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.alloc (| Value.Tuple [] |)))
                                                        ]
                                                      |)))
                                                ]
                                              |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Some (Ty.tuple []),
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "revm_context_interface::host::SStoreResult",
                                                        "is_original_eq_new",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| vals |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.match_operator (|
                                                None,
                                                M.match_operator (|
                                                  Some (Ty.tuple [ Ty.path "u64"; Ty.path "u64" ]),
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "revm_specification::hardfork::SpecId",
                                                                  "is_enabled_in",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| spec_id |);
                                                                  Value.StructTuple
                                                                    "revm_specification::hardfork::SpecId::BERLIN"
                                                                    []
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.alloc (|
                                                          Value.Tuple
                                                            [
                                                              BinOp.Wrap.sub (|
                                                                M.read (|
                                                                  get_constant (|
                                                                    "revm_interpreter::gas::constants::SSTORE_RESET",
                                                                    Ty.path "u64"
                                                                  |)
                                                                |),
                                                                M.read (|
                                                                  get_constant (|
                                                                    "revm_interpreter::gas::constants::COLD_SLOAD_COST",
                                                                    Ty.path "u64"
                                                                  |)
                                                                |)
                                                              |);
                                                              M.read (|
                                                                get_constant (|
                                                                  "revm_interpreter::gas::constants::WARM_STORAGE_READ_COST",
                                                                  Ty.path "u64"
                                                                |)
                                                              |)
                                                            ]
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          Value.Tuple
                                                            [
                                                              M.read (|
                                                                get_constant (|
                                                                  "revm_interpreter::gas::constants::SSTORE_RESET",
                                                                  Ty.path "u64"
                                                                |)
                                                              |);
                                                              M.call_closure (|
                                                                Ty.path "u64",
                                                                M.get_function (|
                                                                  "revm_interpreter::gas::calc::sload_cost",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| spec_id |);
                                                                  Value.Bool false
                                                                ]
                                                              |)
                                                            ]
                                                        |)))
                                                  ]
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                      let γ0_1 :=
                                                        M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                      let gas_sstore_reset := M.copy (| γ0_0 |) in
                                                      let gas_sload := M.copy (| γ0_1 |) in
                                                      M.match_operator (|
                                                        Some (Ty.tuple []),
                                                        M.alloc (| Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "revm_context_interface::host::SStoreResult",
                                                                        "is_original_zero",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| vals |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                M.is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              let~ _ : Ty.tuple [] :=
                                                                M.alloc (|
                                                                  let β := refund in
                                                                  M.write (|
                                                                    β,
                                                                    BinOp.Wrap.add (|
                                                                      M.read (| β |),
                                                                      M.cast
                                                                        (Ty.path "i64")
                                                                        (BinOp.Wrap.sub (|
                                                                          M.read (|
                                                                            get_constant (|
                                                                              "revm_interpreter::gas::constants::SSTORE_SET",
                                                                              Ty.path "u64"
                                                                            |)
                                                                          |),
                                                                          M.read (| gas_sload |)
                                                                        |))
                                                                    |)
                                                                  |)
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let~ _ : Ty.tuple [] :=
                                                                M.alloc (|
                                                                  let β := refund in
                                                                  M.write (|
                                                                    β,
                                                                    BinOp.Wrap.add (|
                                                                      M.read (| β |),
                                                                      M.cast
                                                                        (Ty.path "i64")
                                                                        (BinOp.Wrap.sub (|
                                                                          M.read (|
                                                                            gas_sstore_reset
                                                                          |),
                                                                          M.read (| gas_sload |)
                                                                        |))
                                                                    |)
                                                                  |)
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                        ]
                                                      |)))
                                                ]
                                              |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    refund))
                              ]
                            |)))
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Some (Ty.path "i64"),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  LogicalOp.and (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.path "revm_context_interface::host::SStoreResult",
                                          "is_present_zero",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| vals |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.path "revm_context_interface::host::SStoreResult",
                                          "is_new_zero",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| vals |) |)
                                          |)
                                        ]
                                      |)))
                                  |)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            get_constant (|
                              "revm_interpreter::gas::constants::REFUND_SSTORE_CLEARS",
                              Ty.path "i64"
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.I64 0 |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_sstore_refund :
      M.IsFunction.C "revm_interpreter::gas::calc::sstore_refund" sstore_refund.
    Admitted.
    Global Typeclasses Opaque sstore_refund.
    
    (*
    pub const fn create2_cost(len: usize) -> Option<u64> {
        CREATE.checked_add(tri!(cost_per_word(len, KECCAK256WORD)))
    }
    *)
    Definition create2_cost (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ len ] =>
        ltac:(M.monadic
          (let len := M.alloc (| len |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                M.get_associated_function (| Ty.path "u64", "checked_add", [], [] |),
                [
                  M.read (|
                    get_constant (| "revm_interpreter::gas::constants::CREATE", Ty.path "u64" |)
                  |);
                  M.read (|
                    M.match_operator (|
                      Some (Ty.path "u64"),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                          M.get_function (| "revm_interpreter::gas::calc::cost_per_word", [], [] |),
                          [
                            M.read (| len |);
                            M.read (|
                              get_constant (|
                                "revm_interpreter::gas::constants::KECCAK256WORD",
                                Ty.path "u64"
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let v := M.copy (| γ0_0 |) in
                            v));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_create2_cost :
      M.IsFunction.C "revm_interpreter::gas::calc::create2_cost" create2_cost.
    Admitted.
    Global Typeclasses Opaque create2_cost.
    
    (*
    const fn log2floor(value: U256) -> u64 {
        let mut l: u64 = 256;
        let mut i = 3;
        loop {
            if value.as_limbs()[i] == 0u64 {
                l -= 64;
            } else {
                l -= value.as_limbs()[i].leading_zeros() as u64;
                if l == 0 {
                    return l;
                } else {
                    return l - 1;
                }
            }
            if i == 0 {
                break;
            }
            i -= 1;
        }
        l
    }
    *)
    Definition log2floor (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ l : Ty.path "u64" := M.alloc (| Value.Integer IntegerKind.U64 256 |) in
                let~ i : Ty.path "usize" := M.alloc (| Value.Integer IntegerKind.Usize 3 |) in
                let~ _ : Ty.tuple [] :=
                  M.loop (|
                    Ty.tuple [],
                    ltac:(M.monadic
                      (let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      BinOp.eq (|
                                        M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 4 ]
                                                      [ Ty.path "u64" ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    [],
                                                  "as_limbs",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, value |) ]
                                              |)
                                            |),
                                            M.read (| i |)
                                          |)
                                        |),
                                        Value.Integer IntegerKind.U64 0
                                      |)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    let β := l in
                                    M.write (|
                                      β,
                                      BinOp.Wrap.sub (|
                                        M.read (| β |),
                                        Value.Integer IntegerKind.U64 64
                                      |)
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    let β := l in
                                    M.write (|
                                      β,
                                      BinOp.Wrap.sub (|
                                        M.read (| β |),
                                        M.cast
                                          (Ty.path "u64")
                                          (M.call_closure (|
                                            Ty.path "u32",
                                            M.get_associated_function (|
                                              Ty.path "u64",
                                              "leading_zeros",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 4 ]
                                                            [ Ty.path "u64" ]
                                                        ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "ruint::Uint")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          [],
                                                        "as_limbs",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, value |) ]
                                                    |)
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |)
                                            ]
                                          |))
                                      |)
                                    |)
                                  |) in
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              BinOp.eq (|
                                                M.read (| l |),
                                                Value.Integer IntegerKind.U64 0
                                              |)
                                            |)) in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (| M.return_ (| M.read (| l |) |) |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                BinOp.Wrap.sub (|
                                                  M.read (| l |),
                                                  Value.Integer IntegerKind.U64 1
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)))
                                  ]
                                |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      BinOp.eq (|
                                        M.read (| i |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          let β := i in
                          M.write (|
                            β,
                            BinOp.Wrap.sub (| M.read (| β |), Value.Integer IntegerKind.Usize 1 |)
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)))
                  |) in
                l
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_log2floor :
      M.IsFunction.C "revm_interpreter::gas::calc::log2floor" log2floor.
    Admitted.
    Global Typeclasses Opaque log2floor.
    
    (*
    pub fn exp_cost(spec_id: SpecId, power: U256) -> Option<u64> {
        if power.is_zero() {
            Some(EXP)
        } else {
            // EIP-160: EXP cost increase
            let gas_byte = U256::from(if spec_id.is_enabled_in(SpecId::SPURIOUS_DRAGON) {
                50
            } else {
                10
            });
            let gas = U256::from(EXP)
                .checked_add(gas_byte.checked_mul(U256::from(log2floor(power) / 8 + 1))?)?;
    
            u64::try_from(gas).ok()
        }
    }
    *)
    Definition exp_cost (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ spec_id; power ] =>
        ltac:(M.monadic
          (let spec_id := M.alloc (| spec_id |) in
          let power := M.alloc (| power |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  Some (Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ]),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  "is_zero",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, power |) ]
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::option::Option::Some"
                            [
                              M.read (|
                                get_constant (|
                                  "revm_interpreter::gas::constants::EXP",
                                  Ty.path "u64"
                                |)
                              |)
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let~ gas_byte :
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                "from",
                                [],
                                [ Ty.path "i32" ]
                              |),
                              [
                                M.read (|
                                  M.match_operator (|
                                    Some (Ty.path "i32"),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.path "revm_specification::hardfork::SpecId",
                                                    "is_enabled_in",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (| spec_id |);
                                                    Value.StructTuple
                                                      "revm_specification::hardfork::SpecId::SPURIOUS_DRAGON"
                                                      []
                                                  ]
                                                |)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (| Value.Integer IntegerKind.I32 50 |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (| Value.Integer IntegerKind.I32 10 |)))
                                    ]
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        let~ gas :
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [] :=
                          M.copy (|
                            M.match_operator (|
                              Some
                                (Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  []),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "core::convert::Infallible" ];
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      ],
                                    [],
                                    [],
                                    "branch",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            []
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [],
                                        "checked_add",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            "from",
                                            [],
                                            [ Ty.path "u64" ]
                                          |),
                                          [
                                            M.read (|
                                              get_constant (|
                                                "revm_interpreter::gas::constants::EXP",
                                                Ty.path "u64"
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.read (|
                                          M.match_operator (|
                                            Some
                                              (Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                []),
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "core::convert::Infallible" ];
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [
                                                        Value.Integer IntegerKind.Usize 256;
                                                        Value.Integer IntegerKind.Usize 4
                                                      ]
                                                      []
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "ruint::Uint")
                                                        [
                                                          Value.Integer IntegerKind.Usize 256;
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                        []
                                                    ],
                                                  [],
                                                  [],
                                                  "branch",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "ruint::Uint")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          []
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "ruint::Uint")
                                                        [
                                                          Value.Integer IntegerKind.Usize 256;
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                        [],
                                                      "checked_mul",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| gas_byte |);
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "ruint::Uint")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          [],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "ruint::Uint")
                                                            [
                                                              Value.Integer IntegerKind.Usize 256;
                                                              Value.Integer IntegerKind.Usize 4
                                                            ]
                                                            [],
                                                          "from",
                                                          [],
                                                          [ Ty.path "u64" ]
                                                        |),
                                                        [
                                                          BinOp.Wrap.add (|
                                                            BinOp.Wrap.div (|
                                                              M.call_closure (|
                                                                Ty.path "u64",
                                                                M.get_function (|
                                                                  "revm_interpreter::gas::calc::log2floor",
                                                                  [],
                                                                  []
                                                                |),
                                                                [ M.read (| power |) ]
                                                              |),
                                                              Value.Integer IntegerKind.U64 8
                                                            |),
                                                            Value.Integer IntegerKind.U64 1
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [ Ty.path "u64" ],
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ Ty.path "u64" ],
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "u64" ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.path "u64" ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ Ty.path "core::convert::Infallible" ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "u64";
                                  Ty.apply
                                    (Ty.path "ruint::from::FromUintError")
                                    []
                                    [ Ty.path "u64" ]
                                ],
                              "ok",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "u64";
                                    Ty.apply
                                      (Ty.path "ruint::from::FromUintError")
                                      []
                                      [ Ty.path "u64" ]
                                  ],
                                M.get_trait_method (|
                                  "core::convert::TryFrom",
                                  Ty.path "u64",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ],
                                  "try_from",
                                  [],
                                  []
                                |),
                                [ M.read (| gas |) ]
                              |)
                            ]
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_exp_cost :
      M.IsFunction.C "revm_interpreter::gas::calc::exp_cost" exp_cost.
    Admitted.
    Global Typeclasses Opaque exp_cost.
    
    (*
    pub const fn copy_cost_verylow(len: usize) -> Option<u64> {
        copy_cost(VERYLOW, len)
    }
    *)
    Definition copy_cost_verylow (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ len ] =>
        ltac:(M.monadic
          (let len := M.alloc (| len |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
            M.get_function (| "revm_interpreter::gas::calc::copy_cost", [], [] |),
            [
              M.read (|
                get_constant (| "revm_interpreter::gas::constants::VERYLOW", Ty.path "u64" |)
              |);
              M.read (| len |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_copy_cost_verylow :
      M.IsFunction.C "revm_interpreter::gas::calc::copy_cost_verylow" copy_cost_verylow.
    Admitted.
    Global Typeclasses Opaque copy_cost_verylow.
    
    (*
    pub const fn extcodecopy_cost(
        spec_id: SpecId,
        len: usize,
        load: Eip7702CodeLoad<()>,
    ) -> Option<u64> {
        let base_gas = if spec_id.is_enabled_in(SpecId::BERLIN) {
            warm_cold_cost_with_delegation(load)
        } else if spec_id.is_enabled_in(SpecId::TANGERINE) {
            700
        } else {
            20
        };
        copy_cost(base_gas, len)
    }
    *)
    Definition extcodecopy_cost (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ spec_id; len; load ] =>
        ltac:(M.monadic
          (let spec_id := M.alloc (| spec_id |) in
          let len := M.alloc (| len |) in
          let load := M.alloc (| load |) in
          M.read (|
            let~ base_gas : Ty.path "u64" :=
              M.copy (|
                M.match_operator (|
                  Some (Ty.path "u64"),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.path "revm_specification::hardfork::SpecId",
                                  "is_enabled_in",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| spec_id |);
                                  Value.StructTuple
                                    "revm_specification::hardfork::SpecId::BERLIN"
                                    []
                                ]
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u64",
                            M.get_function (|
                              "revm_interpreter::gas::calc::warm_cold_cost_with_delegation",
                              [],
                              []
                            |),
                            [ M.read (| load |) ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Some (Ty.path "u64"),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.path "revm_specification::hardfork::SpecId",
                                          "is_enabled_in",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (| spec_id |);
                                          Value.StructTuple
                                            "revm_specification::hardfork::SpecId::TANGERINE"
                                            []
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (| Value.Integer IntegerKind.U64 700 |)));
                            fun γ =>
                              ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 20 |)))
                          ]
                        |)))
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                M.get_function (| "revm_interpreter::gas::calc::copy_cost", [], [] |),
                [ M.read (| base_gas |); M.read (| len |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_extcodecopy_cost :
      M.IsFunction.C "revm_interpreter::gas::calc::extcodecopy_cost" extcodecopy_cost.
    Admitted.
    Global Typeclasses Opaque extcodecopy_cost.
    
    (*
    pub const fn copy_cost(base_cost: u64, len: usize) -> Option<u64> {
        base_cost.checked_add(tri!(cost_per_word(len, COPY)))
    }
    *)
    Definition copy_cost (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ base_cost; len ] =>
        ltac:(M.monadic
          (let base_cost := M.alloc (| base_cost |) in
          let len := M.alloc (| len |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                M.get_associated_function (| Ty.path "u64", "checked_add", [], [] |),
                [
                  M.read (| base_cost |);
                  M.read (|
                    M.match_operator (|
                      Some (Ty.path "u64"),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                          M.get_function (| "revm_interpreter::gas::calc::cost_per_word", [], [] |),
                          [
                            M.read (| len |);
                            M.read (|
                              get_constant (|
                                "revm_interpreter::gas::constants::COPY",
                                Ty.path "u64"
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let v := M.copy (| γ0_0 |) in
                            v));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_copy_cost :
      M.IsFunction.C "revm_interpreter::gas::calc::copy_cost" copy_cost.
    Admitted.
    Global Typeclasses Opaque copy_cost.
    
    (*
    pub const fn log_cost(n: u8, len: u64) -> Option<u64> {
        tri!(LOG.checked_add(tri!(LOGDATA.checked_mul(len)))).checked_add(LOGTOPIC * n as u64)
    }
    *)
    Definition log_cost (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n; len ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          let len := M.alloc (| len |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                M.get_associated_function (| Ty.path "u64", "checked_add", [], [] |),
                [
                  M.read (|
                    M.match_operator (|
                      Some (Ty.path "u64"),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                          M.get_associated_function (| Ty.path "u64", "checked_add", [], [] |),
                          [
                            M.read (|
                              get_constant (|
                                "revm_interpreter::gas::constants::LOG",
                                Ty.path "u64"
                              |)
                            |);
                            M.read (|
                              M.match_operator (|
                                Some (Ty.path "u64"),
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                                    M.get_associated_function (|
                                      Ty.path "u64",
                                      "checked_mul",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::LOGDATA",
                                          Ty.path "u64"
                                        |)
                                      |);
                                      M.read (| len |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let v := M.copy (| γ0_0 |) in
                                      v));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              Value.StructTuple "core::option::Option::None" []
                                            |)
                                          |)
                                        |)
                                      |)))
                                ]
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let v := M.copy (| γ0_0 |) in
                            v));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |);
                  BinOp.Wrap.mul (|
                    M.read (|
                      get_constant (| "revm_interpreter::gas::constants::LOGTOPIC", Ty.path "u64" |)
                    |),
                    M.cast (Ty.path "u64") (M.read (| n |))
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_log_cost :
      M.IsFunction.C "revm_interpreter::gas::calc::log_cost" log_cost.
    Admitted.
    Global Typeclasses Opaque log_cost.
    
    (*
    pub const fn keccak256_cost(len: usize) -> Option<u64> {
        KECCAK256.checked_add(tri!(cost_per_word(len, KECCAK256WORD)))
    }
    *)
    Definition keccak256_cost (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ len ] =>
        ltac:(M.monadic
          (let len := M.alloc (| len |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                M.get_associated_function (| Ty.path "u64", "checked_add", [], [] |),
                [
                  M.read (|
                    get_constant (| "revm_interpreter::gas::constants::KECCAK256", Ty.path "u64" |)
                  |);
                  M.read (|
                    M.match_operator (|
                      Some (Ty.path "u64"),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                          M.get_function (| "revm_interpreter::gas::calc::cost_per_word", [], [] |),
                          [
                            M.read (| len |);
                            M.read (|
                              get_constant (|
                                "revm_interpreter::gas::constants::KECCAK256WORD",
                                Ty.path "u64"
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let v := M.copy (| γ0_0 |) in
                            v));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_keccak256_cost :
      M.IsFunction.C "revm_interpreter::gas::calc::keccak256_cost" keccak256_cost.
    Admitted.
    Global Typeclasses Opaque keccak256_cost.
    
    (*
    pub const fn cost_per_word(len: usize, multiple: u64) -> Option<u64> {
        multiple.checked_mul(num_words(len) as u64)
    }
    *)
    Definition cost_per_word (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ len; multiple ] =>
        ltac:(M.monadic
          (let len := M.alloc (| len |) in
          let multiple := M.alloc (| multiple |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
            M.get_associated_function (| Ty.path "u64", "checked_mul", [], [] |),
            [
              M.read (| multiple |);
              M.cast
                (Ty.path "u64")
                (M.call_closure (|
                  Ty.path "usize",
                  M.get_function (|
                    "revm_interpreter::interpreter::shared_memory::num_words",
                    [],
                    []
                  |),
                  [ M.read (| len |) ]
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_cost_per_word :
      M.IsFunction.C "revm_interpreter::gas::calc::cost_per_word" cost_per_word.
    Admitted.
    Global Typeclasses Opaque cost_per_word.
    
    (*
    pub const fn initcode_cost(len: usize) -> u64 {
        let Some(cost) = cost_per_word(len, INITCODE_WORD_COST) else {
            panic!("initcode cost overflow")
        };
        cost
    }
    *)
    Definition initcode_cost (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ len ] =>
        ltac:(M.monadic
          (let len := M.alloc (| len |) in
          M.read (|
            M.match_operator (|
              None,
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                  M.get_function (| "revm_interpreter::gas::calc::cost_per_word", [], [] |),
                  [
                    M.read (| len |);
                    M.read (|
                      get_constant (|
                        "revm_interpreter::gas::constants::INITCODE_WORD_COST",
                        Ty.path "u64"
                      |)
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let cost := M.copy (| γ0_0 |) in
                    cost))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_initcode_cost :
      M.IsFunction.C "revm_interpreter::gas::calc::initcode_cost" initcode_cost.
    Admitted.
    Global Typeclasses Opaque initcode_cost.
    
    (*
    pub const fn sload_cost(spec_id: SpecId, is_cold: bool) -> u64 {
        if spec_id.is_enabled_in(SpecId::BERLIN) {
            if is_cold {
                COLD_SLOAD_COST
            } else {
                WARM_STORAGE_READ_COST
            }
        } else if spec_id.is_enabled_in(SpecId::ISTANBUL) {
            // EIP-1884: Repricing for trie-size-dependent opcodes
            ISTANBUL_SLOAD_GAS
        } else if spec_id.is_enabled_in(SpecId::TANGERINE) {
            // EIP-150: Gas cost changes for IO-heavy operations
            200
        } else {
            50
        }
    }
    *)
    Definition sload_cost (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ spec_id; is_cold ] =>
        ltac:(M.monadic
          (let spec_id := M.alloc (| spec_id |) in
          let is_cold := M.alloc (| is_cold |) in
          M.read (|
            M.match_operator (|
              Some (Ty.path "u64"),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_associated_function (|
                              Ty.path "revm_specification::hardfork::SpecId",
                              "is_enabled_in",
                              [],
                              []
                            |),
                            [
                              M.read (| spec_id |);
                              Value.StructTuple "revm_specification::hardfork::SpecId::BERLIN" []
                            ]
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.match_operator (|
                      Some (Ty.path "u64"),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use is_cold in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            get_constant (|
                              "revm_interpreter::gas::constants::COLD_SLOAD_COST",
                              Ty.path "u64"
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (get_constant (|
                              "revm_interpreter::gas::constants::WARM_STORAGE_READ_COST",
                              Ty.path "u64"
                            |)))
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Some (Ty.path "u64"),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| spec_id |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::ISTANBUL"
                                        []
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            get_constant (|
                              "revm_interpreter::gas::constants::ISTANBUL_SLOAD_GAS",
                              Ty.path "u64"
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Some (Ty.path "u64"),
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_associated_function (|
                                              Ty.path "revm_specification::hardfork::SpecId",
                                              "is_enabled_in",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (| spec_id |);
                                              Value.StructTuple
                                                "revm_specification::hardfork::SpecId::TANGERINE"
                                                []
                                            ]
                                          |)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (| Value.Integer IntegerKind.U64 200 |)));
                                fun γ =>
                                  ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 50 |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_sload_cost :
      M.IsFunction.C "revm_interpreter::gas::calc::sload_cost" sload_cost.
    Admitted.
    Global Typeclasses Opaque sload_cost.
    
    (*
    pub fn sstore_cost(spec_id: SpecId, vals: &SStoreResult, is_cold: bool) -> u64 {
        if spec_id.is_enabled_in(SpecId::BERLIN) {
            // Berlin specification logic
            let mut gas_cost = istanbul_sstore_cost::<WARM_STORAGE_READ_COST, WARM_SSTORE_RESET>(vals);
    
            if is_cold {
                gas_cost += COLD_SLOAD_COST;
            }
            gas_cost
        } else if spec_id.is_enabled_in(SpecId::ISTANBUL) {
            // Istanbul logic
            istanbul_sstore_cost::<ISTANBUL_SLOAD_GAS, SSTORE_RESET>(vals)
        } else {
            // Frontier logic
            frontier_sstore_cost(vals)
        }
    }
    *)
    Definition sstore_cost (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ spec_id; vals; is_cold ] =>
        ltac:(M.monadic
          (let spec_id := M.alloc (| spec_id |) in
          let vals := M.alloc (| vals |) in
          let is_cold := M.alloc (| is_cold |) in
          M.read (|
            M.match_operator (|
              Some (Ty.path "u64"),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_associated_function (|
                              Ty.path "revm_specification::hardfork::SpecId",
                              "is_enabled_in",
                              [],
                              []
                            |),
                            [
                              M.read (| spec_id |);
                              Value.StructTuple "revm_specification::hardfork::SpecId::BERLIN" []
                            ]
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    let~ gas_cost : Ty.path "u64" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          M.get_function (|
                            "revm_interpreter::gas::calc::istanbul_sstore_cost",
                            [ Value.Integer IntegerKind.U64 100; Value.Integer IntegerKind.U64 2900
                            ],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| vals |) |) |) ]
                        |)
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use is_cold in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  let β := gas_cost in
                                  M.write (|
                                    β,
                                    BinOp.Wrap.add (|
                                      M.read (| β |),
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::COLD_SLOAD_COST",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    |)
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    gas_cost));
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Some (Ty.path "u64"),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| spec_id |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::ISTANBUL"
                                        []
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "u64",
                                M.get_function (|
                                  "revm_interpreter::gas::calc::istanbul_sstore_cost",
                                  [
                                    Value.Integer IntegerKind.U64 800;
                                    Value.Integer IntegerKind.U64 5000
                                  ],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| vals |) |) |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "u64",
                                M.get_function (|
                                  "revm_interpreter::gas::calc::frontier_sstore_cost",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| vals |) |) |) ]
                              |)
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_sstore_cost :
      M.IsFunction.C "revm_interpreter::gas::calc::sstore_cost" sstore_cost.
    Admitted.
    Global Typeclasses Opaque sstore_cost.
    
    (*
    fn istanbul_sstore_cost<const SLOAD_GAS: u64, const SSTORE_RESET_GAS: u64>(
        vals: &SStoreResult,
    ) -> u64 {
        if vals.is_new_eq_present() {
            SLOAD_GAS
        } else if vals.is_original_eq_present() && vals.is_original_zero() {
            SSTORE_SET
        } else if vals.is_original_eq_present() {
            SSTORE_RESET_GAS
        } else {
            SLOAD_GAS
        }
    }
    *)
    Definition istanbul_sstore_cost (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ SLOAD_GAS; SSTORE_RESET_GAS ], [], [ vals ] =>
        ltac:(M.monadic
          (let vals := M.alloc (| vals |) in
          M.read (|
            M.match_operator (|
              Some (Ty.path "u64"),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_associated_function (|
                              Ty.path "revm_context_interface::host::SStoreResult",
                              "is_new_eq_present",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| vals |) |) |) ]
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (| SLOAD_GAS |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Some (Ty.path "u64"),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  LogicalOp.and (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.path "revm_context_interface::host::SStoreResult",
                                        "is_original_eq_present",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| vals |) |)
                                        |)
                                      ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.path "revm_context_interface::host::SStoreResult",
                                          "is_original_zero",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| vals |) |)
                                          |)
                                        ]
                                      |)))
                                  |)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            get_constant (|
                              "revm_interpreter::gas::constants::SSTORE_SET",
                              Ty.path "u64"
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Some (Ty.path "u64"),
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_associated_function (|
                                              Ty.path "revm_context_interface::host::SStoreResult",
                                              "is_original_eq_present",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| vals |) |)
                                              |)
                                            ]
                                          |)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (| SSTORE_RESET_GAS |)));
                                fun γ => ltac:(M.monadic (M.alloc (| SLOAD_GAS |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_istanbul_sstore_cost :
      M.IsFunction.C "revm_interpreter::gas::calc::istanbul_sstore_cost" istanbul_sstore_cost.
    Admitted.
    Global Typeclasses Opaque istanbul_sstore_cost.
    
    (*
    fn frontier_sstore_cost(vals: &SStoreResult) -> u64 {
        if vals.is_present_zero() && !vals.is_new_zero() {
            SSTORE_SET
        } else {
            SSTORE_RESET
        }
    }
    *)
    Definition frontier_sstore_cost (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ vals ] =>
        ltac:(M.monadic
          (let vals := M.alloc (| vals |) in
          M.read (|
            M.match_operator (|
              Some (Ty.path "u64"),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          LogicalOp.and (|
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_associated_function (|
                                Ty.path "revm_context_interface::host::SStoreResult",
                                "is_present_zero",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| vals |) |) |) ]
                            |),
                            ltac:(M.monadic
                              (UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.path "revm_context_interface::host::SStoreResult",
                                    "is_new_zero",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| vals |) |) |)
                                  ]
                                |)
                              |)))
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    get_constant (|
                      "revm_interpreter::gas::constants::SSTORE_SET",
                      Ty.path "u64"
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (get_constant (|
                      "revm_interpreter::gas::constants::SSTORE_RESET",
                      Ty.path "u64"
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_frontier_sstore_cost :
      M.IsFunction.C "revm_interpreter::gas::calc::frontier_sstore_cost" frontier_sstore_cost.
    Admitted.
    Global Typeclasses Opaque frontier_sstore_cost.
    
    (*
    pub const fn selfdestruct_cost(spec_id: SpecId, res: StateLoad<SelfDestructResult>) -> u64 {
        // EIP-161: State trie clearing (invariant-preserving alternative)
        let should_charge_topup = if spec_id.is_enabled_in(SpecId::SPURIOUS_DRAGON) {
            res.data.had_value && !res.data.target_exists
        } else {
            !res.data.target_exists
        };
    
        // EIP-150: Gas cost changes for IO-heavy operations
        let selfdestruct_gas_topup = if spec_id.is_enabled_in(SpecId::TANGERINE) && should_charge_topup
        {
            25000
        } else {
            0
        };
    
        // EIP-150: Gas cost changes for IO-heavy operations
        let selfdestruct_gas = if spec_id.is_enabled_in(SpecId::TANGERINE) {
            5000
        } else {
            0
        };
    
        let mut gas = selfdestruct_gas + selfdestruct_gas_topup;
        if spec_id.is_enabled_in(SpecId::BERLIN) && res.is_cold {
            gas += COLD_ACCOUNT_ACCESS_COST
        }
        gas
    }
    *)
    Definition selfdestruct_cost (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ spec_id; res ] =>
        ltac:(M.monadic
          (let spec_id := M.alloc (| spec_id |) in
          let res := M.alloc (| res |) in
          M.read (|
            let~ should_charge_topup : Ty.path "bool" :=
              M.copy (|
                M.match_operator (|
                  Some (Ty.path "bool"),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.path "revm_specification::hardfork::SpecId",
                                  "is_enabled_in",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| spec_id |);
                                  Value.StructTuple
                                    "revm_specification::hardfork::SpecId::SPURIOUS_DRAGON"
                                    []
                                ]
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          LogicalOp.and (|
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  res,
                                  "revm_context_interface::journaled_state::StateLoad",
                                  "data"
                                |),
                                "revm_context_interface::host::SelfDestructResult",
                                "had_value"
                              |)
                            |),
                            ltac:(M.monadic
                              (UnOp.not (|
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      res,
                                      "revm_context_interface::journaled_state::StateLoad",
                                      "data"
                                    |),
                                    "revm_context_interface::host::SelfDestructResult",
                                    "target_exists"
                                  |)
                                |)
                              |)))
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          UnOp.not (|
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  res,
                                  "revm_context_interface::journaled_state::StateLoad",
                                  "data"
                                |),
                                "revm_context_interface::host::SelfDestructResult",
                                "target_exists"
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |) in
            let~ selfdestruct_gas_topup : Ty.path "u64" :=
              M.copy (|
                M.match_operator (|
                  Some (Ty.path "u64"),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.and (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.path "revm_specification::hardfork::SpecId",
                                    "is_enabled_in",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| spec_id |);
                                    Value.StructTuple
                                      "revm_specification::hardfork::SpecId::TANGERINE"
                                      []
                                  ]
                                |),
                                ltac:(M.monadic (M.read (| should_charge_topup |)))
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (| Value.Integer IntegerKind.U64 25000 |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 0 |)))
                  ]
                |)
              |) in
            let~ selfdestruct_gas : Ty.path "u64" :=
              M.copy (|
                M.match_operator (|
                  Some (Ty.path "u64"),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.path "revm_specification::hardfork::SpecId",
                                  "is_enabled_in",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| spec_id |);
                                  Value.StructTuple
                                    "revm_specification::hardfork::SpecId::TANGERINE"
                                    []
                                ]
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (| Value.Integer IntegerKind.U64 5000 |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 0 |)))
                  ]
                |)
              |) in
            let~ gas : Ty.path "u64" :=
              M.alloc (|
                BinOp.Wrap.add (|
                  M.read (| selfdestruct_gas |),
                  M.read (| selfdestruct_gas_topup |)
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.and (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.path "revm_specification::hardfork::SpecId",
                                  "is_enabled_in",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| spec_id |);
                                  Value.StructTuple
                                    "revm_specification::hardfork::SpecId::BERLIN"
                                    []
                                ]
                              |),
                              ltac:(M.monadic
                                (M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    res,
                                    "revm_context_interface::journaled_state::StateLoad",
                                    "is_cold"
                                  |)
                                |)))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        let β := gas in
                        M.write (|
                          β,
                          BinOp.Wrap.add (|
                            M.read (| β |),
                            M.read (|
                              get_constant (|
                                "revm_interpreter::gas::constants::COLD_ACCOUNT_ACCESS_COST",
                                Ty.path "u64"
                              |)
                            |)
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            gas
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_selfdestruct_cost :
      M.IsFunction.C "revm_interpreter::gas::calc::selfdestruct_cost" selfdestruct_cost.
    Admitted.
    Global Typeclasses Opaque selfdestruct_cost.
    
    (*
    pub const fn call_cost(spec_id: SpecId, transfers_value: bool, account_load: AccountLoad) -> u64 {
        // Account access.
        let mut gas = if spec_id.is_enabled_in(SpecId::BERLIN) {
            warm_cold_cost_with_delegation(account_load.load)
        } else if spec_id.is_enabled_in(SpecId::TANGERINE) {
            // EIP-150: Gas cost changes for IO-heavy operations
            700
        } else {
            40
        };
    
        // Transfer value cost
        if transfers_value {
            gas += CALLVALUE;
        }
    
        // New account cost
        if account_load.is_empty {
            // EIP-161: State trie clearing (invariant-preserving alternative)
            if spec_id.is_enabled_in(SpecId::SPURIOUS_DRAGON) {
                // Account only if there is value transferred.
                if transfers_value {
                    gas += NEWACCOUNT;
                }
            } else {
                gas += NEWACCOUNT;
            }
        }
    
        gas
    }
    *)
    Definition call_cost (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ spec_id; transfers_value; account_load ] =>
        ltac:(M.monadic
          (let spec_id := M.alloc (| spec_id |) in
          let transfers_value := M.alloc (| transfers_value |) in
          let account_load := M.alloc (| account_load |) in
          M.read (|
            let~ gas : Ty.path "u64" :=
              M.copy (|
                M.match_operator (|
                  Some (Ty.path "u64"),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.path "revm_specification::hardfork::SpecId",
                                  "is_enabled_in",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| spec_id |);
                                  Value.StructTuple
                                    "revm_specification::hardfork::SpecId::BERLIN"
                                    []
                                ]
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u64",
                            M.get_function (|
                              "revm_interpreter::gas::calc::warm_cold_cost_with_delegation",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  account_load,
                                  "revm_context_interface::journaled_state::AccountLoad",
                                  "load"
                                |)
                              |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Some (Ty.path "u64"),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.path "revm_specification::hardfork::SpecId",
                                          "is_enabled_in",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (| spec_id |);
                                          Value.StructTuple
                                            "revm_specification::hardfork::SpecId::TANGERINE"
                                            []
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (| Value.Integer IntegerKind.U64 700 |)));
                            fun γ =>
                              ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 40 |)))
                          ]
                        |)))
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use transfers_value in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          let β := gas in
                          M.write (|
                            β,
                            BinOp.Wrap.add (|
                              M.read (| β |),
                              M.read (|
                                get_constant (|
                                  "revm_interpreter::gas::constants::CALLVALUE",
                                  Ty.path "u64"
                                |)
                              |)
                            |)
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.SubPointer.get_struct_record_field (|
                            account_load,
                            "revm_context_interface::journaled_state::AccountLoad",
                            "is_empty"
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.path "revm_specification::hardfork::SpecId",
                                        "is_enabled_in",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (| spec_id |);
                                        Value.StructTuple
                                          "revm_specification::hardfork::SpecId::SPURIOUS_DRAGON"
                                          []
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.use transfers_value in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          let β := gas in
                                          M.write (|
                                            β,
                                            BinOp.Wrap.add (|
                                              M.read (| β |),
                                              M.read (|
                                                get_constant (|
                                                  "revm_interpreter::gas::constants::NEWACCOUNT",
                                                  Ty.path "u64"
                                                |)
                                              |)
                                            |)
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  let β := gas in
                                  M.write (|
                                    β,
                                    BinOp.Wrap.add (|
                                      M.read (| β |),
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::NEWACCOUNT",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    |)
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                        ]
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            gas
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_call_cost :
      M.IsFunction.C "revm_interpreter::gas::calc::call_cost" call_cost.
    Admitted.
    Global Typeclasses Opaque call_cost.
    
    (*
    pub const fn warm_cold_cost(is_cold: bool) -> u64 {
        if is_cold {
            COLD_ACCOUNT_ACCESS_COST
        } else {
            WARM_STORAGE_READ_COST
        }
    }
    *)
    Definition warm_cold_cost (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ is_cold ] =>
        ltac:(M.monadic
          (let is_cold := M.alloc (| is_cold |) in
          M.read (|
            M.match_operator (|
              Some (Ty.path "u64"),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.use is_cold in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    get_constant (|
                      "revm_interpreter::gas::constants::COLD_ACCOUNT_ACCESS_COST",
                      Ty.path "u64"
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (get_constant (|
                      "revm_interpreter::gas::constants::WARM_STORAGE_READ_COST",
                      Ty.path "u64"
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_warm_cold_cost :
      M.IsFunction.C "revm_interpreter::gas::calc::warm_cold_cost" warm_cold_cost.
    Admitted.
    Global Typeclasses Opaque warm_cold_cost.
    
    (*
    pub const fn warm_cold_cost_with_delegation(load: Eip7702CodeLoad<()>) -> u64 {
        let mut gas = warm_cold_cost(load.state_load.is_cold);
        if let Some(is_cold) = load.is_delegate_account_cold {
            gas += warm_cold_cost(is_cold);
        }
        gas
    }
    *)
    Definition warm_cold_cost_with_delegation
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ load ] =>
        ltac:(M.monadic
          (let load := M.alloc (| load |) in
          M.read (|
            let~ gas : Ty.path "u64" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u64",
                  M.get_function (| "revm_interpreter::gas::calc::warm_cold_cost", [], [] |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.SubPointer.get_struct_record_field (|
                          load,
                          "revm_context_interface::journaled_state::Eip7702CodeLoad",
                          "state_load"
                        |),
                        "revm_context_interface::journaled_state::StateLoad",
                        "is_cold"
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.SubPointer.get_struct_record_field (|
                          load,
                          "revm_context_interface::journaled_state::Eip7702CodeLoad",
                          "is_delegate_account_cold"
                        |) in
                      let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let is_cold := M.copy (| γ0_0 |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          let β := gas in
                          M.write (|
                            β,
                            BinOp.Wrap.add (|
                              M.read (| β |),
                              M.call_closure (|
                                Ty.path "u64",
                                M.get_function (|
                                  "revm_interpreter::gas::calc::warm_cold_cost",
                                  [],
                                  []
                                |),
                                [ M.read (| is_cold |) ]
                              |)
                            |)
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            gas
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_warm_cold_cost_with_delegation :
      M.IsFunction.C
        "revm_interpreter::gas::calc::warm_cold_cost_with_delegation"
        warm_cold_cost_with_delegation.
    Admitted.
    Global Typeclasses Opaque warm_cold_cost_with_delegation.
    
    (*
    pub const fn memory_gas(num_words: usize) -> u64 {
        let num_words = num_words as u64;
        MEMORY
            .saturating_mul(num_words)
            .saturating_add(num_words.saturating_mul(num_words) / 512)
    }
    *)
    Definition memory_gas (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ num_words ] =>
        ltac:(M.monadic
          (let num_words := M.alloc (| num_words |) in
          M.read (|
            let~ num_words : Ty.path "u64" :=
              M.alloc (| M.cast (Ty.path "u64") (M.read (| num_words |)) |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "u64",
                M.get_associated_function (| Ty.path "u64", "saturating_add", [], [] |),
                [
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_associated_function (| Ty.path "u64", "saturating_mul", [], [] |),
                    [
                      M.read (|
                        get_constant (| "revm_interpreter::gas::constants::MEMORY", Ty.path "u64" |)
                      |);
                      M.read (| num_words |)
                    ]
                  |);
                  BinOp.Wrap.div (|
                    M.call_closure (|
                      Ty.path "u64",
                      M.get_associated_function (| Ty.path "u64", "saturating_mul", [], [] |),
                      [ M.read (| num_words |); M.read (| num_words |) ]
                    |),
                    Value.Integer IntegerKind.U64 512
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_memory_gas :
      M.IsFunction.C "revm_interpreter::gas::calc::memory_gas" memory_gas.
    Admitted.
    Global Typeclasses Opaque memory_gas.
    
    (*
    pub fn validate_initial_tx_gas<AccessListT: AccessListTrait>(
        spec_id: SpecId,
        input: &[u8],
        is_create: bool,
        access_list: Option<&AccessListT>,
        authorization_list_num: u64,
    ) -> u64 {
        let mut initial_gas = 0;
        let zero_data_len = input.iter().filter(|v| **v == 0).count() as u64;
        let non_zero_data_len = input.len() as u64 - zero_data_len;
    
        // Initdate stipend
        initial_gas += zero_data_len * TRANSACTION_ZERO_DATA;
        // EIP-2028: Transaction data gas cost reduction
        initial_gas += non_zero_data_len
            * if spec_id.is_enabled_in(SpecId::ISTANBUL) {
                16
            } else {
                68
            };
    
        // Get number of access list account and storages.
        if let Some(access_list) = access_list {
            let (account_num, storage_num) = access_list.num_account_storages();
            initial_gas += account_num as u64 * ACCESS_LIST_ADDRESS;
            initial_gas += storage_num as u64 * ACCESS_LIST_STORAGE_KEY;
        }
    
        // Base stipend
        initial_gas += if is_create {
            if spec_id.is_enabled_in(SpecId::HOMESTEAD) {
                // EIP-2: Homestead Hard-fork Changes
                53000
            } else {
                21000
            }
        } else {
            21000
        };
    
        // EIP-3860: Limit and meter initcode
        // Init code stipend for bytecode analysis
        if spec_id.is_enabled_in(SpecId::SHANGHAI) && is_create {
            initial_gas += initcode_cost(input.len())
        }
    
        // EIP-7702
        if spec_id.is_enabled_in(SpecId::PRAGUE) {
            initial_gas += authorization_list_num * eip7702::PER_EMPTY_ACCOUNT_COST;
        }
    
        initial_gas
    }
    *)
    Definition validate_initial_tx_gas (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ AccessListT ], [ spec_id; input; is_create; access_list; authorization_list_num ] =>
        ltac:(M.monadic
          (let spec_id := M.alloc (| spec_id |) in
          let input := M.alloc (| input |) in
          let is_create := M.alloc (| is_create |) in
          let access_list := M.alloc (| access_list |) in
          let authorization_list_num := M.alloc (| authorization_list_num |) in
          M.read (|
            let~ initial_gas : Ty.path "u64" := M.alloc (| Value.Integer IntegerKind.U64 0 |) in
            let~ zero_data_len : Ty.path "u64" :=
              M.alloc (|
                M.cast
                  (Ty.path "u64")
                  (M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::filter::Filter")
                        []
                        [
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
                                ]
                            ]
                            (Ty.path "bool")
                        ],
                      [],
                      [],
                      "count",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::filter::Filter")
                          []
                          [
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
                                  ]
                              ]
                              (Ty.path "bool")
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                          [],
                          [],
                          "filter",
                          [],
                          [
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
                                  ]
                              ]
                              (Ty.path "bool")
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                              "iter",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |) ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Some
                                        (Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
                                              ]
                                          ]
                                          (Ty.path "bool")),
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let v := M.copy (| γ |) in
                                            BinOp.eq (|
                                              M.read (|
                                                M.deref (|
                                                  M.read (| M.deref (| M.read (| v |) |) |)
                                                |)
                                              |),
                                              Value.Integer IntegerKind.U8 0
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |))
              |) in
            let~ non_zero_data_len : Ty.path "u64" :=
              M.alloc (|
                BinOp.Wrap.sub (|
                  M.cast
                    (Ty.path "u64")
                    (M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                        "len",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |) ]
                    |)),
                  M.read (| zero_data_len |)
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                let β := initial_gas in
                M.write (|
                  β,
                  BinOp.Wrap.add (|
                    M.read (| β |),
                    BinOp.Wrap.mul (|
                      M.read (| zero_data_len |),
                      M.read (|
                        get_constant (|
                          "revm_interpreter::gas::constants::TRANSACTION_ZERO_DATA",
                          Ty.path "u64"
                        |)
                      |)
                    |)
                  |)
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                let β := initial_gas in
                M.write (|
                  β,
                  BinOp.Wrap.add (|
                    M.read (| β |),
                    BinOp.Wrap.mul (|
                      M.read (| non_zero_data_len |),
                      M.read (|
                        M.match_operator (|
                          Some (Ty.path "u64"),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.path "revm_specification::hardfork::SpecId",
                                          "is_enabled_in",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (| spec_id |);
                                          Value.StructTuple
                                            "revm_specification::hardfork::SpecId::ISTANBUL"
                                            []
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (| Value.Integer IntegerKind.U64 16 |)));
                            fun γ =>
                              ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 68 |)))
                          ]
                        |)
                      |)
                    |)
                  |)
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := access_list in
                      let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let access_list := M.copy (| γ0_0 |) in
                      M.match_operator (|
                        None,
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [ Ty.path "usize"; Ty.path "usize" ],
                            M.get_trait_method (|
                              "revm_context_interface::transaction::access_list::AccessListTrait",
                              AccessListT,
                              [],
                              [],
                              "num_account_storages",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.read (| access_list |) |)
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let account_num := M.copy (| γ0_0 |) in
                              let storage_num := M.copy (| γ0_1 |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  let β := initial_gas in
                                  M.write (|
                                    β,
                                    BinOp.Wrap.add (|
                                      M.read (| β |),
                                      BinOp.Wrap.mul (|
                                        M.cast (Ty.path "u64") (M.read (| account_num |)),
                                        M.read (|
                                          get_constant (|
                                            "revm_interpreter::gas::constants::ACCESS_LIST_ADDRESS",
                                            Ty.path "u64"
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  let β := initial_gas in
                                  M.write (|
                                    β,
                                    BinOp.Wrap.add (|
                                      M.read (| β |),
                                      BinOp.Wrap.mul (|
                                        M.cast (Ty.path "u64") (M.read (| storage_num |)),
                                        M.read (|
                                          get_constant (|
                                            "revm_interpreter::gas::constants::ACCESS_LIST_STORAGE_KEY",
                                            Ty.path "u64"
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                        ]
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                let β := initial_gas in
                M.write (|
                  β,
                  BinOp.Wrap.add (|
                    M.read (| β |),
                    M.read (|
                      M.match_operator (|
                        Some (Ty.path "u64"),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use is_create in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.match_operator (|
                                Some (Ty.path "u64"),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.path "revm_specification::hardfork::SpecId",
                                                "is_enabled_in",
                                                [],
                                                []
                                              |),
                                              [
                                                M.read (| spec_id |);
                                                Value.StructTuple
                                                  "revm_specification::hardfork::SpecId::HOMESTEAD"
                                                  []
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (| Value.Integer IntegerKind.U64 53000 |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (| Value.Integer IntegerKind.U64 21000 |)))
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 21000 |)))
                        ]
                      |)
                    |)
                  |)
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.and (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.path "revm_specification::hardfork::SpecId",
                                  "is_enabled_in",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| spec_id |);
                                  Value.StructTuple
                                    "revm_specification::hardfork::SpecId::SHANGHAI"
                                    []
                                ]
                              |),
                              ltac:(M.monadic (M.read (| is_create |)))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        let β := initial_gas in
                        M.write (|
                          β,
                          BinOp.Wrap.add (|
                            M.read (| β |),
                            M.call_closure (|
                              Ty.path "u64",
                              M.get_function (|
                                "revm_interpreter::gas::calc::initcode_cost",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| input |) |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_associated_function (|
                                Ty.path "revm_specification::hardfork::SpecId",
                                "is_enabled_in",
                                [],
                                []
                              |),
                              [
                                M.read (| spec_id |);
                                Value.StructTuple "revm_specification::hardfork::SpecId::PRAGUE" []
                              ]
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          let β := initial_gas in
                          M.write (|
                            β,
                            BinOp.Wrap.add (|
                              M.read (| β |),
                              BinOp.Wrap.mul (|
                                M.read (| authorization_list_num |),
                                M.read (|
                                  get_constant (|
                                    "revm_specification::eip7702::constants::PER_EMPTY_ACCOUNT_COST",
                                    Ty.path "u64"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            initial_gas
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_validate_initial_tx_gas :
      M.IsFunction.C "revm_interpreter::gas::calc::validate_initial_tx_gas" validate_initial_tx_gas.
    Admitted.
    Global Typeclasses Opaque validate_initial_tx_gas.
  End calc.
End gas.
