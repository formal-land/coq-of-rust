(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module instructions.
  Module arithmetic.
    (*
    pub fn add<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        popn_top!([op1], op2, interpreter);
        *op2 = op1.wrapping_add( *op2);
    }
    *)
    Definition add (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  "wrapping_add",
                                  [],
                                  []
                                |),
                                [ M.read (| op1 |); M.read (| M.deref (| M.read (| op2 |) |) |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_add :
      M.IsFunction.C "revm_interpreter::instructions::arithmetic::add" add.
    Admitted.
    Global Typeclasses Opaque add.
    
    (*
    pub fn mul<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::LOW);
        popn_top!([op1], op2, interpreter);
        *op2 = op1.wrapping_mul( *op2);
    }
    *)
    Definition mul (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::LOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  "wrapping_mul",
                                  [],
                                  []
                                |),
                                [ M.read (| op1 |); M.read (| M.deref (| M.read (| op2 |) |) |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_mul :
      M.IsFunction.C "revm_interpreter::instructions::arithmetic::mul" mul.
    Admitted.
    Global Typeclasses Opaque mul.
    
    (*
    pub fn sub<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        popn_top!([op1], op2, interpreter);
        *op2 = op1.wrapping_sub( *op2);
    }
    *)
    Definition sub (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  "wrapping_sub",
                                  [],
                                  []
                                |),
                                [ M.read (| op1 |); M.read (| M.deref (| M.read (| op2 |) |) |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_sub :
      M.IsFunction.C "revm_interpreter::instructions::arithmetic::sub" sub.
    Admitted.
    Global Typeclasses Opaque sub.
    
    (*
    pub fn div<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::LOW);
        popn_top!([op1], op2, interpreter);
        if !op2.is_zero() {
            *op2 = op1.wrapping_div( *op2);
        }
    }
    *)
    Definition div (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::LOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            "is_zero",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| op2 |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.write (|
                                      M.deref (| M.read (| op2 |) |),
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          "wrapping_div",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (| op1 |);
                                          M.read (| M.deref (| M.read (| op2 |) |) |)
                                        ]
                                      |)
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_div :
      M.IsFunction.C "revm_interpreter::instructions::arithmetic::div" div.
    Admitted.
    Global Typeclasses Opaque div.
    
    (*
    pub fn sdiv<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::LOW);
        popn_top!([op1], op2, interpreter);
        *op2 = i256_div(op1, *op2);
    }
    *)
    Definition sdiv (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::LOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_function (|
                                  "revm_interpreter::instructions::i256::i256_div",
                                  [],
                                  []
                                |),
                                [ M.read (| op1 |); M.read (| M.deref (| M.read (| op2 |) |) |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_sdiv :
      M.IsFunction.C "revm_interpreter::instructions::arithmetic::sdiv" sdiv.
    Admitted.
    Global Typeclasses Opaque sdiv.
    
    (*
    pub fn rem<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::LOW);
        popn_top!([op1], op2, interpreter);
        if !op2.is_zero() {
            *op2 = op1.wrapping_rem( *op2);
        }
    }
    *)
    Definition rem (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::LOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            "is_zero",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| op2 |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.write (|
                                      M.deref (| M.read (| op2 |) |),
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          "wrapping_rem",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (| op1 |);
                                          M.read (| M.deref (| M.read (| op2 |) |) |)
                                        ]
                                      |)
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_rem :
      M.IsFunction.C "revm_interpreter::instructions::arithmetic::rem" rem.
    Admitted.
    Global Typeclasses Opaque rem.
    
    (*
    pub fn smod<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::LOW);
        popn_top!([op1], op2, interpreter);
        *op2 = i256_mod(op1, *op2)
    }
    *)
    Definition smod (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::LOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        M.alloc (|
                          M.write (|
                            M.deref (| M.read (| op2 |) |),
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [],
                              M.get_function (|
                                "revm_interpreter::instructions::i256::i256_mod",
                                [],
                                []
                              |),
                              [ M.read (| op1 |); M.read (| M.deref (| M.read (| op2 |) |) |) ]
                            |)
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_smod :
      M.IsFunction.C "revm_interpreter::instructions::arithmetic::smod" smod.
    Admitted.
    Global Typeclasses Opaque smod.
    
    (*
    pub fn addmod<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::MID);
        popn_top!([op1, op2], op3, interpreter);
        *op3 = op1.add_mod(op2, *op3)
    }
    *)
    Definition addmod (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::MID",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 2 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let γ2_1 := M.SubPointer.get_slice_index (| γ1_0, 1 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ2_1 |) in
                        let op3 := M.copy (| γ1_1 |) in
                        M.alloc (|
                          M.write (|
                            M.deref (| M.read (| op3 |) |),
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                "add_mod",
                                [],
                                []
                              |),
                              [
                                M.read (| op1 |);
                                M.read (| op2 |);
                                M.read (| M.deref (| M.read (| op3 |) |) |)
                              ]
                            |)
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_addmod :
      M.IsFunction.C "revm_interpreter::instructions::arithmetic::addmod" addmod.
    Admitted.
    Global Typeclasses Opaque addmod.
    
    (*
    pub fn mulmod<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::MID);
        popn_top!([op1, op2], op3, interpreter);
        *op3 = op1.mul_mod(op2, *op3)
    }
    *)
    Definition mulmod (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::MID",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 2 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let γ2_1 := M.SubPointer.get_slice_index (| γ1_0, 1 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ2_1 |) in
                        let op3 := M.copy (| γ1_1 |) in
                        M.alloc (|
                          M.write (|
                            M.deref (| M.read (| op3 |) |),
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                "mul_mod",
                                [],
                                []
                              |),
                              [
                                M.read (| op1 |);
                                M.read (| op2 |);
                                M.read (| M.deref (| M.read (| op3 |) |) |)
                              ]
                            |)
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_mulmod :
      M.IsFunction.C "revm_interpreter::instructions::arithmetic::mulmod" mulmod.
    Admitted.
    Global Typeclasses Opaque mulmod.
    
    (*
    pub fn exp<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        let spec_id = interpreter.runtime_flag.spec_id();
        popn_top!([op1], op2, interpreter);
        gas_or_fail!(interpreter, gas::exp_cost(spec_id, *op2));
        *op2 = op1.pow( *op2);
    }
    *)
    Definition exp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ spec_id :
                    Ty.apply (Ty.path "*") [] [ Ty.path "revm_specification::hardfork::SpecId" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "revm_specification::hardfork::SpecId",
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::RuntimeFlag",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "RuntimeFlag",
                        [],
                        [],
                        "spec_id",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "runtime_flag"
                          |)
                        |)
                      ]
                    |)
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                                M.get_function (|
                                  "revm_interpreter::gas::calc::exp_cost",
                                  [],
                                  []
                                |),
                                [ M.read (| spec_id |); M.read (| M.deref (| M.read (| op2 |) |) |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let gas_used := M.copy (| γ0_0 |) in
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_associated_function (|
                                                      Ty.path "revm_interpreter::gas::Gas",
                                                      "record_cost",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [ Ty.path "revm_interpreter::gas::Gas"
                                                              ],
                                                            M.get_trait_method (|
                                                              "revm_interpreter::interpreter_types::LoopControl",
                                                              Ty.associated_in_trait
                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                []
                                                                []
                                                                WIRE
                                                                "Control",
                                                              [],
                                                              [],
                                                              "gas",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (|
                                                                    M.read (| interpreter |)
                                                                  |),
                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                  "control"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (| gas_used |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let~ _ :
                                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated_in_trait
                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                          []
                                                          []
                                                          WIRE
                                                          "Control",
                                                        [],
                                                        [],
                                                        "set_instruction_result",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| interpreter |) |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                          []
                                                          []
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.return_ (| Value.Tuple [] |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Control",
                                                [],
                                                [],
                                                "set_instruction_result",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                  []
                                                  []
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.return_ (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)))
                            ]
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  "pow",
                                  [],
                                  []
                                |),
                                [ M.read (| op1 |); M.read (| M.deref (| M.read (| op2 |) |) |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_exp :
      M.IsFunction.C "revm_interpreter::instructions::arithmetic::exp" exp.
    Admitted.
    Global Typeclasses Opaque exp.
    
    (*
    pub fn signextend<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::LOW);
        popn_top!([ext], x, interpreter);
        // For 31 we also don't need to do anything.
        if ext < U256::from(31) {
            let ext = ext.as_limbs()[0];
            let bit_index = (8 * ext + 7) as usize;
            let bit = x.bit(bit_index);
            let mask = (U256::from(1) << bit_index) - U256::from(1);
            *x = if bit { *x | !mask } else { *x & mask };
        }
    }
    *)
    Definition signextend (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::LOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let ext := M.copy (| γ2_0 |) in
                        let x := M.copy (| γ1_1 |) in
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialOrd",
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              []
                                          ],
                                          "lt",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, ext |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "ruint::Uint")
                                                  [
                                                    Value.Integer IntegerKind.Usize 256;
                                                    Value.Integer IntegerKind.Usize 4
                                                  ]
                                                  [],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    [],
                                                  "from",
                                                  [],
                                                  [ Ty.path "i32" ]
                                                |),
                                                [ Value.Integer IntegerKind.I32 31 ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ ext : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                  M.copy (|
                                    M.SubPointer.get_array_field (|
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 4 ]
                                                [ Ty.path "u64" ]
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            "as_limbs",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, ext |) ]
                                        |)
                                      |),
                                      Value.Integer IntegerKind.Usize 0
                                    |)
                                  |) in
                                let~ bit_index : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                  M.alloc (|
                                    M.cast
                                      (Ty.path "usize")
                                      (M.call_closure (|
                                        Ty.path "u64",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "u64",
                                            BinOp.Wrap.mul,
                                            [ Value.Integer IntegerKind.U64 8; M.read (| ext |) ]
                                          |);
                                          Value.Integer IntegerKind.U64 7
                                        ]
                                      |))
                                  |) in
                                let~ bit : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [],
                                        "bit",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| x |) |)
                                        |);
                                        M.read (| bit_index |)
                                      ]
                                    |)
                                  |) in
                                let~ mask :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [],
                                      M.get_trait_method (|
                                        "core::ops::arith::Sub",
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            []
                                        ],
                                        "sub",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          M.get_trait_method (|
                                            "core::ops::bit::Shl",
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            [],
                                            [ Ty.path "usize" ],
                                            "shl",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                [],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "ruint::Uint")
                                                  [
                                                    Value.Integer IntegerKind.Usize 256;
                                                    Value.Integer IntegerKind.Usize 4
                                                  ]
                                                  [],
                                                "from",
                                                [],
                                                [ Ty.path "i32" ]
                                              |),
                                              [ Value.Integer IntegerKind.I32 1 ]
                                            |);
                                            M.read (| bit_index |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            "from",
                                            [],
                                            [ Ty.path "i32" ]
                                          |),
                                          [ Value.Integer IntegerKind.I32 1 ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.write (|
                                      M.deref (| M.read (| x |) |),
                                      M.read (|
                                        M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                []
                                            ],
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.use bit in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [
                                                        Value.Integer IntegerKind.Usize 256;
                                                        Value.Integer IntegerKind.Usize 4
                                                      ]
                                                      [],
                                                    M.get_trait_method (|
                                                      "core::ops::bit::BitOr",
                                                      Ty.apply
                                                        (Ty.path "ruint::Uint")
                                                        [
                                                          Value.Integer IntegerKind.Usize 256;
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                        [],
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "ruint::Uint")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          []
                                                      ],
                                                      "bitor",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| M.deref (| M.read (| x |) |) |);
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "ruint::Uint")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          [],
                                                        M.get_trait_method (|
                                                          "core::ops::bit::Not",
                                                          Ty.apply
                                                            (Ty.path "ruint::Uint")
                                                            [
                                                              Value.Integer IntegerKind.Usize 256;
                                                              Value.Integer IntegerKind.Usize 4
                                                            ]
                                                            [],
                                                          [],
                                                          [],
                                                          "not",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| mask |) ]
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [
                                                        Value.Integer IntegerKind.Usize 256;
                                                        Value.Integer IntegerKind.Usize 4
                                                      ]
                                                      [],
                                                    M.get_trait_method (|
                                                      "core::ops::bit::BitAnd",
                                                      Ty.apply
                                                        (Ty.path "ruint::Uint")
                                                        [
                                                          Value.Integer IntegerKind.Usize 256;
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                        [],
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "ruint::Uint")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          []
                                                      ],
                                                      "bitand",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| M.deref (| M.read (| x |) |) |);
                                                      M.read (| mask |)
                                                    ]
                                                  |)
                                                |)))
                                          ]
                                        |)
                                      |)
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_signextend :
      M.IsFunction.C "revm_interpreter::instructions::arithmetic::signextend" signextend.
    Admitted.
    Global Typeclasses Opaque signextend.
  End arithmetic.
End instructions.
