(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module instructions.
  Module bitwise.
    (*
    pub fn lt<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        popn_top!([op1], op2, interpreter);
        *op2 = U256::from(op1 < *op2);
    }
    *)
    Definition lt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  "from",
                                  [],
                                  [ Ty.path "bool" ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      ],
                                      "lt",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, op1 |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| op2 |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_lt :
      M.IsFunction.C "revm_interpreter::instructions::bitwise::lt" lt.
    Admitted.
    Global Typeclasses Opaque lt.
    
    (*
    pub fn gt<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        popn_top!([op1], op2, interpreter);
    
        *op2 = U256::from(op1 > *op2);
    }
    *)
    Definition gt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  "from",
                                  [],
                                  [ Ty.path "bool" ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      ],
                                      "gt",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, op1 |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| op2 |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_gt :
      M.IsFunction.C "revm_interpreter::instructions::bitwise::gt" gt.
    Admitted.
    Global Typeclasses Opaque gt.
    
    (*
    pub fn slt<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        popn_top!([op1], op2, interpreter);
    
        *op2 = U256::from(i256_cmp(&op1, op2) == Ordering::Less);
    }
    *)
    Definition slt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  "from",
                                  [],
                                  [ Ty.path "bool" ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.path "core::cmp::Ordering",
                                      [],
                                      [ Ty.path "core::cmp::Ordering" ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "core::cmp::Ordering",
                                            M.get_function (|
                                              "revm_interpreter::instructions::i256::i256_cmp",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, op1 |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| op2 |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Value.StructTuple "core::cmp::Ordering::Less" [] [] []
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_slt :
      M.IsFunction.C "revm_interpreter::instructions::bitwise::slt" slt.
    Admitted.
    Global Typeclasses Opaque slt.
    
    (*
    pub fn sgt<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        popn_top!([op1], op2, interpreter);
    
        *op2 = U256::from(i256_cmp(&op1, op2) == Ordering::Greater);
    }
    *)
    Definition sgt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  "from",
                                  [],
                                  [ Ty.path "bool" ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.path "core::cmp::Ordering",
                                      [],
                                      [ Ty.path "core::cmp::Ordering" ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "core::cmp::Ordering",
                                            M.get_function (|
                                              "revm_interpreter::instructions::i256::i256_cmp",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, op1 |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| op2 |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Value.StructTuple "core::cmp::Ordering::Greater" [] [] []
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_sgt :
      M.IsFunction.C "revm_interpreter::instructions::bitwise::sgt" sgt.
    Admitted.
    Global Typeclasses Opaque sgt.
    
    (*
    pub fn eq<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        popn_top!([op1], op2, interpreter);
    
        *op2 = U256::from(op1 == *op2);
    }
    *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  "from",
                                  [],
                                  [ Ty.path "bool" ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, op1 |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| op2 |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_eq :
      M.IsFunction.C "revm_interpreter::instructions::bitwise::eq" eq.
    Admitted.
    Global Typeclasses Opaque eq.
    
    (*
    pub fn iszero<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        popn_top!([], op1, interpreter);
        *op1 = U256::from(op1.is_zero());
    }
    *)
    Definition iszero (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 0 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 0 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let op1 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op1 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  "from",
                                  [],
                                  [ Ty.path "bool" ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [],
                                      "is_zero",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| op1 |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_iszero :
      M.IsFunction.C "revm_interpreter::instructions::bitwise::iszero" iszero.
    Admitted.
    Global Typeclasses Opaque iszero.
    
    (*
    pub fn bitand<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        popn_top!([op1], op2, interpreter);
        *op2 = op1 & *op2;
    }
    *)
    Definition bitand (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_trait_method (|
                                  "core::ops::bit::BitAnd",
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ],
                                  "bitand",
                                  [],
                                  []
                                |),
                                [ M.read (| op1 |); M.read (| M.deref (| M.read (| op2 |) |) |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_bitand :
      M.IsFunction.C "revm_interpreter::instructions::bitwise::bitand" bitand.
    Admitted.
    Global Typeclasses Opaque bitand.
    
    (*
    pub fn bitor<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        popn_top!([op1], op2, interpreter);
    
        *op2 = op1 | *op2;
    }
    *)
    Definition bitor (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_trait_method (|
                                  "core::ops::bit::BitOr",
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ],
                                  "bitor",
                                  [],
                                  []
                                |),
                                [ M.read (| op1 |); M.read (| M.deref (| M.read (| op2 |) |) |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_bitor :
      M.IsFunction.C "revm_interpreter::instructions::bitwise::bitor" bitor.
    Admitted.
    Global Typeclasses Opaque bitor.
    
    (*
    pub fn bitxor<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        popn_top!([op1], op2, interpreter);
    
        *op2 = op1 ^ *op2;
    }
    *)
    Definition bitxor (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_trait_method (|
                                  "core::ops::bit::BitXor",
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ],
                                  "bitxor",
                                  [],
                                  []
                                |),
                                [ M.read (| op1 |); M.read (| M.deref (| M.read (| op2 |) |) |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_bitxor :
      M.IsFunction.C "revm_interpreter::instructions::bitwise::bitxor" bitxor.
    Admitted.
    Global Typeclasses Opaque bitxor.
    
    (*
    pub fn not<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        popn_top!([], op1, interpreter);
    
        *op1 = !*op1;
    }
    *)
    Definition not (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 0 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 0 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let op1 := M.copy (| γ1_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op1 |) |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_trait_method (|
                                  "core::ops::bit::Not",
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  [],
                                  [],
                                  "not",
                                  [],
                                  []
                                |),
                                [ M.read (| M.deref (| M.read (| op1 |) |) |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_not :
      M.IsFunction.C "revm_interpreter::instructions::bitwise::not" not.
    Admitted.
    Global Typeclasses Opaque not.
    
    (*
    pub fn byte<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        popn_top!([op1], op2, interpreter);
    
        let o1 = as_usize_saturated!(op1);
        *op2 = if o1 < 32 {
            // `31 - o1` because `byte` returns LE, while we want BE
            U256::from(op2.byte(31 - o1))
        } else {
            U256::ZERO
        };
    }
    *)
    Definition byte (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ o1 : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError" ],
                                "unwrap_or",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError"
                                    ],
                                  M.get_trait_method (|
                                    "core::convert::TryFrom",
                                    Ty.path "usize",
                                    [],
                                    [ Ty.path "u64" ],
                                    "try_from",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "u64" ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  [ Ty.path "u64" ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                [],
                                              "as_limbs",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, op1 |) ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x := M.copy (| γ |) in
                                              M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.path "u64" ],
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.Wrap.bit_and,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.Wrap.bit_and,
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.deref (|
                                                                              M.read (| x |)
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          |)
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.U64
                                                                          0
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.deref (|
                                                                              M.read (| x |)
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              2
                                                                          |)
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.U64
                                                                          0
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.read (| x |)
                                                                        |),
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          3
                                                                      |)
                                                                    |);
                                                                    Value.Integer IntegerKind.U64 0
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| x |) |),
                                                        Value.Integer IntegerKind.Usize 0
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (get_associated_constant (|
                                                        Ty.path "u64",
                                                        "MAX",
                                                        Ty.path "u64"
                                                      |)))
                                                ]
                                              |)))
                                        ]
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (|
                                  get_associated_constant (|
                                    Ty.path "usize",
                                    "MAX",
                                    Ty.path "usize"
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.read (|
                                M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.lt,
                                                [
                                                  M.read (| o1 |);
                                                  Value.Integer IntegerKind.Usize 32
                                                ]
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                [],
                                              "from",
                                              [],
                                              [ Ty.path "u8" ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "u8",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    [],
                                                  "byte",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| op2 |) |)
                                                  |);
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.sub,
                                                    [
                                                      Value.Integer IntegerKind.Usize 31;
                                                      M.read (| o1 |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (get_associated_constant (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          "ZERO",
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            []
                                        |)))
                                  ]
                                |)
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_byte :
      M.IsFunction.C "revm_interpreter::instructions::bitwise::byte" byte.
    Admitted.
    Global Typeclasses Opaque byte.
    
    (*
    pub fn shl<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        check!(interpreter, CONSTANTINOPLE);
        gas!(interpreter, gas::VERYLOW);
        popn_top!([op1], op2, interpreter);
    
        let shift = as_usize_saturated!(op1);
        *op2 = if shift < 256 {
            *op2 << shift
        } else {
            U256::ZERO
        }
    }
    *)
    Definition shl (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path "revm_specification::hardfork::SpecId",
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                          Ty.associated_in_trait
                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                            []
                                            []
                                            WIRE
                                            "RuntimeFlag",
                                          [],
                                          [],
                                          "spec_id",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| interpreter |) |),
                                              "revm_interpreter::interpreter::Interpreter",
                                              "runtime_flag"
                                            |)
                                          |)
                                        ]
                                      |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::CONSTANTINOPLE"
                                        []
                                        []
                                        []
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ shift : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError" ],
                                "unwrap_or",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError"
                                    ],
                                  M.get_trait_method (|
                                    "core::convert::TryFrom",
                                    Ty.path "usize",
                                    [],
                                    [ Ty.path "u64" ],
                                    "try_from",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "u64" ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  [ Ty.path "u64" ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                [],
                                              "as_limbs",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, op1 |) ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x := M.copy (| γ |) in
                                              M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.path "u64" ],
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.Wrap.bit_and,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.Wrap.bit_and,
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.deref (|
                                                                              M.read (| x |)
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          |)
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.U64
                                                                          0
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.deref (|
                                                                              M.read (| x |)
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              2
                                                                          |)
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.U64
                                                                          0
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.read (| x |)
                                                                        |),
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          3
                                                                      |)
                                                                    |);
                                                                    Value.Integer IntegerKind.U64 0
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| x |) |),
                                                        Value.Integer IntegerKind.Usize 0
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (get_associated_constant (|
                                                        Ty.path "u64",
                                                        "MAX",
                                                        Ty.path "u64"
                                                      |)))
                                                ]
                                              |)))
                                        ]
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (|
                                  get_associated_constant (|
                                    Ty.path "usize",
                                    "MAX",
                                    Ty.path "usize"
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        M.alloc (|
                          M.write (|
                            M.deref (| M.read (| op2 |) |),
                            M.read (|
                              M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ],
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.lt,
                                              [
                                                M.read (| shift |);
                                                Value.Integer IntegerKind.Usize 256
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          M.get_trait_method (|
                                            "core::ops::bit::Shl",
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            [],
                                            [ Ty.path "usize" ],
                                            "shl",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| M.deref (| M.read (| op2 |) |) |);
                                            M.read (| shift |)
                                          ]
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (get_associated_constant (|
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [],
                                        "ZERO",
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      |)))
                                ]
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_shl :
      M.IsFunction.C "revm_interpreter::instructions::bitwise::shl" shl.
    Admitted.
    Global Typeclasses Opaque shl.
    
    (*
    pub fn shr<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        check!(interpreter, CONSTANTINOPLE);
        gas!(interpreter, gas::VERYLOW);
        popn_top!([op1], op2, interpreter);
    
        let shift = as_usize_saturated!(op1);
        *op2 = if shift < 256 {
            *op2 >> shift
        } else {
            U256::ZERO
        }
    }
    *)
    Definition shr (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path "revm_specification::hardfork::SpecId",
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                          Ty.associated_in_trait
                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                            []
                                            []
                                            WIRE
                                            "RuntimeFlag",
                                          [],
                                          [],
                                          "spec_id",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| interpreter |) |),
                                              "revm_interpreter::interpreter::Interpreter",
                                              "runtime_flag"
                                            |)
                                          |)
                                        ]
                                      |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::CONSTANTINOPLE"
                                        []
                                        []
                                        []
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ shift : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError" ],
                                "unwrap_or",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError"
                                    ],
                                  M.get_trait_method (|
                                    "core::convert::TryFrom",
                                    Ty.path "usize",
                                    [],
                                    [ Ty.path "u64" ],
                                    "try_from",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "u64" ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  [ Ty.path "u64" ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                [],
                                              "as_limbs",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, op1 |) ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x := M.copy (| γ |) in
                                              M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.path "u64" ],
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.Wrap.bit_and,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.Wrap.bit_and,
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.deref (|
                                                                              M.read (| x |)
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          |)
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.U64
                                                                          0
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.deref (|
                                                                              M.read (| x |)
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              2
                                                                          |)
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.U64
                                                                          0
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.read (| x |)
                                                                        |),
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          3
                                                                      |)
                                                                    |);
                                                                    Value.Integer IntegerKind.U64 0
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| x |) |),
                                                        Value.Integer IntegerKind.Usize 0
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (get_associated_constant (|
                                                        Ty.path "u64",
                                                        "MAX",
                                                        Ty.path "u64"
                                                      |)))
                                                ]
                                              |)))
                                        ]
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (|
                                  get_associated_constant (|
                                    Ty.path "usize",
                                    "MAX",
                                    Ty.path "usize"
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        M.alloc (|
                          M.write (|
                            M.deref (| M.read (| op2 |) |),
                            M.read (|
                              M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ],
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.lt,
                                              [
                                                M.read (| shift |);
                                                Value.Integer IntegerKind.Usize 256
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          M.get_trait_method (|
                                            "core::ops::bit::Shr",
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            [],
                                            [ Ty.path "usize" ],
                                            "shr",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| M.deref (| M.read (| op2 |) |) |);
                                            M.read (| shift |)
                                          ]
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (get_associated_constant (|
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [],
                                        "ZERO",
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      |)))
                                ]
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_shr :
      M.IsFunction.C "revm_interpreter::instructions::bitwise::shr" shr.
    Admitted.
    Global Typeclasses Opaque shr.
    
    (*
    pub fn sar<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        check!(interpreter, CONSTANTINOPLE);
        gas!(interpreter, gas::VERYLOW);
        popn_top!([op1], op2, interpreter);
    
        let shift = as_usize_saturated!(op1);
        *op2 = if shift < 256 {
            op2.arithmetic_shr(shift)
        } else if op2.bit(255) {
            U256::MAX
        } else {
            U256::ZERO
        };
    }
    *)
    Definition sar (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (Ty.tuple []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path "revm_specification::hardfork::SpecId",
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                          Ty.associated_in_trait
                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                            []
                                            []
                                            WIRE
                                            "RuntimeFlag",
                                          [],
                                          [],
                                          "spec_id",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| interpreter |) |),
                                              "revm_interpreter::interpreter::Interpreter",
                                              "runtime_flag"
                                            |)
                                          |)
                                        ]
                                      |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::CONSTANTINOPLE"
                                        []
                                        []
                                        []
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::VERYLOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                          []
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ2_0 := M.SubPointer.get_slice_index (| γ1_0, 0 |) in
                        let op1 := M.copy (| γ2_0 |) in
                        let op2 := M.copy (| γ1_1 |) in
                        let~ shift : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError" ],
                                "unwrap_or",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError"
                                    ],
                                  M.get_trait_method (|
                                    "core::convert::TryFrom",
                                    Ty.path "usize",
                                    [],
                                    [ Ty.path "u64" ],
                                    "try_from",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "u64" ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  [ Ty.path "u64" ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                [],
                                              "as_limbs",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, op1 |) ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x := M.copy (| γ |) in
                                              M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.path "u64" ],
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.Wrap.bit_and,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.Wrap.bit_and,
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.deref (|
                                                                              M.read (| x |)
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          |)
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.U64
                                                                          0
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.deref (|
                                                                              M.read (| x |)
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              2
                                                                          |)
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.U64
                                                                          0
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.read (| x |)
                                                                        |),
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          3
                                                                      |)
                                                                    |);
                                                                    Value.Integer IntegerKind.U64 0
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| x |) |),
                                                        Value.Integer IntegerKind.Usize 0
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (get_associated_constant (|
                                                        Ty.path "u64",
                                                        "MAX",
                                                        Ty.path "u64"
                                                      |)))
                                                ]
                                              |)))
                                        ]
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (|
                                  get_associated_constant (|
                                    Ty.path "usize",
                                    "MAX",
                                    Ty.path "usize"
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              M.deref (| M.read (| op2 |) |),
                              M.read (|
                                M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.lt,
                                                [
                                                  M.read (| shift |);
                                                  Value.Integer IntegerKind.Usize 256
                                                ]
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                [],
                                              "arithmetic_shr",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (| M.deref (| M.read (| op2 |) |) |);
                                              M.read (| shift |)
                                            ]
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                []
                                            ],
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "ruint::Uint")
                                                            [
                                                              Value.Integer IntegerKind.Usize 256;
                                                              Value.Integer IntegerKind.Usize 4
                                                            ]
                                                            [],
                                                          "bit",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| op2 |) |)
                                                          |);
                                                          Value.Integer IntegerKind.Usize 255
                                                        ]
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                get_associated_constant (|
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    [],
                                                  "MAX",
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (get_associated_constant (|
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    [],
                                                  "ZERO",
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    []
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_sar :
      M.IsFunction.C "revm_interpreter::instructions::bitwise::sar" sar.
    Admitted.
    Global Typeclasses Opaque sar.
  End bitwise.
End instructions.
